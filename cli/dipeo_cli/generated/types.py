# generated by datamodel-codegen:
#   filename:  schema.graphql
#   timestamp: 2025-06-17T12:05:03+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Literal, Optional, TypeAlias

from pydantic import BaseModel, Field

ApiKeyID: TypeAlias = str
"""
Unique identifier for an API key
"""


ArrowID: TypeAlias = str
"""
Unique identifier for an arrow
"""


Boolean: TypeAlias = bool
"""
The `Boolean` scalar type represents `true` or `false`.
"""


DateTime: TypeAlias = str
"""
Date with time (isoformat)
"""


DiagramID: TypeAlias = str
"""
Unique identifier for a diagram
"""


ExecutionID: TypeAlias = str
"""
Unique identifier for an execution
"""


Float: TypeAlias = float
"""
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
"""


HandleID: TypeAlias = str
"""
Unique identifier for a handle (format: nodeId:handleName)
"""


Int: TypeAlias = int
"""
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
"""


JSONScalar: TypeAlias = str
"""
Arbitrary JSON-serializable data
"""


NodeID: TypeAlias = str
"""
Unique identifier for a node
"""


PersonID: TypeAlias = str
"""
Unique identifier for a person (LLM agent)
"""


String: TypeAlias = str
"""
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
"""


Upload: TypeAlias = str


class DataType(Enum):
    ANY = 'ANY'
    ARRAY = 'ARRAY'
    BOOLEAN = 'BOOLEAN'
    NUMBER = 'NUMBER'
    OBJECT = 'OBJECT'
    STRING = 'STRING'


class DiagramFormat(Enum):
    LIGHT = 'LIGHT'
    NATIVE = 'NATIVE'
    NATIVE_YAML = 'NATIVE_YAML'
    READABLE = 'READABLE'


class EventType(Enum):
    EXECUTION_ABORTED = 'EXECUTION_ABORTED'
    EXECUTION_COMPLETED = 'EXECUTION_COMPLETED'
    EXECUTION_FAILED = 'EXECUTION_FAILED'
    EXECUTION_STARTED = 'EXECUTION_STARTED'
    INTERACTIVE_PROMPT = 'INTERACTIVE_PROMPT'
    INTERACTIVE_RESPONSE = 'INTERACTIVE_RESPONSE'
    NODE_COMPLETED = 'NODE_COMPLETED'
    NODE_FAILED = 'NODE_FAILED'
    NODE_PAUSED = 'NODE_PAUSED'
    NODE_RUNNING = 'NODE_RUNNING'
    NODE_SKIPPED = 'NODE_SKIPPED'
    NODE_STARTED = 'NODE_STARTED'


class ExecutionStatus(Enum):
    ABORTED = 'ABORTED'
    COMPLETED = 'COMPLETED'
    FAILED = 'FAILED'
    PAUSED = 'PAUSED'
    RUNNING = 'RUNNING'
    STARTED = 'STARTED'


class ForgettingMode(Enum):
    NONE = 'NONE'
    NO_FORGET = 'NO_FORGET'
    ON_EVERY_TURN = 'ON_EVERY_TURN'
    UPON_REQUEST = 'UPON_REQUEST'


class HandleDirection(Enum):
    INPUT = 'INPUT'
    OUTPUT = 'OUTPUT'


class LLMService(Enum):
    ANTHROPIC = 'ANTHROPIC'
    BEDROCK = 'BEDROCK'
    DEEPSEEK = 'DEEPSEEK'
    GOOGLE = 'GOOGLE'
    GROK = 'GROK'
    OPENAI = 'OPENAI'
    VERTEX = 'VERTEX'


class NodeType(Enum):
    CONDITION = 'CONDITION'
    DB = 'DB'
    ENDPOINT = 'ENDPOINT'
    JOB = 'JOB'
    NOTION = 'NOTION'
    PERSON_BATCH_JOB = 'PERSON_BATCH_JOB'
    PERSON_JOB = 'PERSON_JOB'
    START = 'START'
    USER_RESPONSE = 'USER_RESPONSE'


class ApiKey(BaseModel):
    id: String
    label: String
    maskedKey: String
    service: LLMService
    typename__: Optional[Literal['ApiKey']] = Field('ApiKey', alias='__typename')


class ApiKeyResult(BaseModel):
    apiKey: Optional[ApiKey] = None
    error: Optional[String] = None
    message: Optional[String] = None
    success: Boolean
    typename__: Optional[Literal['ApiKeyResult']] = Field(
        'ApiKeyResult', alias='__typename'
    )


class Arrow(BaseModel):
    data: Optional[JSONScalar] = None
    id: String
    source: String
    target: String
    typename__: Optional[Literal['Arrow']] = Field('Arrow', alias='__typename')


class DeleteResult(BaseModel):
    deletedId: Optional[String] = None
    error: Optional[String] = None
    message: Optional[String] = None
    success: Boolean
    typename__: Optional[Literal['DeleteResult']] = Field(
        'DeleteResult', alias='__typename'
    )


class Diagram(BaseModel):
    apiKeys: List[ApiKey]
    arrowCount: Int
    arrows: List[Arrow]
    estimatedCost: Optional[Float] = None
    handles: List[Handle]
    metadata: Optional[DiagramMetadata] = None
    nodeCount: Int
    nodes: List[Node]
    personCount: Int
    persons: List[Person]
    typename__: Optional[Literal['Diagram']] = Field('Diagram', alias='__typename')


class DiagramExportResult(BaseModel):
    content: Optional[String] = None
    error: Optional[String] = None
    filename: Optional[String] = None
    format: Optional[String] = None
    message: String
    success: Boolean
    typename__: Optional[Literal['DiagramExportResult']] = Field(
        'DiagramExportResult', alias='__typename'
    )


class DiagramFormatInfo(BaseModel):
    description: String
    extension: String
    id: String
    name: String
    supportsExport: Boolean
    supportsImport: Boolean
    typename__: Optional[Literal['DiagramFormatInfo']] = Field(
        'DiagramFormatInfo', alias='__typename'
    )


class DiagramMetadata(BaseModel):
    author: Optional[String] = None
    created: DateTime
    description: Optional[String] = None
    id: Optional[String] = None
    modified: DateTime
    name: Optional[String] = None
    tags: Optional[List[String]] = None
    version: String
    typename__: Optional[Literal['DiagramMetadata']] = Field(
        'DiagramMetadata', alias='__typename'
    )


class DiagramResult(BaseModel):
    diagram: Optional[Diagram] = None
    error: Optional[String] = None
    message: Optional[String] = None
    success: Boolean
    typename__: Optional[Literal['DiagramResult']] = Field(
        'DiagramResult', alias='__typename'
    )


class DiagramTokenUsageType(BaseModel):
    cached: Optional[Int] = None
    input: Int
    output: Int
    typename__: Optional[Literal['DiagramTokenUsageType']] = Field(
        'DiagramTokenUsageType', alias='__typename'
    )


class DiagramUploadResult(BaseModel):
    diagramId: Optional[DiagramID] = None
    diagramName: Optional[String] = None
    formatDetected: Optional[String] = None
    message: String
    nodeCount: Optional[Int] = None
    success: Boolean
    typename__: Optional[Literal['DiagramUploadResult']] = Field(
        'DiagramUploadResult', alias='__typename'
    )


class ExecutionEvent(BaseModel):
    data: Optional[JSONScalar] = None
    eventType: String
    executionId: String
    formattedMessage: String
    nodeId: Optional[String] = None
    sequence: Int
    timestamp: DateTime
    typename__: Optional[Literal['ExecutionEvent']] = Field(
        'ExecutionEvent', alias='__typename'
    )


class ExecutionResult(BaseModel):
    error: Optional[String] = None
    execution: Optional[ExecutionState] = None
    executionId: Optional[ExecutionID] = None
    message: Optional[String] = None
    success: Boolean
    typename__: Optional[Literal['ExecutionResult']] = Field(
        'ExecutionResult', alias='__typename'
    )


class ExecutionState(BaseModel):
    completedNodes: List[String]
    diagramId: Optional[String] = None
    durationSeconds: Optional[Float] = None
    endedAt: Optional[DateTime] = None
    error: Optional[String] = None
    failedNodes: List[String]
    id: String
    isActive: Boolean
    nodeOutputs: Optional[JSONScalar] = None
    pausedNodes: List[String]
    runningNodes: List[String]
    skippedNodes: List[String]
    startedAt: DateTime
    status: ExecutionStatus
    tokenUsage: Optional[DiagramTokenUsageType] = None
    variables: Optional[JSONScalar] = None
    typename__: Optional[Literal['ExecutionState']] = Field(
        'ExecutionState', alias='__typename'
    )


class FileUploadResult(BaseModel):
    contentType: Optional[String] = None
    error: Optional[String] = None
    message: Optional[String] = None
    path: Optional[String] = None
    sizeBytes: Optional[Int] = None
    success: Boolean
    typename__: Optional[Literal['FileUploadResult']] = Field(
        'FileUploadResult', alias='__typename'
    )


class Handle(BaseModel):
    dataType: DataType
    direction: HandleDirection
    id: String
    label: String
    nodeId: String
    position: Optional[String] = None
    typename__: Optional[Literal['Handle']] = Field('Handle', alias='__typename')


class HandleResult(BaseModel):
    error: Optional[String] = None
    handle: Optional[Handle] = None
    message: Optional[String] = None
    success: Boolean
    typename__: Optional[Literal['HandleResult']] = Field(
        'HandleResult', alias='__typename'
    )


class InteractivePrompt(BaseModel):
    executionId: ExecutionID
    nodeId: NodeID
    prompt: String
    timeoutSeconds: Optional[Int] = None
    timestamp: DateTime
    typename__: Optional[Literal['InteractivePrompt']] = Field(
        'InteractivePrompt', alias='__typename'
    )


class Node(BaseModel):
    data: Optional[JSONScalar] = None
    displayName: String
    handles: List[Handle]
    id: String
    position: Vec2
    type: NodeType
    typename__: Optional[Literal['Node']] = Field('Node', alias='__typename')


class NodeExecution(BaseModel):
    error: Optional[String] = None
    executionId: ExecutionID
    nodeId: NodeID
    nodeType: NodeType
    output: Optional[JSONScalar] = None
    progress: Optional[String] = None
    status: String
    timestamp: DateTime
    tokensUsed: Optional[Int] = None
    typename__: Optional[Literal['NodeExecution']] = Field(
        'NodeExecution', alias='__typename'
    )


class NodeResult(BaseModel):
    error: Optional[String] = None
    message: Optional[String] = None
    node: Optional[Node] = None
    success: Boolean
    typename__: Optional[Literal['NodeResult']] = Field(
        'NodeResult', alias='__typename'
    )


class Person(BaseModel):
    apiKeyId: Optional[String] = None
    forgettingMode: ForgettingMode
    id: String
    label: String
    maskedApiKey: Optional[String] = None
    model: String
    service: LLMService
    systemPrompt: Optional[String] = None
    type: String
    typename__: Optional[Literal['Person']] = Field('Person', alias='__typename')


class PersonResult(BaseModel):
    error: Optional[String] = None
    message: Optional[String] = None
    person: Optional[Person] = None
    success: Boolean
    typename__: Optional[Literal['PersonResult']] = Field(
        'PersonResult', alias='__typename'
    )


class Subscription(BaseModel):
    diagramChanges: Diagram
    executionEvents: ExecutionEvent
    executionUpdates: ExecutionState
    interactivePrompts: InteractivePrompt
    nodeUpdates: NodeExecution
    typename__: Optional[Literal['Subscription']] = Field(
        'Subscription', alias='__typename'
    )


class TestApiKeyResult(BaseModel):
    availableModels: Optional[List[String]] = None
    error: Optional[String] = None
    success: Boolean
    valid: Boolean
    typename__: Optional[Literal['TestApiKeyResult']] = Field(
        'TestApiKeyResult', alias='__typename'
    )


class Vec2(BaseModel):
    x: Float
    y: Float
    typename__: Optional[Literal['Vec2']] = Field('Vec2', alias='__typename')


class CreateApiKeyInput(BaseModel):
    key: String
    label: String
    service: LLMService
    typename__: Optional[Literal['CreateApiKeyInput']] = Field(
        'CreateApiKeyInput', alias='__typename'
    )


class CreateArrowInput(BaseModel):
    label: Optional[String] = None
    source: String
    target: String
    typename__: Optional[Literal['CreateArrowInput']] = Field(
        'CreateArrowInput', alias='__typename'
    )


class CreateDiagramInput(BaseModel):
    author: Optional[String] = None
    description: Optional[String] = None
    name: String
    tags: Optional[List[String]] = []
    typename__: Optional[Literal['CreateDiagramInput']] = Field(
        'CreateDiagramInput', alias='__typename'
    )


class CreateHandleInput(BaseModel):
    dataType: DataType
    direction: HandleDirection
    label: String
    maxConnections: Optional[Int] = None
    nodeId: String
    position: Optional[Vec2Input] = None
    typename__: Optional[Literal['CreateHandleInput']] = Field(
        'CreateHandleInput', alias='__typename'
    )


class CreateNodeInput(BaseModel):
    label: String
    position: Vec2Input
    properties: Optional[JSONScalar] = Field(
        None, description='Node-specific properties'
    )
    type: NodeType
    typename__: Optional[Literal['CreateNodeInput']] = Field(
        'CreateNodeInput', alias='__typename'
    )


class CreatePersonInput(BaseModel):
    apiKeyId: String
    forgettingMode: ForgettingMode
    label: String
    maxTokens: Optional[Int] = None
    model: String
    service: LLMService
    systemPrompt: Optional[String] = None
    temperature: Optional[Float] = None
    topP: Optional[Float] = None
    typename__: Optional[Literal['CreatePersonInput']] = Field(
        'CreatePersonInput', alias='__typename'
    )


class DiagramFilterInput(BaseModel):
    author: Optional[String] = None
    createdAfter: Optional[DateTime] = None
    createdBefore: Optional[DateTime] = None
    modifiedAfter: Optional[DateTime] = None
    nameContains: Optional[String] = None
    tags: Optional[List[String]] = None
    typename__: Optional[Literal['DiagramFilterInput']] = Field(
        'DiagramFilterInput', alias='__typename'
    )


class ExecuteDiagramInput(BaseModel):
    debugMode: Boolean
    diagramId: DiagramID
    maxIterations: Optional[Int] = Field(
        None, description='Maximum iterations for execution'
    )
    timeoutSeconds: Optional[Int] = Field(
        None, description='Execution timeout in seconds'
    )
    variables: Optional[JSONScalar] = None
    typename__: Optional[Literal['ExecuteDiagramInput']] = Field(
        'ExecuteDiagramInput', alias='__typename'
    )


class ExecutionControlInput(BaseModel):
    action: String
    executionId: String
    nodeId: Optional[String] = None
    typename__: Optional[Literal['ExecutionControlInput']] = Field(
        'ExecutionControlInput', alias='__typename'
    )


class ExecutionFilterInput(BaseModel):
    activeOnly: Boolean
    diagramId: Optional[String] = None
    startedAfter: Optional[DateTime] = None
    startedBefore: Optional[DateTime] = None
    status: Optional[ExecutionStatus] = None
    typename__: Optional[Literal['ExecutionFilterInput']] = Field(
        'ExecutionFilterInput', alias='__typename'
    )


class FileUploadInput(BaseModel):
    contentBase64: String
    contentType: Optional[String] = None
    filename: String
    typename__: Optional[Literal['FileUploadInput']] = Field(
        'FileUploadInput', alias='__typename'
    )


class ImportYamlInput(BaseModel):
    content: String
    filename: Optional[String] = None
    typename__: Optional[Literal['ImportYamlInput']] = Field(
        'ImportYamlInput', alias='__typename'
    )


class InteractiveResponseInput(BaseModel):
    executionId: String
    nodeId: String
    response: String
    typename__: Optional[Literal['InteractiveResponseInput']] = Field(
        'InteractiveResponseInput', alias='__typename'
    )


class UpdateNodeInput(BaseModel):
    id: String
    label: Optional[String] = None
    position: Optional[Vec2Input] = None
    properties: Optional[JSONScalar] = None
    typename__: Optional[Literal['UpdateNodeInput']] = Field(
        'UpdateNodeInput', alias='__typename'
    )


class UpdatePersonInput(BaseModel):
    apiKeyId: Optional[String] = None
    forgettingMode: Optional[ForgettingMode] = None
    id: String
    label: Optional[String] = None
    maxTokens: Optional[Int] = None
    model: Optional[String] = None
    systemPrompt: Optional[String] = None
    temperature: Optional[Float] = None
    topP: Optional[Float] = None
    typename__: Optional[Literal['UpdatePersonInput']] = Field(
        'UpdatePersonInput', alias='__typename'
    )


class Vec2Input(BaseModel):
    x: Float
    y: Float
    typename__: Optional[Literal['Vec2Input']] = Field('Vec2Input', alias='__typename')
