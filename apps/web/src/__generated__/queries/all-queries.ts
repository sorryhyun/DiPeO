/**
 * GENERATED FILE - DO NOT EDIT
 * Generated by GraphQL query generation
 * Generated at: 2025-09-30T21:50:36.745693
 *
 * Contains all GraphQL queries, mutations, and subscriptions
 */

import { gql } from '@apollo/client';// ============================================================================
// QUERIES
// ============================================================================

export const GETAPIKEYS_QUERY = gql`
  query GetApiKeys(
    $service: String
  ) {
    apiKeys(service: $service)
  }
`;

export const GETAPIKEY_QUERY = gql`
  query GetApiKey(
    $api_key_id: String!
  ) {
    apiKey(apiKeyId: $api_key_id) {
      id
      label
      service
    }
  }
`;

export const GETAVAILABLEMODELS_QUERY = gql`
  query GetAvailableModels(
    $service: String!,
    $api_key_id: String!
  ) {
    availableModels(service: $service, apiKeyId: $api_key_id)
  }
`;

export const LISTCONVERSATIONS_QUERY = gql`
  query ListConversations(
    $person_id: String,
    $execution_id: String,
    $search: String,
    $show_forgotten: Boolean,
    $limit: Int,
    $offset: Int,
    $since: String
  ) {
    conversations(personId: $person_id, executionId: $execution_id, search: $search, showForgotten: $show_forgotten, limit: $limit, offset: $offset, since: $since)
  }
`;

export const GETDIAGRAM_QUERY = gql`
  query GetDiagram(
    $diagram_id: String!
  ) {
    diagram(diagramId: $diagram_id) {
      nodes {
        id
        type
        position {
          x
          y
        }
        data
      }
      handles {
        id
        nodeId
        label
        direction
        dataType
        position
      }
      arrows {
        id
        source
        target
        contentType
        label
        data
      }
      persons {
        id
        label
        llmConfig {
          service
          model
          apiKeyId
          systemPrompt
        }
        type
      }
      metadata {
        id
        name
        description
        version
        created
        modified
        author
        tags
      }
    }
  }
`;

export const LISTDIAGRAMS_QUERY = gql`
  query ListDiagrams(
    $filter: DiagramFilterInput,
    $limit: Int,
    $offset: Int
  ) {
    diagrams(filter: $filter, limit: $limit, offset: $offset) {
      metadata {
        id
        name
        description
        author
        created
        modified
        tags
      }
    }
  }
`;

export const GETEXECUTION_QUERY = gql`
  query GetExecution(
    $execution_id: String!
  ) {
    getExecution(executionId: $execution_id) {
      id
      status
      diagramId
      startedAt
      endedAt
      error
      nodeStates
      nodeOutputs
      variables
      metrics
      llmUsage {
        input
        output
        cached
        total
      }
    }
  }
`;

export const LISTEXECUTIONS_QUERY = gql`
  query ListExecutions(
    $filter: ExecutionFilterInput,
    $limit: Int,
    $offset: Int
  ) {
    listExecutions(filter: $filter, limit: $limit, offset: $offset) {
      id
      status
      diagramId
      startedAt
      endedAt
      error
    }
  }
`;

export const GETSUPPORTEDFORMATS_QUERY = gql`
  query GetSupportedFormats {
    supportedFormats
  }
`;

export const GETPERSON_QUERY = gql`
  query GetPerson(
    $person_id: String!
  ) {
    person(personId: $person_id) {
      id
      label
      type
      llmConfig {
        service
        model
        apiKeyId
        systemPrompt
      }
    }
  }
`;

export const LISTPERSONS_QUERY = gql`
  query ListPersons(
    $limit: Int
  ) {
    persons(limit: $limit) {
      id
      label
      type
      llmConfig {
        service
        model
        apiKeyId
      }
    }
  }
`;

export const LISTPROMPTFILES_QUERY = gql`
  query ListPromptFiles {
    promptFiles
  }
`;

export const GETPROMPTFILE_QUERY = gql`
  query GetPromptFile(
    $filename: String!
  ) {
    promptFile(filename: $filename)
  }
`;

export const GETPROVIDERS_QUERY = gql`
  query GetProviders {
    providers
  }
`;

export const GETPROVIDEROPERATIONS_QUERY = gql`
  query GetProviderOperations(
    $provider: String!
  ) {
    providerOperations(provider: $provider)
  }
`;

export const GETOPERATIONSCHEMA_QUERY = gql`
  query GetOperationSchema(
    $provider: String!,
    $operation: String!
  ) {
    operationSchema(provider: $provider, operation: $operation)
  }
`;

export const GETSYSTEMINFO_QUERY = gql`
  query GetSystemInfo {
    systemInfo
  }
`;

export const GETEXECUTIONCAPABILITIES_QUERY = gql`
  query GetExecutionCapabilities {
    executionCapabilities
  }
`;

export const HEALTHCHECK_QUERY = gql`
  query HealthCheck {
    healthCheck
  }
`;

export const GETEXECUTIONORDER_QUERY = gql`
  query GetExecutionOrder(
    $execution_id: String!
  ) {
    executionOrder(executionId: $execution_id)
  }
`;

export const GETEXECUTIONMETRICS_QUERY = gql`
  query GetExecutionMetrics(
    $execution_id: String!
  ) {
    executionMetrics(executionId: $execution_id)
  }
`;

export const GETEXECUTIONHISTORY_QUERY = gql`
  query GetExecutionHistory(
    $diagram_id: String,
    $limit: Int,
    $include_metrics: Boolean
  ) {
    executionHistory(diagramId: $diagram_id, limit: $limit, includeMetrics: $include_metrics)
  }
`;

export const GETACTIVECLISESSION_QUERY = gql`
  query GetActiveCliSession {
    activeCliSession
  }
`;

// ============================================================================
// MUTATIONS
// ============================================================================

export const CREATEAPIKEY_MUTATION = gql`
  mutation CreateApiKey(
    $input: CreateApiKeyInput!
  ) {
    createApiKey(input: $input) {
      success
      apiKey {
        id
        label
        service
      }
      message
      error
    }
  }
`;

export const TESTAPIKEY_MUTATION = gql`
  mutation TestApiKey(
    $api_key_id: String!
  ) {
    testApiKey(apiKeyId: $api_key_id) {
      success
      message
      error
    }
  }
`;

export const DELETEAPIKEY_MUTATION = gql`
  mutation DeleteApiKey(
    $api_key_id: String!
  ) {
    deleteApiKey(apiKeyId: $api_key_id) {
      success
      message
    }
  }
`;

export const REGISTERCLISESSION_MUTATION = gql`
  mutation RegisterCliSession(
    $input: RegisterCliSessionInput!
  ) {
    registerCliSession(input: $input) {
      success
      message
      error
    }
  }
`;

export const UNREGISTERCLISESSION_MUTATION = gql`
  mutation UnregisterCliSession(
    $input: UnregisterCliSessionInput!
  ) {
    unregisterCliSession(input: $input) {
      success
      message
      error
    }
  }
`;

export const CREATEDIAGRAM_MUTATION = gql`
  mutation CreateDiagram(
    $input: CreateDiagramInput!
  ) {
    createDiagram(input: $input) {
      success
      diagram {
        metadata {
          id
          name
        }
      }
      message
      error
    }
  }
`;

export const EXECUTEDIAGRAM_MUTATION = gql`
  mutation ExecuteDiagram(
    $input: ExecuteDiagramInput!
  ) {
    executeDiagram(input: $input) {
      success
      execution {
        id
      }
      message
      error
    }
  }
`;

export const DELETEDIAGRAM_MUTATION = gql`
  mutation DeleteDiagram(
    $diagram_id: String!
  ) {
    deleteDiagram(diagramId: $diagram_id) {
      success
      message
      error
    }
  }
`;

export const CONTROLEXECUTION_MUTATION = gql`
  mutation ControlExecution(
    $input: ExecutionControlInput!
  ) {
    controlExecution(input: $input) {
      success
      execution {
        id
        status
      }
      message
      error
    }
  }
`;

export const SENDINTERACTIVERESPONSE_MUTATION = gql`
  mutation SendInteractiveResponse(
    $input: InteractiveResponseInput!
  ) {
    sendInteractiveResponse(input: $input) {
      success
      message
      error
    }
  }
`;

export const UPDATENODESTATE_MUTATION = gql`
  mutation UpdateNodeState(
    $input: UpdateNodeStateInput!
  ) {
    updateNodeState(input: $input) {
      success
      execution {
        id
        status
      }
      message
      error
    }
  }
`;

export const UPLOADFILE_MUTATION = gql`
  mutation UploadFile(
    $file: Upload!,
    $path: String
  ) {
    uploadFile(file: $file, path: $path)
  }
`;

export const UPLOADDIAGRAM_MUTATION = gql`
  mutation UploadDiagram(
    $file: Upload!,
    $format: DiagramFormatGraphQL!
  ) {
    uploadDiagram(file: $file, format: $format)
  }
`;

export const VALIDATEDIAGRAM_MUTATION = gql`
  mutation ValidateDiagram(
    $content: String!,
    $format: DiagramFormatGraphQL!
  ) {
    validateDiagram(content: $content, format: $format)
  }
`;

export const CONVERTDIAGRAMFORMAT_MUTATION = gql`
  mutation ConvertDiagramFormat(
    $content: String!,
    $from_format: DiagramFormatGraphQL!,
    $to_format: DiagramFormatGraphQL!
  ) {
    convertDiagramFormat(content: $content, fromFormat: $from_format, toFormat: $to_format) {
      success
      data
      format
      message
      error
    }
  }
`;

export const CREATENODE_MUTATION = gql`
  mutation CreateNode(
    $diagram_id: String!,
    $input: CreateNodeInput!
  ) {
    createNode(diagramId: $diagram_id, input: $input) {
      success
      node {
        id
        type
        position {
          x
          y
        }
        data
      }
      message
      error
    }
  }
`;

export const UPDATENODE_MUTATION = gql`
  mutation UpdateNode(
    $diagram_id: String!,
    $node_id: String!,
    $input: UpdateNodeInput!
  ) {
    updateNode(diagramId: $diagram_id, nodeId: $node_id, input: $input) {
      success
      message
      error
    }
  }
`;

export const DELETENODE_MUTATION = gql`
  mutation DeleteNode(
    $diagram_id: String!,
    $node_id: String!
  ) {
    deleteNode(diagramId: $diagram_id, nodeId: $node_id) {
      success
      message
      error
    }
  }
`;

export const CREATEPERSON_MUTATION = gql`
  mutation CreatePerson(
    $input: CreatePersonInput!
  ) {
    createPerson(input: $input) {
      success
      person {
        id
        label
      }
      message
      error
    }
  }
`;

export const UPDATEPERSON_MUTATION = gql`
  mutation UpdatePerson(
    $person_id: String!,
    $input: UpdatePersonInput!
  ) {
    updatePerson(personId: $person_id, input: $input) {
      success
      person {
        id
        label
      }
      message
      error
    }
  }
`;

export const DELETEPERSON_MUTATION = gql`
  mutation DeletePerson(
    $person_id: String!
  ) {
    deletePerson(personId: $person_id) {
      success
      message
      error
    }
  }
`;

// ============================================================================
// SUBSCRIPTIONS
// ============================================================================

export const EXECUTIONUPDATES_SUBSCRIPTION = gql`
  subscription ExecutionUpdates(
    $execution_id: String!
  ) {
    executionUpdates(executionId: $execution_id) {
      executionId
      type
      data
      timestamp
    }
  }
`;

// Export all operations
export const queries = {
  GetApiKeys: GETAPIKEYS_QUERY,
  GetApiKey: GETAPIKEY_QUERY,
  GetAvailableModels: GETAVAILABLEMODELS_QUERY,
  ListConversations: LISTCONVERSATIONS_QUERY,
  GetDiagram: GETDIAGRAM_QUERY,
  ListDiagrams: LISTDIAGRAMS_QUERY,
  GetExecution: GETEXECUTION_QUERY,
  ListExecutions: LISTEXECUTIONS_QUERY,
  GetSupportedFormats: GETSUPPORTEDFORMATS_QUERY,
  GetPerson: GETPERSON_QUERY,
  ListPersons: LISTPERSONS_QUERY,
  ListPromptFiles: LISTPROMPTFILES_QUERY,
  GetPromptFile: GETPROMPTFILE_QUERY,
  GetProviders: GETPROVIDERS_QUERY,
  GetProviderOperations: GETPROVIDEROPERATIONS_QUERY,
  GetOperationSchema: GETOPERATIONSCHEMA_QUERY,
  GetSystemInfo: GETSYSTEMINFO_QUERY,
  GetExecutionCapabilities: GETEXECUTIONCAPABILITIES_QUERY,
  HealthCheck: HEALTHCHECK_QUERY,
  GetExecutionOrder: GETEXECUTIONORDER_QUERY,
  GetExecutionMetrics: GETEXECUTIONMETRICS_QUERY,
  GetExecutionHistory: GETEXECUTIONHISTORY_QUERY,
  GetActiveCliSession: GETACTIVECLISESSION_QUERY,
} as const;

export const mutations = {
  CreateApiKey: CREATEAPIKEY_MUTATION,
  TestApiKey: TESTAPIKEY_MUTATION,
  DeleteApiKey: DELETEAPIKEY_MUTATION,
  RegisterCliSession: REGISTERCLISESSION_MUTATION,
  UnregisterCliSession: UNREGISTERCLISESSION_MUTATION,
  CreateDiagram: CREATEDIAGRAM_MUTATION,
  ExecuteDiagram: EXECUTEDIAGRAM_MUTATION,
  DeleteDiagram: DELETEDIAGRAM_MUTATION,
  ControlExecution: CONTROLEXECUTION_MUTATION,
  SendInteractiveResponse: SENDINTERACTIVERESPONSE_MUTATION,
  UpdateNodeState: UPDATENODESTATE_MUTATION,
  UploadFile: UPLOADFILE_MUTATION,
  UploadDiagram: UPLOADDIAGRAM_MUTATION,
  ValidateDiagram: VALIDATEDIAGRAM_MUTATION,
  ConvertDiagramFormat: CONVERTDIAGRAMFORMAT_MUTATION,
  CreateNode: CREATENODE_MUTATION,
  UpdateNode: UPDATENODE_MUTATION,
  DeleteNode: DELETENODE_MUTATION,
  CreatePerson: CREATEPERSON_MUTATION,
  UpdatePerson: UPDATEPERSON_MUTATION,
  DeletePerson: DELETEPERSON_MUTATION,
} as const;

export const subscriptions = {
  ExecutionUpdates: EXECUTIONUPDATES_SUBSCRIPTION,
} as const;

// Statistics
// Queries: 23
// Mutations: 21
// Subscriptions: 1
