/**
 * GENERATED FILE - DO NOT EDIT
 * Generated by GraphQL query generation
 * Generated at: 2025-10-09T16:52:33.949892
 *
 * Contains all GraphQL queries, mutations, and subscriptions
 */

import { gql } from '@apollo/client';// ============================================================================
// QUERIES
// ============================================================================

export const GETAPIKEYS_QUERY = gql`
  query GetApiKeys(
    $service: String
  ) {
    getApiKeys(service: $service)
  }
`;

export const GETAPIKEY_QUERY = gql`
  query GetApiKey(
    $api_key_id: String!
  ) {
    getApiKey(api_key_id: $api_key_id) {
      id
      label
      service
    }
  }
`;

export const GETAVAILABLEMODELS_QUERY = gql`
  query GetAvailableModels(
    $service: String!,
    $api_key_id: String!
  ) {
    getAvailableModels(service: $service, api_key_id: $api_key_id)
  }
`;

export const LISTCONVERSATIONS_QUERY = gql`
  query ListConversations(
    $person_id: String,
    $execution_id: String,
    $search: String,
    $show_forgotten: Boolean,
    $limit: Float,
    $offset: Float,
    $since: String
  ) {
    listConversations(person_id: $person_id, execution_id: $execution_id, search: $search, show_forgotten: $show_forgotten, limit: $limit, offset: $offset, since: $since)
  }
`;

export const GETDIAGRAM_QUERY = gql`
  query GetDiagram(
    $diagram_id: String!
  ) {
    getDiagram(diagram_id: $diagram_id) {
      nodes {
        id
        type
        position {
          x
          y
        }
        data
      }
      handles {
        id
        node_id
        label
        direction
        data_type
        position
      }
      arrows {
        id
        source
        target
        content_type
        label
        data
      }
      persons {
        id
        label
        llm_config {
          service
          model
          api_key_id
          system_prompt
        }
        type
      }
      metadata {
        id
        name
        description
        version
        created
        modified
        author
        tags
      }
    }
  }
`;

export const LISTDIAGRAMS_QUERY = gql`
  query ListDiagrams(
    $filter: DiagramFilterInput,
    $limit: Float,
    $offset: Float
  ) {
    listDiagrams(filter: $filter, limit: $limit, offset: $offset) {
      metadata {
        id
        name
        description
        author
        created
        modified
        tags
      }
    }
  }
`;

export const GETEXECUTION_QUERY = gql`
  query GetExecution(
    $execution_id: String!
  ) {
    getExecution(execution_id: $execution_id) {
      id
      status
      diagram_id
      started_at
      ended_at
      error
      node_states
      node_outputs
      variables
      metrics
      llm_usage {
        input
        output
        cached
        total
      }
    }
  }
`;

export const LISTEXECUTIONS_QUERY = gql`
  query ListExecutions(
    $filter: ExecutionFilterInput,
    $limit: Float,
    $offset: Float
  ) {
    listExecutions(filter: $filter, limit: $limit, offset: $offset) {
      id
      status
      diagram_id
      started_at
      ended_at
      error
    }
  }
`;

export const GETSUPPORTEDFORMATS_QUERY = gql`
  query GetSupportedFormats {
    getSupportedFormats
  }
`;

export const GETPERSON_QUERY = gql`
  query GetPerson(
    $person_id: String!
  ) {
    getPerson(person_id: $person_id) {
      id
      label
      type
      llm_config {
        service
        model
        api_key_id
        system_prompt
      }
    }
  }
`;

export const LISTPERSONS_QUERY = gql`
  query ListPersons(
    $limit: Float
  ) {
    listPersons(limit: $limit) {
      id
      label
      type
      llm_config {
        service
        model
        api_key_id
      }
    }
  }
`;

export const LISTPROMPTFILES_QUERY = gql`
  query ListPromptFiles {
    listPromptFiles
  }
`;

export const GETPROMPTFILE_QUERY = gql`
  query GetPromptFile(
    $filename: String!
  ) {
    getPromptFile(filename: $filename)
  }
`;

export const LISTPROVIDERS_QUERY = gql`
  query ListProviders {
    listProviders {
      name
      operations {
        name
        method
        path
        description
        required_scopes
        has_pagination
        timeout_override
      }
      metadata {
        version
        type
        manifest_path
        description
        documentation_url
        support_email
      }
      base_url
      auth_config {
        strategy
        header
        query_param
        format
        scopes
      }
      rate_limit {
        algorithm
        capacity
        refill_per_sec
        window_size_sec
      }
      retry_policy {
        strategy
        max_retries
        base_delay_ms
        max_delay_ms
        retry_on_status
      }
      default_timeout
    }
  }
`;

export const GETPROVIDER_QUERY = gql`
  query GetProvider(
    $name: String!
  ) {
    getProvider(name: $name) {
      name
      operations {
        name
        method
        path
        description
        required_scopes
        has_pagination
        timeout_override
      }
      metadata {
        version
        type
        manifest_path
        description
        documentation_url
        support_email
      }
      base_url
      auth_config {
        strategy
        header
        query_param
        format
        scopes
      }
      rate_limit {
        algorithm
        capacity
        refill_per_sec
        window_size_sec
      }
      retry_policy {
        strategy
        max_retries
        base_delay_ms
        max_delay_ms
        retry_on_status
      }
      default_timeout
    }
  }
`;

export const GETPROVIDEROPERATIONS_QUERY = gql`
  query GetProviderOperations(
    $provider: String!
  ) {
    getProviderOperations(provider: $provider)
  }
`;

export const GETOPERATIONSCHEMA_QUERY = gql`
  query GetOperationSchema(
    $provider: String!,
    $operation: String!
  ) {
    getOperationSchema(provider: $provider, operation: $operation) {
      operation
      method
      path
      description
      request_body
      query_params
      response
    }
  }
`;

export const GETPROVIDERSTATISTICS_QUERY = gql`
  query GetProviderStatistics {
    getProviderStatistics {
      total_providers
      total_operations
      provider_types
      providers
    }
  }
`;

export const GETSYSTEMINFO_QUERY = gql`
  query GetSystemInfo {
    getSystemInfo
  }
`;

export const GETEXECUTIONCAPABILITIES_QUERY = gql`
  query GetExecutionCapabilities {
    getExecutionCapabilities
  }
`;

export const HEALTHCHECK_QUERY = gql`
  query HealthCheck {
    healthCheck
  }
`;

export const GETEXECUTIONORDER_QUERY = gql`
  query GetExecutionOrder(
    $execution_id: String!
  ) {
    getExecutionOrder(execution_id: $execution_id)
  }
`;

export const GETEXECUTIONMETRICS_QUERY = gql`
  query GetExecutionMetrics(
    $execution_id: String!
  ) {
    getExecutionMetrics(execution_id: $execution_id)
  }
`;

export const GETEXECUTIONHISTORY_QUERY = gql`
  query GetExecutionHistory(
    $diagram_id: String,
    $limit: Float,
    $include_metrics: Boolean
  ) {
    getExecutionHistory(diagram_id: $diagram_id, limit: $limit, include_metrics: $include_metrics)
  }
`;

export const GETACTIVECLISESSION_QUERY = gql`
  query GetActiveCliSession {
    getActiveCliSession
  }
`;

// ============================================================================
// MUTATIONS
// ============================================================================

export const CREATEAPIKEY_MUTATION = gql`
  mutation CreateApiKey(
    $input: CreateApiKeyInput!
  ) {
    createApiKey(input: $input) {
      success
      api_key {
        id
        label
        service
      }
      message
      error
    }
  }
`;

export const TESTAPIKEY_MUTATION = gql`
  mutation TestApiKey(
    $api_key_id: String!
  ) {
    testApiKey(api_key_id: $api_key_id) {
      success
      message
      error
    }
  }
`;

export const DELETEAPIKEY_MUTATION = gql`
  mutation DeleteApiKey(
    $api_key_id: String!
  ) {
    deleteApiKey(api_key_id: $api_key_id) {
      success
      message
    }
  }
`;

export const REGISTERCLISESSION_MUTATION = gql`
  mutation RegisterCliSession(
    $input: RegisterCliSessionInput!
  ) {
    registerCliSession(input: $input) {
      success
      message
      error
    }
  }
`;

export const UNREGISTERCLISESSION_MUTATION = gql`
  mutation UnregisterCliSession(
    $input: UnregisterCliSessionInput!
  ) {
    unregisterCliSession(input: $input) {
      success
      message
      error
    }
  }
`;

export const CREATEDIAGRAM_MUTATION = gql`
  mutation CreateDiagram(
    $input: CreateDiagramInput!
  ) {
    createDiagram(input: $input) {
      success
      diagram {
        metadata {
          id
          name
        }
      }
      message
      error
    }
  }
`;

export const EXECUTEDIAGRAM_MUTATION = gql`
  mutation ExecuteDiagram(
    $input: ExecuteDiagramInput!
  ) {
    executeDiagram(input: $input) {
      success
      execution {
        id
      }
      message
      error
    }
  }
`;

export const DELETEDIAGRAM_MUTATION = gql`
  mutation DeleteDiagram(
    $diagram_id: String!
  ) {
    deleteDiagram(diagram_id: $diagram_id) {
      success
      message
      error
    }
  }
`;

export const CONTROLEXECUTION_MUTATION = gql`
  mutation ControlExecution(
    $input: ExecutionControlInput!
  ) {
    controlExecution(input: $input) {
      success
      execution {
        id
        status
      }
      message
      error
    }
  }
`;

export const SENDINTERACTIVERESPONSE_MUTATION = gql`
  mutation SendInteractiveResponse(
    $input: InteractiveResponseInput!
  ) {
    sendInteractiveResponse(input: $input) {
      success
      message
      error
    }
  }
`;

export const UPDATENODESTATE_MUTATION = gql`
  mutation UpdateNodeState(
    $input: UpdateNodeStateInput!
  ) {
    updateNodeState(input: $input) {
      success
      execution {
        id
        status
      }
      message
      error
    }
  }
`;

export const UPLOADFILE_MUTATION = gql`
  mutation UploadFile(
    $file: Upload!,
    $path: String
  ) {
    uploadFile(file: $file, path: $path)
  }
`;

export const UPLOADDIAGRAM_MUTATION = gql`
  mutation UploadDiagram(
    $file: Upload!,
    $format: DiagramFormatGraphQL!
  ) {
    uploadDiagram(file: $file, format: $format)
  }
`;

export const VALIDATEDIAGRAM_MUTATION = gql`
  mutation ValidateDiagram(
    $content: String!,
    $format: DiagramFormatGraphQL!
  ) {
    validateDiagram(content: $content, format: $format)
  }
`;

export const CONVERTDIAGRAMFORMAT_MUTATION = gql`
  mutation ConvertDiagramFormat(
    $content: String!,
    $from_format: DiagramFormatGraphQL!,
    $to_format: DiagramFormatGraphQL!
  ) {
    convertDiagramFormat(content: $content, from_format: $from_format, to_format: $to_format) {
      success
      data
      format
      message
      error
    }
  }
`;

export const CREATENODE_MUTATION = gql`
  mutation CreateNode(
    $diagram_id: String!,
    $input: CreateNodeInput!
  ) {
    createNode(diagram_id: $diagram_id, input: $input) {
      success
      node {
        id
        type
        position {
          x
          y
        }
        data
      }
      message
      error
    }
  }
`;

export const UPDATENODE_MUTATION = gql`
  mutation UpdateNode(
    $diagram_id: String!,
    $node_id: String!,
    $input: UpdateNodeInput!
  ) {
    updateNode(diagram_id: $diagram_id, node_id: $node_id, input: $input) {
      success
      message
      error
    }
  }
`;

export const DELETENODE_MUTATION = gql`
  mutation DeleteNode(
    $diagram_id: String!,
    $node_id: String!
  ) {
    deleteNode(diagram_id: $diagram_id, node_id: $node_id) {
      success
      message
      error
    }
  }
`;

export const CREATEPERSON_MUTATION = gql`
  mutation CreatePerson(
    $input: CreatePersonInput!
  ) {
    createPerson(input: $input) {
      success
      person {
        id
        label
      }
      message
      error
    }
  }
`;

export const UPDATEPERSON_MUTATION = gql`
  mutation UpdatePerson(
    $person_id: String!,
    $input: UpdatePersonInput!
  ) {
    updatePerson(person_id: $person_id, input: $input) {
      success
      person {
        id
        label
      }
      message
      error
    }
  }
`;

export const DELETEPERSON_MUTATION = gql`
  mutation DeletePerson(
    $person_id: String!
  ) {
    deletePerson(person_id: $person_id) {
      success
      message
      error
    }
  }
`;

export const EXECUTEINTEGRATION_MUTATION = gql`
  mutation ExecuteIntegration(
    $input: ExecuteIntegrationInput!
  ) {
    executeIntegration(input: $input)
  }
`;

export const TESTINTEGRATION_MUTATION = gql`
  mutation TestIntegration(
    $input: TestIntegrationInput!
  ) {
    testIntegration(input: $input) {
      success
      provider
      operation
      status_code
      response_time_ms
      error
      response_preview
    }
  }
`;

export const RELOADPROVIDER_MUTATION = gql`
  mutation ReloadProvider(
    $name: String!
  ) {
    reloadProvider(name: $name)
  }
`;

// ============================================================================
// SUBSCRIPTIONS
// ============================================================================

export const EXECUTIONUPDATES_SUBSCRIPTION = gql`
  subscription ExecutionUpdates(
    $execution_id: String!
  ) {
    executionUpdates(execution_id: $execution_id) {
      execution_id
      type
      data
      timestamp
    }
  }
`;

// Export all operations
export const queries = {
  GetApiKeys: GETAPIKEYS_QUERY,
  GetApiKey: GETAPIKEY_QUERY,
  GetAvailableModels: GETAVAILABLEMODELS_QUERY,
  ListConversations: LISTCONVERSATIONS_QUERY,
  GetDiagram: GETDIAGRAM_QUERY,
  ListDiagrams: LISTDIAGRAMS_QUERY,
  GetExecution: GETEXECUTION_QUERY,
  ListExecutions: LISTEXECUTIONS_QUERY,
  GetSupportedFormats: GETSUPPORTEDFORMATS_QUERY,
  GetPerson: GETPERSON_QUERY,
  ListPersons: LISTPERSONS_QUERY,
  ListPromptFiles: LISTPROMPTFILES_QUERY,
  GetPromptFile: GETPROMPTFILE_QUERY,
  ListProviders: LISTPROVIDERS_QUERY,
  GetProvider: GETPROVIDER_QUERY,
  GetProviderOperations: GETPROVIDEROPERATIONS_QUERY,
  GetOperationSchema: GETOPERATIONSCHEMA_QUERY,
  GetProviderStatistics: GETPROVIDERSTATISTICS_QUERY,
  GetSystemInfo: GETSYSTEMINFO_QUERY,
  GetExecutionCapabilities: GETEXECUTIONCAPABILITIES_QUERY,
  HealthCheck: HEALTHCHECK_QUERY,
  GetExecutionOrder: GETEXECUTIONORDER_QUERY,
  GetExecutionMetrics: GETEXECUTIONMETRICS_QUERY,
  GetExecutionHistory: GETEXECUTIONHISTORY_QUERY,
  GetActiveCliSession: GETACTIVECLISESSION_QUERY,
} as const;

export const mutations = {
  CreateApiKey: CREATEAPIKEY_MUTATION,
  TestApiKey: TESTAPIKEY_MUTATION,
  DeleteApiKey: DELETEAPIKEY_MUTATION,
  RegisterCliSession: REGISTERCLISESSION_MUTATION,
  UnregisterCliSession: UNREGISTERCLISESSION_MUTATION,
  CreateDiagram: CREATEDIAGRAM_MUTATION,
  ExecuteDiagram: EXECUTEDIAGRAM_MUTATION,
  DeleteDiagram: DELETEDIAGRAM_MUTATION,
  ControlExecution: CONTROLEXECUTION_MUTATION,
  SendInteractiveResponse: SENDINTERACTIVERESPONSE_MUTATION,
  UpdateNodeState: UPDATENODESTATE_MUTATION,
  UploadFile: UPLOADFILE_MUTATION,
  UploadDiagram: UPLOADDIAGRAM_MUTATION,
  ValidateDiagram: VALIDATEDIAGRAM_MUTATION,
  ConvertDiagramFormat: CONVERTDIAGRAMFORMAT_MUTATION,
  CreateNode: CREATENODE_MUTATION,
  UpdateNode: UPDATENODE_MUTATION,
  DeleteNode: DELETENODE_MUTATION,
  CreatePerson: CREATEPERSON_MUTATION,
  UpdatePerson: UPDATEPERSON_MUTATION,
  DeletePerson: DELETEPERSON_MUTATION,
  ExecuteIntegration: EXECUTEINTEGRATION_MUTATION,
  TestIntegration: TESTINTEGRATION_MUTATION,
  ReloadProvider: RELOADPROVIDER_MUTATION,
} as const;

export const subscriptions = {
  ExecutionUpdates: EXECUTIONUPDATES_SUBSCRIPTION,
} as const;

// Statistics
// Queries: 25
// Mutations: 24
// Subscriptions: 1
