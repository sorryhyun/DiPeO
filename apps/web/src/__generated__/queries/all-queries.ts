/**
 * GENERATED FILE - DO NOT EDIT
 * Generated by GraphQL query generation
 * Generated at: 2025-09-14T15:18:58.131005
 *
 * Contains all GraphQL queries, mutations, and subscriptions
 */

import { gql } from '@apollo/client';// ============================================================================
// QUERIES
// ============================================================================

export const GETAPIKEYS_QUERY = gql`
  query GetApiKeys(
    $service: String
  ) {
    GetApiKeys(
      service: $service
    ) {
      api_keys(service: $service)
    }
  }
`;

export const GETAPIKEY_QUERY = gql`
  query GetApiKey(
    $api_key_id: String!
  ) {
    GetApiKey(
      api_key_id: $api_key_id
    ) {
      api_key(api_key_id: $api_key_id) {
        id
        label
        service
      }
    }
  }
`;

export const GETAVAILABLEMODELS_QUERY = gql`
  query GetAvailableModels(
    $service: String!,
    $api_key_id: String!
  ) {
    GetAvailableModels(
      service: $service,
      api_key_id: $api_key_id
    ) {
      available_models(service: $service, api_key_id: $api_key_id)
    }
  }
`;

export const LISTCONVERSATIONS_QUERY = gql`
  query ListConversations(
    $person_id: String,
    $execution_id: String,
    $search: String,
    $show_forgotten: Boolean,
    $limit: Int,
    $offset: Int,
    $since: String
  ) {
    ListConversations(
      person_id: $person_id,
      execution_id: $execution_id,
      search: $search,
      show_forgotten: $show_forgotten,
      limit: $limit,
      offset: $offset,
      since: $since
    ) {
      conversations(person_id: $person_id, execution_id: $execution_id, search: $search, show_forgotten: $show_forgotten, limit: $limit, offset: $offset, since: $since)
    }
  }
`;

export const GETDIAGRAM_QUERY = gql`
  query GetDiagram(
    $diagram_id: String!
  ) {
    GetDiagram(
      diagram_id: $diagram_id
    ) {
      diagram(diagram_id: $diagram_id) {
        nodes {
          id
          type
          position {
            x
            y
          }
          data
        }
        handles {
          id
          node_id
          label
          direction
          data_type
          position
        }
        arrows {
          id
          source
          target
          content_type
          label
          data
        }
        persons {
          id
          label
          llm_config {
            service
            model
            api_key_id
            system_prompt
          }
          type
        }
        metadata {
          id
          name
          description
          version
          created
          modified
          author
          tags
        }
      }
    }
  }
`;

export const LISTDIAGRAMS_QUERY = gql`
  query ListDiagrams(
    $filter: DiagramFilterInput,
    $limit: Int,
    $offset: Int
  ) {
    ListDiagrams(
      filter: $filter,
      limit: $limit,
      offset: $offset
    ) {
      diagrams(filter: $filter, limit: $limit, offset: $offset) {
        metadata {
          id
          name
          description
          author
          created
          modified
          tags
        }
        nodeCount
        arrowCount
      }
    }
  }
`;

export const GETEXECUTION_QUERY = gql`
  query GetExecution(
    $execution_id: String!
  ) {
    GetExecution(
      execution_id: $execution_id
    ) {
      get_execution(execution_id: $execution_id) {
        id
        status
        diagram_id
        started_at
        ended_at
        error
        node_states
        node_outputs
        variables
        metrics
        llm_usage {
          input
          output
          cached
          total
        }
      }
    }
  }
`;

export const LISTEXECUTIONS_QUERY = gql`
  query ListExecutions(
    $filter: ExecutionFilterInput,
    $limit: Int,
    $offset: Int
  ) {
    ListExecutions(
      filter: $filter,
      limit: $limit,
      offset: $offset
    ) {
      executions(filter: $filter, limit: $limit, offset: $offset) {
        id
        status
        diagram_id
        started_at
        ended_at
        error
      }
    }
  }
`;

export const GETSUPPORTEDFORMATS_QUERY = gql`
  query GetSupportedFormats(
  ) {
    GetSupportedFormats(
    ) {
      supported_formats
    }
  }
`;

export const GETPERSON_QUERY = gql`
  query GetPerson(
    $person_id: String!
  ) {
    GetPerson(
      person_id: $person_id
    ) {
      person(person_id: $person_id) {
        id
        label
        type
        llm_config {
          service
          model
          api_key_id
          system_prompt
        }
      }
    }
  }
`;

export const LISTPERSONS_QUERY = gql`
  query ListPersons(
    $limit: Int
  ) {
    ListPersons(
      limit: $limit
    ) {
      persons(limit: $limit) {
        id
        label
        type
        llm_config {
          service
          model
          api_key_id
        }
      }
    }
  }
`;

export const LISTPROMPTFILES_QUERY = gql`
  query ListPromptFiles(
  ) {
    ListPromptFiles(
    ) {
      prompt_files
    }
  }
`;

export const GETPROMPTFILE_QUERY = gql`
  query GetPromptFile(
    $filename: String!
  ) {
    GetPromptFile(
      filename: $filename
    ) {
      prompt_file(filename: $filename)
    }
  }
`;

export const GETPROVIDERS_QUERY = gql`
  query GetProviders(
  ) {
    GetProviders(
    ) {
      providers
    }
  }
`;

export const GETPROVIDEROPERATIONS_QUERY = gql`
  query GetProviderOperations(
    $provider: String!
  ) {
    GetProviderOperations(
      provider: $provider
    ) {
      provider_operations(provider: $provider)
    }
  }
`;

export const GETOPERATIONSCHEMA_QUERY = gql`
  query GetOperationSchema(
    $provider: String!,
    $operation: String!
  ) {
    GetOperationSchema(
      provider: $provider,
      operation: $operation
    ) {
      operation_schema(provider: $provider, operation: $operation)
    }
  }
`;

export const GETSYSTEMINFO_QUERY = gql`
  query GetSystemInfo(
  ) {
    GetSystemInfo(
    ) {
      system_info
    }
  }
`;

export const GETEXECUTIONCAPABILITIES_QUERY = gql`
  query GetExecutionCapabilities(
  ) {
    GetExecutionCapabilities(
    ) {
      execution_capabilities
    }
  }
`;

export const HEALTHCHECK_QUERY = gql`
  query HealthCheck(
  ) {
    HealthCheck(
    ) {
      health_check
    }
  }
`;

export const GETEXECUTIONORDER_QUERY = gql`
  query GetExecutionOrder(
    $execution_id: String!
  ) {
    GetExecutionOrder(
      execution_id: $execution_id
    ) {
      execution_order(execution_id: $execution_id)
    }
  }
`;

export const GETEXECUTIONMETRICS_QUERY = gql`
  query GetExecutionMetrics(
    $execution_id: String!
  ) {
    GetExecutionMetrics(
      execution_id: $execution_id
    ) {
      execution_metrics(execution_id: $execution_id)
    }
  }
`;

export const GETEXECUTIONHISTORY_QUERY = gql`
  query GetExecutionHistory(
    $diagram_id: String,
    $limit: Int,
    $include_metrics: Boolean
  ) {
    GetExecutionHistory(
      diagram_id: $diagram_id,
      limit: $limit,
      include_metrics: $include_metrics
    ) {
      execution_history(diagram_id: $diagram_id, limit: $limit, include_metrics: $include_metrics)
    }
  }
`;

export const GETACTIVECLISESSION_QUERY = gql`
  query GetActiveCliSession(
  ) {
    GetActiveCliSession(
    ) {
      active_cli_session
    }
  }
`;

// ============================================================================
// MUTATIONS
// ============================================================================

export const CREATEAPIKEY_MUTATION = gql`
  mutation CreateApiKey(
    $input: CreateApiKeyInput!
  ) {
    CreateApiKey(
      input: $input
    ) {
      create_api_key(input: $input) {
        success
        api_key {
          id
          label
          service
        }
        message
        error
      }
    }
  }
`;

export const TESTAPIKEY_MUTATION = gql`
  mutation TestApiKey(
    $api_key_id: String!
  ) {
    TestApiKey(
      api_key_id: $api_key_id
    ) {
      test_api_key(api_key_id: $api_key_id) {
        success
        message
        error
      }
    }
  }
`;

export const DELETEAPIKEY_MUTATION = gql`
  mutation DeleteApiKey(
    $api_key_id: String!
  ) {
    DeleteApiKey(
      api_key_id: $api_key_id
    ) {
      delete_api_key(api_key_id: $api_key_id) {
        success
        message
      }
    }
  }
`;

export const REGISTERCLISESSION_MUTATION = gql`
  mutation RegisterCliSession(
    $input: RegisterCliSessionInput!
  ) {
    RegisterCliSession(
      input: $input
    ) {
      register_cli_session(input: $input) {
        success
        message
        error
      }
    }
  }
`;

export const UNREGISTERCLISESSION_MUTATION = gql`
  mutation UnregisterCliSession(
    $input: UnregisterCliSessionInput!
  ) {
    UnregisterCliSession(
      input: $input
    ) {
      unregister_cli_session(input: $input) {
        success
        message
        error
      }
    }
  }
`;

export const CREATEDIAGRAM_MUTATION = gql`
  mutation CreateDiagram(
    $input: CreateDiagramInput!
  ) {
    CreateDiagram(
      input: $input
    ) {
      create_diagram(input: $input) {
        success
        diagram {
          metadata {
            id
            name
          }
        }
        message
        error
      }
    }
  }
`;

export const EXECUTEDIAGRAM_MUTATION = gql`
  mutation ExecuteDiagram(
    $input: ExecuteDiagramInput!
  ) {
    ExecuteDiagram(
      input: $input
    ) {
      execute_diagram(input: $input) {
        success
        execution {
          id
        }
        message
        error
      }
    }
  }
`;

export const DELETEDIAGRAM_MUTATION = gql`
  mutation DeleteDiagram(
    $diagram_id: String!
  ) {
    DeleteDiagram(
      diagram_id: $diagram_id
    ) {
      delete_diagram(diagram_id: $diagram_id) {
        success
        message
        error
      }
    }
  }
`;

export const CONTROLEXECUTION_MUTATION = gql`
  mutation ControlExecution(
    $input: ExecutionControlInput!
  ) {
    ControlExecution(
      input: $input
    ) {
      control_execution(input: $input) {
        success
        execution {
          id
          status
        }
        message
        error
      }
    }
  }
`;

export const SENDINTERACTIVERESPONSE_MUTATION = gql`
  mutation SendInteractiveResponse(
    $input: InteractiveResponseInput!
  ) {
    SendInteractiveResponse(
      input: $input
    ) {
      send_interactive_response(input: $input) {
        success
        message
        error
      }
    }
  }
`;

export const UPDATENODESTATE_MUTATION = gql`
  mutation UpdateNodeState(
    $input: UpdateNodeStateInput!
  ) {
    UpdateNodeState(
      input: $input
    ) {
      update_node_state(input: $input) {
        success
        execution {
          id
          status
        }
        message
        error
      }
    }
  }
`;

export const UPLOADFILE_MUTATION = gql`
  mutation UploadFile(
    $file: Upload!,
    $path: String
  ) {
    UploadFile(
      file: $file,
      path: $path
    ) {
      upload_file(file: $file, path: $path)
    }
  }
`;

export const UPLOADDIAGRAM_MUTATION = gql`
  mutation UploadDiagram(
    $file: Upload!,
    $format: DiagramFormatGraphQL!
  ) {
    UploadDiagram(
      file: $file,
      format: $format
    ) {
      upload_diagram(file: $file, format: $format)
    }
  }
`;

export const VALIDATEDIAGRAM_MUTATION = gql`
  mutation ValidateDiagram(
    $content: String!,
    $format: DiagramFormatGraphQL!
  ) {
    ValidateDiagram(
      content: $content,
      format: $format
    ) {
      validate_diagram(content: $content, format: $format)
    }
  }
`;

export const CONVERTDIAGRAMFORMAT_MUTATION = gql`
  mutation ConvertDiagramFormat(
    $content: String!,
    $from_format: DiagramFormatGraphQL!,
    $to_format: DiagramFormatGraphQL!
  ) {
    ConvertDiagramFormat(
      content: $content,
      from_format: $from_format,
      to_format: $to_format
    ) {
      convert_diagram_format(content: $content, from_format: $from_format, to_format: $to_format) {
        success
        data
        format
        message
        error
      }
    }
  }
`;

export const CREATENODE_MUTATION = gql`
  mutation CreateNode(
    $diagram_id: String!,
    $input: CreateNodeInput!
  ) {
    CreateNode(
      diagram_id: $diagram_id,
      input: $input
    ) {
      create_node(diagram_id: $diagram_id, input: $input) {
        success
        node {
          id
          type
          position {
            x
            y
          }
          data
        }
        message
        error
      }
    }
  }
`;

export const UPDATENODE_MUTATION = gql`
  mutation UpdateNode(
    $diagram_id: String!,
    $node_id: String!,
    $input: UpdateNodeInput!
  ) {
    UpdateNode(
      diagram_id: $diagram_id,
      node_id: $node_id,
      input: $input
    ) {
      update_node(diagram_id: $diagram_id, node_id: $node_id, input: $input) {
        success
        message
        error
      }
    }
  }
`;

export const DELETENODE_MUTATION = gql`
  mutation DeleteNode(
    $diagram_id: String!,
    $node_id: String!
  ) {
    DeleteNode(
      diagram_id: $diagram_id,
      node_id: $node_id
    ) {
      delete_node(diagram_id: $diagram_id, node_id: $node_id) {
        success
        message
        error
      }
    }
  }
`;

export const CREATEPERSON_MUTATION = gql`
  mutation CreatePerson(
    $input: CreatePersonInput!
  ) {
    CreatePerson(
      input: $input
    ) {
      create_person(input: $input) {
        success
        person {
          id
          label
        }
        message
        error
      }
    }
  }
`;

export const UPDATEPERSON_MUTATION = gql`
  mutation UpdatePerson(
    $person_id: String!,
    $input: UpdatePersonInput!
  ) {
    UpdatePerson(
      person_id: $person_id,
      input: $input
    ) {
      update_person(person_id: $person_id, input: $input) {
        success
        person {
          id
          label
        }
        message
        error
      }
    }
  }
`;

export const DELETEPERSON_MUTATION = gql`
  mutation DeletePerson(
    $person_id: String!
  ) {
    DeletePerson(
      person_id: $person_id
    ) {
      delete_person(person_id: $person_id) {
        success
        message
        error
      }
    }
  }
`;

// ============================================================================
// SUBSCRIPTIONS
// ============================================================================

export const EXECUTIONUPDATES_SUBSCRIPTION = gql`
  subscription ExecutionUpdates(
    $execution_id: String!
  ) {
    ExecutionUpdates(
      execution_id: $execution_id
    ) {
      execution_updates(execution_id: $execution_id) {
        execution_id
        event_type
        data
        timestamp
      }
    }
  }
`;

// Export all operations
export const queries = {
  GetApiKeys: GETAPIKEYS_QUERY,
  GetApiKey: GETAPIKEY_QUERY,
  GetAvailableModels: GETAVAILABLEMODELS_QUERY,
  ListConversations: LISTCONVERSATIONS_QUERY,
  GetDiagram: GETDIAGRAM_QUERY,
  ListDiagrams: LISTDIAGRAMS_QUERY,
  GetExecution: GETEXECUTION_QUERY,
  ListExecutions: LISTEXECUTIONS_QUERY,
  GetSupportedFormats: GETSUPPORTEDFORMATS_QUERY,
  GetPerson: GETPERSON_QUERY,
  ListPersons: LISTPERSONS_QUERY,
  ListPromptFiles: LISTPROMPTFILES_QUERY,
  GetPromptFile: GETPROMPTFILE_QUERY,
  GetProviders: GETPROVIDERS_QUERY,
  GetProviderOperations: GETPROVIDEROPERATIONS_QUERY,
  GetOperationSchema: GETOPERATIONSCHEMA_QUERY,
  GetSystemInfo: GETSYSTEMINFO_QUERY,
  GetExecutionCapabilities: GETEXECUTIONCAPABILITIES_QUERY,
  HealthCheck: HEALTHCHECK_QUERY,
  GetExecutionOrder: GETEXECUTIONORDER_QUERY,
  GetExecutionMetrics: GETEXECUTIONMETRICS_QUERY,
  GetExecutionHistory: GETEXECUTIONHISTORY_QUERY,
  GetActiveCliSession: GETACTIVECLISESSION_QUERY,
} as const;

export const mutations = {
  CreateApiKey: CREATEAPIKEY_MUTATION,
  TestApiKey: TESTAPIKEY_MUTATION,
  DeleteApiKey: DELETEAPIKEY_MUTATION,
  RegisterCliSession: REGISTERCLISESSION_MUTATION,
  UnregisterCliSession: UNREGISTERCLISESSION_MUTATION,
  CreateDiagram: CREATEDIAGRAM_MUTATION,
  ExecuteDiagram: EXECUTEDIAGRAM_MUTATION,
  DeleteDiagram: DELETEDIAGRAM_MUTATION,
  ControlExecution: CONTROLEXECUTION_MUTATION,
  SendInteractiveResponse: SENDINTERACTIVERESPONSE_MUTATION,
  UpdateNodeState: UPDATENODESTATE_MUTATION,
  UploadFile: UPLOADFILE_MUTATION,
  UploadDiagram: UPLOADDIAGRAM_MUTATION,
  ValidateDiagram: VALIDATEDIAGRAM_MUTATION,
  ConvertDiagramFormat: CONVERTDIAGRAMFORMAT_MUTATION,
  CreateNode: CREATENODE_MUTATION,
  UpdateNode: UPDATENODE_MUTATION,
  DeleteNode: DELETENODE_MUTATION,
  CreatePerson: CREATEPERSON_MUTATION,
  UpdatePerson: UPDATEPERSON_MUTATION,
  DeletePerson: DELETEPERSON_MUTATION,
} as const;

export const subscriptions = {
  ExecutionUpdates: EXECUTIONUPDATES_SUBSCRIPTION,
} as const;

// Statistics
// Queries: 23
// Mutations: 21
// Subscriptions: 1
