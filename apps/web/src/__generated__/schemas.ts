/**
 * GENERATED FILE - DO NOT EDIT
 * Generated by domain model Zod schemas generation
 * Generated at: 2025-10-09T15:31:59.877644
 *
 * This file contains Zod validation schemas generated from domain models.
 * To customize validation, use the validation functions in each node's config file.
 */

import { z } from 'zod';
import {
  PersonID,
  NodeID,
  HandleID,
  ArrowID,
  NodeType,
  SupportedLanguage,
  HttpMethod,
  DBBlockSubType,
  HookType,
  HookTriggerMode,
  ContentType,
  DiagramFormat,
  ToolSelection,
  APIServiceType
} from '@dipeo/models';

// Node validation schemas
export const ApiJobSchema = z.object({
});

export type ApiJob = z.infer<typeof ApiJobSchema>;
export const CodeJobSchema = z.object({
});

export type CodeJob = z.infer<typeof CodeJobSchema>;
export const ConditionSchema = z.object({
});

export type Condition = z.infer<typeof ConditionSchema>;
export const DbSchema = z.object({
  file: z.any().optional().describe("File path or array of file paths"),
  keys: z.any().optional().describe("Single key or list of dot-separated keys to target within the JSON payload"),
  lines: z.any().optional().describe("Line selection or ranges to read (e.g., 1:120 or ['10:20'])")
});

export type Db = z.infer<typeof DbSchema>;
export const DiffPatchSchema = z.object({
});

export type DiffPatch = z.infer<typeof DiffPatchSchema>;
export const EndpointSchema = z.object({
});

export type Endpoint = z.infer<typeof EndpointSchema>;
export const HookSchema = z.object({
});

export type Hook = z.infer<typeof HookSchema>;
export const IntegratedApiSchema = z.object({
  provider: z.string().describe("API provider to connect to"),
  operation: z.string().describe("Operation to perform (provider-specific)")
});

export type IntegratedApi = z.infer<typeof IntegratedApiSchema>;
export const IrBuilderSchema = z.object({
});

export type IrBuilder = z.infer<typeof IrBuilderSchema>;
export const JsonSchemaValidatorSchema = z.object({
});

export type JsonSchemaValidator = z.infer<typeof JsonSchemaValidatorSchema>;
export const PersonJobSchema = z.object({
  tools: z.string().optional().describe("Tools available to the AI agent")
});

export type PersonJob = z.infer<typeof PersonJobSchema>;
export const StartSchema = z.object({
  custom_data: z.any().optional().describe("Custom data to pass when manually triggered")
});

export type Start = z.infer<typeof StartSchema>;
export const SubDiagramSchema = z.object({
  diagram_name: z.string().optional().describe("Name of the diagram to execute (e.g., 'workflow/process')")
});

export type SubDiagram = z.infer<typeof SubDiagramSchema>;
export const TemplateJobSchema = z.object({
});

export type TemplateJob = z.infer<typeof TemplateJobSchema>;
export const TypescriptAstSchema = z.object({
  extract_patterns: z.any().optional().describe("Patterns to extract from the AST")
});

export type TypescriptAst = z.infer<typeof TypescriptAstSchema>;
export const UserResponseSchema = z.object({
});

export type UserResponse = z.infer<typeof UserResponseSchema>;

// Export all schemas
export const nodeSchemas = {
  apijob: ApiJobSchema,
  codejob: CodeJobSchema,
  condition: ConditionSchema,
  db: DbSchema,
  diffpatch: DiffPatchSchema,
  endpoint: EndpointSchema,
  hook: HookSchema,
  integratedapi: IntegratedApiSchema,
  irbuilder: IrBuilderSchema,
  jsonschemavalidator: JsonSchemaValidatorSchema,
  personjob: PersonJobSchema,
  start: StartSchema,
  subdiagram: SubDiagramSchema,
  templatejob: TemplateJobSchema,
  typescriptast: TypescriptAstSchema,
  userresponse: UserResponseSchema
} as const;

// Export validation helper
export function validateNodeData<T extends keyof typeof nodeSchemas>(
  nodeType: T,
  data: unknown
): z.infer<typeof nodeSchemas[T]> {
  return nodeSchemas[nodeType].parse(data);
}

// Export aliases for backward compatibility
export const NODE_DATA_SCHEMAS = nodeSchemas;

// Export schema getter function
export function getNodeDataSchema(nodeType: keyof typeof nodeSchemas) {
  return nodeSchemas[nodeType];
}
// Create a field validator function for Zod schemas
export function createZodFieldValidator(nodeType: string, fieldName: string) {
  const schemaKey = nodeType.toLowerCase().replace(/-/g, '') as keyof typeof nodeSchemas;

  return (value: unknown) => {
    if (!(schemaKey in nodeSchemas)) {
      return { isValid: true }; // If no schema exists, pass validation
    }

    const schema = nodeSchemas[schemaKey];
    const fieldData = { [fieldName]: value };

    try {
      // Try to validate just this field using partial schema
      if ('partial' in schema && typeof schema.partial === 'function') {
        (schema as any).partial().parse(fieldData);
      }
      return { isValid: true };
    } catch (error) {
      if (error instanceof z.ZodError) {
        const fieldError = error.errors.find(err => err.path[0] === fieldName);
        if (fieldError) {
          return { isValid: false, error: fieldError.message };
        }
      }
      return { isValid: true };
    }
  };
}
