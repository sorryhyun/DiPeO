{
  "section_id": "design-system",
  "batch_index": 0,
  "title": "Design System & Tailwind Configuration",
  "prompt": "```design-system-prompt.md\nDesign System & Tailwind Configuration: Production-Grade Frontend Code Generator Prompt\n\nObjective\n- Generate a complete, production-ready frontend codebase for a dashboard that uses a token-driven design system, Tailwind CSS, and React with TypeScript.\n- Outputs must be ready to run in a modern React stack (preferably Next.js app directory or React 18+ app with server components readiness, but usable also in a plain React + Vite/CRA setup with proper guidance).\n- Emphasize accessibility, performance, and maintainability using advanced React patterns, strong typing, and robust testing.\n\nScope and Deliverables\n- A cohesive design system built around tokens (color, typography, spacing, radii, shadows, breakpoints, etc.) with:\n  - Type-safe tokens exported as TS types and as consumable JS/TS objects.\n  - A Tailwind configuration that references tokens via CSS variables and supports dark mode, container queries, and accessibility defaults.\n  - Documentation scaffold for design system usage (docs folder with guidelines, token references, and component usage).\n- Reusable components catalog for the dashboard: Button, Input, Card, Table, ChartContainer.\n- Data-driven, accessible, and responsive components using Tailwind CSS with container queries and fluid typography.\n- Layered architecture including:\n  - Tokens layer (Design tokens and TS types)\n  - Styling layer (Tailwind config, CSS vars, theme utilities)\n  - Components layer (UI primitives)\n  - State & data layer (forms, loading/error states, data fetching patterns)\n  - Accessibility layer (ARIA roles/labels, keyboard navigation)\n  - Testing layer (unit and integration tests scaffolding)\n  - Documentation layer (usage guides, token references, component API docs)\n- Optional but recommended: i18n scaffolding, SEO meta tags guidelines for SSR/SSG, and basic performance budgets.\n\nConstraints and Requirements\n- Language and framework\n  - TypeScript 4.9+ (strict mode enabled)\n  - React 18+ (with hooks, Suspense, Error Boundaries)\n  - Tailwind CSS with a token-based design system\n  - Optional Next.js app directory support for server components and SSR/SSG guidelines; if not used, provide a clear migration path\n- Tokens and design system\n  - Design tokens for color, typography, spacing, radii, shadows, breakpoints, z-index, and motion\n  - Tokens exported as:\n    - TS types/interfaces (e.g., TokenMap, ColorTokens, TypographyScale)\n    - A token object (e.g., TOKENS) and a separate ColorMode for light/dark\n    - CSS variables mapping for runtime theming (e.g., --color-primary)\n  - Themeable dark mode with token-based color tokens\n  - Typography scale defined (e.g., base, sm, md, lg, xl, 2xl) with responsive adjustments\n- Tailwind configuration\n  - Tailwind configured with content paths covering TSX/TS/MDX/JSX files\n  - darkMode set to 'class' with a robust toggle mechanism\n  - Extend Tailwind theme to reference design tokens via CSS variables\n  - Include container queries and responsive typography utilities\n  - Use a design-token-aware plugin or explicit CSS variable mapping to ensure token consistency\n- Components\n  - Button: variants (solid, outline, ghost), sizes (xs, sm, md, lg), icon support, loading state, disabled state, ARIA labels\n  - Input: text/number/select/textarea, validation states, error/help text, accessible labeling\n  - Card: header/body/footer slots, optional actions, responsive layout\n  - Table: sortable columns, pagination or virtualization hook, sticky headers, accessible markup\n  - ChartContainer: lightweight wrapper to host charts (no specific chart lib mandated; ready for integration)\n- Patterns and best practices\n  - Custom hooks, compound components, render props, or HOCs where appropriate\n  - Server Components readiness guidance if using Next.js app dir\n  - React 18 features: Suspense, Error Boundaries, concurrent rendering considerations\n  - State management: local state, lifting state, Context API, reducers\n  - Data fetching: React Query or SWR patterns (loading, error, success states)\n  - Performance: code splitting with React.lazy(), memoization (React.memo/useMemo/useCallback)\n  - Accessibility: keyboard navigation, ARIA attributes, screen reader compatibility\n  - Form validation with live feedback and error recovery\n  - Data handling: sanitation/validation on frontend, CSRF/XSS considerations\n  - SEO: meta tags and structured data patterns suitable for SSR/SSG\n  - i18n: RTL/LTR support and direction-aware typography\n  - Offline support: service workers and local storage fallbacks\n  - Animations: Intersection Observer-based lazy loading and scroll-triggered effects\n  - Data caching and optimistic UI updates\n  - Logging/monitoring hooks and graceful error recovery\n  - Image optimization guidance and responsive images\n  - CSP and security-conscious defaults\n- Testing and quality\n  - Unit tests with React Testing Library (RTL)\n  - Integration tests scaffold for key flows\n  - Type safety assertions (no any; strict TS)\n  - Linting/formatting guidelines (ESLint + Prettier)\n- Documentation\n  - Design system docs: token references, usage patterns, component API docs\n  - A README with build/run instructions, environment variables, and how to extend tokens/components\n  - A simple story-like or MDX docs for each component (Button, Input, Card, Table, ChartContainer)\n- Performance and accessibility targets\n  - Core Web Vitals considerations (LCP, FID, CLS) addressed via lazy loading, resource sizing, and efficient re-renders\n  - ARIA labels, keyboard support, screen reader friendly semantics\n- Security and reliability\n  - CSP-friendly patterns, XSS mitigation, and proper data sanitization\n  - Error boundaries with helpful fallbacks and recovery paths\n- Output structure guidance\n  - Produce a complete project scaffold with:\n    - Tokens: tokens.ts, tokens.css (CSS variables), token types\n    - Tailwind: tailwind.config.ts, global.css (with CSS variables and Tailwind directives)\n    - Framework glue: if Next.js, appropriate app/pages structure; if CRA/Vite, equivalent structure\n    - Components: Button.tsx, Input.tsx, Card.tsx, Table.tsx, ChartContainer.tsx (with tests and stories/examples)\n    - Hooks/Utilities: useDebounce, useToggle, useTokenTheme, data-fetching wrappers\n    - Tests: __tests__ with RTL examples\n    - Docs: docs/ with tokens.md, components.md, usage.md\n    - Index and exports: index.ts barrel files for tokens and components\n- Output format and completeness\n  - All files must be included in a consistent, ready-to-run project skeleton\n  - Each file content must be provided as its own code block labeled with the filename, e.g.:\n    ```filename.ts\n    // file contents\n    ```\n  - Where a file references external libs, provide exact import paths and minimal viable implementation\n  - Include sample usage snippets demonstrating token-driven component usage and theming\n\nExamples to Clarify Expected Output (Include in Prompt)\n- Example tokens.ts (type-safe)\n  ```\n  // tokens.ts\n  export type ColorTokens = {\n    primary: string\n    primaryDark: string\n    surface: string\n    background: string\n    text: string\n    textMuted: string\n    border: string\n    // ...additional tokens\n  }\n\n  export type TypographyScale = {\n    fontSize: string\n    lineHeight: string\n    fontWeight?: number\n  }\n\n  export const TOKENS = {\n    colors: {\n      primary: '#3B82F6',\n      primaryDark: '#2563EB',\n      surface: '#FFFFFF',\n      background: '#0B1020',\n      text: '#0F172A',\n      textMuted: '#64748B',\n      border: '#E5E7EB',\n      // ...\n    },\n    typography: {\n      fontFamily: '\"Inter\", system-ui, -apple-system, \"Segoe UI\", Roboto, sans-serif',\n      scale: {\n        xs: { fontSize: '12px', lineHeight: '16px' },\n        sm: { fontSize: '14px', lineHeight: '20px' },\n        base: { fontSize: '16px', lineHeight: '24px' },\n        lg: { fontSize: '18px', lineHeight: '28px' },\n        xl: { fontSize: '20px', lineHeight: '28px' },\n        '2xl': { fontSize: '24px', lineHeight: '32px' },\n      } as Record<string, TypographyScale>\n    },\n    spacing: {\n      unit: 4,\n      1: '4px',\n      2: '8px',\n      3: '12px',\n      4: '16px',\n      6: '24px',\n      8: '32px',\n      // ...\n    },\n    radii: {\n      sm: '4px',\n      base: '8px',\n      lg: '12px',\n      full: '999px'\n    },\n    shadows: {\n      subtle: '0 1px 2px rgba(0,0,0,.05)',\n      // ...\n    },\n    breakpoints: {\n      sm: '640px',\n      md: '768px',\n      lg: '1024px',\n      xl: '1280px'\n    }\n  }\n\n  export type DesignTokens = typeof TOKENS\n  ```\n- Example Button.tsx (token-driven)\n  ```\n  import React from 'react'\n  import type { DesignTokens } from './tokens'\n\n  type ButtonVariant = 'solid' | 'outline' | 'ghost'\n  type ButtonSize = 'xs' | 'sm' | 'md' | 'lg'\n\n  export interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n    variant?: ButtonVariant\n    size?: ButtonSize\n    leftIcon?: React.ReactNode\n    rightIcon?: React.ReactNode\n    loading?: boolean\n  }\n\n  function cx(...classNames: (string | undefined | false)[]) {\n    return classNames.filter(Boolean).join(' ')\n  }\n\n  export const Button: React.FC<ButtonProps> = ({\n    variant = 'solid',\n    size = 'md',\n    className,\n    leftIcon,\n    rightIcon,\n    loading,\n    children,\n    ...rest\n  }) => {\n    const base = 'inline-flex items-center justify-center font-semibold rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2'\n    const sizeClasses: Record<ButtonSize, string> = {\n      xs: 'px-2 py-1 text-xs',\n      sm: 'px-3 py-2 text-sm',\n      md: 'px-4 py-2 text-base',\n      lg: 'px-5 py-3 text-base'\n    }\n    const variantClasses: Record<ButtonVariant, string> = {\n      solid: 'bg-primary text-white hover:bg-primary-dark disabled:opacity-50',\n      outline: 'border border-color:border text-primary bg-transparent hover:bg-gray-50',\n      ghost: 'bg-transparent text-primary hover:bg-gray-100'\n    }\n    // Using tokens via CSS vars if available\n    const classes = cx(\n      base,\n      sizeClasses[size],\n      variantClasses[variant],\n      className\n    )\n\n    return (\n      <button aria-label={typeof children === 'string' ? children : undefined} className={classes} disabled={rest.disabled || loading} {...rest}>\n        {leftIcon && <span className=\"mr-2\">{leftIcon}</span>}\n        {loading ? 'Loading\u2026' : children}\n        {rightIcon && <span className=\"ml-2\">{rightIcon}</span>}\n      </button>\n    )\n  }\n  ```\n- Example Tailwind config snippet\n  ```\n  // tailwind.config.ts\n  import type { Config } from 'tailwindcss'\n  const TOKENS = require('./src/design-system/tokens').TOKENS\n\n  const config: Config = {\n    content: ['./src/**/*.{ts,tsx,js,jsx,mdx}'],\n    darkMode: 'class',\n    theme: {\n      extend: {\n        colors: {\n          primary: 'var(--color-primary)',\n          background: 'var(--color-background)',\n          surface: 'var(--color-surface)',\n          text: 'var(--color-text)',\n          border: 'var(--color-border)',\n          muted: 'var(--color-text-muted)'\n        },\n        fontFamily: {\n          sans: TOKENS.typography.fontFamily\n        },\n        fontSize: {\n          // map to tokens.typography.scale if desired\n        },\n        container: {\n          padding: 'clamp(1rem, 2vw, 2rem)'\n        },\n      }\n    }\n  }\n  export default config\n  ```\n- Example docs structure\n  ```\n  docs/\n    tokens.md\n    components.md\n    usage.md\n  ```\n\nGuidelines for the AI\n- Output must be a complete, self-contained scaffold. Do not rely on external boilerplates unless you provide the minimal glue code and instructions to integrate.\n- Every file should be output as its own code block with the filename labeled, e.g.:\n  ```filename.ts\n  // file contents\n  ```\n- Do not omit any essential files; at minimum provide:\n  - src/design-system/tokens.ts (or tokens.ts)\n  - src/design-system/tokens.css (CSS var mappings)\n  - tailwind.config.ts\n  - src/components/Button.tsx\n  - src/components/Input.tsx\n  - src/components/Card.tsx\n  - src/components/Table.tsx\n  - src/components/ChartContainer.tsx\n  - src/hooks (some example hooks)\n  - src/utils (theme helpers)\n  - src/pages/_app.tsx or equivalent app setup (for Next.js or React)\n  - docs/ (token references, component API docs)\n  - tests/ (RTL scaffolds)\n- Use explicit, precise API surfaces (props, events, slots) for each component.\n- Ensure type safety: no any; prefer discriminated unions, generics, and strict TS types.\n- Ensure accessibility by including ARIA attributes, keyboard interactions, and roles where applicable.\n- Include at least one end-to-end usage example (a small dashboard page) that composes Button, Input, Card, Table, and ChartContainer with responsive behavior.\n- Provide a simple migration guide and how to customize tokens to themes (light/dark) and how to extend the token set.\n- Provide clear instructions for running the project locally, including package manager commands, environment setup, and how to build for production.\n- Ensure compatibility with container queries and fluid typography inside the Tailwind setup.\n- Include a minimal testing strategy with RTL tests for core components and some integration tests for a dashboard page.\n\nAcceptance Criteria Reference (to be satisfied by your output)\n- Tailwind configured with a token-based design system\n- Themeable dark mode support and color tokens\n- Typography scale defined and responsive typography integrated\n- Reusable components catalog (Button, Input, Card, Table, ChartContainer)\n- Type-safe design tokens and token usage through TS types\n- Documentation scaffold for design system usage\n- Modern, production-ready React components with proper separation of concerns\n- Advanced React patterns used where appropriate\n- Use React 18+ features (Suspense, Error Boundaries, Concurrent concepts)\n- Comprehensive TypeScript types with generics, discriminated unions, strict type safety\n- State management patterns (local state, lifting state, context, reducers)\n- Proper async handling with loading/error/success states (React Query or SWR patterns)\n- Responsive Tailwind-based design, container queries, fluid typography\n- WCAG 2.1 AA compliance (ARIA, keyboard nav, screen reader support)\n- Core Web Vitals considerations\n- Code-splitting with React.lazy and dynamic imports\n- Proper error boundaries and recovery UI\n- Data virtualization/infinite scrolling patterns\n- Memoization patterns to prevent re-renders\n- Form validation with real-time feedback\n- RTL/LTR internationalization support\n- Logging, analytics hooks, and monitoring points\n- Offline support scaffolding (service workers, local storage fallbacks)\n- CSS encapsulation (CSS Modules or CSS-in-JS approach in TSX)\n- Environment variable handling and config management\n- CSP/XSS considerations and frontend sanitization\n- Data sanitization and frontend validation\n- SEO/meta and SSR/SSG readiness guidance\n\nEnd Notes\n- Treat this as a turnkey design-system-first code generator prompt. The output should be immediately runnable in a fresh project skeleton with minimal adjustments.\n- If you need to introduce additional optional enhancements (e.g., Storybook integration, MDX docs, or a simple token-based Figma-to-TS token import), provide optional sections and clear toggle instructions.\n- Prioritize clarity and maintainability; comment generously inside generated files to explain design decisions and token usage.\n\n```\n\n",
  "component_path": "projects/frontend_enhance/generated/section_0_design-system/design-system.tsx"
}