{
  "version": 1,
  "generated_at": "2025-09-30T06:36:21.916497",
  "node_specs": [
    {
      "node_type": "api_job",
      "node_name": "ApiJob",
      "name": "apiJob",
      "display_name": "API Job",
      "category": "integration",
      "description": "Make HTTP API requests",
      "fields": [
        {
          "name": "url",
          "type": "string",
          "python_type": "str",
          "graphql_type": "String",
          "required": true,
          "description": "API endpoint URL",
          "validation": {},
          "uiConfig": {
            "inputType": "text",
            "placeholder": "https://example.com"
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "method",
          "type": "enum",
          "python_type": "apiJobMethodEnum",
          "graphql_type": "apiJobMethodEnum",
          "required": true,
          "description": "HTTP method",
          "validation": {
            "allowedValues": [
              "GET",
              "POST",
              "PUT",
              "DELETE",
              "PATCH"
            ]
          },
          "uiConfig": {
            "inputType": "select",
            "options": [
              {
                "value": "GET",
                "label": "GET"
              },
              {
                "value": "POST",
                "label": "POST"
              },
              {
                "value": "PUT",
                "label": "PUT"
              },
              {
                "value": "DELETE",
                "label": "DELETE"
              },
              {
                "value": "PATCH",
                "label": "PATCH"
              }
            ]
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": true,
          "enum_values": [
            "GET",
            "POST",
            "PUT",
            "DELETE",
            "PATCH"
          ]
        },
        {
          "name": "headers",
          "type": "object",
          "python_type": "Dict[str, Any]",
          "graphql_type": "JSON",
          "required": false,
          "description": "HTTP headers",
          "validation": {},
          "uiConfig": {
            "inputType": "code",
            "collapsible": true
          },
          "default": null,
          "is_object_type": true,
          "is_dict_type": true,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "params",
          "type": "object",
          "python_type": "Dict[str, Any]",
          "graphql_type": "JSON",
          "required": false,
          "description": "Query parameters",
          "validation": {},
          "uiConfig": {
            "inputType": "code",
            "collapsible": true
          },
          "default": null,
          "is_object_type": true,
          "is_dict_type": true,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "body",
          "type": "object",
          "python_type": "Dict[str, Any]",
          "graphql_type": "JSON",
          "required": false,
          "description": "Request body",
          "validation": {},
          "uiConfig": {
            "inputType": "code",
            "collapsible": true
          },
          "default": null,
          "is_object_type": true,
          "is_dict_type": true,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "timeout",
          "type": "number",
          "python_type": "int",
          "graphql_type": "Int",
          "required": false,
          "description": "Request timeout in seconds",
          "validation": {},
          "uiConfig": {
            "inputType": "number",
            "min": 0,
            "max": 3600
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "auth_type",
          "type": "enum",
          "python_type": "apiJobAuth_TypeEnum",
          "graphql_type": "apiJobAuth_TypeEnum",
          "required": false,
          "description": "Authentication type",
          "validation": {
            "allowedValues": [
              "none",
              "bearer",
              "basic",
              "api_key"
            ]
          },
          "uiConfig": {
            "inputType": "select",
            "options": [
              {
                "value": "none",
                "label": "None"
              },
              {
                "value": "bearer",
                "label": "Bearer Token"
              },
              {
                "value": "basic",
                "label": "Basic Auth"
              },
              {
                "value": "api_key",
                "label": "API Key"
              }
            ]
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": true,
          "enum_values": [
            "none",
            "bearer",
            "basic",
            "api_key"
          ]
        },
        {
          "name": "auth_config",
          "type": "object",
          "python_type": "Dict[str, Any]",
          "graphql_type": "JSON",
          "required": false,
          "description": "Authentication configuration",
          "validation": {},
          "uiConfig": {
            "inputType": "code",
            "collapsible": true
          },
          "default": null,
          "is_object_type": true,
          "is_dict_type": true,
          "is_enum": false,
          "enum_values": []
        }
      ],
      "icon": "\ud83c\udf10",
      "color": "#00BCD4",
      "handler_metadata": {
        "modulePath": "dipeo.application.execution.handlers.api_job",
        "className": "ApiJobHandler",
        "mixins": [
          "LoggingMixin",
          "ValidationMixin",
          "ConfigurationMixin"
        ],
        "serviceKeys": [
          "HTTP_CLIENT",
          "STATE_STORE"
        ]
      },
      "spec": {
        "nodeType": "NodeType.API_JOB",
        "displayName": "API Job",
        "category": "integration",
        "description": "Make HTTP API requests",
        "icon": "\ud83c\udf10",
        "color": "#00BCD4",
        "fields": [
          {
            "name": "url",
            "type": "string",
            "python_type": "str",
            "graphql_type": "String",
            "required": true,
            "description": "API endpoint URL",
            "validation": {},
            "uiConfig": {
              "inputType": "text",
              "placeholder": "https://example.com"
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "method",
            "type": "enum",
            "python_type": "apiJobMethodEnum",
            "graphql_type": "apiJobMethodEnum",
            "required": true,
            "description": "HTTP method",
            "validation": {
              "allowedValues": [
                "GET",
                "POST",
                "PUT",
                "DELETE",
                "PATCH"
              ]
            },
            "uiConfig": {
              "inputType": "select",
              "options": [
                {
                  "value": "GET",
                  "label": "GET"
                },
                {
                  "value": "POST",
                  "label": "POST"
                },
                {
                  "value": "PUT",
                  "label": "PUT"
                },
                {
                  "value": "DELETE",
                  "label": "DELETE"
                },
                {
                  "value": "PATCH",
                  "label": "PATCH"
                }
              ]
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": true,
            "enum_values": [
              "GET",
              "POST",
              "PUT",
              "DELETE",
              "PATCH"
            ]
          },
          {
            "name": "headers",
            "type": "object",
            "python_type": "Dict[str, Any]",
            "graphql_type": "JSON",
            "required": false,
            "description": "HTTP headers",
            "validation": {},
            "uiConfig": {
              "inputType": "code",
              "collapsible": true
            },
            "default": null,
            "is_object_type": true,
            "is_dict_type": true,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "params",
            "type": "object",
            "python_type": "Dict[str, Any]",
            "graphql_type": "JSON",
            "required": false,
            "description": "Query parameters",
            "validation": {},
            "uiConfig": {
              "inputType": "code",
              "collapsible": true
            },
            "default": null,
            "is_object_type": true,
            "is_dict_type": true,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "body",
            "type": "object",
            "python_type": "Dict[str, Any]",
            "graphql_type": "JSON",
            "required": false,
            "description": "Request body",
            "validation": {},
            "uiConfig": {
              "inputType": "code",
              "collapsible": true
            },
            "default": null,
            "is_object_type": true,
            "is_dict_type": true,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "timeout",
            "type": "number",
            "python_type": "int",
            "graphql_type": "Int",
            "required": false,
            "description": "Request timeout in seconds",
            "validation": {},
            "uiConfig": {
              "inputType": "number",
              "min": 0,
              "max": 3600
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "auth_type",
            "type": "enum",
            "python_type": "apiJobAuth_TypeEnum",
            "graphql_type": "apiJobAuth_TypeEnum",
            "required": false,
            "description": "Authentication type",
            "validation": {
              "allowedValues": [
                "none",
                "bearer",
                "basic",
                "api_key"
              ]
            },
            "uiConfig": {
              "inputType": "select",
              "options": [
                {
                  "value": "none",
                  "label": "None"
                },
                {
                  "value": "bearer",
                  "label": "Bearer Token"
                },
                {
                  "value": "basic",
                  "label": "Basic Auth"
                },
                {
                  "value": "api_key",
                  "label": "API Key"
                }
              ]
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": true,
            "enum_values": [
              "none",
              "bearer",
              "basic",
              "api_key"
            ]
          },
          {
            "name": "auth_config",
            "type": "object",
            "python_type": "Dict[str, Any]",
            "graphql_type": "JSON",
            "required": false,
            "description": "Authentication configuration",
            "validation": {},
            "uiConfig": {
              "inputType": "code",
              "collapsible": true
            },
            "default": null,
            "is_object_type": true,
            "is_dict_type": true,
            "is_enum": false,
            "enum_values": []
          }
        ],
        "handles": {
          "inputs": [
            "default"
          ],
          "outputs": [
            "default"
          ]
        },
        "outputs": {
          "result": {
            "type": "any",
            "description": "API response data"
          }
        },
        "execution": {
          "timeout": 300,
          "retryable": true,
          "maxRetries": 3
        },
        "primaryDisplayField": "method",
        "defaults": {},
        "handlerMetadata": {
          "modulePath": "dipeo.application.execution.handlers.api_job",
          "className": "ApiJobHandler",
          "mixins": [
            "LoggingMixin",
            "ValidationMixin",
            "ConfigurationMixin"
          ],
          "serviceKeys": [
            "HTTP_CLIENT",
            "STATE_STORE"
          ]
        }
      },
      "raw_spec": {
        "nodeType": "NodeType.API_JOB",
        "displayName": "API Job",
        "category": "integration",
        "icon": "\ud83c\udf10",
        "color": "#00BCD4",
        "description": "Make HTTP API requests",
        "fields": [
          {
            "name": "url",
            "type": "string",
            "required": true,
            "description": "API endpoint URL",
            "uiConfig": {
              "inputType": "text",
              "placeholder": "https://example.com"
            }
          },
          {
            "name": "method",
            "type": "enum",
            "required": true,
            "description": "HTTP method",
            "validation": {
              "allowedValues": [
                "GET",
                "POST",
                "PUT",
                "DELETE",
                "PATCH"
              ]
            },
            "uiConfig": {
              "inputType": "select",
              "options": [
                {
                  "value": "GET",
                  "label": "GET"
                },
                {
                  "value": "POST",
                  "label": "POST"
                },
                {
                  "value": "PUT",
                  "label": "PUT"
                },
                {
                  "value": "DELETE",
                  "label": "DELETE"
                },
                {
                  "value": "PATCH",
                  "label": "PATCH"
                }
              ]
            }
          },
          {
            "name": "headers",
            "type": "object",
            "required": false,
            "description": "HTTP headers",
            "uiConfig": {
              "inputType": "code",
              "collapsible": true
            }
          },
          {
            "name": "params",
            "type": "object",
            "required": false,
            "description": "Query parameters",
            "uiConfig": {
              "inputType": "code",
              "collapsible": true
            }
          },
          {
            "name": "body",
            "type": "object",
            "required": false,
            "description": "Request body",
            "uiConfig": {
              "inputType": "code",
              "collapsible": true
            }
          },
          {
            "name": "timeout",
            "type": "number",
            "required": false,
            "description": "Request timeout in seconds",
            "uiConfig": {
              "inputType": "number",
              "min": 0,
              "max": 3600
            }
          },
          {
            "name": "auth_type",
            "type": "enum",
            "required": false,
            "description": "Authentication type",
            "validation": {
              "allowedValues": [
                "none",
                "bearer",
                "basic",
                "api_key"
              ]
            },
            "uiConfig": {
              "inputType": "select",
              "options": [
                {
                  "value": "none",
                  "label": "None"
                },
                {
                  "value": "bearer",
                  "label": "Bearer Token"
                },
                {
                  "value": "basic",
                  "label": "Basic Auth"
                },
                {
                  "value": "api_key",
                  "label": "API Key"
                }
              ]
            }
          },
          {
            "name": "auth_config",
            "type": "object",
            "required": false,
            "description": "Authentication configuration",
            "uiConfig": {
              "inputType": "code",
              "collapsible": true
            }
          }
        ],
        "handles": {
          "inputs": [
            "default"
          ],
          "outputs": [
            "default"
          ]
        },
        "outputs": {
          "result": {
            "type": "any",
            "description": "API response data"
          }
        },
        "execution": {
          "timeout": 300,
          "retryable": true,
          "maxRetries": 3
        },
        "primaryDisplayField": "method",
        "handlerMetadata": {
          "modulePath": "dipeo.application.execution.handlers.api_job",
          "className": "ApiJobHandler",
          "mixins": [
            "LoggingMixin",
            "ValidationMixin",
            "ConfigurationMixin"
          ],
          "serviceKeys": [
            "HTTP_CLIENT",
            "STATE_STORE"
          ]
        }
      }
    },
    {
      "node_type": "code_job",
      "node_name": "CodeJob",
      "name": "codeJob",
      "display_name": "Code Job",
      "category": "compute",
      "description": "Execute custom code functions",
      "fields": [
        {
          "name": "language",
          "type": "enum",
          "python_type": "codeJobLanguageEnum",
          "graphql_type": "codeJobLanguageEnum",
          "required": true,
          "description": "Programming language",
          "validation": {
            "allowedValues": [
              "python",
              "typescript",
              "bash",
              "shell"
            ]
          },
          "uiConfig": {
            "inputType": "select",
            "options": [
              {
                "value": "python",
                "label": "Python"
              },
              {
                "value": "typescript",
                "label": "TypeScript"
              },
              {
                "value": "bash",
                "label": "Bash"
              },
              {
                "value": "shell",
                "label": "Shell"
              }
            ]
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": true,
          "enum_values": [
            "python",
            "typescript",
            "bash",
            "shell"
          ]
        },
        {
          "name": "filePath",
          "type": "string",
          "python_type": "str",
          "graphql_type": "String",
          "required": false,
          "description": "Path to code file",
          "validation": {},
          "uiConfig": {
            "inputType": "text",
            "placeholder": "/path/to/file"
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "code",
          "type": "string",
          "python_type": "str",
          "graphql_type": "String",
          "required": false,
          "description": "Inline code to execute (alternative to filePath)",
          "validation": {},
          "uiConfig": {
            "inputType": "code",
            "rows": 10,
            "adjustable": true
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "functionName",
          "type": "string",
          "python_type": "str",
          "graphql_type": "String",
          "required": false,
          "description": "Function to execute",
          "validation": {},
          "uiConfig": {
            "inputType": "text"
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "timeout",
          "type": "number",
          "python_type": "int",
          "graphql_type": "Int",
          "required": false,
          "description": "Execution timeout in seconds",
          "validation": {},
          "uiConfig": {
            "inputType": "number",
            "min": 0,
            "max": 3600
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        }
      ],
      "icon": "\ud83d\udcbb",
      "color": "#9C27B0",
      "handler_metadata": {},
      "spec": {
        "nodeType": "NodeType.CODE_JOB",
        "displayName": "Code Job",
        "category": "compute",
        "description": "Execute custom code functions",
        "icon": "\ud83d\udcbb",
        "color": "#9C27B0",
        "fields": [
          {
            "name": "language",
            "type": "enum",
            "python_type": "codeJobLanguageEnum",
            "graphql_type": "codeJobLanguageEnum",
            "required": true,
            "description": "Programming language",
            "validation": {
              "allowedValues": [
                "python",
                "typescript",
                "bash",
                "shell"
              ]
            },
            "uiConfig": {
              "inputType": "select",
              "options": [
                {
                  "value": "python",
                  "label": "Python"
                },
                {
                  "value": "typescript",
                  "label": "TypeScript"
                },
                {
                  "value": "bash",
                  "label": "Bash"
                },
                {
                  "value": "shell",
                  "label": "Shell"
                }
              ]
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": true,
            "enum_values": [
              "python",
              "typescript",
              "bash",
              "shell"
            ]
          },
          {
            "name": "filePath",
            "type": "string",
            "python_type": "str",
            "graphql_type": "String",
            "required": false,
            "description": "Path to code file",
            "validation": {},
            "uiConfig": {
              "inputType": "text",
              "placeholder": "/path/to/file"
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "code",
            "type": "string",
            "python_type": "str",
            "graphql_type": "String",
            "required": false,
            "description": "Inline code to execute (alternative to filePath)",
            "validation": {},
            "uiConfig": {
              "inputType": "code",
              "rows": 10,
              "adjustable": true
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "functionName",
            "type": "string",
            "python_type": "str",
            "graphql_type": "String",
            "required": false,
            "description": "Function to execute",
            "validation": {},
            "uiConfig": {
              "inputType": "text"
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "timeout",
            "type": "number",
            "python_type": "int",
            "graphql_type": "Int",
            "required": false,
            "description": "Execution timeout in seconds",
            "validation": {},
            "uiConfig": {
              "inputType": "number",
              "min": 0,
              "max": 3600
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          }
        ],
        "handles": {
          "inputs": [
            "default"
          ],
          "outputs": [
            "default"
          ]
        },
        "outputs": {
          "result": {
            "type": "any",
            "description": "Code execution result"
          }
        },
        "execution": {
          "timeout": 300,
          "retryable": true,
          "maxRetries": 3
        },
        "primaryDisplayField": "language",
        "defaults": {},
        "handlerMetadata": {}
      },
      "raw_spec": {
        "nodeType": "NodeType.CODE_JOB",
        "displayName": "Code Job",
        "category": "compute",
        "icon": "\ud83d\udcbb",
        "color": "#9C27B0",
        "description": "Execute custom code functions",
        "fields": [
          {
            "name": "language",
            "type": "enum",
            "required": true,
            "description": "Programming language",
            "validation": {
              "allowedValues": [
                "python",
                "typescript",
                "bash",
                "shell"
              ]
            },
            "uiConfig": {
              "inputType": "select",
              "options": [
                {
                  "value": "python",
                  "label": "Python"
                },
                {
                  "value": "typescript",
                  "label": "TypeScript"
                },
                {
                  "value": "bash",
                  "label": "Bash"
                },
                {
                  "value": "shell",
                  "label": "Shell"
                }
              ]
            }
          },
          {
            "name": "filePath",
            "type": "string",
            "required": false,
            "description": "Path to code file",
            "uiConfig": {
              "inputType": "text",
              "placeholder": "/path/to/file"
            }
          },
          {
            "name": "code",
            "type": "string",
            "required": false,
            "description": "Inline code to execute (alternative to filePath)",
            "uiConfig": {
              "inputType": "code",
              "rows": 10,
              "adjustable": true
            }
          },
          {
            "name": "functionName",
            "type": "string",
            "required": false,
            "description": "Function to execute",
            "uiConfig": {
              "inputType": "text"
            }
          },
          {
            "name": "timeout",
            "type": "number",
            "required": false,
            "description": "Execution timeout in seconds",
            "uiConfig": {
              "inputType": "number",
              "min": 0,
              "max": 3600
            }
          }
        ],
        "handles": {
          "inputs": [
            "default"
          ],
          "outputs": [
            "default"
          ]
        },
        "inputPorts": [
          {
            "name": "default",
            "contentType": "object",
            "required": false,
            "description": "Input data passed to the code function"
          },
          {
            "name": "code",
            "contentType": "raw_text",
            "required": true,
            "description": "Code to execute (overrides filePath if provided)"
          }
        ],
        "outputs": {
          "result": {
            "type": "any",
            "description": "Code execution result"
          }
        },
        "execution": {
          "timeout": 300,
          "retryable": true,
          "maxRetries": 3
        },
        "primaryDisplayField": "language"
      }
    },
    {
      "node_type": "condition",
      "node_name": "Condition",
      "name": "condition",
      "display_name": "Condition",
      "category": "control",
      "description": "Conditional branching based on expressions",
      "fields": [
        {
          "name": "condition_type",
          "type": "enum",
          "python_type": "conditionCondition_TypeEnum",
          "graphql_type": "conditionCondition_TypeEnum",
          "required": false,
          "description": "Type of condition to evaluate",
          "validation": {
            "allowedValues": [
              "detect_max_iterations",
              "check_nodes_executed",
              "custom",
              "llm_decision"
            ]
          },
          "uiConfig": {
            "inputType": "select",
            "options": [
              {
                "value": "detect_max_iterations",
                "label": "Detect Max Iterations"
              },
              {
                "value": "check_nodes_executed",
                "label": "Check Nodes Executed"
              },
              {
                "value": "custom",
                "label": "Custom Expression"
              },
              {
                "value": "llm_decision",
                "label": "LLM Decision"
              }
            ]
          },
          "default": "custom",
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": true,
          "enum_values": [
            "detect_max_iterations",
            "check_nodes_executed",
            "custom",
            "llm_decision"
          ]
        },
        {
          "name": "expression",
          "type": "string",
          "python_type": "str",
          "graphql_type": "String",
          "required": false,
          "description": "Boolean expression to evaluate",
          "validation": {},
          "uiConfig": {
            "inputType": "textarea",
            "placeholder": "e.g., inputs.value > 10",
            "rows": 3
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "node_indices",
          "type": "array",
          "python_type": "List[Any]",
          "graphql_type": "[JSON]",
          "required": false,
          "description": "Node indices for detect_max_iteration condition",
          "validation": {
            "itemType": "string"
          },
          "uiConfig": {
            "inputType": "nodeSelect",
            "placeholder": "Select nodes to monitor"
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "person",
          "type": "string",
          "python_type": "str",
          "graphql_type": "String",
          "required": false,
          "description": "AI agent to use for decision making",
          "validation": {},
          "uiConfig": {
            "inputType": "personSelect",
            "placeholder": "Select AI agent"
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "judge_by",
          "type": "string",
          "python_type": "str",
          "graphql_type": "String",
          "required": false,
          "description": "Prompt for LLM to make a judgment",
          "validation": {},
          "uiConfig": {
            "inputType": "textarea",
            "placeholder": "Enter the prompt for LLM to judge (should result in YES/NO)",
            "rows": 5
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "judge_by_file",
          "type": "string",
          "python_type": "str",
          "graphql_type": "String",
          "required": false,
          "description": "External prompt file path",
          "validation": {},
          "uiConfig": {
            "inputType": "text",
            "placeholder": "e.g., prompts/quality_check.txt"
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "memorize_to",
          "type": "string",
          "python_type": "str",
          "graphql_type": "String",
          "required": false,
          "description": "Memory control strategy (e.g., GOLDFISH for fresh evaluation)",
          "validation": {},
          "uiConfig": {
            "inputType": "text",
            "placeholder": "e.g., GOLDFISH"
          },
          "default": "GOLDFISH",
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "at_most",
          "type": "number",
          "python_type": "int",
          "graphql_type": "Int",
          "required": false,
          "description": "Maximum messages to keep in memory",
          "validation": {},
          "uiConfig": {
            "inputType": "number",
            "placeholder": "e.g., 10"
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "expose_index_as",
          "type": "string",
          "python_type": "str",
          "graphql_type": "String",
          "required": false,
          "description": "Variable name to expose the condition node's execution count (0-based index) to downstream nodes",
          "validation": {},
          "uiConfig": {
            "inputType": "text",
            "placeholder": "e.g., current_index, loop_counter"
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "skippable",
          "type": "boolean",
          "python_type": "bool",
          "graphql_type": "Boolean",
          "required": false,
          "description": "When true, downstream nodes can execute even if this condition hasn't been evaluated yet",
          "validation": {},
          "uiConfig": {
            "inputType": "checkbox"
          },
          "default": false,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        }
      ],
      "icon": "\ud83d\udd00",
      "color": "#FF9800",
      "handler_metadata": {},
      "spec": {
        "nodeType": "NodeType.CONDITION",
        "displayName": "Condition",
        "category": "control",
        "description": "Conditional branching based on expressions",
        "icon": "\ud83d\udd00",
        "color": "#FF9800",
        "fields": [
          {
            "name": "condition_type",
            "type": "enum",
            "python_type": "conditionCondition_TypeEnum",
            "graphql_type": "conditionCondition_TypeEnum",
            "required": false,
            "description": "Type of condition to evaluate",
            "validation": {
              "allowedValues": [
                "detect_max_iterations",
                "check_nodes_executed",
                "custom",
                "llm_decision"
              ]
            },
            "uiConfig": {
              "inputType": "select",
              "options": [
                {
                  "value": "detect_max_iterations",
                  "label": "Detect Max Iterations"
                },
                {
                  "value": "check_nodes_executed",
                  "label": "Check Nodes Executed"
                },
                {
                  "value": "custom",
                  "label": "Custom Expression"
                },
                {
                  "value": "llm_decision",
                  "label": "LLM Decision"
                }
              ]
            },
            "default": "custom",
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": true,
            "enum_values": [
              "detect_max_iterations",
              "check_nodes_executed",
              "custom",
              "llm_decision"
            ]
          },
          {
            "name": "expression",
            "type": "string",
            "python_type": "str",
            "graphql_type": "String",
            "required": false,
            "description": "Boolean expression to evaluate",
            "validation": {},
            "uiConfig": {
              "inputType": "textarea",
              "placeholder": "e.g., inputs.value > 10",
              "rows": 3
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "node_indices",
            "type": "array",
            "python_type": "List[Any]",
            "graphql_type": "[JSON]",
            "required": false,
            "description": "Node indices for detect_max_iteration condition",
            "validation": {
              "itemType": "string"
            },
            "uiConfig": {
              "inputType": "nodeSelect",
              "placeholder": "Select nodes to monitor"
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "person",
            "type": "string",
            "python_type": "str",
            "graphql_type": "String",
            "required": false,
            "description": "AI agent to use for decision making",
            "validation": {},
            "uiConfig": {
              "inputType": "personSelect",
              "placeholder": "Select AI agent"
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "judge_by",
            "type": "string",
            "python_type": "str",
            "graphql_type": "String",
            "required": false,
            "description": "Prompt for LLM to make a judgment",
            "validation": {},
            "uiConfig": {
              "inputType": "textarea",
              "placeholder": "Enter the prompt for LLM to judge (should result in YES/NO)",
              "rows": 5
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "judge_by_file",
            "type": "string",
            "python_type": "str",
            "graphql_type": "String",
            "required": false,
            "description": "External prompt file path",
            "validation": {},
            "uiConfig": {
              "inputType": "text",
              "placeholder": "e.g., prompts/quality_check.txt"
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "memorize_to",
            "type": "string",
            "python_type": "str",
            "graphql_type": "String",
            "required": false,
            "description": "Memory control strategy (e.g., GOLDFISH for fresh evaluation)",
            "validation": {},
            "uiConfig": {
              "inputType": "text",
              "placeholder": "e.g., GOLDFISH"
            },
            "default": "GOLDFISH",
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "at_most",
            "type": "number",
            "python_type": "int",
            "graphql_type": "Int",
            "required": false,
            "description": "Maximum messages to keep in memory",
            "validation": {},
            "uiConfig": {
              "inputType": "number",
              "placeholder": "e.g., 10"
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "expose_index_as",
            "type": "string",
            "python_type": "str",
            "graphql_type": "String",
            "required": false,
            "description": "Variable name to expose the condition node's execution count (0-based index) to downstream nodes",
            "validation": {},
            "uiConfig": {
              "inputType": "text",
              "placeholder": "e.g., current_index, loop_counter"
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "skippable",
            "type": "boolean",
            "python_type": "bool",
            "graphql_type": "Boolean",
            "required": false,
            "description": "When true, downstream nodes can execute even if this condition hasn't been evaluated yet",
            "validation": {},
            "uiConfig": {
              "inputType": "checkbox"
            },
            "default": false,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          }
        ],
        "handles": {
          "inputs": [
            "default"
          ],
          "outputs": [
            "condtrue",
            "condfalse"
          ]
        },
        "outputs": {
          "true": {
            "type": "any",
            "description": "Output when condition is true"
          },
          "false": {
            "type": "any",
            "description": "Output when condition is false"
          }
        },
        "execution": {
          "timeout": 300,
          "retryable": true,
          "maxRetries": 3
        },
        "primaryDisplayField": "condition_type",
        "defaults": {},
        "handlerMetadata": {}
      },
      "raw_spec": {
        "nodeType": "NodeType.CONDITION",
        "displayName": "Condition",
        "category": "control",
        "icon": "\ud83d\udd00",
        "color": "#FF9800",
        "description": "Conditional branching based on expressions",
        "fields": [
          {
            "name": "condition_type",
            "type": "enum",
            "required": false,
            "defaultValue": "custom",
            "description": "Type of condition to evaluate",
            "validation": {
              "allowedValues": [
                "detect_max_iterations",
                "check_nodes_executed",
                "custom",
                "llm_decision"
              ]
            },
            "uiConfig": {
              "inputType": "select",
              "options": [
                {
                  "value": "detect_max_iterations",
                  "label": "Detect Max Iterations"
                },
                {
                  "value": "check_nodes_executed",
                  "label": "Check Nodes Executed"
                },
                {
                  "value": "custom",
                  "label": "Custom Expression"
                },
                {
                  "value": "llm_decision",
                  "label": "LLM Decision"
                }
              ]
            }
          },
          {
            "name": "expression",
            "type": "string",
            "required": false,
            "description": "Boolean expression to evaluate",
            "conditional": {
              "field": "condition_type",
              "values": [
                "custom"
              ]
            },
            "uiConfig": {
              "inputType": "textarea",
              "placeholder": "e.g., inputs.value > 10",
              "rows": 3
            }
          },
          {
            "name": "node_indices",
            "type": "array",
            "required": false,
            "description": "Node indices for detect_max_iteration condition",
            "conditional": {
              "field": "condition_type",
              "values": [
                "detect_max_iterations",
                "check_nodes_executed"
              ]
            },
            "validation": {
              "itemType": "string"
            },
            "uiConfig": {
              "inputType": "nodeSelect",
              "placeholder": "Select nodes to monitor"
            }
          },
          {
            "name": "person",
            "type": "string",
            "required": false,
            "description": "AI agent to use for decision making",
            "conditional": {
              "field": "condition_type",
              "values": [
                "llm_decision"
              ]
            },
            "uiConfig": {
              "inputType": "personSelect",
              "placeholder": "Select AI agent"
            }
          },
          {
            "name": "judge_by",
            "type": "string",
            "required": false,
            "description": "Prompt for LLM to make a judgment",
            "conditional": {
              "field": "condition_type",
              "values": [
                "llm_decision"
              ]
            },
            "uiConfig": {
              "inputType": "textarea",
              "placeholder": "Enter the prompt for LLM to judge (should result in YES/NO)",
              "rows": 5
            }
          },
          {
            "name": "judge_by_file",
            "type": "string",
            "required": false,
            "description": "External prompt file path",
            "conditional": {
              "field": "condition_type",
              "values": [
                "llm_decision"
              ]
            },
            "uiConfig": {
              "inputType": "text",
              "placeholder": "e.g., prompts/quality_check.txt"
            }
          },
          {
            "name": "memorize_to",
            "type": "string",
            "required": false,
            "defaultValue": "GOLDFISH",
            "description": "Memory control strategy (e.g., GOLDFISH for fresh evaluation)",
            "conditional": {
              "field": "condition_type",
              "values": [
                "llm_decision"
              ]
            },
            "uiConfig": {
              "inputType": "text",
              "placeholder": "e.g., GOLDFISH"
            }
          },
          {
            "name": "at_most",
            "type": "number",
            "required": false,
            "description": "Maximum messages to keep in memory",
            "conditional": {
              "field": "condition_type",
              "values": [
                "llm_decision"
              ]
            },
            "uiConfig": {
              "inputType": "number",
              "placeholder": "e.g., 10"
            }
          },
          {
            "name": "expose_index_as",
            "type": "string",
            "required": false,
            "description": "Variable name to expose the condition node's execution count (0-based index) to downstream nodes",
            "uiConfig": {
              "inputType": "text",
              "placeholder": "e.g., current_index, loop_counter"
            }
          },
          {
            "name": "skippable",
            "type": "boolean",
            "required": false,
            "defaultValue": false,
            "description": "When true, downstream nodes can execute even if this condition hasn't been evaluated yet",
            "uiConfig": {
              "inputType": "checkbox"
            }
          }
        ],
        "handles": {
          "inputs": [
            "default"
          ],
          "outputs": [
            "condtrue",
            "condfalse"
          ]
        },
        "outputs": {
          "true": {
            "type": "any",
            "description": "Output when condition is true"
          },
          "false": {
            "type": "any",
            "description": "Output when condition is false"
          }
        },
        "execution": {
          "timeout": 300,
          "retryable": true,
          "maxRetries": 3
        },
        "primaryDisplayField": "condition_type"
      }
    },
    {
      "node_type": "db",
      "node_name": "Db",
      "name": "db",
      "display_name": "Database",
      "category": "integration",
      "description": "Database operations",
      "fields": [
        {
          "name": "file",
          "type": "any",
          "python_type": "Any",
          "graphql_type": "JSONScalar",
          "required": false,
          "description": "File path or array of file paths",
          "validation": {},
          "uiConfig": {
            "inputType": "text"
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "collection",
          "type": "string",
          "python_type": "str",
          "graphql_type": "String",
          "required": false,
          "description": "Database collection name",
          "validation": {},
          "uiConfig": {
            "inputType": "text"
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "sub_type",
          "type": "enum",
          "python_type": "dbSub_TypeEnum",
          "graphql_type": "dbSub_TypeEnum",
          "required": true,
          "description": "Database operation type",
          "validation": {
            "allowedValues": [
              "fixed_prompt",
              "file",
              "code",
              "api_tool"
            ]
          },
          "uiConfig": {
            "inputType": "select",
            "options": [
              {
                "value": "fixed_prompt",
                "label": "Fixed Prompt"
              },
              {
                "value": "file",
                "label": "File"
              },
              {
                "value": "code",
                "label": "Code"
              },
              {
                "value": "api_tool",
                "label": "API Tool"
              }
            ]
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": true,
          "enum_values": [
            "fixed_prompt",
            "file",
            "code",
            "api_tool"
          ]
        },
        {
          "name": "operation",
          "type": "string",
          "python_type": "str",
          "graphql_type": "String",
          "required": true,
          "description": "Operation configuration",
          "validation": {
            "allowedValues": [
              "prompt",
              "read",
              "write",
              "append",
              "update"
            ]
          },
          "uiConfig": {
            "inputType": "text"
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": true,
          "enum_values": [
            "prompt",
            "read",
            "write",
            "append",
            "update"
          ]
        },
        {
          "name": "query",
          "type": "string",
          "python_type": "str",
          "graphql_type": "String",
          "required": false,
          "description": "Query configuration",
          "validation": {},
          "uiConfig": {
            "inputType": "text"
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "keys",
          "type": "any",
          "python_type": "Any",
          "graphql_type": "JSONScalar",
          "required": false,
          "description": "Single key or list of dot-separated keys to target within the JSON payload",
          "validation": {},
          "uiConfig": {
            "inputType": "text",
            "placeholder": "e.g., user.profile.name or key1,key2"
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "lines",
          "type": "any",
          "python_type": "Any",
          "graphql_type": "JSONScalar",
          "required": false,
          "description": "Line selection or ranges to read (e.g., 1:120 or ['10:20'])",
          "validation": {},
          "uiConfig": {
            "inputType": "text",
            "placeholder": "e.g., 1:120 or 5,10:20"
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "data",
          "type": "object",
          "python_type": "Dict[str, Any]",
          "graphql_type": "JSON",
          "required": false,
          "description": "Data configuration",
          "validation": {},
          "uiConfig": {
            "inputType": "code",
            "collapsible": true
          },
          "default": null,
          "is_object_type": true,
          "is_dict_type": true,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "serialize_json",
          "type": "boolean",
          "python_type": "bool",
          "graphql_type": "Boolean",
          "required": false,
          "description": "Serialize structured data to JSON string (for backward compatibility)",
          "validation": {},
          "uiConfig": {
            "inputType": "checkbox"
          },
          "default": false,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "format",
          "type": "string",
          "python_type": "str",
          "graphql_type": "String",
          "required": false,
          "description": "Data format (json, yaml, csv, text, etc.)",
          "validation": {},
          "uiConfig": {
            "inputType": "select",
            "options": [
              {
                "value": "json",
                "label": "JSON"
              },
              {
                "value": "yaml",
                "label": "YAML"
              },
              {
                "value": "csv",
                "label": "CSV"
              },
              {
                "value": "text",
                "label": "Text"
              },
              {
                "value": "xml",
                "label": "XML"
              }
            ]
          },
          "default": "json",
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        }
      ],
      "icon": "\ud83d\uddc4\ufe0f",
      "color": "#795548",
      "handler_metadata": {},
      "spec": {
        "nodeType": "NodeType.DB",
        "displayName": "Database",
        "category": "integration",
        "description": "Database operations",
        "icon": "\ud83d\uddc4\ufe0f",
        "color": "#795548",
        "fields": [
          {
            "name": "file",
            "type": "any",
            "python_type": "Any",
            "graphql_type": "JSONScalar",
            "required": false,
            "description": "File path or array of file paths",
            "validation": {},
            "uiConfig": {
              "inputType": "text"
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "collection",
            "type": "string",
            "python_type": "str",
            "graphql_type": "String",
            "required": false,
            "description": "Database collection name",
            "validation": {},
            "uiConfig": {
              "inputType": "text"
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "sub_type",
            "type": "enum",
            "python_type": "dbSub_TypeEnum",
            "graphql_type": "dbSub_TypeEnum",
            "required": true,
            "description": "Database operation type",
            "validation": {
              "allowedValues": [
                "fixed_prompt",
                "file",
                "code",
                "api_tool"
              ]
            },
            "uiConfig": {
              "inputType": "select",
              "options": [
                {
                  "value": "fixed_prompt",
                  "label": "Fixed Prompt"
                },
                {
                  "value": "file",
                  "label": "File"
                },
                {
                  "value": "code",
                  "label": "Code"
                },
                {
                  "value": "api_tool",
                  "label": "API Tool"
                }
              ]
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": true,
            "enum_values": [
              "fixed_prompt",
              "file",
              "code",
              "api_tool"
            ]
          },
          {
            "name": "operation",
            "type": "string",
            "python_type": "str",
            "graphql_type": "String",
            "required": true,
            "description": "Operation configuration",
            "validation": {
              "allowedValues": [
                "prompt",
                "read",
                "write",
                "append",
                "update"
              ]
            },
            "uiConfig": {
              "inputType": "text"
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": true,
            "enum_values": [
              "prompt",
              "read",
              "write",
              "append",
              "update"
            ]
          },
          {
            "name": "query",
            "type": "string",
            "python_type": "str",
            "graphql_type": "String",
            "required": false,
            "description": "Query configuration",
            "validation": {},
            "uiConfig": {
              "inputType": "text"
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "keys",
            "type": "any",
            "python_type": "Any",
            "graphql_type": "JSONScalar",
            "required": false,
            "description": "Single key or list of dot-separated keys to target within the JSON payload",
            "validation": {},
            "uiConfig": {
              "inputType": "text",
              "placeholder": "e.g., user.profile.name or key1,key2"
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "lines",
            "type": "any",
            "python_type": "Any",
            "graphql_type": "JSONScalar",
            "required": false,
            "description": "Line selection or ranges to read (e.g., 1:120 or ['10:20'])",
            "validation": {},
            "uiConfig": {
              "inputType": "text",
              "placeholder": "e.g., 1:120 or 5,10:20"
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "data",
            "type": "object",
            "python_type": "Dict[str, Any]",
            "graphql_type": "JSON",
            "required": false,
            "description": "Data configuration",
            "validation": {},
            "uiConfig": {
              "inputType": "code",
              "collapsible": true
            },
            "default": null,
            "is_object_type": true,
            "is_dict_type": true,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "serialize_json",
            "type": "boolean",
            "python_type": "bool",
            "graphql_type": "Boolean",
            "required": false,
            "description": "Serialize structured data to JSON string (for backward compatibility)",
            "validation": {},
            "uiConfig": {
              "inputType": "checkbox"
            },
            "default": false,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "format",
            "type": "string",
            "python_type": "str",
            "graphql_type": "String",
            "required": false,
            "description": "Data format (json, yaml, csv, text, etc.)",
            "validation": {},
            "uiConfig": {
              "inputType": "select",
              "options": [
                {
                  "value": "json",
                  "label": "JSON"
                },
                {
                  "value": "yaml",
                  "label": "YAML"
                },
                {
                  "value": "csv",
                  "label": "CSV"
                },
                {
                  "value": "text",
                  "label": "Text"
                },
                {
                  "value": "xml",
                  "label": "XML"
                }
              ]
            },
            "default": "json",
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          }
        ],
        "handles": {
          "inputs": [
            "default"
          ],
          "outputs": [
            "default"
          ]
        },
        "outputs": {
          "result": {
            "type": "any",
            "description": "Node execution result"
          }
        },
        "execution": {
          "timeout": 300,
          "retryable": true,
          "maxRetries": 3
        },
        "primaryDisplayField": "operation",
        "defaults": {},
        "handlerMetadata": {}
      },
      "raw_spec": {
        "nodeType": "NodeType.DB",
        "displayName": "Database",
        "category": "integration",
        "icon": "\ud83d\uddc4\ufe0f",
        "color": "#795548",
        "description": "Database operations",
        "fields": [
          {
            "name": "file",
            "type": "any",
            "required": false,
            "description": "File path or array of file paths",
            "uiConfig": {
              "inputType": "text"
            }
          },
          {
            "name": "collection",
            "type": "string",
            "required": false,
            "description": "Database collection name",
            "uiConfig": {
              "inputType": "text"
            }
          },
          {
            "name": "sub_type",
            "type": "enum",
            "required": true,
            "description": "Database operation type",
            "validation": {
              "allowedValues": [
                "fixed_prompt",
                "file",
                "code",
                "api_tool"
              ]
            },
            "uiConfig": {
              "inputType": "select",
              "options": [
                {
                  "value": "fixed_prompt",
                  "label": "Fixed Prompt"
                },
                {
                  "value": "file",
                  "label": "File"
                },
                {
                  "value": "code",
                  "label": "Code"
                },
                {
                  "value": "api_tool",
                  "label": "API Tool"
                }
              ]
            }
          },
          {
            "name": "operation",
            "type": "string",
            "required": true,
            "description": "Operation configuration",
            "validation": {
              "allowedValues": [
                "prompt",
                "read",
                "write",
                "append",
                "update"
              ]
            },
            "uiConfig": {
              "inputType": "text"
            }
          },
          {
            "name": "query",
            "type": "string",
            "required": false,
            "description": "Query configuration",
            "uiConfig": {
              "inputType": "text"
            }
          },
          {
            "name": "keys",
            "type": "any",
            "required": false,
            "description": "Single key or list of dot-separated keys to target within the JSON payload",
            "uiConfig": {
              "inputType": "text",
              "placeholder": "e.g., user.profile.name or key1,key2"
            }
          },
          {
            "name": "lines",
            "type": "any",
            "required": false,
            "description": "Line selection or ranges to read (e.g., 1:120 or ['10:20'])",
            "uiConfig": {
              "inputType": "text",
              "placeholder": "e.g., 1:120 or 5,10:20"
            }
          },
          {
            "name": "data",
            "type": "object",
            "required": false,
            "description": "Data configuration",
            "uiConfig": {
              "inputType": "code",
              "collapsible": true
            }
          },
          {
            "name": "serialize_json",
            "type": "boolean",
            "required": false,
            "description": "Serialize structured data to JSON string (for backward compatibility)",
            "defaultValue": false,
            "uiConfig": {
              "inputType": "checkbox"
            }
          },
          {
            "name": "format",
            "type": "string",
            "required": false,
            "description": "Data format (json, yaml, csv, text, etc.)",
            "defaultValue": "json",
            "uiConfig": {
              "inputType": "select",
              "options": [
                {
                  "value": "json",
                  "label": "JSON"
                },
                {
                  "value": "yaml",
                  "label": "YAML"
                },
                {
                  "value": "csv",
                  "label": "CSV"
                },
                {
                  "value": "text",
                  "label": "Text"
                },
                {
                  "value": "xml",
                  "label": "XML"
                }
              ]
            }
          }
        ],
        "handles": {
          "inputs": [
            "default"
          ],
          "outputs": [
            "default"
          ]
        },
        "outputs": {
          "result": {
            "type": "any",
            "description": "Node execution result"
          }
        },
        "execution": {
          "timeout": 300,
          "retryable": true,
          "maxRetries": 3
        },
        "primaryDisplayField": "operation"
      }
    },
    {
      "node_type": "diff_patch",
      "node_name": "DiffPatch",
      "name": "diffPatch",
      "display_name": "Diff/Patch",
      "category": "utility",
      "description": "Apply unified diffs to files with safety controls",
      "fields": [
        {
          "name": "target_path",
          "type": "string",
          "python_type": "str",
          "graphql_type": "String",
          "required": true,
          "description": "Path to the file to patch",
          "validation": {},
          "uiConfig": {
            "inputType": "text",
            "placeholder": "/path/to/file.txt"
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "diff",
          "type": "string",
          "python_type": "str",
          "graphql_type": "String",
          "required": true,
          "description": "Unified diff content to apply",
          "validation": {},
          "uiConfig": {
            "inputType": "code",
            "collapsible": true,
            "rows": 15,
            "placeholder": "--- a/file.txt\n+++ b/file.txt\n@@ -1,3 +1,3 @@\n line1\n-old line\n+new line\n line3"
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "format",
          "type": "enum",
          "python_type": "diffPatchFormatEnum",
          "graphql_type": "diffPatchFormatEnum",
          "required": false,
          "description": "Diff format type",
          "validation": {
            "allowedValues": [
              "unified",
              "git",
              "context",
              "ed",
              "normal"
            ]
          },
          "uiConfig": {
            "inputType": "select",
            "options": [
              {
                "value": "unified",
                "label": "Unified"
              },
              {
                "value": "git",
                "label": "Git"
              },
              {
                "value": "context",
                "label": "Context"
              },
              {
                "value": "ed",
                "label": "Ed Script"
              },
              {
                "value": "normal",
                "label": "Normal"
              }
            ]
          },
          "default": "unified",
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": true,
          "enum_values": [
            "unified",
            "git",
            "context",
            "ed",
            "normal"
          ]
        },
        {
          "name": "apply_mode",
          "type": "enum",
          "python_type": "diffPatchApply_ModeEnum",
          "graphql_type": "diffPatchApply_ModeEnum",
          "required": false,
          "description": "How to apply the patch",
          "validation": {
            "allowedValues": [
              "normal",
              "force",
              "dry_run",
              "reverse"
            ]
          },
          "uiConfig": {
            "inputType": "select",
            "options": [
              {
                "value": "normal",
                "label": "Normal"
              },
              {
                "value": "force",
                "label": "Force"
              },
              {
                "value": "dry_run",
                "label": "Dry Run"
              },
              {
                "value": "reverse",
                "label": "Reverse"
              }
            ]
          },
          "default": "normal",
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": true,
          "enum_values": [
            "normal",
            "force",
            "dry_run",
            "reverse"
          ]
        },
        {
          "name": "backup",
          "type": "boolean",
          "python_type": "bool",
          "graphql_type": "Boolean",
          "required": false,
          "description": "Create backup before patching",
          "validation": {},
          "uiConfig": {
            "inputType": "checkbox"
          },
          "default": true,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "validate_patch",
          "type": "boolean",
          "python_type": "bool",
          "graphql_type": "Boolean",
          "required": false,
          "description": "Validate patch before applying",
          "validation": {},
          "uiConfig": {
            "inputType": "checkbox"
          },
          "default": true,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "backup_dir",
          "type": "string",
          "python_type": "str",
          "graphql_type": "String",
          "required": false,
          "description": "Directory for backup files",
          "validation": {},
          "uiConfig": {
            "inputType": "text",
            "placeholder": "/tmp/backups"
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "strip_level",
          "type": "number",
          "python_type": "int",
          "graphql_type": "Int",
          "required": false,
          "description": "Strip N leading path components (like patch -pN)",
          "validation": {
            "min": 0,
            "max": 10
          },
          "uiConfig": {
            "inputType": "number",
            "min": 0,
            "max": 10
          },
          "default": 1,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "fuzz_factor",
          "type": "number",
          "python_type": "int",
          "graphql_type": "Int",
          "required": false,
          "description": "Number of lines that can be ignored when matching context",
          "validation": {
            "min": 0,
            "max": 100
          },
          "uiConfig": {
            "inputType": "number",
            "min": 0,
            "max": 100
          },
          "default": 2,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "reject_file",
          "type": "string",
          "python_type": "str",
          "graphql_type": "String",
          "required": false,
          "description": "Path to save rejected hunks",
          "validation": {},
          "uiConfig": {
            "inputType": "text",
            "placeholder": "/tmp/patch.reject"
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "ignore_whitespace",
          "type": "boolean",
          "python_type": "bool",
          "graphql_type": "Boolean",
          "required": false,
          "description": "Ignore whitespace changes when matching",
          "validation": {},
          "uiConfig": {
            "inputType": "checkbox"
          },
          "default": false,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "create_missing",
          "type": "boolean",
          "python_type": "bool",
          "graphql_type": "Boolean",
          "required": false,
          "description": "Create target file if it doesn't exist",
          "validation": {},
          "uiConfig": {
            "inputType": "checkbox"
          },
          "default": false,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        }
      ],
      "icon": "\ud83d\udd27",
      "color": "#9C27B0",
      "handler_metadata": {},
      "spec": {
        "nodeType": "NodeType.DIFF_PATCH",
        "displayName": "Diff/Patch",
        "category": "utility",
        "description": "Apply unified diffs to files with safety controls",
        "icon": "\ud83d\udd27",
        "color": "#9C27B0",
        "fields": [
          {
            "name": "target_path",
            "type": "string",
            "python_type": "str",
            "graphql_type": "String",
            "required": true,
            "description": "Path to the file to patch",
            "validation": {},
            "uiConfig": {
              "inputType": "text",
              "placeholder": "/path/to/file.txt"
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "diff",
            "type": "string",
            "python_type": "str",
            "graphql_type": "String",
            "required": true,
            "description": "Unified diff content to apply",
            "validation": {},
            "uiConfig": {
              "inputType": "code",
              "collapsible": true,
              "rows": 15,
              "placeholder": "--- a/file.txt\n+++ b/file.txt\n@@ -1,3 +1,3 @@\n line1\n-old line\n+new line\n line3"
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "format",
            "type": "enum",
            "python_type": "diffPatchFormatEnum",
            "graphql_type": "diffPatchFormatEnum",
            "required": false,
            "description": "Diff format type",
            "validation": {
              "allowedValues": [
                "unified",
                "git",
                "context",
                "ed",
                "normal"
              ]
            },
            "uiConfig": {
              "inputType": "select",
              "options": [
                {
                  "value": "unified",
                  "label": "Unified"
                },
                {
                  "value": "git",
                  "label": "Git"
                },
                {
                  "value": "context",
                  "label": "Context"
                },
                {
                  "value": "ed",
                  "label": "Ed Script"
                },
                {
                  "value": "normal",
                  "label": "Normal"
                }
              ]
            },
            "default": "unified",
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": true,
            "enum_values": [
              "unified",
              "git",
              "context",
              "ed",
              "normal"
            ]
          },
          {
            "name": "apply_mode",
            "type": "enum",
            "python_type": "diffPatchApply_ModeEnum",
            "graphql_type": "diffPatchApply_ModeEnum",
            "required": false,
            "description": "How to apply the patch",
            "validation": {
              "allowedValues": [
                "normal",
                "force",
                "dry_run",
                "reverse"
              ]
            },
            "uiConfig": {
              "inputType": "select",
              "options": [
                {
                  "value": "normal",
                  "label": "Normal"
                },
                {
                  "value": "force",
                  "label": "Force"
                },
                {
                  "value": "dry_run",
                  "label": "Dry Run"
                },
                {
                  "value": "reverse",
                  "label": "Reverse"
                }
              ]
            },
            "default": "normal",
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": true,
            "enum_values": [
              "normal",
              "force",
              "dry_run",
              "reverse"
            ]
          },
          {
            "name": "backup",
            "type": "boolean",
            "python_type": "bool",
            "graphql_type": "Boolean",
            "required": false,
            "description": "Create backup before patching",
            "validation": {},
            "uiConfig": {
              "inputType": "checkbox"
            },
            "default": true,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "validate_patch",
            "type": "boolean",
            "python_type": "bool",
            "graphql_type": "Boolean",
            "required": false,
            "description": "Validate patch before applying",
            "validation": {},
            "uiConfig": {
              "inputType": "checkbox"
            },
            "default": true,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "backup_dir",
            "type": "string",
            "python_type": "str",
            "graphql_type": "String",
            "required": false,
            "description": "Directory for backup files",
            "validation": {},
            "uiConfig": {
              "inputType": "text",
              "placeholder": "/tmp/backups"
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "strip_level",
            "type": "number",
            "python_type": "int",
            "graphql_type": "Int",
            "required": false,
            "description": "Strip N leading path components (like patch -pN)",
            "validation": {
              "min": 0,
              "max": 10
            },
            "uiConfig": {
              "inputType": "number",
              "min": 0,
              "max": 10
            },
            "default": 1,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "fuzz_factor",
            "type": "number",
            "python_type": "int",
            "graphql_type": "Int",
            "required": false,
            "description": "Number of lines that can be ignored when matching context",
            "validation": {
              "min": 0,
              "max": 100
            },
            "uiConfig": {
              "inputType": "number",
              "min": 0,
              "max": 100
            },
            "default": 2,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "reject_file",
            "type": "string",
            "python_type": "str",
            "graphql_type": "String",
            "required": false,
            "description": "Path to save rejected hunks",
            "validation": {},
            "uiConfig": {
              "inputType": "text",
              "placeholder": "/tmp/patch.reject"
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "ignore_whitespace",
            "type": "boolean",
            "python_type": "bool",
            "graphql_type": "Boolean",
            "required": false,
            "description": "Ignore whitespace changes when matching",
            "validation": {},
            "uiConfig": {
              "inputType": "checkbox"
            },
            "default": false,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "create_missing",
            "type": "boolean",
            "python_type": "bool",
            "graphql_type": "Boolean",
            "required": false,
            "description": "Create target file if it doesn't exist",
            "validation": {},
            "uiConfig": {
              "inputType": "checkbox"
            },
            "default": false,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          }
        ],
        "handles": {
          "inputs": [
            "default"
          ],
          "outputs": [
            "success",
            "error"
          ]
        },
        "outputs": {
          "result": {
            "type": "any",
            "description": "Patch application result with status, modified files, and rejected hunks"
          },
          "backup_path": {
            "type": "any",
            "description": "Path to backup file if created"
          },
          "rejected_hunks": {
            "type": "any",
            "description": "List of hunks that couldn't be applied"
          },
          "file_hash": {
            "type": "any",
            "description": "Hash of the patched file for verification"
          }
        },
        "execution": {
          "timeout": 60,
          "retryable": true,
          "maxRetries": 2
        },
        "primaryDisplayField": "target_path",
        "defaults": {},
        "handlerMetadata": {}
      },
      "raw_spec": {
        "nodeType": "NodeType.DIFF_PATCH",
        "displayName": "Diff/Patch",
        "category": "utility",
        "icon": "\ud83d\udd27",
        "color": "#9C27B0",
        "description": "Apply unified diffs to files with safety controls",
        "fields": [
          {
            "name": "target_path",
            "type": "string",
            "required": true,
            "description": "Path to the file to patch",
            "uiConfig": {
              "inputType": "text",
              "placeholder": "/path/to/file.txt"
            }
          },
          {
            "name": "diff",
            "type": "string",
            "required": true,
            "description": "Unified diff content to apply",
            "uiConfig": {
              "inputType": "code",
              "collapsible": true,
              "rows": 15,
              "placeholder": "--- a/file.txt\n+++ b/file.txt\n@@ -1,3 +1,3 @@\n line1\n-old line\n+new line\n line3"
            }
          },
          {
            "name": "format",
            "type": "enum",
            "required": false,
            "description": "Diff format type",
            "defaultValue": "unified",
            "validation": {
              "allowedValues": [
                "unified",
                "git",
                "context",
                "ed",
                "normal"
              ]
            },
            "uiConfig": {
              "inputType": "select",
              "options": [
                {
                  "value": "unified",
                  "label": "Unified"
                },
                {
                  "value": "git",
                  "label": "Git"
                },
                {
                  "value": "context",
                  "label": "Context"
                },
                {
                  "value": "ed",
                  "label": "Ed Script"
                },
                {
                  "value": "normal",
                  "label": "Normal"
                }
              ]
            }
          },
          {
            "name": "apply_mode",
            "type": "enum",
            "required": false,
            "description": "How to apply the patch",
            "defaultValue": "normal",
            "validation": {
              "allowedValues": [
                "normal",
                "force",
                "dry_run",
                "reverse"
              ]
            },
            "uiConfig": {
              "inputType": "select",
              "options": [
                {
                  "value": "normal",
                  "label": "Normal"
                },
                {
                  "value": "force",
                  "label": "Force"
                },
                {
                  "value": "dry_run",
                  "label": "Dry Run"
                },
                {
                  "value": "reverse",
                  "label": "Reverse"
                }
              ]
            }
          },
          {
            "name": "backup",
            "type": "boolean",
            "required": false,
            "description": "Create backup before patching",
            "defaultValue": true,
            "uiConfig": {
              "inputType": "checkbox"
            }
          },
          {
            "name": "validate_patch",
            "type": "boolean",
            "required": false,
            "description": "Validate patch before applying",
            "defaultValue": true,
            "uiConfig": {
              "inputType": "checkbox"
            }
          },
          {
            "name": "backup_dir",
            "type": "string",
            "required": false,
            "description": "Directory for backup files",
            "conditional": {
              "field": "backup",
              "values": [
                true
              ],
              "operator": "equals"
            },
            "uiConfig": {
              "inputType": "text",
              "placeholder": "/tmp/backups"
            }
          },
          {
            "name": "strip_level",
            "type": "number",
            "required": false,
            "description": "Strip N leading path components (like patch -pN)",
            "defaultValue": 1,
            "validation": {
              "min": 0,
              "max": 10
            },
            "uiConfig": {
              "inputType": "number",
              "min": 0,
              "max": 10
            }
          },
          {
            "name": "fuzz_factor",
            "type": "number",
            "required": false,
            "description": "Number of lines that can be ignored when matching context",
            "defaultValue": 2,
            "validation": {
              "min": 0,
              "max": 100
            },
            "uiConfig": {
              "inputType": "number",
              "min": 0,
              "max": 100
            }
          },
          {
            "name": "reject_file",
            "type": "string",
            "required": false,
            "description": "Path to save rejected hunks",
            "uiConfig": {
              "inputType": "text",
              "placeholder": "/tmp/patch.reject"
            }
          },
          {
            "name": "ignore_whitespace",
            "type": "boolean",
            "required": false,
            "description": "Ignore whitespace changes when matching",
            "defaultValue": false,
            "uiConfig": {
              "inputType": "checkbox"
            }
          },
          {
            "name": "create_missing",
            "type": "boolean",
            "required": false,
            "description": "Create target file if it doesn't exist",
            "defaultValue": false,
            "uiConfig": {
              "inputType": "checkbox"
            }
          }
        ],
        "handles": {
          "inputs": [
            "default"
          ],
          "outputs": [
            "success",
            "error"
          ]
        },
        "outputs": {
          "result": {
            "type": "any",
            "description": "Patch application result with status, modified files, and rejected hunks"
          },
          "backup_path": {
            "type": "any",
            "description": "Path to backup file if created"
          },
          "rejected_hunks": {
            "type": "any",
            "description": "List of hunks that couldn't be applied"
          },
          "file_hash": {
            "type": "any",
            "description": "Hash of the patched file for verification"
          }
        },
        "execution": {
          "timeout": 60,
          "retryable": true,
          "maxRetries": 2
        },
        "primaryDisplayField": "target_path",
        "examples": [
          {
            "name": "Simple file patch",
            "description": "Apply a basic unified diff to a file",
            "configuration": {
              "target_path": "/src/main.py",
              "diff": "--- a/main.py\n+++ b/main.py\n@@ -10,3 +10,4 @@\n def main():\n     print('Hello')\n+    print('World')\n     return 0",
              "format": "unified",
              "apply_mode": "normal",
              "backup": true
            }
          },
          {
            "name": "Dry run validation",
            "description": "Test if a patch can be applied without making changes",
            "configuration": {
              "target_path": "/config/settings.json",
              "diff": "...",
              "apply_mode": "dry_run",
              "validate_patch": true
            }
          }
        ]
      }
    },
    {
      "node_type": "endpoint",
      "node_name": "Endpoint",
      "name": "endpoint",
      "display_name": "End Node",
      "category": "control",
      "description": "Exit point for diagram execution",
      "fields": [
        {
          "name": "save_to_file",
          "type": "boolean",
          "python_type": "bool",
          "graphql_type": "Boolean",
          "required": false,
          "description": "Save results to file",
          "validation": {},
          "uiConfig": {
            "inputType": "checkbox"
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "file_name",
          "type": "string",
          "python_type": "str",
          "graphql_type": "String",
          "required": false,
          "description": "Output filename",
          "validation": {},
          "uiConfig": {
            "inputType": "text"
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        }
      ],
      "icon": "\ud83c\udfc1",
      "color": "#F44336",
      "handler_metadata": {},
      "spec": {
        "nodeType": "NodeType.ENDPOINT",
        "displayName": "End Node",
        "category": "control",
        "description": "Exit point for diagram execution",
        "icon": "\ud83c\udfc1",
        "color": "#F44336",
        "fields": [
          {
            "name": "save_to_file",
            "type": "boolean",
            "python_type": "bool",
            "graphql_type": "Boolean",
            "required": false,
            "description": "Save results to file",
            "validation": {},
            "uiConfig": {
              "inputType": "checkbox"
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "file_name",
            "type": "string",
            "python_type": "str",
            "graphql_type": "String",
            "required": false,
            "description": "Output filename",
            "validation": {},
            "uiConfig": {
              "inputType": "text"
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          }
        ],
        "handles": {
          "inputs": [
            "default"
          ],
          "outputs": []
        },
        "outputs": {},
        "execution": {
          "timeout": 300,
          "retryable": true,
          "maxRetries": 3
        },
        "primaryDisplayField": "save_to_file",
        "defaults": {},
        "handlerMetadata": {}
      },
      "raw_spec": {
        "nodeType": "NodeType.ENDPOINT",
        "displayName": "End Node",
        "category": "control",
        "icon": "\ud83c\udfc1",
        "color": "#F44336",
        "description": "Exit point for diagram execution",
        "fields": [
          {
            "name": "save_to_file",
            "type": "boolean",
            "required": false,
            "description": "Save results to file",
            "uiConfig": {
              "inputType": "checkbox"
            }
          },
          {
            "name": "file_name",
            "type": "string",
            "required": false,
            "description": "Output filename",
            "uiConfig": {
              "inputType": "text"
            }
          }
        ],
        "handles": {
          "inputs": [
            "default"
          ],
          "outputs": []
        },
        "outputs": {},
        "execution": {
          "timeout": 300,
          "retryable": true,
          "maxRetries": 3
        },
        "primaryDisplayField": "save_to_file"
      }
    },
    {
      "node_type": "hook",
      "node_name": "Hook",
      "name": "hook",
      "display_name": "Hook",
      "category": "compute",
      "description": "Executes hooks at specific points in the diagram execution",
      "fields": [
        {
          "name": "hook_type",
          "type": "enum",
          "python_type": "hookHook_TypeEnum",
          "graphql_type": "hookHook_TypeEnum",
          "required": true,
          "description": "Type of hook to execute",
          "validation": {
            "allowedValues": [
              "shell",
              "http",
              "python",
              "file"
            ]
          },
          "uiConfig": {
            "inputType": "select",
            "options": [
              {
                "value": "shell",
                "label": "Shell"
              },
              {
                "value": "http",
                "label": "HTTP"
              },
              {
                "value": "python",
                "label": "Python"
              },
              {
                "value": "file",
                "label": "File"
              }
            ]
          },
          "default": "shell",
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": true,
          "enum_values": [
            "shell",
            "http",
            "python",
            "file"
          ]
        },
        {
          "name": "command",
          "type": "string",
          "python_type": "str",
          "graphql_type": "String",
          "required": false,
          "description": "Shell command to run (for shell hooks)",
          "validation": {},
          "uiConfig": {
            "inputType": "text",
            "placeholder": "Command to execute"
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "url",
          "type": "string",
          "python_type": "str",
          "graphql_type": "String",
          "required": false,
          "description": "Webhook URL (for HTTP hooks)",
          "validation": {
            "pattern": "^https?://.+"
          },
          "uiConfig": {
            "inputType": "text",
            "placeholder": "https://api.example.com/webhook"
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "timeout",
          "type": "number",
          "python_type": "int",
          "graphql_type": "Int",
          "required": false,
          "description": "Execution timeout in seconds",
          "validation": {
            "min": 1,
            "max": 300
          },
          "uiConfig": {
            "inputType": "number",
            "min": 1,
            "max": 300
          },
          "default": 60,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "retry_count",
          "type": "number",
          "python_type": "int",
          "graphql_type": "Int",
          "required": false,
          "description": "Number of retries on failure",
          "validation": {
            "min": 0,
            "max": 5
          },
          "uiConfig": {
            "inputType": "number",
            "min": 0,
            "max": 5
          },
          "default": 0,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        }
      ],
      "icon": "\ud83e\ude9d",
      "color": "#9333ea",
      "handler_metadata": {
        "modulePath": "dipeo.application.execution.handlers.hook",
        "className": "HookHandler",
        "mixins": [
          "LoggingMixin",
          "ValidationMixin",
          "ConfigurationMixin"
        ],
        "serviceKeys": [
          "HTTP_CLIENT",
          "STATE_STORE",
          "EVENT_BUS"
        ],
        "skipGeneration": true
      },
      "spec": {
        "nodeType": "NodeType.HOOK",
        "displayName": "Hook",
        "category": "compute",
        "description": "Executes hooks at specific points in the diagram execution",
        "icon": "\ud83e\ude9d",
        "color": "#9333ea",
        "fields": [
          {
            "name": "hook_type",
            "type": "enum",
            "python_type": "hookHook_TypeEnum",
            "graphql_type": "hookHook_TypeEnum",
            "required": true,
            "description": "Type of hook to execute",
            "validation": {
              "allowedValues": [
                "shell",
                "http",
                "python",
                "file"
              ]
            },
            "uiConfig": {
              "inputType": "select",
              "options": [
                {
                  "value": "shell",
                  "label": "Shell"
                },
                {
                  "value": "http",
                  "label": "HTTP"
                },
                {
                  "value": "python",
                  "label": "Python"
                },
                {
                  "value": "file",
                  "label": "File"
                }
              ]
            },
            "default": "shell",
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": true,
            "enum_values": [
              "shell",
              "http",
              "python",
              "file"
            ]
          },
          {
            "name": "command",
            "type": "string",
            "python_type": "str",
            "graphql_type": "String",
            "required": false,
            "description": "Shell command to run (for shell hooks)",
            "validation": {},
            "uiConfig": {
              "inputType": "text",
              "placeholder": "Command to execute"
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "url",
            "type": "string",
            "python_type": "str",
            "graphql_type": "String",
            "required": false,
            "description": "Webhook URL (for HTTP hooks)",
            "validation": {
              "pattern": "^https?://.+"
            },
            "uiConfig": {
              "inputType": "text",
              "placeholder": "https://api.example.com/webhook"
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "timeout",
            "type": "number",
            "python_type": "int",
            "graphql_type": "Int",
            "required": false,
            "description": "Execution timeout in seconds",
            "validation": {
              "min": 1,
              "max": 300
            },
            "uiConfig": {
              "inputType": "number",
              "min": 1,
              "max": 300
            },
            "default": 60,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "retry_count",
            "type": "number",
            "python_type": "int",
            "graphql_type": "Int",
            "required": false,
            "description": "Number of retries on failure",
            "validation": {
              "min": 0,
              "max": 5
            },
            "uiConfig": {
              "inputType": "number",
              "min": 0,
              "max": 5
            },
            "default": 0,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          }
        ],
        "handles": {
          "inputs": [
            "default"
          ],
          "outputs": [
            "success",
            "error"
          ]
        },
        "outputs": {
          "success": {
            "type": "any",
            "description": "Success output"
          },
          "error": {
            "type": "any",
            "description": "Error output"
          }
        },
        "execution": {
          "timeout": 60,
          "retryable": true,
          "maxRetries": 3
        },
        "primaryDisplayField": "hook_type",
        "defaults": {},
        "handlerMetadata": {
          "modulePath": "dipeo.application.execution.handlers.hook",
          "className": "HookHandler",
          "mixins": [
            "LoggingMixin",
            "ValidationMixin",
            "ConfigurationMixin"
          ],
          "serviceKeys": [
            "HTTP_CLIENT",
            "STATE_STORE",
            "EVENT_BUS"
          ],
          "skipGeneration": true
        }
      },
      "raw_spec": {
        "nodeType": "NodeType.HOOK",
        "displayName": "Hook",
        "category": "compute",
        "icon": "\ud83e\ude9d",
        "color": "#9333ea",
        "description": "Executes hooks at specific points in the diagram execution",
        "fields": [
          {
            "name": "hook_type",
            "type": "enum",
            "required": true,
            "defaultValue": "shell",
            "description": "Type of hook to execute",
            "validation": {
              "allowedValues": [
                "shell",
                "http",
                "python",
                "file"
              ]
            },
            "uiConfig": {
              "inputType": "select",
              "options": [
                {
                  "value": "shell",
                  "label": "Shell"
                },
                {
                  "value": "http",
                  "label": "HTTP"
                },
                {
                  "value": "python",
                  "label": "Python"
                },
                {
                  "value": "file",
                  "label": "File"
                }
              ]
            }
          },
          {
            "name": "command",
            "type": "string",
            "required": false,
            "description": "Shell command to run (for shell hooks)",
            "uiConfig": {
              "inputType": "text",
              "placeholder": "Command to execute"
            }
          },
          {
            "name": "url",
            "type": "string",
            "required": false,
            "description": "Webhook URL (for HTTP hooks)",
            "validation": {
              "pattern": "^https?://.+"
            },
            "uiConfig": {
              "inputType": "text",
              "placeholder": "https://api.example.com/webhook"
            }
          },
          {
            "name": "timeout",
            "type": "number",
            "required": false,
            "defaultValue": 60,
            "description": "Execution timeout in seconds",
            "validation": {
              "min": 1,
              "max": 300
            },
            "uiConfig": {
              "inputType": "number",
              "min": 1,
              "max": 300
            }
          },
          {
            "name": "retry_count",
            "type": "number",
            "required": false,
            "defaultValue": 0,
            "description": "Number of retries on failure",
            "validation": {
              "min": 0,
              "max": 5
            },
            "uiConfig": {
              "inputType": "number",
              "min": 0,
              "max": 5
            }
          }
        ],
        "handles": {
          "inputs": [
            "default"
          ],
          "outputs": [
            "success",
            "error"
          ]
        },
        "outputs": {
          "success": {
            "type": "any",
            "description": "Success output"
          },
          "error": {
            "type": "any",
            "description": "Error output"
          }
        },
        "execution": {
          "timeout": 60,
          "retryable": true,
          "maxRetries": 3
        },
        "examples": [
          {
            "name": "Shell Hook",
            "description": "Execute a shell command",
            "configuration": {
              "hook_type": "shell",
              "command": "echo 'Hook executed'",
              "timeout": 30
            }
          },
          {
            "name": "Webhook",
            "description": "Call a webhook URL",
            "configuration": {
              "hook_type": "http",
              "url": "https://api.example.com/webhook",
              "timeout": 60,
              "retry_count": 2
            }
          }
        ],
        "primaryDisplayField": "hook_type",
        "handlerMetadata": {
          "modulePath": "dipeo.application.execution.handlers.hook",
          "className": "HookHandler",
          "mixins": [
            "LoggingMixin",
            "ValidationMixin",
            "ConfigurationMixin"
          ],
          "serviceKeys": [
            "HTTP_CLIENT",
            "STATE_STORE",
            "EVENT_BUS"
          ],
          "skipGeneration": true
        }
      }
    },
    {
      "node_type": "integrated_api",
      "node_name": "IntegratedApi",
      "name": "integratedApi",
      "display_name": "Integrated API",
      "category": "integration",
      "description": "Connect to external APIs like Notion, Slack, GitHub, and more",
      "fields": [
        {
          "name": "provider",
          "type": "string",
          "python_type": "str",
          "graphql_type": "String",
          "required": true,
          "description": "API provider to connect to",
          "validation": {},
          "uiConfig": {
            "inputType": "select"
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "operation",
          "type": "string",
          "python_type": "str",
          "graphql_type": "String",
          "required": true,
          "description": "Operation to perform (provider-specific)",
          "validation": {},
          "uiConfig": {
            "inputType": "select",
            "placeholder": "Select an operation"
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "resource_id",
          "type": "string",
          "python_type": "str",
          "graphql_type": "String",
          "required": false,
          "description": "Resource identifier (e.g., page ID, channel ID)",
          "validation": {},
          "uiConfig": {
            "inputType": "text",
            "placeholder": "Resource ID (if applicable)"
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "config",
          "type": "object",
          "python_type": "Dict[str, Any]",
          "graphql_type": "JSON",
          "required": false,
          "description": "Provider-specific configuration",
          "validation": {},
          "uiConfig": {
            "inputType": "code",
            "placeholder": "{ /* provider-specific config */ }"
          },
          "default": null,
          "is_object_type": true,
          "is_dict_type": true,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "timeout",
          "type": "number",
          "python_type": "int",
          "graphql_type": "Int",
          "required": false,
          "description": "Request timeout in seconds",
          "validation": {
            "min": 1,
            "max": 300
          },
          "uiConfig": {
            "inputType": "number",
            "placeholder": "30"
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "max_retries",
          "type": "number",
          "python_type": "int",
          "graphql_type": "Int",
          "required": false,
          "description": "Maximum retry attempts",
          "validation": {
            "min": 0,
            "max": 10
          },
          "uiConfig": {
            "inputType": "number",
            "placeholder": "3"
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        }
      ],
      "icon": "\ud83d\udd0c",
      "color": "#8b5cf6",
      "handler_metadata": {},
      "spec": {
        "nodeType": "NodeType.INTEGRATED_API",
        "displayName": "Integrated API",
        "category": "integration",
        "description": "Connect to external APIs like Notion, Slack, GitHub, and more",
        "icon": "\ud83d\udd0c",
        "color": "#8b5cf6",
        "fields": [
          {
            "name": "provider",
            "type": "string",
            "python_type": "str",
            "graphql_type": "String",
            "required": true,
            "description": "API provider to connect to",
            "validation": {},
            "uiConfig": {
              "inputType": "select"
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "operation",
            "type": "string",
            "python_type": "str",
            "graphql_type": "String",
            "required": true,
            "description": "Operation to perform (provider-specific)",
            "validation": {},
            "uiConfig": {
              "inputType": "select",
              "placeholder": "Select an operation"
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "resource_id",
            "type": "string",
            "python_type": "str",
            "graphql_type": "String",
            "required": false,
            "description": "Resource identifier (e.g., page ID, channel ID)",
            "validation": {},
            "uiConfig": {
              "inputType": "text",
              "placeholder": "Resource ID (if applicable)"
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "config",
            "type": "object",
            "python_type": "Dict[str, Any]",
            "graphql_type": "JSON",
            "required": false,
            "description": "Provider-specific configuration",
            "validation": {},
            "uiConfig": {
              "inputType": "code",
              "placeholder": "{ /* provider-specific config */ }"
            },
            "default": null,
            "is_object_type": true,
            "is_dict_type": true,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "timeout",
            "type": "number",
            "python_type": "int",
            "graphql_type": "Int",
            "required": false,
            "description": "Request timeout in seconds",
            "validation": {
              "min": 1,
              "max": 300
            },
            "uiConfig": {
              "inputType": "number",
              "placeholder": "30"
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "max_retries",
            "type": "number",
            "python_type": "int",
            "graphql_type": "Int",
            "required": false,
            "description": "Maximum retry attempts",
            "validation": {
              "min": 0,
              "max": 10
            },
            "uiConfig": {
              "inputType": "number",
              "placeholder": "3"
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          }
        ],
        "handles": {
          "inputs": [
            "default"
          ],
          "outputs": [
            "default",
            "error"
          ]
        },
        "outputs": {
          "result": {
            "type": "any",
            "description": "API response data"
          },
          "error": {
            "type": "any",
            "description": "Error details if the operation fails"
          }
        },
        "execution": {
          "timeout": 60,
          "retryable": true,
          "maxRetries": 3
        },
        "primaryDisplayField": "provider",
        "defaults": {},
        "handlerMetadata": {}
      },
      "raw_spec": {
        "nodeType": "NodeType.INTEGRATED_API",
        "displayName": "Integrated API",
        "category": "integration",
        "icon": "\ud83d\udd0c",
        "color": "#8b5cf6",
        "description": "Connect to external APIs like Notion, Slack, GitHub, and more",
        "fields": [
          {
            "name": "provider",
            "type": "string",
            "required": true,
            "description": "API provider to connect to",
            "uiConfig": {
              "inputType": "select"
            }
          },
          {
            "name": "operation",
            "type": "string",
            "required": true,
            "description": "Operation to perform (provider-specific)",
            "uiConfig": {
              "inputType": "select",
              "placeholder": "Select an operation"
            }
          },
          {
            "name": "resource_id",
            "type": "string",
            "required": false,
            "description": "Resource identifier (e.g., page ID, channel ID)",
            "uiConfig": {
              "inputType": "text",
              "placeholder": "Resource ID (if applicable)"
            }
          },
          {
            "name": "config",
            "type": "object",
            "required": false,
            "description": "Provider-specific configuration",
            "uiConfig": {
              "inputType": "code",
              "placeholder": "{ /* provider-specific config */ }"
            }
          },
          {
            "name": "timeout",
            "type": "number",
            "required": false,
            "description": "Request timeout in seconds",
            "validation": {
              "min": 1,
              "max": 300
            },
            "uiConfig": {
              "inputType": "number",
              "placeholder": "30"
            }
          },
          {
            "name": "max_retries",
            "type": "number",
            "required": false,
            "description": "Maximum retry attempts",
            "validation": {
              "min": 0,
              "max": 10
            },
            "uiConfig": {
              "inputType": "number",
              "placeholder": "3"
            }
          }
        ],
        "handles": {
          "inputs": [
            "default"
          ],
          "outputs": [
            "default",
            "error"
          ]
        },
        "outputs": {
          "result": {
            "type": "any",
            "description": "API response data"
          },
          "error": {
            "type": "any",
            "description": "Error details if the operation fails"
          }
        },
        "execution": {
          "timeout": 60,
          "retryable": true,
          "maxRetries": 3
        },
        "primaryDisplayField": "provider"
      }
    },
    {
      "node_type": "ir_builder",
      "node_name": "IrBuilder",
      "name": "irBuilder",
      "display_name": "IR Builder",
      "category": "codegen",
      "description": "Build Intermediate Representation for code generation",
      "fields": [
        {
          "name": "builder_type",
          "type": "enum",
          "python_type": "irBuilderBuilder_TypeEnum",
          "graphql_type": "irBuilderBuilder_TypeEnum",
          "required": true,
          "description": "Type of IR builder to use",
          "validation": {
            "allowedValues": [
              "backend",
              "frontend",
              "strawberry",
              "custom"
            ]
          },
          "uiConfig": {
            "inputType": "select",
            "options": [
              {
                "value": "backend",
                "label": "Backend"
              },
              {
                "value": "frontend",
                "label": "Frontend"
              },
              {
                "value": "strawberry",
                "label": "Strawberry (GraphQL)"
              },
              {
                "value": "custom",
                "label": "Custom"
              }
            ]
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": true,
          "enum_values": [
            "backend",
            "frontend",
            "strawberry",
            "custom"
          ]
        },
        {
          "name": "source_type",
          "type": "enum",
          "python_type": "irBuilderSource_TypeEnum",
          "graphql_type": "irBuilderSource_TypeEnum",
          "required": false,
          "description": "Type of source data",
          "validation": {
            "allowedValues": [
              "ast",
              "schema",
              "config",
              "auto"
            ]
          },
          "uiConfig": {
            "inputType": "select",
            "options": [
              {
                "value": "ast",
                "label": "AST"
              },
              {
                "value": "schema",
                "label": "Schema"
              },
              {
                "value": "config",
                "label": "Config"
              },
              {
                "value": "auto",
                "label": "Auto-detect"
              }
            ]
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": true,
          "enum_values": [
            "ast",
            "schema",
            "config",
            "auto"
          ]
        },
        {
          "name": "config_path",
          "type": "string",
          "python_type": "str",
          "graphql_type": "String",
          "required": false,
          "description": "Path to configuration directory",
          "validation": {},
          "uiConfig": {
            "inputType": "text",
            "placeholder": "projects/codegen/config/"
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "output_format",
          "type": "enum",
          "python_type": "irBuilderOutput_FormatEnum",
          "graphql_type": "irBuilderOutput_FormatEnum",
          "required": false,
          "description": "Output format for IR",
          "validation": {
            "allowedValues": [
              "json",
              "yaml",
              "python"
            ]
          },
          "uiConfig": {
            "inputType": "select",
            "options": [
              {
                "value": "json",
                "label": "JSON"
              },
              {
                "value": "yaml",
                "label": "YAML"
              },
              {
                "value": "python",
                "label": "Python"
              }
            ]
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": true,
          "enum_values": [
            "json",
            "yaml",
            "python"
          ]
        },
        {
          "name": "cache_enabled",
          "type": "boolean",
          "python_type": "bool",
          "graphql_type": "Boolean",
          "required": false,
          "description": "Enable IR caching",
          "validation": {},
          "uiConfig": {
            "inputType": "checkbox"
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "validate_output",
          "type": "boolean",
          "python_type": "bool",
          "graphql_type": "Boolean",
          "required": false,
          "description": "Validate IR structure before output",
          "validation": {},
          "uiConfig": {
            "inputType": "checkbox"
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        }
      ],
      "icon": "\ud83c\udfd7\ufe0f",
      "color": "#FF5722",
      "handler_metadata": {},
      "spec": {
        "nodeType": "NodeType.IR_BUILDER",
        "displayName": "IR Builder",
        "category": "codegen",
        "description": "Build Intermediate Representation for code generation",
        "icon": "\ud83c\udfd7\ufe0f",
        "color": "#FF5722",
        "fields": [
          {
            "name": "builder_type",
            "type": "enum",
            "python_type": "irBuilderBuilder_TypeEnum",
            "graphql_type": "irBuilderBuilder_TypeEnum",
            "required": true,
            "description": "Type of IR builder to use",
            "validation": {
              "allowedValues": [
                "backend",
                "frontend",
                "strawberry",
                "custom"
              ]
            },
            "uiConfig": {
              "inputType": "select",
              "options": [
                {
                  "value": "backend",
                  "label": "Backend"
                },
                {
                  "value": "frontend",
                  "label": "Frontend"
                },
                {
                  "value": "strawberry",
                  "label": "Strawberry (GraphQL)"
                },
                {
                  "value": "custom",
                  "label": "Custom"
                }
              ]
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": true,
            "enum_values": [
              "backend",
              "frontend",
              "strawberry",
              "custom"
            ]
          },
          {
            "name": "source_type",
            "type": "enum",
            "python_type": "irBuilderSource_TypeEnum",
            "graphql_type": "irBuilderSource_TypeEnum",
            "required": false,
            "description": "Type of source data",
            "validation": {
              "allowedValues": [
                "ast",
                "schema",
                "config",
                "auto"
              ]
            },
            "uiConfig": {
              "inputType": "select",
              "options": [
                {
                  "value": "ast",
                  "label": "AST"
                },
                {
                  "value": "schema",
                  "label": "Schema"
                },
                {
                  "value": "config",
                  "label": "Config"
                },
                {
                  "value": "auto",
                  "label": "Auto-detect"
                }
              ]
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": true,
            "enum_values": [
              "ast",
              "schema",
              "config",
              "auto"
            ]
          },
          {
            "name": "config_path",
            "type": "string",
            "python_type": "str",
            "graphql_type": "String",
            "required": false,
            "description": "Path to configuration directory",
            "validation": {},
            "uiConfig": {
              "inputType": "text",
              "placeholder": "projects/codegen/config/"
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "output_format",
            "type": "enum",
            "python_type": "irBuilderOutput_FormatEnum",
            "graphql_type": "irBuilderOutput_FormatEnum",
            "required": false,
            "description": "Output format for IR",
            "validation": {
              "allowedValues": [
                "json",
                "yaml",
                "python"
              ]
            },
            "uiConfig": {
              "inputType": "select",
              "options": [
                {
                  "value": "json",
                  "label": "JSON"
                },
                {
                  "value": "yaml",
                  "label": "YAML"
                },
                {
                  "value": "python",
                  "label": "Python"
                }
              ]
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": true,
            "enum_values": [
              "json",
              "yaml",
              "python"
            ]
          },
          {
            "name": "cache_enabled",
            "type": "boolean",
            "python_type": "bool",
            "graphql_type": "Boolean",
            "required": false,
            "description": "Enable IR caching",
            "validation": {},
            "uiConfig": {
              "inputType": "checkbox"
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "validate_output",
            "type": "boolean",
            "python_type": "bool",
            "graphql_type": "Boolean",
            "required": false,
            "description": "Validate IR structure before output",
            "validation": {},
            "uiConfig": {
              "inputType": "checkbox"
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          }
        ],
        "handles": {
          "inputs": [
            "default"
          ],
          "outputs": [
            "default"
          ]
        },
        "outputs": {
          "result": {
            "type": "DataType.OBJECT",
            "description": "Generated IR structure"
          }
        },
        "execution": {
          "timeout": 120,
          "retryable": true,
          "maxRetries": 2
        },
        "primaryDisplayField": "builder_type",
        "defaults": {},
        "handlerMetadata": {}
      },
      "raw_spec": {
        "nodeType": "NodeType.IR_BUILDER",
        "displayName": "IR Builder",
        "category": "codegen",
        "icon": "\ud83c\udfd7\ufe0f",
        "color": "#FF5722",
        "description": "Build Intermediate Representation for code generation",
        "fields": [
          {
            "name": "builder_type",
            "type": "enum",
            "required": true,
            "description": "Type of IR builder to use",
            "validation": {
              "allowedValues": [
                "backend",
                "frontend",
                "strawberry",
                "custom"
              ]
            },
            "uiConfig": {
              "inputType": "select",
              "options": [
                {
                  "value": "backend",
                  "label": "Backend"
                },
                {
                  "value": "frontend",
                  "label": "Frontend"
                },
                {
                  "value": "strawberry",
                  "label": "Strawberry (GraphQL)"
                },
                {
                  "value": "custom",
                  "label": "Custom"
                }
              ]
            }
          },
          {
            "name": "source_type",
            "type": "enum",
            "required": false,
            "description": "Type of source data",
            "validation": {
              "allowedValues": [
                "ast",
                "schema",
                "config",
                "auto"
              ]
            },
            "uiConfig": {
              "inputType": "select",
              "options": [
                {
                  "value": "ast",
                  "label": "AST"
                },
                {
                  "value": "schema",
                  "label": "Schema"
                },
                {
                  "value": "config",
                  "label": "Config"
                },
                {
                  "value": "auto",
                  "label": "Auto-detect"
                }
              ]
            }
          },
          {
            "name": "config_path",
            "type": "string",
            "required": false,
            "description": "Path to configuration directory",
            "uiConfig": {
              "inputType": "text",
              "placeholder": "projects/codegen/config/"
            }
          },
          {
            "name": "output_format",
            "type": "enum",
            "required": false,
            "description": "Output format for IR",
            "validation": {
              "allowedValues": [
                "json",
                "yaml",
                "python"
              ]
            },
            "uiConfig": {
              "inputType": "select",
              "options": [
                {
                  "value": "json",
                  "label": "JSON"
                },
                {
                  "value": "yaml",
                  "label": "YAML"
                },
                {
                  "value": "python",
                  "label": "Python"
                }
              ]
            }
          },
          {
            "name": "cache_enabled",
            "type": "boolean",
            "required": false,
            "description": "Enable IR caching",
            "uiConfig": {
              "inputType": "checkbox"
            }
          },
          {
            "name": "validate_output",
            "type": "boolean",
            "required": false,
            "description": "Validate IR structure before output",
            "uiConfig": {
              "inputType": "checkbox"
            }
          }
        ],
        "handles": {
          "inputs": [
            "default"
          ],
          "outputs": [
            "default"
          ]
        },
        "inputPorts": [
          {
            "name": "default",
            "contentType": "object",
            "required": true,
            "description": "Source data (AST, schema, or config) for IR generation"
          }
        ],
        "outputs": {
          "result": {
            "type": "DataType.OBJECT",
            "description": "Generated IR structure"
          }
        },
        "execution": {
          "timeout": 120,
          "retryable": true,
          "maxRetries": 2
        },
        "primaryDisplayField": "builder_type"
      }
    },
    {
      "node_type": "json_schema_validator",
      "node_name": "JsonSchemaValidator",
      "name": "jsonSchemaValidator",
      "display_name": "JSON Schema Validator",
      "category": "codegen",
      "description": "Validate data against JSON schema",
      "fields": [
        {
          "name": "schema_path",
          "type": "string",
          "python_type": "str",
          "graphql_type": "String",
          "required": false,
          "description": "Path to JSON schema file",
          "validation": {},
          "uiConfig": {
            "inputType": "text",
            "placeholder": "/path/to/file"
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "json_schema",
          "type": "object",
          "python_type": "Dict[str, Any]",
          "graphql_type": "JSON",
          "required": false,
          "description": "Inline JSON schema",
          "validation": {},
          "uiConfig": {
            "inputType": "code",
            "collapsible": true
          },
          "default": null,
          "is_object_type": true,
          "is_dict_type": true,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "data_path",
          "type": "string",
          "python_type": "str",
          "graphql_type": "String",
          "required": false,
          "description": "Data Path configuration",
          "validation": {},
          "uiConfig": {
            "inputType": "text",
            "placeholder": "/path/to/file"
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "strict_mode",
          "type": "boolean",
          "python_type": "bool",
          "graphql_type": "Boolean",
          "required": false,
          "description": "Strict Mode configuration",
          "validation": {},
          "uiConfig": {
            "inputType": "checkbox"
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "error_on_extra",
          "type": "boolean",
          "python_type": "bool",
          "graphql_type": "Boolean",
          "required": false,
          "description": "Error On Extra configuration",
          "validation": {},
          "uiConfig": {
            "inputType": "checkbox"
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        }
      ],
      "icon": "\u2713",
      "color": "#8BC34A",
      "handler_metadata": {},
      "spec": {
        "nodeType": "NodeType.JSON_SCHEMA_VALIDATOR",
        "displayName": "JSON Schema Validator",
        "category": "codegen",
        "description": "Validate data against JSON schema",
        "icon": "\u2713",
        "color": "#8BC34A",
        "fields": [
          {
            "name": "schema_path",
            "type": "string",
            "python_type": "str",
            "graphql_type": "String",
            "required": false,
            "description": "Path to JSON schema file",
            "validation": {},
            "uiConfig": {
              "inputType": "text",
              "placeholder": "/path/to/file"
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "json_schema",
            "type": "object",
            "python_type": "Dict[str, Any]",
            "graphql_type": "JSON",
            "required": false,
            "description": "Inline JSON schema",
            "validation": {},
            "uiConfig": {
              "inputType": "code",
              "collapsible": true
            },
            "default": null,
            "is_object_type": true,
            "is_dict_type": true,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "data_path",
            "type": "string",
            "python_type": "str",
            "graphql_type": "String",
            "required": false,
            "description": "Data Path configuration",
            "validation": {},
            "uiConfig": {
              "inputType": "text",
              "placeholder": "/path/to/file"
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "strict_mode",
            "type": "boolean",
            "python_type": "bool",
            "graphql_type": "Boolean",
            "required": false,
            "description": "Strict Mode configuration",
            "validation": {},
            "uiConfig": {
              "inputType": "checkbox"
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "error_on_extra",
            "type": "boolean",
            "python_type": "bool",
            "graphql_type": "Boolean",
            "required": false,
            "description": "Error On Extra configuration",
            "validation": {},
            "uiConfig": {
              "inputType": "checkbox"
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          }
        ],
        "handles": {
          "inputs": [
            "default"
          ],
          "outputs": [
            "default"
          ]
        },
        "outputs": {
          "result": {
            "type": "any",
            "description": "Node execution result"
          }
        },
        "execution": {
          "timeout": 300,
          "retryable": true,
          "maxRetries": 3
        },
        "primaryDisplayField": "schema_path",
        "defaults": {},
        "handlerMetadata": {}
      },
      "raw_spec": {
        "nodeType": "NodeType.JSON_SCHEMA_VALIDATOR",
        "displayName": "JSON Schema Validator",
        "category": "codegen",
        "icon": "\u2713",
        "color": "#8BC34A",
        "description": "Validate data against JSON schema",
        "fields": [
          {
            "name": "schema_path",
            "type": "string",
            "required": false,
            "description": "Path to JSON schema file",
            "uiConfig": {
              "inputType": "text",
              "placeholder": "/path/to/file"
            }
          },
          {
            "name": "json_schema",
            "type": "object",
            "required": false,
            "description": "Inline JSON schema",
            "uiConfig": {
              "inputType": "code",
              "collapsible": true
            }
          },
          {
            "name": "data_path",
            "type": "string",
            "required": false,
            "description": "Data Path configuration",
            "uiConfig": {
              "inputType": "text",
              "placeholder": "/path/to/file"
            }
          },
          {
            "name": "strict_mode",
            "type": "boolean",
            "required": false,
            "description": "Strict Mode configuration",
            "uiConfig": {
              "inputType": "checkbox"
            }
          },
          {
            "name": "error_on_extra",
            "type": "boolean",
            "required": false,
            "description": "Error On Extra configuration",
            "uiConfig": {
              "inputType": "checkbox"
            }
          }
        ],
        "handles": {
          "inputs": [
            "default"
          ],
          "outputs": [
            "default"
          ]
        },
        "outputs": {
          "result": {
            "type": "any",
            "description": "Node execution result"
          }
        },
        "execution": {
          "timeout": 300,
          "retryable": true,
          "maxRetries": 3
        },
        "primaryDisplayField": "schema_path"
      }
    },
    {
      "node_type": "person_job",
      "node_name": "PersonJob",
      "name": "personJob",
      "display_name": "Person Job",
      "category": "ai",
      "description": "Execute tasks using AI language models",
      "fields": [
        {
          "name": "person",
          "type": "string",
          "python_type": "str",
          "graphql_type": "String",
          "required": false,
          "description": "AI person to use",
          "validation": {},
          "uiConfig": {
            "inputType": "personSelect"
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "first_only_prompt",
          "type": "string",
          "python_type": "str",
          "graphql_type": "String",
          "required": false,
          "description": "Prompt used only on first execution",
          "validation": {},
          "uiConfig": {
            "inputType": "textarea",
            "placeholder": "Enter prompt template...",
            "column": 2,
            "rows": 10,
            "adjustable": true,
            "showPromptFileButton": true
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "first_prompt_file",
          "type": "string",
          "python_type": "str",
          "graphql_type": "String",
          "required": false,
          "description": "External prompt file for first iteration only",
          "validation": {},
          "uiConfig": {
            "inputType": "text",
            "placeholder": "example_first.txt",
            "column": 2,
            "hidden": true
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "default_prompt",
          "type": "string",
          "python_type": "str",
          "graphql_type": "String",
          "required": false,
          "description": "Default prompt template",
          "validation": {},
          "uiConfig": {
            "inputType": "textarea",
            "placeholder": "Enter prompt template...",
            "column": 2,
            "rows": 10,
            "adjustable": true,
            "showPromptFileButton": true
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "prompt_file",
          "type": "string",
          "python_type": "str",
          "graphql_type": "String",
          "required": false,
          "description": "Path to prompt file in /files/prompts/",
          "validation": {},
          "uiConfig": {
            "inputType": "text",
            "placeholder": "example.txt",
            "column": 2,
            "hidden": true
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "max_iteration",
          "type": "number",
          "python_type": "int",
          "graphql_type": "Int",
          "required": true,
          "description": "Maximum execution iterations",
          "validation": {},
          "uiConfig": {
            "inputType": "number",
            "min": 1
          },
          "default": 100,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "memorize_to",
          "type": "string",
          "python_type": "str",
          "graphql_type": "String",
          "required": false,
          "description": "Criteria used to select helpful messages for this task. Empty = memorize all. Special: 'GOLDFISH' for goldfish mode. Comma-separated for multiple criteria.",
          "validation": {},
          "uiConfig": {
            "inputType": "text",
            "placeholder": "e.g., requirements, acceptance criteria, API keys",
            "column": 2
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "at_most",
          "type": "number",
          "python_type": "int",
          "graphql_type": "Int",
          "required": false,
          "description": "Select at most N messages to keep (system messages may be preserved in addition).",
          "validation": {
            "min": 1,
            "max": 500
          },
          "uiConfig": {
            "inputType": "number",
            "min": 1,
            "max": 500,
            "column": 1
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "ignore_person",
          "type": "string",
          "python_type": "str",
          "graphql_type": "String",
          "required": false,
          "description": "Comma-separated list of person IDs whose messages should be excluded from memory selection.",
          "validation": {},
          "uiConfig": {
            "inputType": "text",
            "placeholder": "e.g., assistant, user2",
            "column": 2
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "tools",
          "type": "string",
          "python_type": "str",
          "graphql_type": "String",
          "required": false,
          "description": "Tools available to the AI agent",
          "validation": {},
          "uiConfig": {
            "column": 1,
            "inputType": "select",
            "options": [
              {
                "value": "none",
                "label": "None - No tools"
              },
              {
                "value": "image",
                "label": "Image - Image generation capabilities"
              },
              {
                "value": "websearch",
                "label": "Web Search - Search the internet"
              }
            ]
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "text_format",
          "type": "string",
          "python_type": "str",
          "graphql_type": "String",
          "required": false,
          "description": "JSON schema or response format for structured outputs",
          "validation": {},
          "uiConfig": {
            "inputType": "textarea",
            "placeholder": "{\"type\": \"object\", \"properties\": {...}}",
            "column": 2,
            "rows": 6,
            "adjustable": true
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "text_format_file",
          "type": "string",
          "python_type": "str",
          "graphql_type": "String",
          "required": false,
          "description": "Path to Python file containing Pydantic models for structured outputs",
          "validation": {},
          "uiConfig": {
            "inputType": "text",
            "placeholder": "path/to/models.py",
            "column": 2
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "resolved_prompt",
          "type": "string",
          "python_type": "str",
          "graphql_type": "String",
          "required": false,
          "description": "Pre-resolved prompt content from compile-time",
          "validation": {},
          "uiConfig": {
            "inputType": "textarea",
            "column": 2,
            "rows": 4
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "resolved_first_prompt",
          "type": "string",
          "python_type": "str",
          "graphql_type": "String",
          "required": false,
          "description": "Pre-resolved first prompt content from compile-time",
          "validation": {},
          "uiConfig": {
            "inputType": "textarea",
            "column": 2,
            "rows": 4
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "batch",
          "type": "boolean",
          "python_type": "bool",
          "graphql_type": "Boolean",
          "required": false,
          "description": "Enable batch mode for processing multiple items",
          "validation": {},
          "uiConfig": {
            "inputType": "checkbox"
          },
          "default": false,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "batch_input_key",
          "type": "string",
          "python_type": "str",
          "graphql_type": "String",
          "required": false,
          "description": "Key containing the array to iterate over in batch mode",
          "validation": {},
          "uiConfig": {
            "inputType": "text",
            "placeholder": "items"
          },
          "default": "items",
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "batch_parallel",
          "type": "boolean",
          "python_type": "bool",
          "graphql_type": "Boolean",
          "required": false,
          "description": "Execute batch items in parallel",
          "validation": {},
          "uiConfig": {
            "inputType": "checkbox"
          },
          "default": true,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "max_concurrent",
          "type": "number",
          "python_type": "int",
          "graphql_type": "Int",
          "required": false,
          "description": "Maximum concurrent executions in batch mode",
          "validation": {
            "min": 1,
            "max": 100
          },
          "uiConfig": {
            "inputType": "number",
            "min": 1,
            "max": 100
          },
          "default": 10,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        }
      ],
      "icon": "\ud83e\udd16",
      "color": "#2196F3",
      "handler_metadata": {
        "modulePath": "dipeo.application.execution.handlers.person_job",
        "className": "PersonJobHandler",
        "mixins": [
          "LoggingMixin",
          "ValidationMixin",
          "ConfigurationMixin"
        ],
        "serviceKeys": [
          "LLM_CLIENT",
          "STATE_STORE",
          "EVENT_BUS"
        ],
        "skipGeneration": true
      },
      "spec": {
        "nodeType": "NodeType.PERSON_JOB",
        "displayName": "Person Job",
        "category": "ai",
        "description": "Execute tasks using AI language models",
        "icon": "\ud83e\udd16",
        "color": "#2196F3",
        "fields": [
          {
            "name": "person",
            "type": "string",
            "python_type": "str",
            "graphql_type": "String",
            "required": false,
            "description": "AI person to use",
            "validation": {},
            "uiConfig": {
              "inputType": "personSelect"
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "first_only_prompt",
            "type": "string",
            "python_type": "str",
            "graphql_type": "String",
            "required": false,
            "description": "Prompt used only on first execution",
            "validation": {},
            "uiConfig": {
              "inputType": "textarea",
              "placeholder": "Enter prompt template...",
              "column": 2,
              "rows": 10,
              "adjustable": true,
              "showPromptFileButton": true
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "first_prompt_file",
            "type": "string",
            "python_type": "str",
            "graphql_type": "String",
            "required": false,
            "description": "External prompt file for first iteration only",
            "validation": {},
            "uiConfig": {
              "inputType": "text",
              "placeholder": "example_first.txt",
              "column": 2,
              "hidden": true
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "default_prompt",
            "type": "string",
            "python_type": "str",
            "graphql_type": "String",
            "required": false,
            "description": "Default prompt template",
            "validation": {},
            "uiConfig": {
              "inputType": "textarea",
              "placeholder": "Enter prompt template...",
              "column": 2,
              "rows": 10,
              "adjustable": true,
              "showPromptFileButton": true
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "prompt_file",
            "type": "string",
            "python_type": "str",
            "graphql_type": "String",
            "required": false,
            "description": "Path to prompt file in /files/prompts/",
            "validation": {},
            "uiConfig": {
              "inputType": "text",
              "placeholder": "example.txt",
              "column": 2,
              "hidden": true
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "max_iteration",
            "type": "number",
            "python_type": "int",
            "graphql_type": "Int",
            "required": true,
            "description": "Maximum execution iterations",
            "validation": {},
            "uiConfig": {
              "inputType": "number",
              "min": 1
            },
            "default": 100,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "memorize_to",
            "type": "string",
            "python_type": "str",
            "graphql_type": "String",
            "required": false,
            "description": "Criteria used to select helpful messages for this task. Empty = memorize all. Special: 'GOLDFISH' for goldfish mode. Comma-separated for multiple criteria.",
            "validation": {},
            "uiConfig": {
              "inputType": "text",
              "placeholder": "e.g., requirements, acceptance criteria, API keys",
              "column": 2
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "at_most",
            "type": "number",
            "python_type": "int",
            "graphql_type": "Int",
            "required": false,
            "description": "Select at most N messages to keep (system messages may be preserved in addition).",
            "validation": {
              "min": 1,
              "max": 500
            },
            "uiConfig": {
              "inputType": "number",
              "min": 1,
              "max": 500,
              "column": 1
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "ignore_person",
            "type": "string",
            "python_type": "str",
            "graphql_type": "String",
            "required": false,
            "description": "Comma-separated list of person IDs whose messages should be excluded from memory selection.",
            "validation": {},
            "uiConfig": {
              "inputType": "text",
              "placeholder": "e.g., assistant, user2",
              "column": 2
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "tools",
            "type": "string",
            "python_type": "str",
            "graphql_type": "String",
            "required": false,
            "description": "Tools available to the AI agent",
            "validation": {},
            "uiConfig": {
              "column": 1,
              "inputType": "select",
              "options": [
                {
                  "value": "none",
                  "label": "None - No tools"
                },
                {
                  "value": "image",
                  "label": "Image - Image generation capabilities"
                },
                {
                  "value": "websearch",
                  "label": "Web Search - Search the internet"
                }
              ]
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "text_format",
            "type": "string",
            "python_type": "str",
            "graphql_type": "String",
            "required": false,
            "description": "JSON schema or response format for structured outputs",
            "validation": {},
            "uiConfig": {
              "inputType": "textarea",
              "placeholder": "{\"type\": \"object\", \"properties\": {...}}",
              "column": 2,
              "rows": 6,
              "adjustable": true
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "text_format_file",
            "type": "string",
            "python_type": "str",
            "graphql_type": "String",
            "required": false,
            "description": "Path to Python file containing Pydantic models for structured outputs",
            "validation": {},
            "uiConfig": {
              "inputType": "text",
              "placeholder": "path/to/models.py",
              "column": 2
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "resolved_prompt",
            "type": "string",
            "python_type": "str",
            "graphql_type": "String",
            "required": false,
            "description": "Pre-resolved prompt content from compile-time",
            "validation": {},
            "uiConfig": {
              "inputType": "textarea",
              "column": 2,
              "rows": 4
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "resolved_first_prompt",
            "type": "string",
            "python_type": "str",
            "graphql_type": "String",
            "required": false,
            "description": "Pre-resolved first prompt content from compile-time",
            "validation": {},
            "uiConfig": {
              "inputType": "textarea",
              "column": 2,
              "rows": 4
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "batch",
            "type": "boolean",
            "python_type": "bool",
            "graphql_type": "Boolean",
            "required": false,
            "description": "Enable batch mode for processing multiple items",
            "validation": {},
            "uiConfig": {
              "inputType": "checkbox"
            },
            "default": false,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "batch_input_key",
            "type": "string",
            "python_type": "str",
            "graphql_type": "String",
            "required": false,
            "description": "Key containing the array to iterate over in batch mode",
            "validation": {},
            "uiConfig": {
              "inputType": "text",
              "placeholder": "items"
            },
            "default": "items",
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "batch_parallel",
            "type": "boolean",
            "python_type": "bool",
            "graphql_type": "Boolean",
            "required": false,
            "description": "Execute batch items in parallel",
            "validation": {},
            "uiConfig": {
              "inputType": "checkbox"
            },
            "default": true,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "max_concurrent",
            "type": "number",
            "python_type": "int",
            "graphql_type": "Int",
            "required": false,
            "description": "Maximum concurrent executions in batch mode",
            "validation": {
              "min": 1,
              "max": 100
            },
            "uiConfig": {
              "inputType": "number",
              "min": 1,
              "max": 100
            },
            "default": 10,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          }
        ],
        "handles": {
          "inputs": [
            "default",
            "first"
          ],
          "outputs": [
            "default"
          ]
        },
        "outputs": {
          "result": {
            "type": "any",
            "description": "AI response and results"
          }
        },
        "execution": {
          "timeout": 300,
          "retryable": true,
          "maxRetries": 3
        },
        "primaryDisplayField": "person",
        "defaults": {},
        "handlerMetadata": {
          "modulePath": "dipeo.application.execution.handlers.person_job",
          "className": "PersonJobHandler",
          "mixins": [
            "LoggingMixin",
            "ValidationMixin",
            "ConfigurationMixin"
          ],
          "serviceKeys": [
            "LLM_CLIENT",
            "STATE_STORE",
            "EVENT_BUS"
          ],
          "skipGeneration": true
        }
      },
      "raw_spec": {
        "nodeType": "NodeType.PERSON_JOB",
        "displayName": "Person Job",
        "category": "ai",
        "icon": "\ud83e\udd16",
        "color": "#2196F3",
        "description": "Execute tasks using AI language models",
        "fields": [
          {
            "name": "person",
            "type": "string",
            "required": false,
            "description": "AI person to use",
            "uiConfig": {
              "inputType": "personSelect"
            }
          },
          {
            "name": "first_only_prompt",
            "type": "string",
            "required": false,
            "description": "Prompt used only on first execution",
            "uiConfig": {
              "inputType": "textarea",
              "placeholder": "Enter prompt template...",
              "column": 2,
              "rows": 10,
              "adjustable": true,
              "showPromptFileButton": true
            }
          },
          {
            "name": "first_prompt_file",
            "type": "string",
            "required": false,
            "description": "External prompt file for first iteration only",
            "uiConfig": {
              "inputType": "text",
              "placeholder": "example_first.txt",
              "column": 2,
              "hidden": true
            }
          },
          {
            "name": "default_prompt",
            "type": "string",
            "required": false,
            "description": "Default prompt template",
            "uiConfig": {
              "inputType": "textarea",
              "placeholder": "Enter prompt template...",
              "column": 2,
              "rows": 10,
              "adjustable": true,
              "showPromptFileButton": true
            }
          },
          {
            "name": "prompt_file",
            "type": "string",
            "required": false,
            "description": "Path to prompt file in /files/prompts/",
            "uiConfig": {
              "inputType": "text",
              "placeholder": "example.txt",
              "column": 2,
              "hidden": true
            }
          },
          {
            "name": "max_iteration",
            "type": "number",
            "required": true,
            "defaultValue": 100,
            "description": "Maximum execution iterations",
            "uiConfig": {
              "inputType": "number",
              "min": 1
            }
          },
          {
            "name": "memorize_to",
            "type": "string",
            "required": false,
            "description": "Criteria used to select helpful messages for this task. Empty = memorize all. Special: 'GOLDFISH' for goldfish mode. Comma-separated for multiple criteria.",
            "uiConfig": {
              "inputType": "text",
              "placeholder": "e.g., requirements, acceptance criteria, API keys",
              "column": 2
            }
          },
          {
            "name": "at_most",
            "type": "number",
            "required": false,
            "description": "Select at most N messages to keep (system messages may be preserved in addition).",
            "validation": {
              "min": 1,
              "max": 500
            },
            "uiConfig": {
              "inputType": "number",
              "min": 1,
              "max": 500,
              "column": 1
            }
          },
          {
            "name": "ignore_person",
            "type": "string",
            "required": false,
            "description": "Comma-separated list of person IDs whose messages should be excluded from memory selection.",
            "uiConfig": {
              "inputType": "text",
              "placeholder": "e.g., assistant, user2",
              "column": 2
            }
          },
          {
            "name": "tools",
            "type": "string",
            "required": false,
            "description": "Tools available to the AI agent",
            "uiConfig": {
              "column": 1,
              "inputType": "select",
              "options": [
                {
                  "value": "none",
                  "label": "None - No tools"
                },
                {
                  "value": "image",
                  "label": "Image - Image generation capabilities"
                },
                {
                  "value": "websearch",
                  "label": "Web Search - Search the internet"
                }
              ]
            }
          },
          {
            "name": "text_format",
            "type": "string",
            "required": false,
            "description": "JSON schema or response format for structured outputs",
            "uiConfig": {
              "inputType": "textarea",
              "placeholder": "{\"type\": \"object\", \"properties\": {...}}",
              "column": 2,
              "rows": 6,
              "adjustable": true
            }
          },
          {
            "name": "text_format_file",
            "type": "string",
            "required": false,
            "description": "Path to Python file containing Pydantic models for structured outputs",
            "uiConfig": {
              "inputType": "text",
              "placeholder": "path/to/models.py",
              "column": 2
            }
          },
          {
            "name": "resolved_prompt",
            "type": "string",
            "required": false,
            "description": "Pre-resolved prompt content from compile-time",
            "uiConfig": {
              "inputType": "textarea",
              "column": 2,
              "rows": 4
            }
          },
          {
            "name": "resolved_first_prompt",
            "type": "string",
            "required": false,
            "description": "Pre-resolved first prompt content from compile-time",
            "uiConfig": {
              "inputType": "textarea",
              "column": 2,
              "rows": 4
            }
          },
          {
            "name": "batch",
            "type": "boolean",
            "required": false,
            "defaultValue": false,
            "description": "Enable batch mode for processing multiple items",
            "uiConfig": {
              "inputType": "checkbox"
            }
          },
          {
            "name": "batch_input_key",
            "type": "string",
            "required": false,
            "defaultValue": "items",
            "description": "Key containing the array to iterate over in batch mode",
            "uiConfig": {
              "inputType": "text",
              "placeholder": "items"
            }
          },
          {
            "name": "batch_parallel",
            "type": "boolean",
            "required": false,
            "defaultValue": true,
            "description": "Execute batch items in parallel",
            "uiConfig": {
              "inputType": "checkbox"
            }
          },
          {
            "name": "max_concurrent",
            "type": "number",
            "required": false,
            "defaultValue": 10,
            "description": "Maximum concurrent executions in batch mode",
            "validation": {
              "min": 1,
              "max": 100
            },
            "uiConfig": {
              "inputType": "number",
              "min": 1,
              "max": 100
            }
          }
        ],
        "handles": {
          "inputs": [
            "default",
            "first"
          ],
          "outputs": [
            "default"
          ]
        },
        "outputs": {
          "result": {
            "type": "any",
            "description": "AI response and results"
          }
        },
        "execution": {
          "timeout": 300,
          "retryable": true,
          "maxRetries": 3
        },
        "primaryDisplayField": "person",
        "handlerMetadata": {
          "modulePath": "dipeo.application.execution.handlers.person_job",
          "className": "PersonJobHandler",
          "mixins": [
            "LoggingMixin",
            "ValidationMixin",
            "ConfigurationMixin"
          ],
          "serviceKeys": [
            "LLM_CLIENT",
            "STATE_STORE",
            "EVENT_BUS"
          ],
          "skipGeneration": true
        }
      }
    },
    {
      "node_type": "start",
      "node_name": "Start",
      "name": "start",
      "display_name": "Start Node",
      "category": "control",
      "description": "Entry point for diagram execution",
      "fields": [
        {
          "name": "trigger_mode",
          "type": "enum",
          "python_type": "startTrigger_ModeEnum",
          "graphql_type": "startTrigger_ModeEnum",
          "required": false,
          "description": "How this start node is triggered",
          "validation": {
            "allowedValues": [
              "none",
              "manual",
              "hook"
            ]
          },
          "uiConfig": {
            "inputType": "select",
            "options": [
              {
                "value": "none",
                "label": "None - Simple start point"
              },
              {
                "value": "manual",
                "label": "Manual - Triggered manually with data"
              },
              {
                "value": "hook",
                "label": "Hook - Triggered by external events"
              }
            ]
          },
          "default": "none",
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": true,
          "enum_values": [
            "none",
            "manual",
            "hook"
          ]
        },
        {
          "name": "custom_data",
          "type": "any",
          "python_type": "Any",
          "graphql_type": "JSONScalar",
          "required": false,
          "description": "Custom data to pass when manually triggered",
          "validation": {},
          "uiConfig": {
            "inputType": "text"
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "output_data_structure",
          "type": "object",
          "python_type": "Dict[str, Any]",
          "graphql_type": "JSON",
          "required": false,
          "description": "Expected output data structure",
          "validation": {},
          "uiConfig": {
            "inputType": "code",
            "collapsible": true
          },
          "default": null,
          "is_object_type": true,
          "is_dict_type": true,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "hook_event",
          "type": "string",
          "python_type": "str",
          "graphql_type": "String",
          "required": false,
          "description": "Event name to listen for",
          "validation": {},
          "uiConfig": {
            "inputType": "text",
            "placeholder": "e.g., webhook.received, file.uploaded"
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "hook_filters",
          "type": "object",
          "python_type": "Dict[str, Any]",
          "graphql_type": "JSON",
          "required": false,
          "description": "Filters to apply to incoming events",
          "validation": {},
          "uiConfig": {
            "inputType": "code",
            "collapsible": true
          },
          "default": null,
          "is_object_type": true,
          "is_dict_type": true,
          "is_enum": false,
          "enum_values": []
        }
      ],
      "icon": "\ud83d\ude80",
      "color": "#4CAF50",
      "handler_metadata": {},
      "spec": {
        "nodeType": "NodeType.START",
        "displayName": "Start Node",
        "category": "control",
        "description": "Entry point for diagram execution",
        "icon": "\ud83d\ude80",
        "color": "#4CAF50",
        "fields": [
          {
            "name": "trigger_mode",
            "type": "enum",
            "python_type": "startTrigger_ModeEnum",
            "graphql_type": "startTrigger_ModeEnum",
            "required": false,
            "description": "How this start node is triggered",
            "validation": {
              "allowedValues": [
                "none",
                "manual",
                "hook"
              ]
            },
            "uiConfig": {
              "inputType": "select",
              "options": [
                {
                  "value": "none",
                  "label": "None - Simple start point"
                },
                {
                  "value": "manual",
                  "label": "Manual - Triggered manually with data"
                },
                {
                  "value": "hook",
                  "label": "Hook - Triggered by external events"
                }
              ]
            },
            "default": "none",
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": true,
            "enum_values": [
              "none",
              "manual",
              "hook"
            ]
          },
          {
            "name": "custom_data",
            "type": "any",
            "python_type": "Any",
            "graphql_type": "JSONScalar",
            "required": false,
            "description": "Custom data to pass when manually triggered",
            "validation": {},
            "uiConfig": {
              "inputType": "text"
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "output_data_structure",
            "type": "object",
            "python_type": "Dict[str, Any]",
            "graphql_type": "JSON",
            "required": false,
            "description": "Expected output data structure",
            "validation": {},
            "uiConfig": {
              "inputType": "code",
              "collapsible": true
            },
            "default": null,
            "is_object_type": true,
            "is_dict_type": true,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "hook_event",
            "type": "string",
            "python_type": "str",
            "graphql_type": "String",
            "required": false,
            "description": "Event name to listen for",
            "validation": {},
            "uiConfig": {
              "inputType": "text",
              "placeholder": "e.g., webhook.received, file.uploaded"
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "hook_filters",
            "type": "object",
            "python_type": "Dict[str, Any]",
            "graphql_type": "JSON",
            "required": false,
            "description": "Filters to apply to incoming events",
            "validation": {},
            "uiConfig": {
              "inputType": "code",
              "collapsible": true
            },
            "default": null,
            "is_object_type": true,
            "is_dict_type": true,
            "is_enum": false,
            "enum_values": []
          }
        ],
        "handles": {
          "inputs": [],
          "outputs": [
            "default"
          ]
        },
        "outputs": {
          "result": {
            "type": "any",
            "description": "Node execution result"
          }
        },
        "execution": {
          "timeout": 300,
          "retryable": true,
          "maxRetries": 3
        },
        "primaryDisplayField": "",
        "defaults": {},
        "handlerMetadata": {}
      },
      "raw_spec": {
        "nodeType": "NodeType.START",
        "displayName": "Start Node",
        "category": "control",
        "icon": "\ud83d\ude80",
        "color": "#4CAF50",
        "description": "Entry point for diagram execution",
        "fields": [
          {
            "name": "trigger_mode",
            "type": "enum",
            "required": false,
            "defaultValue": "none",
            "description": "How this start node is triggered",
            "validation": {
              "allowedValues": [
                "none",
                "manual",
                "hook"
              ]
            },
            "uiConfig": {
              "inputType": "select",
              "options": [
                {
                  "value": "none",
                  "label": "None - Simple start point"
                },
                {
                  "value": "manual",
                  "label": "Manual - Triggered manually with data"
                },
                {
                  "value": "hook",
                  "label": "Hook - Triggered by external events"
                }
              ]
            }
          },
          {
            "name": "custom_data",
            "type": "any",
            "required": false,
            "description": "Custom data to pass when manually triggered",
            "conditional": {
              "field": "trigger_mode",
              "values": [
                "manual"
              ]
            },
            "uiConfig": {
              "inputType": "text"
            }
          },
          {
            "name": "output_data_structure",
            "type": "object",
            "required": false,
            "description": "Expected output data structure",
            "conditional": {
              "field": "trigger_mode",
              "values": [
                "manual"
              ]
            },
            "uiConfig": {
              "inputType": "code",
              "collapsible": true
            }
          },
          {
            "name": "hook_event",
            "type": "string",
            "required": false,
            "description": "Event name to listen for",
            "conditional": {
              "field": "trigger_mode",
              "values": [
                "hook"
              ]
            },
            "uiConfig": {
              "inputType": "text",
              "placeholder": "e.g., webhook.received, file.uploaded"
            }
          },
          {
            "name": "hook_filters",
            "type": "object",
            "required": false,
            "description": "Filters to apply to incoming events",
            "conditional": {
              "field": "trigger_mode",
              "values": [
                "hook"
              ]
            },
            "uiConfig": {
              "inputType": "code",
              "collapsible": true
            }
          }
        ],
        "handles": {
          "inputs": [],
          "outputs": [
            "default"
          ]
        },
        "outputs": {
          "result": {
            "type": "any",
            "description": "Node execution result"
          }
        },
        "execution": {
          "timeout": 300,
          "retryable": true,
          "maxRetries": 3
        }
      }
    },
    {
      "node_type": "sub_diagram",
      "node_name": "SubDiagram",
      "name": "subDiagram",
      "display_name": "Sub-Diagram",
      "category": "compute",
      "description": "Execute another diagram as a node within the current diagram",
      "fields": [
        {
          "name": "diagram_name",
          "type": "string",
          "python_type": "str",
          "graphql_type": "String",
          "required": false,
          "description": "Name of the diagram to execute (e.g., 'workflow/process')",
          "validation": {},
          "uiConfig": {
            "inputType": "select",
            "placeholder": "Select diagram..."
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "diagram_data",
          "type": "object",
          "python_type": "Dict[str, Any]",
          "graphql_type": "JSON",
          "required": false,
          "description": "Inline diagram data (alternative to diagram_name)",
          "validation": {},
          "uiConfig": {
            "inputType": "code",
            "collapsible": true
          },
          "default": null,
          "is_object_type": true,
          "is_dict_type": true,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "input_mapping",
          "type": "object",
          "python_type": "Dict[str, Any]",
          "graphql_type": "JSON",
          "required": false,
          "description": "Map node inputs to sub-diagram variables",
          "validation": {},
          "uiConfig": {
            "inputType": "code",
            "placeholder": "{ \"targetVar\": \"sourceInput\" }"
          },
          "default": null,
          "is_object_type": true,
          "is_dict_type": true,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "output_mapping",
          "type": "object",
          "python_type": "Dict[str, Any]",
          "graphql_type": "JSON",
          "required": false,
          "description": "Map sub-diagram outputs to node outputs",
          "validation": {},
          "uiConfig": {
            "inputType": "code",
            "placeholder": "{ \"outputKey\": \"nodeId.field\" }"
          },
          "default": null,
          "is_object_type": true,
          "is_dict_type": true,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "timeout",
          "type": "number",
          "python_type": "int",
          "graphql_type": "Int",
          "required": false,
          "description": "Execution timeout in seconds",
          "validation": {
            "min": 1,
            "max": 3600
          },
          "uiConfig": {
            "inputType": "number",
            "min": 1,
            "max": 3600
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "wait_for_completion",
          "type": "boolean",
          "python_type": "bool",
          "graphql_type": "Boolean",
          "required": false,
          "description": "Whether to wait for sub-diagram completion",
          "validation": {},
          "uiConfig": {
            "inputType": "checkbox"
          },
          "default": true,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "isolate_conversation",
          "type": "boolean",
          "python_type": "bool",
          "graphql_type": "Boolean",
          "required": false,
          "description": "Create isolated conversation context for sub-diagram",
          "validation": {},
          "uiConfig": {
            "inputType": "checkbox"
          },
          "default": false,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "ignoreIfSub",
          "type": "boolean",
          "python_type": "bool",
          "graphql_type": "Boolean",
          "required": false,
          "description": "Skip execution if this diagram is being run as a sub-diagram",
          "validation": {},
          "uiConfig": {
            "inputType": "checkbox"
          },
          "default": false,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "diagram_format",
          "type": "enum",
          "python_type": "subDiagramDiagram_FormatEnum",
          "graphql_type": "subDiagramDiagram_FormatEnum",
          "required": false,
          "description": "Format of the diagram file (yaml, json, or light)",
          "validation": {
            "allowedValues": [
              "yaml",
              "json",
              "light"
            ]
          },
          "uiConfig": {
            "inputType": "select",
            "options": [
              {
                "label": "YAML",
                "value": "yaml"
              },
              {
                "label": "JSON",
                "value": "json"
              },
              {
                "label": "Light",
                "value": "light"
              }
            ]
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": true,
          "enum_values": [
            "yaml",
            "json",
            "light"
          ]
        },
        {
          "name": "batch",
          "type": "boolean",
          "python_type": "bool",
          "graphql_type": "Boolean",
          "required": false,
          "description": "Execute sub-diagram in batch mode for multiple inputs",
          "validation": {},
          "uiConfig": {
            "inputType": "checkbox"
          },
          "default": false,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "batch_input_key",
          "type": "string",
          "python_type": "str",
          "graphql_type": "String",
          "required": false,
          "description": "Key in inputs containing the array of items for batch processing",
          "validation": {},
          "uiConfig": {
            "inputType": "text",
            "placeholder": "items"
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "batch_parallel",
          "type": "boolean",
          "python_type": "bool",
          "graphql_type": "Boolean",
          "required": false,
          "description": "Execute batch items in parallel",
          "validation": {},
          "uiConfig": {
            "inputType": "checkbox"
          },
          "default": false,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        }
      ],
      "icon": "\ud83d\udcca",
      "color": "#8B5CF6",
      "handler_metadata": {},
      "spec": {
        "nodeType": "NodeType.SUB_DIAGRAM",
        "displayName": "Sub-Diagram",
        "category": "compute",
        "description": "Execute another diagram as a node within the current diagram",
        "icon": "\ud83d\udcca",
        "color": "#8B5CF6",
        "fields": [
          {
            "name": "diagram_name",
            "type": "string",
            "python_type": "str",
            "graphql_type": "String",
            "required": false,
            "description": "Name of the diagram to execute (e.g., 'workflow/process')",
            "validation": {},
            "uiConfig": {
              "inputType": "select",
              "placeholder": "Select diagram..."
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "diagram_data",
            "type": "object",
            "python_type": "Dict[str, Any]",
            "graphql_type": "JSON",
            "required": false,
            "description": "Inline diagram data (alternative to diagram_name)",
            "validation": {},
            "uiConfig": {
              "inputType": "code",
              "collapsible": true
            },
            "default": null,
            "is_object_type": true,
            "is_dict_type": true,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "input_mapping",
            "type": "object",
            "python_type": "Dict[str, Any]",
            "graphql_type": "JSON",
            "required": false,
            "description": "Map node inputs to sub-diagram variables",
            "validation": {},
            "uiConfig": {
              "inputType": "code",
              "placeholder": "{ \"targetVar\": \"sourceInput\" }"
            },
            "default": null,
            "is_object_type": true,
            "is_dict_type": true,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "output_mapping",
            "type": "object",
            "python_type": "Dict[str, Any]",
            "graphql_type": "JSON",
            "required": false,
            "description": "Map sub-diagram outputs to node outputs",
            "validation": {},
            "uiConfig": {
              "inputType": "code",
              "placeholder": "{ \"outputKey\": \"nodeId.field\" }"
            },
            "default": null,
            "is_object_type": true,
            "is_dict_type": true,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "timeout",
            "type": "number",
            "python_type": "int",
            "graphql_type": "Int",
            "required": false,
            "description": "Execution timeout in seconds",
            "validation": {
              "min": 1,
              "max": 3600
            },
            "uiConfig": {
              "inputType": "number",
              "min": 1,
              "max": 3600
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "wait_for_completion",
            "type": "boolean",
            "python_type": "bool",
            "graphql_type": "Boolean",
            "required": false,
            "description": "Whether to wait for sub-diagram completion",
            "validation": {},
            "uiConfig": {
              "inputType": "checkbox"
            },
            "default": true,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "isolate_conversation",
            "type": "boolean",
            "python_type": "bool",
            "graphql_type": "Boolean",
            "required": false,
            "description": "Create isolated conversation context for sub-diagram",
            "validation": {},
            "uiConfig": {
              "inputType": "checkbox"
            },
            "default": false,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "ignoreIfSub",
            "type": "boolean",
            "python_type": "bool",
            "graphql_type": "Boolean",
            "required": false,
            "description": "Skip execution if this diagram is being run as a sub-diagram",
            "validation": {},
            "uiConfig": {
              "inputType": "checkbox"
            },
            "default": false,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "diagram_format",
            "type": "enum",
            "python_type": "subDiagramDiagram_FormatEnum",
            "graphql_type": "subDiagramDiagram_FormatEnum",
            "required": false,
            "description": "Format of the diagram file (yaml, json, or light)",
            "validation": {
              "allowedValues": [
                "yaml",
                "json",
                "light"
              ]
            },
            "uiConfig": {
              "inputType": "select",
              "options": [
                {
                  "label": "YAML",
                  "value": "yaml"
                },
                {
                  "label": "JSON",
                  "value": "json"
                },
                {
                  "label": "Light",
                  "value": "light"
                }
              ]
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": true,
            "enum_values": [
              "yaml",
              "json",
              "light"
            ]
          },
          {
            "name": "batch",
            "type": "boolean",
            "python_type": "bool",
            "graphql_type": "Boolean",
            "required": false,
            "description": "Execute sub-diagram in batch mode for multiple inputs",
            "validation": {},
            "uiConfig": {
              "inputType": "checkbox"
            },
            "default": false,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "batch_input_key",
            "type": "string",
            "python_type": "str",
            "graphql_type": "String",
            "required": false,
            "description": "Key in inputs containing the array of items for batch processing",
            "validation": {},
            "uiConfig": {
              "inputType": "text",
              "placeholder": "items"
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "batch_parallel",
            "type": "boolean",
            "python_type": "bool",
            "graphql_type": "Boolean",
            "required": false,
            "description": "Execute batch items in parallel",
            "validation": {},
            "uiConfig": {
              "inputType": "checkbox"
            },
            "default": false,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          }
        ],
        "handles": {
          "inputs": [
            "default"
          ],
          "outputs": [
            "default"
          ]
        },
        "outputs": {
          "default": {
            "type": "any",
            "description": "Output from sub-diagram execution (includes results and error if any)"
          }
        },
        "execution": {
          "timeout": 600,
          "retryable": true,
          "maxRetries": 1
        },
        "primaryDisplayField": "diagram_name",
        "defaults": {},
        "handlerMetadata": {}
      },
      "raw_spec": {
        "nodeType": "NodeType.SUB_DIAGRAM",
        "displayName": "Sub-Diagram",
        "category": "compute",
        "icon": "\ud83d\udcca",
        "color": "#8B5CF6",
        "description": "Execute another diagram as a node within the current diagram",
        "fields": [
          {
            "name": "diagram_name",
            "type": "string",
            "required": false,
            "description": "Name of the diagram to execute (e.g., 'workflow/process')",
            "uiConfig": {
              "inputType": "select",
              "placeholder": "Select diagram..."
            }
          },
          {
            "name": "diagram_data",
            "type": "object",
            "required": false,
            "description": "Inline diagram data (alternative to diagram_name)",
            "uiConfig": {
              "inputType": "code",
              "collapsible": true
            }
          },
          {
            "name": "input_mapping",
            "type": "object",
            "required": false,
            "description": "Map node inputs to sub-diagram variables",
            "uiConfig": {
              "inputType": "code",
              "placeholder": "{ \"targetVar\": \"sourceInput\" }"
            }
          },
          {
            "name": "output_mapping",
            "type": "object",
            "required": false,
            "description": "Map sub-diagram outputs to node outputs",
            "uiConfig": {
              "inputType": "code",
              "placeholder": "{ \"outputKey\": \"nodeId.field\" }"
            }
          },
          {
            "name": "timeout",
            "type": "number",
            "required": false,
            "description": "Execution timeout in seconds",
            "validation": {
              "min": 1,
              "max": 3600
            },
            "uiConfig": {
              "inputType": "number",
              "min": 1,
              "max": 3600
            }
          },
          {
            "name": "wait_for_completion",
            "type": "boolean",
            "required": false,
            "defaultValue": true,
            "description": "Whether to wait for sub-diagram completion",
            "uiConfig": {
              "inputType": "checkbox"
            }
          },
          {
            "name": "isolate_conversation",
            "type": "boolean",
            "required": false,
            "defaultValue": false,
            "description": "Create isolated conversation context for sub-diagram",
            "uiConfig": {
              "inputType": "checkbox"
            }
          },
          {
            "name": "ignoreIfSub",
            "type": "boolean",
            "required": false,
            "defaultValue": false,
            "description": "Skip execution if this diagram is being run as a sub-diagram",
            "uiConfig": {
              "inputType": "checkbox"
            }
          },
          {
            "name": "diagram_format",
            "type": "enum",
            "required": false,
            "description": "Format of the diagram file (yaml, json, or light)",
            "validation": {
              "allowedValues": [
                "yaml",
                "json",
                "light"
              ]
            },
            "uiConfig": {
              "inputType": "select",
              "options": [
                {
                  "label": "YAML",
                  "value": "yaml"
                },
                {
                  "label": "JSON",
                  "value": "json"
                },
                {
                  "label": "Light",
                  "value": "light"
                }
              ]
            }
          },
          {
            "name": "batch",
            "type": "boolean",
            "required": false,
            "defaultValue": false,
            "description": "Execute sub-diagram in batch mode for multiple inputs",
            "uiConfig": {
              "inputType": "checkbox"
            }
          },
          {
            "name": "batch_input_key",
            "type": "string",
            "required": false,
            "description": "Key in inputs containing the array of items for batch processing",
            "uiConfig": {
              "inputType": "text",
              "placeholder": "items"
            }
          },
          {
            "name": "batch_parallel",
            "type": "boolean",
            "required": false,
            "defaultValue": false,
            "description": "Execute batch items in parallel",
            "uiConfig": {
              "inputType": "checkbox"
            }
          }
        ],
        "handles": {
          "inputs": [
            "default"
          ],
          "outputs": [
            "default"
          ]
        },
        "outputs": {
          "default": {
            "type": "any",
            "description": "Output from sub-diagram execution (includes results and error if any)"
          }
        },
        "execution": {
          "timeout": 600,
          "retryable": true,
          "maxRetries": 1
        },
        "examples": [
          {
            "name": "Execute Named Diagram",
            "description": "Execute a diagram by name with input mapping",
            "configuration": {
              "diagram_name": "codegen/node_ui_codegen",
              "input_mapping": {
                "spec_path": "node_specification",
                "output_dir": "output_directory"
              },
              "wait_for_completion": true
            }
          },
          {
            "name": "Execute Inline Diagram",
            "description": "Execute an inline diagram definition",
            "configuration": {
              "diagram_data": {
                "nodes": [
                  {
                    "id": "start",
                    "type": "start",
                    "data": {}
                  }
                ],
                "connections": []
              },
              "timeout": 30
            }
          }
        ],
        "primaryDisplayField": "diagram_name"
      }
    },
    {
      "node_type": "template_job",
      "node_name": "TemplateJob",
      "name": "templateJob",
      "display_name": "Template Job",
      "category": "codegen",
      "description": "Process templates with data",
      "fields": [
        {
          "name": "template_path",
          "type": "string",
          "python_type": "str",
          "graphql_type": "String",
          "required": false,
          "description": "Path to template file",
          "validation": {},
          "uiConfig": {
            "inputType": "text",
            "placeholder": "/path/to/file"
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "template_content",
          "type": "string",
          "python_type": "str",
          "graphql_type": "String",
          "required": false,
          "description": "Inline template content",
          "validation": {},
          "uiConfig": {
            "inputType": "textarea",
            "placeholder": "Enter template content...",
            "rows": 10,
            "adjustable": true
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "output_path",
          "type": "string",
          "python_type": "str",
          "graphql_type": "String",
          "required": false,
          "description": "Output file path",
          "validation": {},
          "uiConfig": {
            "inputType": "text",
            "placeholder": "/path/to/file"
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "variables",
          "type": "object",
          "python_type": "Dict[str, Any]",
          "graphql_type": "JSON",
          "required": false,
          "description": "Variables configuration",
          "validation": {},
          "uiConfig": {
            "inputType": "code",
            "collapsible": true
          },
          "default": null,
          "is_object_type": true,
          "is_dict_type": true,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "engine",
          "type": "enum",
          "python_type": "templateJobEngineEnum",
          "graphql_type": "templateJobEngineEnum",
          "required": false,
          "description": "Template engine to use",
          "validation": {
            "allowedValues": [
              "internal",
              "jinja2"
            ]
          },
          "uiConfig": {
            "inputType": "select",
            "options": [
              {
                "value": "internal",
                "label": "Internal"
              },
              {
                "value": "jinja2",
                "label": "Jinja2"
              }
            ]
          },
          "default": "jinja2",
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": true,
          "enum_values": [
            "internal",
            "jinja2"
          ]
        },
        {
          "name": "preprocessor",
          "type": "string",
          "python_type": "str",
          "graphql_type": "String",
          "required": false,
          "description": "Preprocessor function to apply before templating",
          "validation": {},
          "uiConfig": {
            "inputType": "text"
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        }
      ],
      "icon": "\ud83d\udcdd",
      "color": "#3F51B5",
      "handler_metadata": {},
      "spec": {
        "nodeType": "NodeType.TEMPLATE_JOB",
        "displayName": "Template Job",
        "category": "codegen",
        "description": "Process templates with data",
        "icon": "\ud83d\udcdd",
        "color": "#3F51B5",
        "fields": [
          {
            "name": "template_path",
            "type": "string",
            "python_type": "str",
            "graphql_type": "String",
            "required": false,
            "description": "Path to template file",
            "validation": {},
            "uiConfig": {
              "inputType": "text",
              "placeholder": "/path/to/file"
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "template_content",
            "type": "string",
            "python_type": "str",
            "graphql_type": "String",
            "required": false,
            "description": "Inline template content",
            "validation": {},
            "uiConfig": {
              "inputType": "textarea",
              "placeholder": "Enter template content...",
              "rows": 10,
              "adjustable": true
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "output_path",
            "type": "string",
            "python_type": "str",
            "graphql_type": "String",
            "required": false,
            "description": "Output file path",
            "validation": {},
            "uiConfig": {
              "inputType": "text",
              "placeholder": "/path/to/file"
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "variables",
            "type": "object",
            "python_type": "Dict[str, Any]",
            "graphql_type": "JSON",
            "required": false,
            "description": "Variables configuration",
            "validation": {},
            "uiConfig": {
              "inputType": "code",
              "collapsible": true
            },
            "default": null,
            "is_object_type": true,
            "is_dict_type": true,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "engine",
            "type": "enum",
            "python_type": "templateJobEngineEnum",
            "graphql_type": "templateJobEngineEnum",
            "required": false,
            "description": "Template engine to use",
            "validation": {
              "allowedValues": [
                "internal",
                "jinja2"
              ]
            },
            "uiConfig": {
              "inputType": "select",
              "options": [
                {
                  "value": "internal",
                  "label": "Internal"
                },
                {
                  "value": "jinja2",
                  "label": "Jinja2"
                }
              ]
            },
            "default": "jinja2",
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": true,
            "enum_values": [
              "internal",
              "jinja2"
            ]
          },
          {
            "name": "preprocessor",
            "type": "string",
            "python_type": "str",
            "graphql_type": "String",
            "required": false,
            "description": "Preprocessor function to apply before templating",
            "validation": {},
            "uiConfig": {
              "inputType": "text"
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          }
        ],
        "handles": {
          "inputs": [
            "default"
          ],
          "outputs": [
            "default"
          ]
        },
        "outputs": {
          "result": {
            "type": "any",
            "description": "Node execution result"
          }
        },
        "execution": {
          "timeout": 300,
          "retryable": true,
          "maxRetries": 3
        },
        "primaryDisplayField": "engine",
        "defaults": {},
        "handlerMetadata": {}
      },
      "raw_spec": {
        "nodeType": "NodeType.TEMPLATE_JOB",
        "displayName": "Template Job",
        "category": "codegen",
        "icon": "\ud83d\udcdd",
        "color": "#3F51B5",
        "description": "Process templates with data",
        "fields": [
          {
            "name": "template_path",
            "type": "string",
            "required": false,
            "description": "Path to template file",
            "uiConfig": {
              "inputType": "text",
              "placeholder": "/path/to/file"
            }
          },
          {
            "name": "template_content",
            "type": "string",
            "required": false,
            "description": "Inline template content",
            "uiConfig": {
              "inputType": "textarea",
              "placeholder": "Enter template content...",
              "rows": 10,
              "adjustable": true
            }
          },
          {
            "name": "output_path",
            "type": "string",
            "required": false,
            "description": "Output file path",
            "uiConfig": {
              "inputType": "text",
              "placeholder": "/path/to/file"
            }
          },
          {
            "name": "variables",
            "type": "object",
            "required": false,
            "description": "Variables configuration",
            "uiConfig": {
              "inputType": "code",
              "collapsible": true
            }
          },
          {
            "name": "engine",
            "type": "enum",
            "required": false,
            "defaultValue": "jinja2",
            "description": "Template engine to use",
            "validation": {
              "allowedValues": [
                "internal",
                "jinja2"
              ]
            },
            "uiConfig": {
              "inputType": "select",
              "options": [
                {
                  "value": "internal",
                  "label": "Internal"
                },
                {
                  "value": "jinja2",
                  "label": "Jinja2"
                }
              ]
            }
          },
          {
            "name": "preprocessor",
            "type": "string",
            "required": false,
            "description": "Preprocessor function to apply before templating",
            "uiConfig": {
              "inputType": "text"
            }
          }
        ],
        "handles": {
          "inputs": [
            "default"
          ],
          "outputs": [
            "default"
          ]
        },
        "outputs": {
          "result": {
            "type": "any",
            "description": "Node execution result"
          }
        },
        "execution": {
          "timeout": 300,
          "retryable": true,
          "maxRetries": 3
        },
        "primaryDisplayField": "engine"
      }
    },
    {
      "node_type": "typescript_ast",
      "node_name": "TypescriptAst",
      "name": "typescriptAst",
      "display_name": "TypeScript AST Parser",
      "category": "codegen",
      "description": "Parses TypeScript source code and extracts AST, interfaces, types, and enums",
      "fields": [
        {
          "name": "source",
          "type": "string",
          "python_type": "str",
          "graphql_type": "String",
          "required": false,
          "description": "TypeScript source code to parse",
          "validation": {},
          "uiConfig": {
            "inputType": "code",
            "language": "SupportedLanguage.TYPESCRIPT"
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "extractPatterns",
          "type": "array",
          "python_type": "List[Any]",
          "graphql_type": "[JSON]",
          "required": false,
          "description": "Patterns to extract from the AST",
          "validation": {
            "itemType": "string",
            "allowedValues": [
              "interface",
              "type",
              "enum",
              "class",
              "function",
              "const",
              "export"
            ]
          },
          "uiConfig": {
            "inputType": "code"
          },
          "default": [
            "interface",
            "type",
            "enum"
          ],
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": true,
          "enum_values": [
            "interface",
            "type",
            "enum",
            "class",
            "function",
            "const",
            "export"
          ]
        },
        {
          "name": "includeJSDoc",
          "type": "boolean",
          "python_type": "bool",
          "graphql_type": "Boolean",
          "required": false,
          "description": "Include JSDoc comments in the extracted data",
          "validation": {},
          "uiConfig": {
            "inputType": "checkbox"
          },
          "default": false,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "parseMode",
          "type": "enum",
          "python_type": "typescriptAstParsemodeEnum",
          "graphql_type": "typescriptAstParsemodeEnum",
          "required": false,
          "description": "TypeScript parsing mode",
          "validation": {
            "allowedValues": [
              "module",
              "script"
            ]
          },
          "uiConfig": {
            "inputType": "select",
            "options": [
              {
                "value": "module",
                "label": "Module"
              },
              {
                "value": "script",
                "label": "Script"
              }
            ]
          },
          "default": "module",
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": true,
          "enum_values": [
            "module",
            "script"
          ]
        },
        {
          "name": "transformEnums",
          "type": "boolean",
          "python_type": "bool",
          "graphql_type": "Boolean",
          "required": false,
          "description": "Transform enum definitions to a simpler format",
          "validation": {},
          "uiConfig": {
            "inputType": "checkbox"
          },
          "default": false,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "flattenOutput",
          "type": "boolean",
          "python_type": "bool",
          "graphql_type": "Boolean",
          "required": false,
          "description": "Flatten the output structure for easier consumption",
          "validation": {},
          "uiConfig": {
            "inputType": "checkbox"
          },
          "default": false,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "outputFormat",
          "type": "enum",
          "python_type": "typescriptAstOutputformatEnum",
          "graphql_type": "typescriptAstOutputformatEnum",
          "required": false,
          "description": "Output format for the parsed data",
          "validation": {
            "allowedValues": [
              "standard",
              "for_codegen",
              "for_analysis"
            ]
          },
          "uiConfig": {
            "inputType": "select",
            "options": [
              {
                "value": "standard",
                "label": "Standard"
              },
              {
                "value": "for_codegen",
                "label": "For Code Generation"
              },
              {
                "value": "for_analysis",
                "label": "For Analysis"
              }
            ]
          },
          "default": "standard",
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": true,
          "enum_values": [
            "standard",
            "for_codegen",
            "for_analysis"
          ]
        },
        {
          "name": "batch",
          "type": "boolean",
          "python_type": "bool",
          "graphql_type": "Boolean",
          "required": false,
          "description": "Enable batch processing mode",
          "validation": {},
          "uiConfig": {
            "inputType": "checkbox"
          },
          "default": false,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "batchInputKey",
          "type": "string",
          "python_type": "str",
          "graphql_type": "String",
          "required": false,
          "description": "Key to extract batch items from input",
          "validation": {},
          "uiConfig": {
            "inputType": "text"
          },
          "default": "sources",
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        }
      ],
      "icon": "\ud83d\udd0d",
      "color": "#3178c6",
      "handler_metadata": {},
      "spec": {
        "nodeType": "NodeType.TYPESCRIPT_AST",
        "displayName": "TypeScript AST Parser",
        "category": "codegen",
        "description": "Parses TypeScript source code and extracts AST, interfaces, types, and enums",
        "icon": "\ud83d\udd0d",
        "color": "#3178c6",
        "fields": [
          {
            "name": "source",
            "type": "string",
            "python_type": "str",
            "graphql_type": "String",
            "required": false,
            "description": "TypeScript source code to parse",
            "validation": {},
            "uiConfig": {
              "inputType": "code",
              "language": "SupportedLanguage.TYPESCRIPT"
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "extractPatterns",
            "type": "array",
            "python_type": "List[Any]",
            "graphql_type": "[JSON]",
            "required": false,
            "description": "Patterns to extract from the AST",
            "validation": {
              "itemType": "string",
              "allowedValues": [
                "interface",
                "type",
                "enum",
                "class",
                "function",
                "const",
                "export"
              ]
            },
            "uiConfig": {
              "inputType": "code"
            },
            "default": [
              "interface",
              "type",
              "enum"
            ],
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": true,
            "enum_values": [
              "interface",
              "type",
              "enum",
              "class",
              "function",
              "const",
              "export"
            ]
          },
          {
            "name": "includeJSDoc",
            "type": "boolean",
            "python_type": "bool",
            "graphql_type": "Boolean",
            "required": false,
            "description": "Include JSDoc comments in the extracted data",
            "validation": {},
            "uiConfig": {
              "inputType": "checkbox"
            },
            "default": false,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "parseMode",
            "type": "enum",
            "python_type": "typescriptAstParsemodeEnum",
            "graphql_type": "typescriptAstParsemodeEnum",
            "required": false,
            "description": "TypeScript parsing mode",
            "validation": {
              "allowedValues": [
                "module",
                "script"
              ]
            },
            "uiConfig": {
              "inputType": "select",
              "options": [
                {
                  "value": "module",
                  "label": "Module"
                },
                {
                  "value": "script",
                  "label": "Script"
                }
              ]
            },
            "default": "module",
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": true,
            "enum_values": [
              "module",
              "script"
            ]
          },
          {
            "name": "transformEnums",
            "type": "boolean",
            "python_type": "bool",
            "graphql_type": "Boolean",
            "required": false,
            "description": "Transform enum definitions to a simpler format",
            "validation": {},
            "uiConfig": {
              "inputType": "checkbox"
            },
            "default": false,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "flattenOutput",
            "type": "boolean",
            "python_type": "bool",
            "graphql_type": "Boolean",
            "required": false,
            "description": "Flatten the output structure for easier consumption",
            "validation": {},
            "uiConfig": {
              "inputType": "checkbox"
            },
            "default": false,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "outputFormat",
            "type": "enum",
            "python_type": "typescriptAstOutputformatEnum",
            "graphql_type": "typescriptAstOutputformatEnum",
            "required": false,
            "description": "Output format for the parsed data",
            "validation": {
              "allowedValues": [
                "standard",
                "for_codegen",
                "for_analysis"
              ]
            },
            "uiConfig": {
              "inputType": "select",
              "options": [
                {
                  "value": "standard",
                  "label": "Standard"
                },
                {
                  "value": "for_codegen",
                  "label": "For Code Generation"
                },
                {
                  "value": "for_analysis",
                  "label": "For Analysis"
                }
              ]
            },
            "default": "standard",
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": true,
            "enum_values": [
              "standard",
              "for_codegen",
              "for_analysis"
            ]
          },
          {
            "name": "batch",
            "type": "boolean",
            "python_type": "bool",
            "graphql_type": "Boolean",
            "required": false,
            "description": "Enable batch processing mode",
            "validation": {},
            "uiConfig": {
              "inputType": "checkbox"
            },
            "default": false,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "batchInputKey",
            "type": "string",
            "python_type": "str",
            "graphql_type": "String",
            "required": false,
            "description": "Key to extract batch items from input",
            "validation": {},
            "uiConfig": {
              "inputType": "text"
            },
            "default": "sources",
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          }
        ],
        "handles": {
          "inputs": [
            "default"
          ],
          "outputs": [
            "results",
            "error"
          ]
        },
        "outputs": {
          "ast": {
            "type": "any",
            "description": "Parsed AST structure"
          },
          "interfaces": {
            "type": "any",
            "description": "Extracted interface definitions"
          },
          "types": {
            "type": "any",
            "description": "Extracted type aliases"
          },
          "enums": {
            "type": "any",
            "description": "Extracted enum definitions"
          },
          "error": {
            "type": "any",
            "description": "Error message if parsing fails"
          }
        },
        "execution": {
          "timeout": 30,
          "retryable": false,
          "maxRetries": 0
        },
        "primaryDisplayField": "parseMode",
        "defaults": {},
        "handlerMetadata": {}
      },
      "raw_spec": {
        "nodeType": "NodeType.TYPESCRIPT_AST",
        "displayName": "TypeScript AST Parser",
        "category": "codegen",
        "icon": "\ud83d\udd0d",
        "color": "#3178c6",
        "description": "Parses TypeScript source code and extracts AST, interfaces, types, and enums",
        "fields": [
          {
            "name": "source",
            "type": "string",
            "required": false,
            "description": "TypeScript source code to parse",
            "uiConfig": {
              "inputType": "code",
              "language": "SupportedLanguage.TYPESCRIPT"
            }
          },
          {
            "name": "extractPatterns",
            "type": "array",
            "required": false,
            "defaultValue": [
              "interface",
              "type",
              "enum"
            ],
            "description": "Patterns to extract from the AST",
            "validation": {
              "itemType": "string",
              "allowedValues": [
                "interface",
                "type",
                "enum",
                "class",
                "function",
                "const",
                "export"
              ]
            },
            "uiConfig": {
              "inputType": "code"
            }
          },
          {
            "name": "includeJSDoc",
            "type": "boolean",
            "required": false,
            "defaultValue": false,
            "description": "Include JSDoc comments in the extracted data",
            "uiConfig": {
              "inputType": "checkbox"
            }
          },
          {
            "name": "parseMode",
            "type": "enum",
            "required": false,
            "defaultValue": "module",
            "description": "TypeScript parsing mode",
            "validation": {
              "allowedValues": [
                "module",
                "script"
              ]
            },
            "uiConfig": {
              "inputType": "select",
              "options": [
                {
                  "value": "module",
                  "label": "Module"
                },
                {
                  "value": "script",
                  "label": "Script"
                }
              ]
            }
          },
          {
            "name": "transformEnums",
            "type": "boolean",
            "required": false,
            "defaultValue": false,
            "description": "Transform enum definitions to a simpler format",
            "uiConfig": {
              "inputType": "checkbox"
            }
          },
          {
            "name": "flattenOutput",
            "type": "boolean",
            "required": false,
            "defaultValue": false,
            "description": "Flatten the output structure for easier consumption",
            "uiConfig": {
              "inputType": "checkbox"
            }
          },
          {
            "name": "outputFormat",
            "type": "enum",
            "required": false,
            "defaultValue": "standard",
            "description": "Output format for the parsed data",
            "validation": {
              "allowedValues": [
                "standard",
                "for_codegen",
                "for_analysis"
              ]
            },
            "uiConfig": {
              "inputType": "select",
              "options": [
                {
                  "value": "standard",
                  "label": "Standard"
                },
                {
                  "value": "for_codegen",
                  "label": "For Code Generation"
                },
                {
                  "value": "for_analysis",
                  "label": "For Analysis"
                }
              ]
            }
          },
          {
            "name": "batch",
            "type": "boolean",
            "required": false,
            "defaultValue": false,
            "description": "Enable batch processing mode",
            "uiConfig": {
              "inputType": "checkbox"
            }
          },
          {
            "name": "batchInputKey",
            "type": "string",
            "required": false,
            "defaultValue": "sources",
            "description": "Key to extract batch items from input",
            "uiConfig": {
              "inputType": "text"
            }
          }
        ],
        "handles": {
          "inputs": [
            "default"
          ],
          "outputs": [
            "results",
            "error"
          ]
        },
        "outputs": {
          "ast": {
            "type": "any",
            "description": "Parsed AST structure"
          },
          "interfaces": {
            "type": "any",
            "description": "Extracted interface definitions"
          },
          "types": {
            "type": "any",
            "description": "Extracted type aliases"
          },
          "enums": {
            "type": "any",
            "description": "Extracted enum definitions"
          },
          "error": {
            "type": "any",
            "description": "Error message if parsing fails"
          }
        },
        "execution": {
          "timeout": 30,
          "retryable": false,
          "maxRetries": 0
        },
        "examples": [
          {
            "name": "Parse Interface",
            "description": "Extract interface from TypeScript code",
            "configuration": {
              "source": "interface User {\n  id: string;\n  name: string;\n  age?: number;\n}",
              "extractPatterns": [
                "interface"
              ]
            }
          },
          {
            "name": "Parse Multiple Types",
            "description": "Extract interfaces, types, and enums",
            "configuration": {
              "source": "interface User { id: string; }\ntype Status = 'active' | 'inactive';\nenum Role { Admin, User }",
              "extractPatterns": [
                "interface",
                "type",
                "enum"
              ],
              "includeJSDoc": true
            }
          }
        ],
        "primaryDisplayField": "parseMode"
      }
    },
    {
      "node_type": "user_response",
      "node_name": "UserResponse",
      "name": "userResponse",
      "display_name": "User Response",
      "category": "integration",
      "description": "Collect user input",
      "fields": [
        {
          "name": "prompt",
          "type": "string",
          "python_type": "str",
          "graphql_type": "String",
          "required": true,
          "description": "Question to ask the user",
          "validation": {},
          "uiConfig": {
            "inputType": "textarea",
            "placeholder": "Enter prompt template..."
          },
          "default": null,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "timeout",
          "type": "number",
          "python_type": "int",
          "graphql_type": "Int",
          "required": false,
          "description": "Response timeout in seconds",
          "validation": {},
          "uiConfig": {
            "inputType": "number",
            "min": 0,
            "max": 3600
          },
          "default": 300,
          "is_object_type": false,
          "is_dict_type": false,
          "is_enum": false,
          "enum_values": []
        }
      ],
      "icon": "\ud83d\udcac",
      "color": "#E91E63",
      "handler_metadata": {},
      "spec": {
        "nodeType": "NodeType.USER_RESPONSE",
        "displayName": "User Response",
        "category": "integration",
        "description": "Collect user input",
        "icon": "\ud83d\udcac",
        "color": "#E91E63",
        "fields": [
          {
            "name": "prompt",
            "type": "string",
            "python_type": "str",
            "graphql_type": "String",
            "required": true,
            "description": "Question to ask the user",
            "validation": {},
            "uiConfig": {
              "inputType": "textarea",
              "placeholder": "Enter prompt template..."
            },
            "default": null,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          },
          {
            "name": "timeout",
            "type": "number",
            "python_type": "int",
            "graphql_type": "Int",
            "required": false,
            "description": "Response timeout in seconds",
            "validation": {},
            "uiConfig": {
              "inputType": "number",
              "min": 0,
              "max": 3600
            },
            "default": 300,
            "is_object_type": false,
            "is_dict_type": false,
            "is_enum": false,
            "enum_values": []
          }
        ],
        "handles": {
          "inputs": [
            "default"
          ],
          "outputs": [
            "default"
          ]
        },
        "outputs": {
          "result": {
            "type": "any",
            "description": "Node execution result"
          }
        },
        "execution": {
          "timeout": 300,
          "retryable": true,
          "maxRetries": 3
        },
        "primaryDisplayField": "prompt",
        "defaults": {},
        "handlerMetadata": {}
      },
      "raw_spec": {
        "nodeType": "NodeType.USER_RESPONSE",
        "displayName": "User Response",
        "category": "integration",
        "icon": "\ud83d\udcac",
        "color": "#E91E63",
        "description": "Collect user input",
        "fields": [
          {
            "name": "prompt",
            "type": "string",
            "required": true,
            "description": "Question to ask the user",
            "uiConfig": {
              "inputType": "textarea",
              "placeholder": "Enter prompt template..."
            }
          },
          {
            "name": "timeout",
            "type": "number",
            "required": false,
            "defaultValue": 300,
            "description": "Response timeout in seconds",
            "uiConfig": {
              "inputType": "number",
              "min": 0,
              "max": 3600
            }
          }
        ],
        "handles": {
          "inputs": [
            "default"
          ],
          "outputs": [
            "default"
          ]
        },
        "outputs": {
          "result": {
            "type": "any",
            "description": "Node execution result"
          }
        },
        "execution": {
          "timeout": 300,
          "retryable": true,
          "maxRetries": 3
        },
        "primaryDisplayField": "prompt"
      }
    }
  ],
  "node_configs": [
    {
      "node_type": "api_job",
      "node_name": "ApiJob",
      "name": "apiJob",
      "display_name": "API Job",
      "category": "integration",
      "description": "Make HTTP API requests",
      "icon": "\ud83c\udf10",
      "color": "#00BCD4",
      "fields": [
        {
          "name": "url",
          "type": "string",
          "label": "Url",
          "required": true,
          "description": "API endpoint URL",
          "help_text": "API endpoint URL",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "text",
            "placeholder": "https://example.com"
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "method",
          "type": "enum",
          "label": "Method",
          "required": true,
          "description": "HTTP method",
          "help_text": "HTTP method",
          "default": null,
          "validation": {
            "allowedValues": [
              "GET",
              "POST",
              "PUT",
              "DELETE",
              "PATCH"
            ]
          },
          "uiConfig": {
            "inputType": "select",
            "options": [
              {
                "value": "GET",
                "label": "GET"
              },
              {
                "value": "POST",
                "label": "POST"
              },
              {
                "value": "PUT",
                "label": "PUT"
              },
              {
                "value": "DELETE",
                "label": "DELETE"
              },
              {
                "value": "PATCH",
                "label": "PATCH"
              }
            ]
          },
          "is_enum": true,
          "enum_values": [
            "GET",
            "POST",
            "PUT",
            "DELETE",
            "PATCH"
          ]
        },
        {
          "name": "headers",
          "type": "object",
          "label": "Headers",
          "required": false,
          "description": "HTTP headers",
          "help_text": "HTTP headers",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "code",
            "collapsible": true
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "params",
          "type": "object",
          "label": "Params",
          "required": false,
          "description": "Query parameters",
          "help_text": "Query parameters",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "code",
            "collapsible": true
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "body",
          "type": "object",
          "label": "Body",
          "required": false,
          "description": "Request body",
          "help_text": "Request body",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "code",
            "collapsible": true
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "timeout",
          "type": "number",
          "label": "Timeout",
          "required": false,
          "description": "Request timeout in seconds",
          "help_text": "Request timeout in seconds",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "number",
            "min": 0,
            "max": 3600
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "auth_type",
          "type": "enum",
          "label": "Auth Type",
          "required": false,
          "description": "Authentication type",
          "help_text": "Authentication type",
          "default": null,
          "validation": {
            "allowedValues": [
              "none",
              "bearer",
              "basic",
              "api_key"
            ]
          },
          "uiConfig": {
            "inputType": "select",
            "options": [
              {
                "value": "none",
                "label": "None"
              },
              {
                "value": "bearer",
                "label": "Bearer Token"
              },
              {
                "value": "basic",
                "label": "Basic Auth"
              },
              {
                "value": "api_key",
                "label": "API Key"
              }
            ]
          },
          "is_enum": true,
          "enum_values": [
            "none",
            "bearer",
            "basic",
            "api_key"
          ]
        },
        {
          "name": "auth_config",
          "type": "object",
          "label": "Auth Config",
          "required": false,
          "description": "Authentication configuration",
          "help_text": "Authentication configuration",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "code",
            "collapsible": true
          },
          "is_enum": false,
          "enum_values": []
        }
      ],
      "handles": {
        "inputs": [
          "default"
        ],
        "outputs": [
          "default"
        ]
      },
      "outputs": {
        "result": {
          "type": "any",
          "description": "API response data"
        }
      },
      "primaryDisplayField": "method"
    },
    {
      "node_type": "code_job",
      "node_name": "CodeJob",
      "name": "codeJob",
      "display_name": "Code Job",
      "category": "compute",
      "description": "Execute custom code functions",
      "icon": "\ud83d\udcbb",
      "color": "#9C27B0",
      "fields": [
        {
          "name": "language",
          "type": "enum",
          "label": "Language",
          "required": true,
          "description": "Programming language",
          "help_text": "Programming language",
          "default": null,
          "validation": {
            "allowedValues": [
              "python",
              "typescript",
              "bash",
              "shell"
            ]
          },
          "uiConfig": {
            "inputType": "select",
            "options": [
              {
                "value": "python",
                "label": "Python"
              },
              {
                "value": "typescript",
                "label": "TypeScript"
              },
              {
                "value": "bash",
                "label": "Bash"
              },
              {
                "value": "shell",
                "label": "Shell"
              }
            ]
          },
          "is_enum": true,
          "enum_values": [
            "python",
            "typescript",
            "bash",
            "shell"
          ]
        },
        {
          "name": "filePath",
          "type": "string",
          "label": "Filepath",
          "required": false,
          "description": "Path to code file",
          "help_text": "Path to code file",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "text",
            "placeholder": "/path/to/file"
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "code",
          "type": "string",
          "label": "Code",
          "required": false,
          "description": "Inline code to execute (alternative to filePath)",
          "help_text": "Inline code to execute (alternative to filePath)",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "code",
            "rows": 10,
            "adjustable": true
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "functionName",
          "type": "string",
          "label": "Functionname",
          "required": false,
          "description": "Function to execute",
          "help_text": "Function to execute",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "text"
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "timeout",
          "type": "number",
          "label": "Timeout",
          "required": false,
          "description": "Execution timeout in seconds",
          "help_text": "Execution timeout in seconds",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "number",
            "min": 0,
            "max": 3600
          },
          "is_enum": false,
          "enum_values": []
        }
      ],
      "handles": {
        "inputs": [
          "default"
        ],
        "outputs": [
          "default"
        ]
      },
      "outputs": {
        "result": {
          "type": "any",
          "description": "Code execution result"
        }
      },
      "primaryDisplayField": "language"
    },
    {
      "node_type": "condition",
      "node_name": "Condition",
      "name": "condition",
      "display_name": "Condition",
      "category": "control",
      "description": "Conditional branching based on expressions",
      "icon": "\ud83d\udd00",
      "color": "#FF9800",
      "fields": [
        {
          "name": "condition_type",
          "type": "enum",
          "label": "Condition Type",
          "required": false,
          "description": "Type of condition to evaluate",
          "help_text": "Type of condition to evaluate",
          "default": "custom",
          "validation": {
            "allowedValues": [
              "detect_max_iterations",
              "check_nodes_executed",
              "custom",
              "llm_decision"
            ]
          },
          "uiConfig": {
            "inputType": "select",
            "options": [
              {
                "value": "detect_max_iterations",
                "label": "Detect Max Iterations"
              },
              {
                "value": "check_nodes_executed",
                "label": "Check Nodes Executed"
              },
              {
                "value": "custom",
                "label": "Custom Expression"
              },
              {
                "value": "llm_decision",
                "label": "LLM Decision"
              }
            ]
          },
          "is_enum": true,
          "enum_values": [
            "detect_max_iterations",
            "check_nodes_executed",
            "custom",
            "llm_decision"
          ]
        },
        {
          "name": "expression",
          "type": "string",
          "label": "Expression",
          "required": false,
          "description": "Boolean expression to evaluate",
          "help_text": "Boolean expression to evaluate",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "textarea",
            "placeholder": "e.g., inputs.value > 10",
            "rows": 3
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "node_indices",
          "type": "array",
          "label": "Node Indices",
          "required": false,
          "description": "Node indices for detect_max_iteration condition",
          "help_text": "Node indices for detect_max_iteration condition",
          "default": null,
          "validation": {
            "itemType": "string"
          },
          "uiConfig": {
            "inputType": "nodeSelect",
            "placeholder": "Select nodes to monitor"
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "person",
          "type": "string",
          "label": "Person",
          "required": false,
          "description": "AI agent to use for decision making",
          "help_text": "AI agent to use for decision making",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "personSelect",
            "placeholder": "Select AI agent"
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "judge_by",
          "type": "string",
          "label": "Judge By",
          "required": false,
          "description": "Prompt for LLM to make a judgment",
          "help_text": "Prompt for LLM to make a judgment",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "textarea",
            "placeholder": "Enter the prompt for LLM to judge (should result in YES/NO)",
            "rows": 5
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "judge_by_file",
          "type": "string",
          "label": "Judge By File",
          "required": false,
          "description": "External prompt file path",
          "help_text": "External prompt file path",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "text",
            "placeholder": "e.g., prompts/quality_check.txt"
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "memorize_to",
          "type": "string",
          "label": "Memorize To",
          "required": false,
          "description": "Memory control strategy (e.g., GOLDFISH for fresh evaluation)",
          "help_text": "Memory control strategy (e.g., GOLDFISH for fresh evaluation)",
          "default": "GOLDFISH",
          "validation": {},
          "uiConfig": {
            "inputType": "text",
            "placeholder": "e.g., GOLDFISH"
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "at_most",
          "type": "number",
          "label": "At Most",
          "required": false,
          "description": "Maximum messages to keep in memory",
          "help_text": "Maximum messages to keep in memory",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "number",
            "placeholder": "e.g., 10"
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "expose_index_as",
          "type": "string",
          "label": "Expose Index As",
          "required": false,
          "description": "Variable name to expose the condition node's execution count (0-based index) to downstream nodes",
          "help_text": "Variable name to expose the condition node's execution count (0-based index) to downstream nodes",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "text",
            "placeholder": "e.g., current_index, loop_counter"
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "skippable",
          "type": "boolean",
          "label": "Skippable",
          "required": false,
          "description": "When true, downstream nodes can execute even if this condition hasn't been evaluated yet",
          "help_text": "When true, downstream nodes can execute even if this condition hasn't been evaluated yet",
          "default": false,
          "validation": {},
          "uiConfig": {
            "inputType": "checkbox"
          },
          "is_enum": false,
          "enum_values": []
        }
      ],
      "handles": {
        "inputs": [
          "default"
        ],
        "outputs": [
          "condtrue",
          "condfalse"
        ]
      },
      "outputs": {
        "true": {
          "type": "any",
          "description": "Output when condition is true"
        },
        "false": {
          "type": "any",
          "description": "Output when condition is false"
        }
      },
      "primaryDisplayField": "condition_type"
    },
    {
      "node_type": "db",
      "node_name": "Db",
      "name": "db",
      "display_name": "Database",
      "category": "integration",
      "description": "Database operations",
      "icon": "\ud83d\uddc4\ufe0f",
      "color": "#795548",
      "fields": [
        {
          "name": "file",
          "type": "any",
          "label": "File",
          "required": false,
          "description": "File path or array of file paths",
          "help_text": "File path or array of file paths",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "text"
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "collection",
          "type": "string",
          "label": "Collection",
          "required": false,
          "description": "Database collection name",
          "help_text": "Database collection name",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "text"
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "sub_type",
          "type": "enum",
          "label": "Sub Type",
          "required": true,
          "description": "Database operation type",
          "help_text": "Database operation type",
          "default": null,
          "validation": {
            "allowedValues": [
              "fixed_prompt",
              "file",
              "code",
              "api_tool"
            ]
          },
          "uiConfig": {
            "inputType": "select",
            "options": [
              {
                "value": "fixed_prompt",
                "label": "Fixed Prompt"
              },
              {
                "value": "file",
                "label": "File"
              },
              {
                "value": "code",
                "label": "Code"
              },
              {
                "value": "api_tool",
                "label": "API Tool"
              }
            ]
          },
          "is_enum": true,
          "enum_values": [
            "fixed_prompt",
            "file",
            "code",
            "api_tool"
          ]
        },
        {
          "name": "operation",
          "type": "string",
          "label": "Operation",
          "required": true,
          "description": "Operation configuration",
          "help_text": "Operation configuration",
          "default": null,
          "validation": {
            "allowedValues": [
              "prompt",
              "read",
              "write",
              "append",
              "update"
            ]
          },
          "uiConfig": {
            "inputType": "text"
          },
          "is_enum": true,
          "enum_values": [
            "prompt",
            "read",
            "write",
            "append",
            "update"
          ]
        },
        {
          "name": "query",
          "type": "string",
          "label": "Query",
          "required": false,
          "description": "Query configuration",
          "help_text": "Query configuration",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "text"
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "keys",
          "type": "any",
          "label": "Keys",
          "required": false,
          "description": "Single key or list of dot-separated keys to target within the JSON payload",
          "help_text": "Single key or list of dot-separated keys to target within the JSON payload",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "text",
            "placeholder": "e.g., user.profile.name or key1,key2"
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "lines",
          "type": "any",
          "label": "Lines",
          "required": false,
          "description": "Line selection or ranges to read (e.g., 1:120 or ['10:20'])",
          "help_text": "Line selection or ranges to read (e.g., 1:120 or ['10:20'])",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "text",
            "placeholder": "e.g., 1:120 or 5,10:20"
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "data",
          "type": "object",
          "label": "Data",
          "required": false,
          "description": "Data configuration",
          "help_text": "Data configuration",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "code",
            "collapsible": true
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "serialize_json",
          "type": "boolean",
          "label": "Serialize Json",
          "required": false,
          "description": "Serialize structured data to JSON string (for backward compatibility)",
          "help_text": "Serialize structured data to JSON string (for backward compatibility)",
          "default": false,
          "validation": {},
          "uiConfig": {
            "inputType": "checkbox"
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "format",
          "type": "string",
          "label": "Format",
          "required": false,
          "description": "Data format (json, yaml, csv, text, etc.)",
          "help_text": "Data format (json, yaml, csv, text, etc.)",
          "default": "json",
          "validation": {},
          "uiConfig": {
            "inputType": "select",
            "options": [
              {
                "value": "json",
                "label": "JSON"
              },
              {
                "value": "yaml",
                "label": "YAML"
              },
              {
                "value": "csv",
                "label": "CSV"
              },
              {
                "value": "text",
                "label": "Text"
              },
              {
                "value": "xml",
                "label": "XML"
              }
            ]
          },
          "is_enum": false,
          "enum_values": []
        }
      ],
      "handles": {
        "inputs": [
          "default"
        ],
        "outputs": [
          "default"
        ]
      },
      "outputs": {
        "result": {
          "type": "any",
          "description": "Node execution result"
        }
      },
      "primaryDisplayField": "operation"
    },
    {
      "node_type": "diff_patch",
      "node_name": "DiffPatch",
      "name": "diffPatch",
      "display_name": "Diff/Patch",
      "category": "utility",
      "description": "Apply unified diffs to files with safety controls",
      "icon": "\ud83d\udd27",
      "color": "#9C27B0",
      "fields": [
        {
          "name": "target_path",
          "type": "string",
          "label": "Target Path",
          "required": true,
          "description": "Path to the file to patch",
          "help_text": "Path to the file to patch",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "text",
            "placeholder": "/path/to/file.txt"
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "diff",
          "type": "string",
          "label": "Diff",
          "required": true,
          "description": "Unified diff content to apply",
          "help_text": "Unified diff content to apply",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "code",
            "collapsible": true,
            "rows": 15,
            "placeholder": "--- a/file.txt\n+++ b/file.txt\n@@ -1,3 +1,3 @@\n line1\n-old line\n+new line\n line3"
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "format",
          "type": "enum",
          "label": "Format",
          "required": false,
          "description": "Diff format type",
          "help_text": "Diff format type",
          "default": "unified",
          "validation": {
            "allowedValues": [
              "unified",
              "git",
              "context",
              "ed",
              "normal"
            ]
          },
          "uiConfig": {
            "inputType": "select",
            "options": [
              {
                "value": "unified",
                "label": "Unified"
              },
              {
                "value": "git",
                "label": "Git"
              },
              {
                "value": "context",
                "label": "Context"
              },
              {
                "value": "ed",
                "label": "Ed Script"
              },
              {
                "value": "normal",
                "label": "Normal"
              }
            ]
          },
          "is_enum": true,
          "enum_values": [
            "unified",
            "git",
            "context",
            "ed",
            "normal"
          ]
        },
        {
          "name": "apply_mode",
          "type": "enum",
          "label": "Apply Mode",
          "required": false,
          "description": "How to apply the patch",
          "help_text": "How to apply the patch",
          "default": "normal",
          "validation": {
            "allowedValues": [
              "normal",
              "force",
              "dry_run",
              "reverse"
            ]
          },
          "uiConfig": {
            "inputType": "select",
            "options": [
              {
                "value": "normal",
                "label": "Normal"
              },
              {
                "value": "force",
                "label": "Force"
              },
              {
                "value": "dry_run",
                "label": "Dry Run"
              },
              {
                "value": "reverse",
                "label": "Reverse"
              }
            ]
          },
          "is_enum": true,
          "enum_values": [
            "normal",
            "force",
            "dry_run",
            "reverse"
          ]
        },
        {
          "name": "backup",
          "type": "boolean",
          "label": "Backup",
          "required": false,
          "description": "Create backup before patching",
          "help_text": "Create backup before patching",
          "default": true,
          "validation": {},
          "uiConfig": {
            "inputType": "checkbox"
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "validate_patch",
          "type": "boolean",
          "label": "Validate Patch",
          "required": false,
          "description": "Validate patch before applying",
          "help_text": "Validate patch before applying",
          "default": true,
          "validation": {},
          "uiConfig": {
            "inputType": "checkbox"
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "backup_dir",
          "type": "string",
          "label": "Backup Dir",
          "required": false,
          "description": "Directory for backup files",
          "help_text": "Directory for backup files",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "text",
            "placeholder": "/tmp/backups"
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "strip_level",
          "type": "number",
          "label": "Strip Level",
          "required": false,
          "description": "Strip N leading path components (like patch -pN)",
          "help_text": "Strip N leading path components (like patch -pN)",
          "default": 1,
          "validation": {
            "min": 0,
            "max": 10
          },
          "uiConfig": {
            "inputType": "number",
            "min": 0,
            "max": 10
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "fuzz_factor",
          "type": "number",
          "label": "Fuzz Factor",
          "required": false,
          "description": "Number of lines that can be ignored when matching context",
          "help_text": "Number of lines that can be ignored when matching context",
          "default": 2,
          "validation": {
            "min": 0,
            "max": 100
          },
          "uiConfig": {
            "inputType": "number",
            "min": 0,
            "max": 100
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "reject_file",
          "type": "string",
          "label": "Reject File",
          "required": false,
          "description": "Path to save rejected hunks",
          "help_text": "Path to save rejected hunks",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "text",
            "placeholder": "/tmp/patch.reject"
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "ignore_whitespace",
          "type": "boolean",
          "label": "Ignore Whitespace",
          "required": false,
          "description": "Ignore whitespace changes when matching",
          "help_text": "Ignore whitespace changes when matching",
          "default": false,
          "validation": {},
          "uiConfig": {
            "inputType": "checkbox"
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "create_missing",
          "type": "boolean",
          "label": "Create Missing",
          "required": false,
          "description": "Create target file if it doesn't exist",
          "help_text": "Create target file if it doesn't exist",
          "default": false,
          "validation": {},
          "uiConfig": {
            "inputType": "checkbox"
          },
          "is_enum": false,
          "enum_values": []
        }
      ],
      "handles": {
        "inputs": [
          "default"
        ],
        "outputs": [
          "success",
          "error"
        ]
      },
      "outputs": {
        "result": {
          "type": "any",
          "description": "Patch application result with status, modified files, and rejected hunks"
        },
        "backup_path": {
          "type": "any",
          "description": "Path to backup file if created"
        },
        "rejected_hunks": {
          "type": "any",
          "description": "List of hunks that couldn't be applied"
        },
        "file_hash": {
          "type": "any",
          "description": "Hash of the patched file for verification"
        }
      },
      "primaryDisplayField": "target_path"
    },
    {
      "node_type": "endpoint",
      "node_name": "Endpoint",
      "name": "endpoint",
      "display_name": "End Node",
      "category": "control",
      "description": "Exit point for diagram execution",
      "icon": "\ud83c\udfc1",
      "color": "#F44336",
      "fields": [
        {
          "name": "save_to_file",
          "type": "boolean",
          "label": "Save To File",
          "required": false,
          "description": "Save results to file",
          "help_text": "Save results to file",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "checkbox"
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "file_name",
          "type": "string",
          "label": "File Name",
          "required": false,
          "description": "Output filename",
          "help_text": "Output filename",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "text"
          },
          "is_enum": false,
          "enum_values": []
        }
      ],
      "handles": {
        "inputs": [
          "default"
        ],
        "outputs": []
      },
      "outputs": {},
      "primaryDisplayField": "save_to_file"
    },
    {
      "node_type": "hook",
      "node_name": "Hook",
      "name": "hook",
      "display_name": "Hook",
      "category": "compute",
      "description": "Executes hooks at specific points in the diagram execution",
      "icon": "\ud83e\ude9d",
      "color": "#9333ea",
      "fields": [
        {
          "name": "hook_type",
          "type": "enum",
          "label": "Hook Type",
          "required": true,
          "description": "Type of hook to execute",
          "help_text": "Type of hook to execute",
          "default": "shell",
          "validation": {
            "allowedValues": [
              "shell",
              "http",
              "python",
              "file"
            ]
          },
          "uiConfig": {
            "inputType": "select",
            "options": [
              {
                "value": "shell",
                "label": "Shell"
              },
              {
                "value": "http",
                "label": "HTTP"
              },
              {
                "value": "python",
                "label": "Python"
              },
              {
                "value": "file",
                "label": "File"
              }
            ]
          },
          "is_enum": true,
          "enum_values": [
            "shell",
            "http",
            "python",
            "file"
          ]
        },
        {
          "name": "command",
          "type": "string",
          "label": "Command",
          "required": false,
          "description": "Shell command to run (for shell hooks)",
          "help_text": "Shell command to run (for shell hooks)",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "text",
            "placeholder": "Command to execute"
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "url",
          "type": "string",
          "label": "Url",
          "required": false,
          "description": "Webhook URL (for HTTP hooks)",
          "help_text": "Webhook URL (for HTTP hooks)",
          "default": null,
          "validation": {
            "pattern": "^https?://.+"
          },
          "uiConfig": {
            "inputType": "text",
            "placeholder": "https://api.example.com/webhook"
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "timeout",
          "type": "number",
          "label": "Timeout",
          "required": false,
          "description": "Execution timeout in seconds",
          "help_text": "Execution timeout in seconds",
          "default": 60,
          "validation": {
            "min": 1,
            "max": 300
          },
          "uiConfig": {
            "inputType": "number",
            "min": 1,
            "max": 300
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "retry_count",
          "type": "number",
          "label": "Retry Count",
          "required": false,
          "description": "Number of retries on failure",
          "help_text": "Number of retries on failure",
          "default": 0,
          "validation": {
            "min": 0,
            "max": 5
          },
          "uiConfig": {
            "inputType": "number",
            "min": 0,
            "max": 5
          },
          "is_enum": false,
          "enum_values": []
        }
      ],
      "handles": {
        "inputs": [
          "default"
        ],
        "outputs": [
          "success",
          "error"
        ]
      },
      "outputs": {
        "success": {
          "type": "any",
          "description": "Success output"
        },
        "error": {
          "type": "any",
          "description": "Error output"
        }
      },
      "primaryDisplayField": "hook_type"
    },
    {
      "node_type": "integrated_api",
      "node_name": "IntegratedApi",
      "name": "integratedApi",
      "display_name": "Integrated API",
      "category": "integration",
      "description": "Connect to external APIs like Notion, Slack, GitHub, and more",
      "icon": "\ud83d\udd0c",
      "color": "#8b5cf6",
      "fields": [
        {
          "name": "provider",
          "type": "string",
          "label": "Provider",
          "required": true,
          "description": "API provider to connect to",
          "help_text": "API provider to connect to",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "select"
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "operation",
          "type": "string",
          "label": "Operation",
          "required": true,
          "description": "Operation to perform (provider-specific)",
          "help_text": "Operation to perform (provider-specific)",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "select",
            "placeholder": "Select an operation"
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "resource_id",
          "type": "string",
          "label": "Resource Id",
          "required": false,
          "description": "Resource identifier (e.g., page ID, channel ID)",
          "help_text": "Resource identifier (e.g., page ID, channel ID)",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "text",
            "placeholder": "Resource ID (if applicable)"
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "config",
          "type": "object",
          "label": "Config",
          "required": false,
          "description": "Provider-specific configuration",
          "help_text": "Provider-specific configuration",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "code",
            "placeholder": "{ /* provider-specific config */ }"
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "timeout",
          "type": "number",
          "label": "Timeout",
          "required": false,
          "description": "Request timeout in seconds",
          "help_text": "Request timeout in seconds",
          "default": null,
          "validation": {
            "min": 1,
            "max": 300
          },
          "uiConfig": {
            "inputType": "number",
            "placeholder": "30"
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "max_retries",
          "type": "number",
          "label": "Max Retries",
          "required": false,
          "description": "Maximum retry attempts",
          "help_text": "Maximum retry attempts",
          "default": null,
          "validation": {
            "min": 0,
            "max": 10
          },
          "uiConfig": {
            "inputType": "number",
            "placeholder": "3"
          },
          "is_enum": false,
          "enum_values": []
        }
      ],
      "handles": {
        "inputs": [
          "default"
        ],
        "outputs": [
          "default",
          "error"
        ]
      },
      "outputs": {
        "result": {
          "type": "any",
          "description": "API response data"
        },
        "error": {
          "type": "any",
          "description": "Error details if the operation fails"
        }
      },
      "primaryDisplayField": "provider"
    },
    {
      "node_type": "ir_builder",
      "node_name": "IrBuilder",
      "name": "irBuilder",
      "display_name": "IR Builder",
      "category": "codegen",
      "description": "Build Intermediate Representation for code generation",
      "icon": "\ud83c\udfd7\ufe0f",
      "color": "#FF5722",
      "fields": [
        {
          "name": "builder_type",
          "type": "enum",
          "label": "Builder Type",
          "required": true,
          "description": "Type of IR builder to use",
          "help_text": "Type of IR builder to use",
          "default": null,
          "validation": {
            "allowedValues": [
              "backend",
              "frontend",
              "strawberry",
              "custom"
            ]
          },
          "uiConfig": {
            "inputType": "select",
            "options": [
              {
                "value": "backend",
                "label": "Backend"
              },
              {
                "value": "frontend",
                "label": "Frontend"
              },
              {
                "value": "strawberry",
                "label": "Strawberry (GraphQL)"
              },
              {
                "value": "custom",
                "label": "Custom"
              }
            ]
          },
          "is_enum": true,
          "enum_values": [
            "backend",
            "frontend",
            "strawberry",
            "custom"
          ]
        },
        {
          "name": "source_type",
          "type": "enum",
          "label": "Source Type",
          "required": false,
          "description": "Type of source data",
          "help_text": "Type of source data",
          "default": null,
          "validation": {
            "allowedValues": [
              "ast",
              "schema",
              "config",
              "auto"
            ]
          },
          "uiConfig": {
            "inputType": "select",
            "options": [
              {
                "value": "ast",
                "label": "AST"
              },
              {
                "value": "schema",
                "label": "Schema"
              },
              {
                "value": "config",
                "label": "Config"
              },
              {
                "value": "auto",
                "label": "Auto-detect"
              }
            ]
          },
          "is_enum": true,
          "enum_values": [
            "ast",
            "schema",
            "config",
            "auto"
          ]
        },
        {
          "name": "config_path",
          "type": "string",
          "label": "Config Path",
          "required": false,
          "description": "Path to configuration directory",
          "help_text": "Path to configuration directory",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "text",
            "placeholder": "projects/codegen/config/"
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "output_format",
          "type": "enum",
          "label": "Output Format",
          "required": false,
          "description": "Output format for IR",
          "help_text": "Output format for IR",
          "default": null,
          "validation": {
            "allowedValues": [
              "json",
              "yaml",
              "python"
            ]
          },
          "uiConfig": {
            "inputType": "select",
            "options": [
              {
                "value": "json",
                "label": "JSON"
              },
              {
                "value": "yaml",
                "label": "YAML"
              },
              {
                "value": "python",
                "label": "Python"
              }
            ]
          },
          "is_enum": true,
          "enum_values": [
            "json",
            "yaml",
            "python"
          ]
        },
        {
          "name": "cache_enabled",
          "type": "boolean",
          "label": "Cache Enabled",
          "required": false,
          "description": "Enable IR caching",
          "help_text": "Enable IR caching",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "checkbox"
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "validate_output",
          "type": "boolean",
          "label": "Validate Output",
          "required": false,
          "description": "Validate IR structure before output",
          "help_text": "Validate IR structure before output",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "checkbox"
          },
          "is_enum": false,
          "enum_values": []
        }
      ],
      "handles": {
        "inputs": [
          "default"
        ],
        "outputs": [
          "default"
        ]
      },
      "outputs": {
        "result": {
          "type": "DataType.OBJECT",
          "description": "Generated IR structure"
        }
      },
      "primaryDisplayField": "builder_type"
    },
    {
      "node_type": "json_schema_validator",
      "node_name": "JsonSchemaValidator",
      "name": "jsonSchemaValidator",
      "display_name": "JSON Schema Validator",
      "category": "codegen",
      "description": "Validate data against JSON schema",
      "icon": "\u2713",
      "color": "#8BC34A",
      "fields": [
        {
          "name": "schema_path",
          "type": "string",
          "label": "Schema Path",
          "required": false,
          "description": "Path to JSON schema file",
          "help_text": "Path to JSON schema file",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "text",
            "placeholder": "/path/to/file"
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "json_schema",
          "type": "object",
          "label": "Json Schema",
          "required": false,
          "description": "Inline JSON schema",
          "help_text": "Inline JSON schema",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "code",
            "collapsible": true
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "data_path",
          "type": "string",
          "label": "Data Path",
          "required": false,
          "description": "Data Path configuration",
          "help_text": "Data Path configuration",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "text",
            "placeholder": "/path/to/file"
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "strict_mode",
          "type": "boolean",
          "label": "Strict Mode",
          "required": false,
          "description": "Strict Mode configuration",
          "help_text": "Strict Mode configuration",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "checkbox"
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "error_on_extra",
          "type": "boolean",
          "label": "Error On Extra",
          "required": false,
          "description": "Error On Extra configuration",
          "help_text": "Error On Extra configuration",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "checkbox"
          },
          "is_enum": false,
          "enum_values": []
        }
      ],
      "handles": {
        "inputs": [
          "default"
        ],
        "outputs": [
          "default"
        ]
      },
      "outputs": {
        "result": {
          "type": "any",
          "description": "Node execution result"
        }
      },
      "primaryDisplayField": "schema_path"
    },
    {
      "node_type": "person_job",
      "node_name": "PersonJob",
      "name": "personJob",
      "display_name": "Person Job",
      "category": "ai",
      "description": "Execute tasks using AI language models",
      "icon": "\ud83e\udd16",
      "color": "#2196F3",
      "fields": [
        {
          "name": "person",
          "type": "string",
          "label": "Person",
          "required": false,
          "description": "AI person to use",
          "help_text": "AI person to use",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "personSelect"
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "first_only_prompt",
          "type": "string",
          "label": "First Only Prompt",
          "required": false,
          "description": "Prompt used only on first execution",
          "help_text": "Prompt used only on first execution",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "textarea",
            "placeholder": "Enter prompt template...",
            "column": 2,
            "rows": 10,
            "adjustable": true,
            "showPromptFileButton": true
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "first_prompt_file",
          "type": "string",
          "label": "First Prompt File",
          "required": false,
          "description": "External prompt file for first iteration only",
          "help_text": "External prompt file for first iteration only",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "text",
            "placeholder": "example_first.txt",
            "column": 2,
            "hidden": true
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "default_prompt",
          "type": "string",
          "label": "Default Prompt",
          "required": false,
          "description": "Default prompt template",
          "help_text": "Default prompt template",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "textarea",
            "placeholder": "Enter prompt template...",
            "column": 2,
            "rows": 10,
            "adjustable": true,
            "showPromptFileButton": true
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "prompt_file",
          "type": "string",
          "label": "Prompt File",
          "required": false,
          "description": "Path to prompt file in /files/prompts/",
          "help_text": "Path to prompt file in /files/prompts/",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "text",
            "placeholder": "example.txt",
            "column": 2,
            "hidden": true
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "max_iteration",
          "type": "number",
          "label": "Max Iteration",
          "required": true,
          "description": "Maximum execution iterations",
          "help_text": "Maximum execution iterations",
          "default": 100,
          "validation": {},
          "uiConfig": {
            "inputType": "number",
            "min": 1
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "memorize_to",
          "type": "string",
          "label": "Memorize To",
          "required": false,
          "description": "Criteria used to select helpful messages for this task. Empty = memorize all. Special: 'GOLDFISH' for goldfish mode. Comma-separated for multiple criteria.",
          "help_text": "Criteria used to select helpful messages for this task. Empty = memorize all. Special: 'GOLDFISH' for goldfish mode. Comma-separated for multiple criteria.",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "text",
            "placeholder": "e.g., requirements, acceptance criteria, API keys",
            "column": 2
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "at_most",
          "type": "number",
          "label": "At Most",
          "required": false,
          "description": "Select at most N messages to keep (system messages may be preserved in addition).",
          "help_text": "Select at most N messages to keep (system messages may be preserved in addition).",
          "default": null,
          "validation": {
            "min": 1,
            "max": 500
          },
          "uiConfig": {
            "inputType": "number",
            "min": 1,
            "max": 500,
            "column": 1
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "ignore_person",
          "type": "string",
          "label": "Ignore Person",
          "required": false,
          "description": "Comma-separated list of person IDs whose messages should be excluded from memory selection.",
          "help_text": "Comma-separated list of person IDs whose messages should be excluded from memory selection.",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "text",
            "placeholder": "e.g., assistant, user2",
            "column": 2
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "tools",
          "type": "string",
          "label": "Tools",
          "required": false,
          "description": "Tools available to the AI agent",
          "help_text": "Tools available to the AI agent",
          "default": null,
          "validation": {},
          "uiConfig": {
            "column": 1,
            "inputType": "select",
            "options": [
              {
                "value": "none",
                "label": "None - No tools"
              },
              {
                "value": "image",
                "label": "Image - Image generation capabilities"
              },
              {
                "value": "websearch",
                "label": "Web Search - Search the internet"
              }
            ]
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "text_format",
          "type": "string",
          "label": "Text Format",
          "required": false,
          "description": "JSON schema or response format for structured outputs",
          "help_text": "JSON schema or response format for structured outputs",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "textarea",
            "placeholder": "{\"type\": \"object\", \"properties\": {...}}",
            "column": 2,
            "rows": 6,
            "adjustable": true
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "text_format_file",
          "type": "string",
          "label": "Text Format File",
          "required": false,
          "description": "Path to Python file containing Pydantic models for structured outputs",
          "help_text": "Path to Python file containing Pydantic models for structured outputs",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "text",
            "placeholder": "path/to/models.py",
            "column": 2
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "resolved_prompt",
          "type": "string",
          "label": "Resolved Prompt",
          "required": false,
          "description": "Pre-resolved prompt content from compile-time",
          "help_text": "Pre-resolved prompt content from compile-time",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "textarea",
            "column": 2,
            "rows": 4
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "resolved_first_prompt",
          "type": "string",
          "label": "Resolved First Prompt",
          "required": false,
          "description": "Pre-resolved first prompt content from compile-time",
          "help_text": "Pre-resolved first prompt content from compile-time",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "textarea",
            "column": 2,
            "rows": 4
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "batch",
          "type": "boolean",
          "label": "Batch",
          "required": false,
          "description": "Enable batch mode for processing multiple items",
          "help_text": "Enable batch mode for processing multiple items",
          "default": false,
          "validation": {},
          "uiConfig": {
            "inputType": "checkbox"
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "batch_input_key",
          "type": "string",
          "label": "Batch Input Key",
          "required": false,
          "description": "Key containing the array to iterate over in batch mode",
          "help_text": "Key containing the array to iterate over in batch mode",
          "default": "items",
          "validation": {},
          "uiConfig": {
            "inputType": "text",
            "placeholder": "items"
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "batch_parallel",
          "type": "boolean",
          "label": "Batch Parallel",
          "required": false,
          "description": "Execute batch items in parallel",
          "help_text": "Execute batch items in parallel",
          "default": true,
          "validation": {},
          "uiConfig": {
            "inputType": "checkbox"
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "max_concurrent",
          "type": "number",
          "label": "Max Concurrent",
          "required": false,
          "description": "Maximum concurrent executions in batch mode",
          "help_text": "Maximum concurrent executions in batch mode",
          "default": 10,
          "validation": {
            "min": 1,
            "max": 100
          },
          "uiConfig": {
            "inputType": "number",
            "min": 1,
            "max": 100
          },
          "is_enum": false,
          "enum_values": []
        }
      ],
      "handles": {
        "inputs": [
          "default",
          "first"
        ],
        "outputs": [
          "default"
        ]
      },
      "outputs": {
        "result": {
          "type": "any",
          "description": "AI response and results"
        }
      },
      "primaryDisplayField": "person"
    },
    {
      "node_type": "start",
      "node_name": "Start",
      "name": "start",
      "display_name": "Start Node",
      "category": "control",
      "description": "Entry point for diagram execution",
      "icon": "\ud83d\ude80",
      "color": "#4CAF50",
      "fields": [
        {
          "name": "trigger_mode",
          "type": "enum",
          "label": "Trigger Mode",
          "required": false,
          "description": "How this start node is triggered",
          "help_text": "How this start node is triggered",
          "default": "none",
          "validation": {
            "allowedValues": [
              "none",
              "manual",
              "hook"
            ]
          },
          "uiConfig": {
            "inputType": "select",
            "options": [
              {
                "value": "none",
                "label": "None - Simple start point"
              },
              {
                "value": "manual",
                "label": "Manual - Triggered manually with data"
              },
              {
                "value": "hook",
                "label": "Hook - Triggered by external events"
              }
            ]
          },
          "is_enum": true,
          "enum_values": [
            "none",
            "manual",
            "hook"
          ]
        },
        {
          "name": "custom_data",
          "type": "any",
          "label": "Custom Data",
          "required": false,
          "description": "Custom data to pass when manually triggered",
          "help_text": "Custom data to pass when manually triggered",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "text"
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "output_data_structure",
          "type": "object",
          "label": "Output Data Structure",
          "required": false,
          "description": "Expected output data structure",
          "help_text": "Expected output data structure",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "code",
            "collapsible": true
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "hook_event",
          "type": "string",
          "label": "Hook Event",
          "required": false,
          "description": "Event name to listen for",
          "help_text": "Event name to listen for",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "text",
            "placeholder": "e.g., webhook.received, file.uploaded"
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "hook_filters",
          "type": "object",
          "label": "Hook Filters",
          "required": false,
          "description": "Filters to apply to incoming events",
          "help_text": "Filters to apply to incoming events",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "code",
            "collapsible": true
          },
          "is_enum": false,
          "enum_values": []
        }
      ],
      "handles": {
        "inputs": [],
        "outputs": [
          "default"
        ]
      },
      "outputs": {
        "result": {
          "type": "any",
          "description": "Node execution result"
        }
      },
      "primaryDisplayField": ""
    },
    {
      "node_type": "sub_diagram",
      "node_name": "SubDiagram",
      "name": "subDiagram",
      "display_name": "Sub-Diagram",
      "category": "compute",
      "description": "Execute another diagram as a node within the current diagram",
      "icon": "\ud83d\udcca",
      "color": "#8B5CF6",
      "fields": [
        {
          "name": "diagram_name",
          "type": "string",
          "label": "Diagram Name",
          "required": false,
          "description": "Name of the diagram to execute (e.g., 'workflow/process')",
          "help_text": "Name of the diagram to execute (e.g., 'workflow/process')",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "select",
            "placeholder": "Select diagram..."
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "diagram_data",
          "type": "object",
          "label": "Diagram Data",
          "required": false,
          "description": "Inline diagram data (alternative to diagram_name)",
          "help_text": "Inline diagram data (alternative to diagram_name)",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "code",
            "collapsible": true
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "input_mapping",
          "type": "object",
          "label": "Input Mapping",
          "required": false,
          "description": "Map node inputs to sub-diagram variables",
          "help_text": "Map node inputs to sub-diagram variables",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "code",
            "placeholder": "{ \"targetVar\": \"sourceInput\" }"
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "output_mapping",
          "type": "object",
          "label": "Output Mapping",
          "required": false,
          "description": "Map sub-diagram outputs to node outputs",
          "help_text": "Map sub-diagram outputs to node outputs",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "code",
            "placeholder": "{ \"outputKey\": \"nodeId.field\" }"
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "timeout",
          "type": "number",
          "label": "Timeout",
          "required": false,
          "description": "Execution timeout in seconds",
          "help_text": "Execution timeout in seconds",
          "default": null,
          "validation": {
            "min": 1,
            "max": 3600
          },
          "uiConfig": {
            "inputType": "number",
            "min": 1,
            "max": 3600
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "wait_for_completion",
          "type": "boolean",
          "label": "Wait For Completion",
          "required": false,
          "description": "Whether to wait for sub-diagram completion",
          "help_text": "Whether to wait for sub-diagram completion",
          "default": true,
          "validation": {},
          "uiConfig": {
            "inputType": "checkbox"
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "isolate_conversation",
          "type": "boolean",
          "label": "Isolate Conversation",
          "required": false,
          "description": "Create isolated conversation context for sub-diagram",
          "help_text": "Create isolated conversation context for sub-diagram",
          "default": false,
          "validation": {},
          "uiConfig": {
            "inputType": "checkbox"
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "ignoreIfSub",
          "type": "boolean",
          "label": "Ignoreifsub",
          "required": false,
          "description": "Skip execution if this diagram is being run as a sub-diagram",
          "help_text": "Skip execution if this diagram is being run as a sub-diagram",
          "default": false,
          "validation": {},
          "uiConfig": {
            "inputType": "checkbox"
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "diagram_format",
          "type": "enum",
          "label": "Diagram Format",
          "required": false,
          "description": "Format of the diagram file (yaml, json, or light)",
          "help_text": "Format of the diagram file (yaml, json, or light)",
          "default": null,
          "validation": {
            "allowedValues": [
              "yaml",
              "json",
              "light"
            ]
          },
          "uiConfig": {
            "inputType": "select",
            "options": [
              {
                "label": "YAML",
                "value": "yaml"
              },
              {
                "label": "JSON",
                "value": "json"
              },
              {
                "label": "Light",
                "value": "light"
              }
            ]
          },
          "is_enum": true,
          "enum_values": [
            "yaml",
            "json",
            "light"
          ]
        },
        {
          "name": "batch",
          "type": "boolean",
          "label": "Batch",
          "required": false,
          "description": "Execute sub-diagram in batch mode for multiple inputs",
          "help_text": "Execute sub-diagram in batch mode for multiple inputs",
          "default": false,
          "validation": {},
          "uiConfig": {
            "inputType": "checkbox"
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "batch_input_key",
          "type": "string",
          "label": "Batch Input Key",
          "required": false,
          "description": "Key in inputs containing the array of items for batch processing",
          "help_text": "Key in inputs containing the array of items for batch processing",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "text",
            "placeholder": "items"
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "batch_parallel",
          "type": "boolean",
          "label": "Batch Parallel",
          "required": false,
          "description": "Execute batch items in parallel",
          "help_text": "Execute batch items in parallel",
          "default": false,
          "validation": {},
          "uiConfig": {
            "inputType": "checkbox"
          },
          "is_enum": false,
          "enum_values": []
        }
      ],
      "handles": {
        "inputs": [
          "default"
        ],
        "outputs": [
          "default"
        ]
      },
      "outputs": {
        "default": {
          "type": "any",
          "description": "Output from sub-diagram execution (includes results and error if any)"
        }
      },
      "primaryDisplayField": "diagram_name"
    },
    {
      "node_type": "template_job",
      "node_name": "TemplateJob",
      "name": "templateJob",
      "display_name": "Template Job",
      "category": "codegen",
      "description": "Process templates with data",
      "icon": "\ud83d\udcdd",
      "color": "#3F51B5",
      "fields": [
        {
          "name": "template_path",
          "type": "string",
          "label": "Template Path",
          "required": false,
          "description": "Path to template file",
          "help_text": "Path to template file",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "text",
            "placeholder": "/path/to/file"
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "template_content",
          "type": "string",
          "label": "Template Content",
          "required": false,
          "description": "Inline template content",
          "help_text": "Inline template content",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "textarea",
            "placeholder": "Enter template content...",
            "rows": 10,
            "adjustable": true
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "output_path",
          "type": "string",
          "label": "Output Path",
          "required": false,
          "description": "Output file path",
          "help_text": "Output file path",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "text",
            "placeholder": "/path/to/file"
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "variables",
          "type": "object",
          "label": "Variables",
          "required": false,
          "description": "Variables configuration",
          "help_text": "Variables configuration",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "code",
            "collapsible": true
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "engine",
          "type": "enum",
          "label": "Engine",
          "required": false,
          "description": "Template engine to use",
          "help_text": "Template engine to use",
          "default": "jinja2",
          "validation": {
            "allowedValues": [
              "internal",
              "jinja2"
            ]
          },
          "uiConfig": {
            "inputType": "select",
            "options": [
              {
                "value": "internal",
                "label": "Internal"
              },
              {
                "value": "jinja2",
                "label": "Jinja2"
              }
            ]
          },
          "is_enum": true,
          "enum_values": [
            "internal",
            "jinja2"
          ]
        },
        {
          "name": "preprocessor",
          "type": "string",
          "label": "Preprocessor",
          "required": false,
          "description": "Preprocessor function to apply before templating",
          "help_text": "Preprocessor function to apply before templating",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "text"
          },
          "is_enum": false,
          "enum_values": []
        }
      ],
      "handles": {
        "inputs": [
          "default"
        ],
        "outputs": [
          "default"
        ]
      },
      "outputs": {
        "result": {
          "type": "any",
          "description": "Node execution result"
        }
      },
      "primaryDisplayField": "engine"
    },
    {
      "node_type": "typescript_ast",
      "node_name": "TypescriptAst",
      "name": "typescriptAst",
      "display_name": "TypeScript AST Parser",
      "category": "codegen",
      "description": "Parses TypeScript source code and extracts AST, interfaces, types, and enums",
      "icon": "\ud83d\udd0d",
      "color": "#3178c6",
      "fields": [
        {
          "name": "source",
          "type": "string",
          "label": "Source",
          "required": false,
          "description": "TypeScript source code to parse",
          "help_text": "TypeScript source code to parse",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "code",
            "language": "SupportedLanguage.TYPESCRIPT"
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "extractPatterns",
          "type": "array",
          "label": "Extractpatterns",
          "required": false,
          "description": "Patterns to extract from the AST",
          "help_text": "Patterns to extract from the AST",
          "default": [
            "interface",
            "type",
            "enum"
          ],
          "validation": {
            "itemType": "string",
            "allowedValues": [
              "interface",
              "type",
              "enum",
              "class",
              "function",
              "const",
              "export"
            ]
          },
          "uiConfig": {
            "inputType": "code"
          },
          "is_enum": true,
          "enum_values": [
            "interface",
            "type",
            "enum",
            "class",
            "function",
            "const",
            "export"
          ]
        },
        {
          "name": "includeJSDoc",
          "type": "boolean",
          "label": "Includejsdoc",
          "required": false,
          "description": "Include JSDoc comments in the extracted data",
          "help_text": "Include JSDoc comments in the extracted data",
          "default": false,
          "validation": {},
          "uiConfig": {
            "inputType": "checkbox"
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "parseMode",
          "type": "enum",
          "label": "Parsemode",
          "required": false,
          "description": "TypeScript parsing mode",
          "help_text": "TypeScript parsing mode",
          "default": "module",
          "validation": {
            "allowedValues": [
              "module",
              "script"
            ]
          },
          "uiConfig": {
            "inputType": "select",
            "options": [
              {
                "value": "module",
                "label": "Module"
              },
              {
                "value": "script",
                "label": "Script"
              }
            ]
          },
          "is_enum": true,
          "enum_values": [
            "module",
            "script"
          ]
        },
        {
          "name": "transformEnums",
          "type": "boolean",
          "label": "Transformenums",
          "required": false,
          "description": "Transform enum definitions to a simpler format",
          "help_text": "Transform enum definitions to a simpler format",
          "default": false,
          "validation": {},
          "uiConfig": {
            "inputType": "checkbox"
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "flattenOutput",
          "type": "boolean",
          "label": "Flattenoutput",
          "required": false,
          "description": "Flatten the output structure for easier consumption",
          "help_text": "Flatten the output structure for easier consumption",
          "default": false,
          "validation": {},
          "uiConfig": {
            "inputType": "checkbox"
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "outputFormat",
          "type": "enum",
          "label": "Outputformat",
          "required": false,
          "description": "Output format for the parsed data",
          "help_text": "Output format for the parsed data",
          "default": "standard",
          "validation": {
            "allowedValues": [
              "standard",
              "for_codegen",
              "for_analysis"
            ]
          },
          "uiConfig": {
            "inputType": "select",
            "options": [
              {
                "value": "standard",
                "label": "Standard"
              },
              {
                "value": "for_codegen",
                "label": "For Code Generation"
              },
              {
                "value": "for_analysis",
                "label": "For Analysis"
              }
            ]
          },
          "is_enum": true,
          "enum_values": [
            "standard",
            "for_codegen",
            "for_analysis"
          ]
        },
        {
          "name": "batch",
          "type": "boolean",
          "label": "Batch",
          "required": false,
          "description": "Enable batch processing mode",
          "help_text": "Enable batch processing mode",
          "default": false,
          "validation": {},
          "uiConfig": {
            "inputType": "checkbox"
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "batchInputKey",
          "type": "string",
          "label": "Batchinputkey",
          "required": false,
          "description": "Key to extract batch items from input",
          "help_text": "Key to extract batch items from input",
          "default": "sources",
          "validation": {},
          "uiConfig": {
            "inputType": "text"
          },
          "is_enum": false,
          "enum_values": []
        }
      ],
      "handles": {
        "inputs": [
          "default"
        ],
        "outputs": [
          "results",
          "error"
        ]
      },
      "outputs": {
        "ast": {
          "type": "any",
          "description": "Parsed AST structure"
        },
        "interfaces": {
          "type": "any",
          "description": "Extracted interface definitions"
        },
        "types": {
          "type": "any",
          "description": "Extracted type aliases"
        },
        "enums": {
          "type": "any",
          "description": "Extracted enum definitions"
        },
        "error": {
          "type": "any",
          "description": "Error message if parsing fails"
        }
      },
      "primaryDisplayField": "parseMode"
    },
    {
      "node_type": "user_response",
      "node_name": "UserResponse",
      "name": "userResponse",
      "display_name": "User Response",
      "category": "integration",
      "description": "Collect user input",
      "icon": "\ud83d\udcac",
      "color": "#E91E63",
      "fields": [
        {
          "name": "prompt",
          "type": "string",
          "label": "Prompt",
          "required": true,
          "description": "Question to ask the user",
          "help_text": "Question to ask the user",
          "default": null,
          "validation": {},
          "uiConfig": {
            "inputType": "textarea",
            "placeholder": "Enter prompt template..."
          },
          "is_enum": false,
          "enum_values": []
        },
        {
          "name": "timeout",
          "type": "number",
          "label": "Timeout",
          "required": false,
          "description": "Response timeout in seconds",
          "help_text": "Response timeout in seconds",
          "default": 300,
          "validation": {},
          "uiConfig": {
            "inputType": "number",
            "min": 0,
            "max": 3600
          },
          "is_enum": false,
          "enum_values": []
        }
      ],
      "handles": {
        "inputs": [
          "default"
        ],
        "outputs": [
          "default"
        ]
      },
      "outputs": {
        "result": {
          "type": "any",
          "description": "Node execution result"
        }
      },
      "primaryDisplayField": "prompt"
    }
  ],
  "node_registry": {
    "nodes": {
      "api_job": {
        "component": "ApiJobNode",
        "config": "apiJob",
        "category": "integration",
        "display_name": "API Job"
      },
      "code_job": {
        "component": "CodeJobNode",
        "config": "codeJob",
        "category": "compute",
        "display_name": "Code Job"
      },
      "condition": {
        "component": "ConditionNode",
        "config": "condition",
        "category": "control",
        "display_name": "Condition"
      },
      "db": {
        "component": "DbNode",
        "config": "db",
        "category": "integration",
        "display_name": "Database"
      },
      "diff_patch": {
        "component": "DiffPatchNode",
        "config": "diffPatch",
        "category": "utility",
        "display_name": "Diff/Patch"
      },
      "endpoint": {
        "component": "EndpointNode",
        "config": "endpoint",
        "category": "control",
        "display_name": "End Node"
      },
      "hook": {
        "component": "HookNode",
        "config": "hook",
        "category": "compute",
        "display_name": "Hook"
      },
      "integrated_api": {
        "component": "IntegratedApiNode",
        "config": "integratedApi",
        "category": "integration",
        "display_name": "Integrated API"
      },
      "ir_builder": {
        "component": "IrBuilderNode",
        "config": "irBuilder",
        "category": "codegen",
        "display_name": "IR Builder"
      },
      "json_schema_validator": {
        "component": "JsonSchemaValidatorNode",
        "config": "jsonSchemaValidator",
        "category": "codegen",
        "display_name": "JSON Schema Validator"
      },
      "person_job": {
        "component": "PersonJobNode",
        "config": "personJob",
        "category": "ai",
        "display_name": "Person Job"
      },
      "start": {
        "component": "StartNode",
        "config": "start",
        "category": "control",
        "display_name": "Start Node"
      },
      "sub_diagram": {
        "component": "SubDiagramNode",
        "config": "subDiagram",
        "category": "compute",
        "display_name": "Sub-Diagram"
      },
      "template_job": {
        "component": "TemplateJobNode",
        "config": "templateJob",
        "category": "codegen",
        "display_name": "Template Job"
      },
      "typescript_ast": {
        "component": "TypescriptAstNode",
        "config": "typescriptAst",
        "category": "codegen",
        "display_name": "TypeScript AST Parser"
      },
      "user_response": {
        "component": "UserResponseNode",
        "config": "userResponse",
        "category": "integration",
        "display_name": "User Response"
      }
    },
    "categories": {
      "integration": [
        "api_job",
        "db",
        "integrated_api",
        "user_response"
      ],
      "compute": [
        "code_job",
        "hook",
        "sub_diagram"
      ],
      "control": [
        "condition",
        "endpoint",
        "start"
      ],
      "utility": [
        "diff_patch"
      ],
      "codegen": [
        "ir_builder",
        "json_schema_validator",
        "template_job",
        "typescript_ast"
      ],
      "ai": [
        "person_job"
      ]
    },
    "icons": {
      "api_job": "\ud83c\udf10",
      "code_job": "\ud83d\udcbb",
      "condition": "\ud83d\udd00",
      "db": "\ud83d\uddc4\ufe0f",
      "diff_patch": "\ud83d\udd27",
      "endpoint": "\ud83c\udfc1",
      "hook": "\ud83e\ude9d",
      "integrated_api": "\ud83d\udd0c",
      "ir_builder": "\ud83c\udfd7\ufe0f",
      "json_schema_validator": "\u2713",
      "person_job": "\ud83e\udd16",
      "start": "\ud83d\ude80",
      "sub_diagram": "\ud83d\udcca",
      "template_job": "\ud83d\udcdd",
      "typescript_ast": "\ud83d\udd0d",
      "user_response": "\ud83d\udcac"
    },
    "colors": {
      "api_job": "#00BCD4",
      "code_job": "#9C27B0",
      "condition": "#FF9800",
      "db": "#795548",
      "diff_patch": "#9C27B0",
      "endpoint": "#F44336",
      "hook": "#9333ea",
      "integrated_api": "#8b5cf6",
      "ir_builder": "#FF5722",
      "json_schema_validator": "#8BC34A",
      "person_job": "#2196F3",
      "start": "#4CAF50",
      "sub_diagram": "#8B5CF6",
      "template_job": "#3F51B5",
      "typescript_ast": "#3178c6",
      "user_response": "#E91E63"
    },
    "display_names": {
      "api_job": "API Job",
      "code_job": "Code Job",
      "condition": "Condition",
      "db": "Database",
      "diff_patch": "Diff/Patch",
      "endpoint": "End Node",
      "hook": "Hook",
      "integrated_api": "Integrated API",
      "ir_builder": "IR Builder",
      "json_schema_validator": "JSON Schema Validator",
      "person_job": "Person Job",
      "start": "Start Node",
      "sub_diagram": "Sub-Diagram",
      "template_job": "Template Job",
      "typescript_ast": "TypeScript AST Parser",
      "user_response": "User Response"
    }
  },
  "registry_data": {
    "nodes": {
      "api_job": {
        "component": "ApiJobNode",
        "config": "apiJob",
        "category": "integration",
        "display_name": "API Job"
      },
      "code_job": {
        "component": "CodeJobNode",
        "config": "codeJob",
        "category": "compute",
        "display_name": "Code Job"
      },
      "condition": {
        "component": "ConditionNode",
        "config": "condition",
        "category": "control",
        "display_name": "Condition"
      },
      "db": {
        "component": "DbNode",
        "config": "db",
        "category": "integration",
        "display_name": "Database"
      },
      "diff_patch": {
        "component": "DiffPatchNode",
        "config": "diffPatch",
        "category": "utility",
        "display_name": "Diff/Patch"
      },
      "endpoint": {
        "component": "EndpointNode",
        "config": "endpoint",
        "category": "control",
        "display_name": "End Node"
      },
      "hook": {
        "component": "HookNode",
        "config": "hook",
        "category": "compute",
        "display_name": "Hook"
      },
      "integrated_api": {
        "component": "IntegratedApiNode",
        "config": "integratedApi",
        "category": "integration",
        "display_name": "Integrated API"
      },
      "ir_builder": {
        "component": "IrBuilderNode",
        "config": "irBuilder",
        "category": "codegen",
        "display_name": "IR Builder"
      },
      "json_schema_validator": {
        "component": "JsonSchemaValidatorNode",
        "config": "jsonSchemaValidator",
        "category": "codegen",
        "display_name": "JSON Schema Validator"
      },
      "person_job": {
        "component": "PersonJobNode",
        "config": "personJob",
        "category": "ai",
        "display_name": "Person Job"
      },
      "start": {
        "component": "StartNode",
        "config": "start",
        "category": "control",
        "display_name": "Start Node"
      },
      "sub_diagram": {
        "component": "SubDiagramNode",
        "config": "subDiagram",
        "category": "compute",
        "display_name": "Sub-Diagram"
      },
      "template_job": {
        "component": "TemplateJobNode",
        "config": "templateJob",
        "category": "codegen",
        "display_name": "Template Job"
      },
      "typescript_ast": {
        "component": "TypescriptAstNode",
        "config": "typescriptAst",
        "category": "codegen",
        "display_name": "TypeScript AST Parser"
      },
      "user_response": {
        "component": "UserResponseNode",
        "config": "userResponse",
        "category": "integration",
        "display_name": "User Response"
      }
    },
    "categories": {
      "integration": [
        "api_job",
        "db",
        "integrated_api",
        "user_response"
      ],
      "compute": [
        "code_job",
        "hook",
        "sub_diagram"
      ],
      "control": [
        "condition",
        "endpoint",
        "start"
      ],
      "utility": [
        "diff_patch"
      ],
      "codegen": [
        "ir_builder",
        "json_schema_validator",
        "template_job",
        "typescript_ast"
      ],
      "ai": [
        "person_job"
      ]
    },
    "icons": {
      "api_job": "\ud83c\udf10",
      "code_job": "\ud83d\udcbb",
      "condition": "\ud83d\udd00",
      "db": "\ud83d\uddc4\ufe0f",
      "diff_patch": "\ud83d\udd27",
      "endpoint": "\ud83c\udfc1",
      "hook": "\ud83e\ude9d",
      "integrated_api": "\ud83d\udd0c",
      "ir_builder": "\ud83c\udfd7\ufe0f",
      "json_schema_validator": "\u2713",
      "person_job": "\ud83e\udd16",
      "start": "\ud83d\ude80",
      "sub_diagram": "\ud83d\udcca",
      "template_job": "\ud83d\udcdd",
      "typescript_ast": "\ud83d\udd0d",
      "user_response": "\ud83d\udcac"
    },
    "colors": {
      "api_job": "#00BCD4",
      "code_job": "#9C27B0",
      "condition": "#FF9800",
      "db": "#795548",
      "diff_patch": "#9C27B0",
      "endpoint": "#F44336",
      "hook": "#9333ea",
      "integrated_api": "#8b5cf6",
      "ir_builder": "#FF5722",
      "json_schema_validator": "#8BC34A",
      "person_job": "#2196F3",
      "start": "#4CAF50",
      "sub_diagram": "#8B5CF6",
      "template_job": "#3F51B5",
      "typescript_ast": "#3178c6",
      "user_response": "#E91E63"
    },
    "display_names": {
      "api_job": "API Job",
      "code_job": "Code Job",
      "condition": "Condition",
      "db": "Database",
      "diff_patch": "Diff/Patch",
      "endpoint": "End Node",
      "hook": "Hook",
      "integrated_api": "Integrated API",
      "ir_builder": "IR Builder",
      "json_schema_validator": "JSON Schema Validator",
      "person_job": "Person Job",
      "start": "Start Node",
      "sub_diagram": "Sub-Diagram",
      "template_job": "Template Job",
      "typescript_ast": "TypeScript AST Parser",
      "user_response": "User Response"
    }
  },
  "field_configs": [
    {
      "type": "string",
      "component": "TextField",
      "is_enum": false,
      "validation_rules": {
        "required": true
      }
    },
    {
      "type": "enum",
      "component": "SelectField",
      "is_enum": true,
      "validation_rules": {
        "required": true,
        "enum": [
          "GET",
          "POST",
          "PUT",
          "DELETE",
          "PATCH"
        ]
      }
    },
    {
      "type": "object",
      "component": "JsonField",
      "is_enum": false,
      "validation_rules": {}
    },
    {
      "type": "number",
      "component": "NumberField",
      "is_enum": false,
      "validation_rules": {}
    },
    {
      "type": "array",
      "component": "ArrayField",
      "is_enum": false,
      "validation_rules": {}
    },
    {
      "type": "boolean",
      "component": "CheckboxField",
      "is_enum": false,
      "validation_rules": {}
    },
    {
      "type": "any",
      "component": "TextField",
      "is_enum": false,
      "validation_rules": {}
    },
    {
      "type": "string",
      "component": "SelectField",
      "is_enum": true,
      "validation_rules": {
        "required": true,
        "enum": [
          "prompt",
          "read",
          "write",
          "append",
          "update"
        ]
      }
    },
    {
      "type": "array",
      "component": "SelectField",
      "is_enum": true,
      "validation_rules": {
        "enum": [
          "interface",
          "type",
          "enum",
          "class",
          "function",
          "const",
          "export"
        ]
      }
    }
  ],
  "typescript_models": [
    {
      "name": "ApiJobModel",
      "interface_name": "IApiJob",
      "node_type": "api_job",
      "fields": [
        {
          "name": "url",
          "type": "string",
          "optional": false,
          "description": "API endpoint URL",
          "default": null
        },
        {
          "name": "method",
          "type": "\"GET\" | \"POST\" | \"PUT\" | \"DELETE\" | \"PATCH\"",
          "optional": false,
          "description": "HTTP method",
          "default": null
        },
        {
          "name": "headers",
          "type": "Record<string, any>",
          "optional": true,
          "description": "HTTP headers",
          "default": null
        },
        {
          "name": "params",
          "type": "Record<string, any>",
          "optional": true,
          "description": "Query parameters",
          "default": null
        },
        {
          "name": "body",
          "type": "Record<string, any>",
          "optional": true,
          "description": "Request body",
          "default": null
        },
        {
          "name": "timeout",
          "type": "number",
          "optional": true,
          "description": "Request timeout in seconds",
          "default": null
        },
        {
          "name": "auth_type",
          "type": "\"none\" | \"bearer\" | \"basic\" | \"api_key\"",
          "optional": true,
          "description": "Authentication type",
          "default": null
        },
        {
          "name": "auth_config",
          "type": "Record<string, any>",
          "optional": true,
          "description": "Authentication configuration",
          "default": null
        }
      ]
    },
    {
      "name": "CodeJobModel",
      "interface_name": "ICodeJob",
      "node_type": "code_job",
      "fields": [
        {
          "name": "language",
          "type": "\"python\" | \"typescript\" | \"bash\" | \"shell\"",
          "optional": false,
          "description": "Programming language",
          "default": null
        },
        {
          "name": "filePath",
          "type": "string",
          "optional": true,
          "description": "Path to code file",
          "default": null
        },
        {
          "name": "code",
          "type": "string",
          "optional": true,
          "description": "Inline code to execute (alternative to filePath)",
          "default": null
        },
        {
          "name": "functionName",
          "type": "string",
          "optional": true,
          "description": "Function to execute",
          "default": null
        },
        {
          "name": "timeout",
          "type": "number",
          "optional": true,
          "description": "Execution timeout in seconds",
          "default": null
        }
      ]
    },
    {
      "name": "ConditionModel",
      "interface_name": "ICondition",
      "node_type": "condition",
      "fields": [
        {
          "name": "condition_type",
          "type": "\"detect_max_iterations\" | \"check_nodes_executed\" | \"custom\" | \"llm_decision\"",
          "optional": true,
          "description": "Type of condition to evaluate",
          "default": "custom"
        },
        {
          "name": "expression",
          "type": "string",
          "optional": true,
          "description": "Boolean expression to evaluate",
          "default": null
        },
        {
          "name": "node_indices",
          "type": "any[]",
          "optional": true,
          "description": "Node indices for detect_max_iteration condition",
          "default": null
        },
        {
          "name": "person",
          "type": "string",
          "optional": true,
          "description": "AI agent to use for decision making",
          "default": null
        },
        {
          "name": "judge_by",
          "type": "string",
          "optional": true,
          "description": "Prompt for LLM to make a judgment",
          "default": null
        },
        {
          "name": "judge_by_file",
          "type": "string",
          "optional": true,
          "description": "External prompt file path",
          "default": null
        },
        {
          "name": "memorize_to",
          "type": "string",
          "optional": true,
          "description": "Memory control strategy (e.g., GOLDFISH for fresh evaluation)",
          "default": "GOLDFISH"
        },
        {
          "name": "at_most",
          "type": "number",
          "optional": true,
          "description": "Maximum messages to keep in memory",
          "default": null
        },
        {
          "name": "expose_index_as",
          "type": "string",
          "optional": true,
          "description": "Variable name to expose the condition node's execution count (0-based index) to downstream nodes",
          "default": null
        },
        {
          "name": "skippable",
          "type": "boolean",
          "optional": true,
          "description": "When true, downstream nodes can execute even if this condition hasn't been evaluated yet",
          "default": false
        }
      ]
    },
    {
      "name": "DbModel",
      "interface_name": "IDb",
      "node_type": "db",
      "fields": [
        {
          "name": "file",
          "type": "any",
          "optional": true,
          "description": "File path or array of file paths",
          "default": null
        },
        {
          "name": "collection",
          "type": "string",
          "optional": true,
          "description": "Database collection name",
          "default": null
        },
        {
          "name": "sub_type",
          "type": "\"fixed_prompt\" | \"file\" | \"code\" | \"api_tool\"",
          "optional": false,
          "description": "Database operation type",
          "default": null
        },
        {
          "name": "operation",
          "type": "\"prompt\" | \"read\" | \"write\" | \"append\" | \"update\"",
          "optional": false,
          "description": "Operation configuration",
          "default": null
        },
        {
          "name": "query",
          "type": "string",
          "optional": true,
          "description": "Query configuration",
          "default": null
        },
        {
          "name": "keys",
          "type": "any",
          "optional": true,
          "description": "Single key or list of dot-separated keys to target within the JSON payload",
          "default": null
        },
        {
          "name": "lines",
          "type": "any",
          "optional": true,
          "description": "Line selection or ranges to read (e.g., 1:120 or ['10:20'])",
          "default": null
        },
        {
          "name": "data",
          "type": "Record<string, any>",
          "optional": true,
          "description": "Data configuration",
          "default": null
        },
        {
          "name": "serialize_json",
          "type": "boolean",
          "optional": true,
          "description": "Serialize structured data to JSON string (for backward compatibility)",
          "default": false
        },
        {
          "name": "format",
          "type": "string",
          "optional": true,
          "description": "Data format (json, yaml, csv, text, etc.)",
          "default": "json"
        }
      ]
    },
    {
      "name": "DiffPatchModel",
      "interface_name": "IDiffPatch",
      "node_type": "diff_patch",
      "fields": [
        {
          "name": "target_path",
          "type": "string",
          "optional": false,
          "description": "Path to the file to patch",
          "default": null
        },
        {
          "name": "diff",
          "type": "string",
          "optional": false,
          "description": "Unified diff content to apply",
          "default": null
        },
        {
          "name": "format",
          "type": "\"unified\" | \"git\" | \"context\" | \"ed\" | \"normal\"",
          "optional": true,
          "description": "Diff format type",
          "default": "unified"
        },
        {
          "name": "apply_mode",
          "type": "\"normal\" | \"force\" | \"dry_run\" | \"reverse\"",
          "optional": true,
          "description": "How to apply the patch",
          "default": "normal"
        },
        {
          "name": "backup",
          "type": "boolean",
          "optional": true,
          "description": "Create backup before patching",
          "default": true
        },
        {
          "name": "validate_patch",
          "type": "boolean",
          "optional": true,
          "description": "Validate patch before applying",
          "default": true
        },
        {
          "name": "backup_dir",
          "type": "string",
          "optional": true,
          "description": "Directory for backup files",
          "default": null
        },
        {
          "name": "strip_level",
          "type": "number",
          "optional": true,
          "description": "Strip N leading path components (like patch -pN)",
          "default": 1
        },
        {
          "name": "fuzz_factor",
          "type": "number",
          "optional": true,
          "description": "Number of lines that can be ignored when matching context",
          "default": 2
        },
        {
          "name": "reject_file",
          "type": "string",
          "optional": true,
          "description": "Path to save rejected hunks",
          "default": null
        },
        {
          "name": "ignore_whitespace",
          "type": "boolean",
          "optional": true,
          "description": "Ignore whitespace changes when matching",
          "default": false
        },
        {
          "name": "create_missing",
          "type": "boolean",
          "optional": true,
          "description": "Create target file if it doesn't exist",
          "default": false
        }
      ]
    },
    {
      "name": "EndpointModel",
      "interface_name": "IEndpoint",
      "node_type": "endpoint",
      "fields": [
        {
          "name": "save_to_file",
          "type": "boolean",
          "optional": true,
          "description": "Save results to file",
          "default": null
        },
        {
          "name": "file_name",
          "type": "string",
          "optional": true,
          "description": "Output filename",
          "default": null
        }
      ]
    },
    {
      "name": "HookModel",
      "interface_name": "IHook",
      "node_type": "hook",
      "fields": [
        {
          "name": "hook_type",
          "type": "\"shell\" | \"http\" | \"python\" | \"file\"",
          "optional": false,
          "description": "Type of hook to execute",
          "default": "shell"
        },
        {
          "name": "command",
          "type": "string",
          "optional": true,
          "description": "Shell command to run (for shell hooks)",
          "default": null
        },
        {
          "name": "url",
          "type": "string",
          "optional": true,
          "description": "Webhook URL (for HTTP hooks)",
          "default": null
        },
        {
          "name": "timeout",
          "type": "number",
          "optional": true,
          "description": "Execution timeout in seconds",
          "default": 60
        },
        {
          "name": "retry_count",
          "type": "number",
          "optional": true,
          "description": "Number of retries on failure",
          "default": 0
        }
      ]
    },
    {
      "name": "IntegratedApiModel",
      "interface_name": "IIntegratedApi",
      "node_type": "integrated_api",
      "fields": [
        {
          "name": "provider",
          "type": "string",
          "optional": false,
          "description": "API provider to connect to",
          "default": null
        },
        {
          "name": "operation",
          "type": "string",
          "optional": false,
          "description": "Operation to perform (provider-specific)",
          "default": null
        },
        {
          "name": "resource_id",
          "type": "string",
          "optional": true,
          "description": "Resource identifier (e.g., page ID, channel ID)",
          "default": null
        },
        {
          "name": "config",
          "type": "Record<string, any>",
          "optional": true,
          "description": "Provider-specific configuration",
          "default": null
        },
        {
          "name": "timeout",
          "type": "number",
          "optional": true,
          "description": "Request timeout in seconds",
          "default": null
        },
        {
          "name": "max_retries",
          "type": "number",
          "optional": true,
          "description": "Maximum retry attempts",
          "default": null
        }
      ]
    },
    {
      "name": "IrBuilderModel",
      "interface_name": "IIrBuilder",
      "node_type": "ir_builder",
      "fields": [
        {
          "name": "builder_type",
          "type": "\"backend\" | \"frontend\" | \"strawberry\" | \"custom\"",
          "optional": false,
          "description": "Type of IR builder to use",
          "default": null
        },
        {
          "name": "source_type",
          "type": "\"ast\" | \"schema\" | \"config\" | \"auto\"",
          "optional": true,
          "description": "Type of source data",
          "default": null
        },
        {
          "name": "config_path",
          "type": "string",
          "optional": true,
          "description": "Path to configuration directory",
          "default": null
        },
        {
          "name": "output_format",
          "type": "\"json\" | \"yaml\" | \"python\"",
          "optional": true,
          "description": "Output format for IR",
          "default": null
        },
        {
          "name": "cache_enabled",
          "type": "boolean",
          "optional": true,
          "description": "Enable IR caching",
          "default": null
        },
        {
          "name": "validate_output",
          "type": "boolean",
          "optional": true,
          "description": "Validate IR structure before output",
          "default": null
        }
      ]
    },
    {
      "name": "JsonSchemaValidatorModel",
      "interface_name": "IJsonSchemaValidator",
      "node_type": "json_schema_validator",
      "fields": [
        {
          "name": "schema_path",
          "type": "string",
          "optional": true,
          "description": "Path to JSON schema file",
          "default": null
        },
        {
          "name": "json_schema",
          "type": "Record<string, any>",
          "optional": true,
          "description": "Inline JSON schema",
          "default": null
        },
        {
          "name": "data_path",
          "type": "string",
          "optional": true,
          "description": "Data Path configuration",
          "default": null
        },
        {
          "name": "strict_mode",
          "type": "boolean",
          "optional": true,
          "description": "Strict Mode configuration",
          "default": null
        },
        {
          "name": "error_on_extra",
          "type": "boolean",
          "optional": true,
          "description": "Error On Extra configuration",
          "default": null
        }
      ]
    },
    {
      "name": "PersonJobModel",
      "interface_name": "IPersonJob",
      "node_type": "person_job",
      "fields": [
        {
          "name": "person",
          "type": "string",
          "optional": true,
          "description": "AI person to use",
          "default": null
        },
        {
          "name": "first_only_prompt",
          "type": "string",
          "optional": true,
          "description": "Prompt used only on first execution",
          "default": null
        },
        {
          "name": "first_prompt_file",
          "type": "string",
          "optional": true,
          "description": "External prompt file for first iteration only",
          "default": null
        },
        {
          "name": "default_prompt",
          "type": "string",
          "optional": true,
          "description": "Default prompt template",
          "default": null
        },
        {
          "name": "prompt_file",
          "type": "string",
          "optional": true,
          "description": "Path to prompt file in /files/prompts/",
          "default": null
        },
        {
          "name": "max_iteration",
          "type": "number",
          "optional": false,
          "description": "Maximum execution iterations",
          "default": 100
        },
        {
          "name": "memorize_to",
          "type": "string",
          "optional": true,
          "description": "Criteria used to select helpful messages for this task. Empty = memorize all. Special: 'GOLDFISH' for goldfish mode. Comma-separated for multiple criteria.",
          "default": null
        },
        {
          "name": "at_most",
          "type": "number",
          "optional": true,
          "description": "Select at most N messages to keep (system messages may be preserved in addition).",
          "default": null
        },
        {
          "name": "ignore_person",
          "type": "string",
          "optional": true,
          "description": "Comma-separated list of person IDs whose messages should be excluded from memory selection.",
          "default": null
        },
        {
          "name": "tools",
          "type": "string",
          "optional": true,
          "description": "Tools available to the AI agent",
          "default": null
        },
        {
          "name": "text_format",
          "type": "string",
          "optional": true,
          "description": "JSON schema or response format for structured outputs",
          "default": null
        },
        {
          "name": "text_format_file",
          "type": "string",
          "optional": true,
          "description": "Path to Python file containing Pydantic models for structured outputs",
          "default": null
        },
        {
          "name": "resolved_prompt",
          "type": "string",
          "optional": true,
          "description": "Pre-resolved prompt content from compile-time",
          "default": null
        },
        {
          "name": "resolved_first_prompt",
          "type": "string",
          "optional": true,
          "description": "Pre-resolved first prompt content from compile-time",
          "default": null
        },
        {
          "name": "batch",
          "type": "boolean",
          "optional": true,
          "description": "Enable batch mode for processing multiple items",
          "default": false
        },
        {
          "name": "batch_input_key",
          "type": "string",
          "optional": true,
          "description": "Key containing the array to iterate over in batch mode",
          "default": "items"
        },
        {
          "name": "batch_parallel",
          "type": "boolean",
          "optional": true,
          "description": "Execute batch items in parallel",
          "default": true
        },
        {
          "name": "max_concurrent",
          "type": "number",
          "optional": true,
          "description": "Maximum concurrent executions in batch mode",
          "default": 10
        }
      ]
    },
    {
      "name": "StartModel",
      "interface_name": "IStart",
      "node_type": "start",
      "fields": [
        {
          "name": "trigger_mode",
          "type": "\"none\" | \"manual\" | \"hook\"",
          "optional": true,
          "description": "How this start node is triggered",
          "default": "none"
        },
        {
          "name": "custom_data",
          "type": "any",
          "optional": true,
          "description": "Custom data to pass when manually triggered",
          "default": null
        },
        {
          "name": "output_data_structure",
          "type": "Record<string, any>",
          "optional": true,
          "description": "Expected output data structure",
          "default": null
        },
        {
          "name": "hook_event",
          "type": "string",
          "optional": true,
          "description": "Event name to listen for",
          "default": null
        },
        {
          "name": "hook_filters",
          "type": "Record<string, any>",
          "optional": true,
          "description": "Filters to apply to incoming events",
          "default": null
        }
      ]
    },
    {
      "name": "SubDiagramModel",
      "interface_name": "ISubDiagram",
      "node_type": "sub_diagram",
      "fields": [
        {
          "name": "diagram_name",
          "type": "string",
          "optional": true,
          "description": "Name of the diagram to execute (e.g., 'workflow/process')",
          "default": null
        },
        {
          "name": "diagram_data",
          "type": "Record<string, any>",
          "optional": true,
          "description": "Inline diagram data (alternative to diagram_name)",
          "default": null
        },
        {
          "name": "input_mapping",
          "type": "Record<string, any>",
          "optional": true,
          "description": "Map node inputs to sub-diagram variables",
          "default": null
        },
        {
          "name": "output_mapping",
          "type": "Record<string, any>",
          "optional": true,
          "description": "Map sub-diagram outputs to node outputs",
          "default": null
        },
        {
          "name": "timeout",
          "type": "number",
          "optional": true,
          "description": "Execution timeout in seconds",
          "default": null
        },
        {
          "name": "wait_for_completion",
          "type": "boolean",
          "optional": true,
          "description": "Whether to wait for sub-diagram completion",
          "default": true
        },
        {
          "name": "isolate_conversation",
          "type": "boolean",
          "optional": true,
          "description": "Create isolated conversation context for sub-diagram",
          "default": false
        },
        {
          "name": "ignoreIfSub",
          "type": "boolean",
          "optional": true,
          "description": "Skip execution if this diagram is being run as a sub-diagram",
          "default": false
        },
        {
          "name": "diagram_format",
          "type": "\"yaml\" | \"json\" | \"light\"",
          "optional": true,
          "description": "Format of the diagram file (yaml, json, or light)",
          "default": null
        },
        {
          "name": "batch",
          "type": "boolean",
          "optional": true,
          "description": "Execute sub-diagram in batch mode for multiple inputs",
          "default": false
        },
        {
          "name": "batch_input_key",
          "type": "string",
          "optional": true,
          "description": "Key in inputs containing the array of items for batch processing",
          "default": null
        },
        {
          "name": "batch_parallel",
          "type": "boolean",
          "optional": true,
          "description": "Execute batch items in parallel",
          "default": false
        }
      ]
    },
    {
      "name": "TemplateJobModel",
      "interface_name": "ITemplateJob",
      "node_type": "template_job",
      "fields": [
        {
          "name": "template_path",
          "type": "string",
          "optional": true,
          "description": "Path to template file",
          "default": null
        },
        {
          "name": "template_content",
          "type": "string",
          "optional": true,
          "description": "Inline template content",
          "default": null
        },
        {
          "name": "output_path",
          "type": "string",
          "optional": true,
          "description": "Output file path",
          "default": null
        },
        {
          "name": "variables",
          "type": "Record<string, any>",
          "optional": true,
          "description": "Variables configuration",
          "default": null
        },
        {
          "name": "engine",
          "type": "\"internal\" | \"jinja2\"",
          "optional": true,
          "description": "Template engine to use",
          "default": "jinja2"
        },
        {
          "name": "preprocessor",
          "type": "string",
          "optional": true,
          "description": "Preprocessor function to apply before templating",
          "default": null
        }
      ]
    },
    {
      "name": "TypescriptAstModel",
      "interface_name": "ITypescriptAst",
      "node_type": "typescript_ast",
      "fields": [
        {
          "name": "source",
          "type": "string",
          "optional": true,
          "description": "TypeScript source code to parse",
          "default": null
        },
        {
          "name": "extractPatterns",
          "type": "\"interface\" | \"type\" | \"enum\" | \"class\" | \"function\" | \"const\" | \"export\"",
          "optional": true,
          "description": "Patterns to extract from the AST",
          "default": [
            "interface",
            "type",
            "enum"
          ]
        },
        {
          "name": "includeJSDoc",
          "type": "boolean",
          "optional": true,
          "description": "Include JSDoc comments in the extracted data",
          "default": false
        },
        {
          "name": "parseMode",
          "type": "\"module\" | \"script\"",
          "optional": true,
          "description": "TypeScript parsing mode",
          "default": "module"
        },
        {
          "name": "transformEnums",
          "type": "boolean",
          "optional": true,
          "description": "Transform enum definitions to a simpler format",
          "default": false
        },
        {
          "name": "flattenOutput",
          "type": "boolean",
          "optional": true,
          "description": "Flatten the output structure for easier consumption",
          "default": false
        },
        {
          "name": "outputFormat",
          "type": "\"standard\" | \"for_codegen\" | \"for_analysis\"",
          "optional": true,
          "description": "Output format for the parsed data",
          "default": "standard"
        },
        {
          "name": "batch",
          "type": "boolean",
          "optional": true,
          "description": "Enable batch processing mode",
          "default": false
        },
        {
          "name": "batchInputKey",
          "type": "string",
          "optional": true,
          "description": "Key to extract batch items from input",
          "default": "sources"
        }
      ]
    },
    {
      "name": "UserResponseModel",
      "interface_name": "IUserResponse",
      "node_type": "user_response",
      "fields": [
        {
          "name": "prompt",
          "type": "string",
          "optional": false,
          "description": "Question to ask the user",
          "default": null
        },
        {
          "name": "timeout",
          "type": "number",
          "optional": true,
          "description": "Response timeout in seconds",
          "default": 300
        }
      ]
    }
  ],
  "graphql_queries": [
    {
      "name": "GetApiKeys",
      "operation_name": "GetApiKeys",
      "type": "query",
      "entity": "ApiKey",
      "variables": [
        {
          "name": "service",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": false,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "api_keys",
          "fields": [],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "service",
              "value": "service",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "GetApiKey",
      "operation_name": "GetApiKey",
      "type": "query",
      "entity": "ApiKey",
      "variables": [
        {
          "name": "api_key_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": true,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "api_key",
          "fields": [
            {
              "name": "id",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "label",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "service",
              "fields": [],
              "type": null,
              "description": ""
            }
          ],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "api_key_id",
              "value": "api_key_id",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "GetAvailableModels",
      "operation_name": "GetAvailableModels",
      "type": "query",
      "entity": "ApiKey",
      "variables": [
        {
          "name": "service",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": true,
          "description": "",
          "default": null
        },
        {
          "name": "api_key_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": true,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "available_models",
          "fields": [],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "service",
              "value": "service",
              "isVariable": true
            },
            {
              "name": "api_key_id",
              "value": "api_key_id",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "CreateApiKey",
      "operation_name": "CreateApiKey",
      "type": "mutation",
      "entity": "ApiKey",
      "variables": [
        {
          "name": "input",
          "type": "CreateApiKeyInput",
          "graphql_type": "CreateApiKeyInput",
          "python_type": "CreateApiKeyInput",
          "typescript_type": "CreateApiKeyInput",
          "required": true,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "create_api_key",
          "fields": [
            {
              "name": "success",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "api_key",
              "fields": [
                {
                  "name": "id",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "label",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "service",
                  "fields": [],
                  "type": null,
                  "description": ""
                }
              ],
              "type": null,
              "description": ""
            },
            {
              "name": "message",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "error",
              "fields": [],
              "type": null,
              "description": ""
            }
          ],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "input",
              "value": "input",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "TestApiKey",
      "operation_name": "TestApiKey",
      "type": "mutation",
      "entity": "ApiKey",
      "variables": [
        {
          "name": "api_key_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": true,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "test_api_key",
          "fields": [
            {
              "name": "success",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "message",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "error",
              "fields": [],
              "type": null,
              "description": ""
            }
          ],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "api_key_id",
              "value": "api_key_id",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "DeleteApiKey",
      "operation_name": "DeleteApiKey",
      "type": "mutation",
      "entity": "ApiKey",
      "variables": [
        {
          "name": "api_key_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": true,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "delete_api_key",
          "fields": [
            {
              "name": "success",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "message",
              "fields": [],
              "type": null,
              "description": ""
            }
          ],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "api_key_id",
              "value": "api_key_id",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "RegisterCliSession",
      "operation_name": "RegisterCliSession",
      "type": "mutation",
      "entity": "CliSession",
      "variables": [
        {
          "name": "input",
          "type": "RegisterCliSessionInput",
          "graphql_type": "RegisterCliSessionInput",
          "python_type": "RegisterCliSessionInput",
          "typescript_type": "RegisterCliSessionInput",
          "required": true,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "register_cli_session",
          "fields": [
            {
              "name": "success",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "message",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "error",
              "fields": [],
              "type": null,
              "description": ""
            }
          ],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "input",
              "value": "input",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "UnregisterCliSession",
      "operation_name": "UnregisterCliSession",
      "type": "mutation",
      "entity": "CliSession",
      "variables": [
        {
          "name": "input",
          "type": "UnregisterCliSessionInput",
          "graphql_type": "UnregisterCliSessionInput",
          "python_type": "UnregisterCliSessionInput",
          "typescript_type": "UnregisterCliSessionInput",
          "required": true,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "unregister_cli_session",
          "fields": [
            {
              "name": "success",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "message",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "error",
              "fields": [],
              "type": null,
              "description": ""
            }
          ],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "input",
              "value": "input",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "ListConversations",
      "operation_name": "ListConversations",
      "type": "query",
      "entity": "Conversation",
      "variables": [
        {
          "name": "person_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": false,
          "description": "",
          "default": null
        },
        {
          "name": "execution_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": false,
          "description": "",
          "default": null
        },
        {
          "name": "search",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": false,
          "description": "",
          "default": null
        },
        {
          "name": "show_forgotten",
          "type": "Boolean",
          "graphql_type": "Boolean",
          "python_type": "bool",
          "typescript_type": "boolean",
          "required": false,
          "description": "",
          "default": null
        },
        {
          "name": "limit",
          "type": "Int",
          "graphql_type": "Int",
          "python_type": "float",
          "typescript_type": "number",
          "required": false,
          "description": "",
          "default": null
        },
        {
          "name": "offset",
          "type": "Int",
          "graphql_type": "Int",
          "python_type": "float",
          "typescript_type": "number",
          "required": false,
          "description": "",
          "default": null
        },
        {
          "name": "since",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": false,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "conversations",
          "fields": [],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "person_id",
              "value": "person_id",
              "isVariable": true
            },
            {
              "name": "execution_id",
              "value": "execution_id",
              "isVariable": true
            },
            {
              "name": "search",
              "value": "search",
              "isVariable": true
            },
            {
              "name": "show_forgotten",
              "value": "show_forgotten",
              "isVariable": true
            },
            {
              "name": "limit",
              "value": "limit",
              "isVariable": true
            },
            {
              "name": "offset",
              "value": "offset",
              "isVariable": true
            },
            {
              "name": "since",
              "value": "since",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "GetDiagram",
      "operation_name": "GetDiagram",
      "type": "query",
      "entity": "Diagram",
      "variables": [
        {
          "name": "diagram_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": true,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "diagram",
          "fields": [
            {
              "name": "nodes",
              "fields": [
                {
                  "name": "id",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "type",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "position",
                  "fields": [
                    {
                      "name": "x",
                      "fields": [],
                      "type": null,
                      "description": ""
                    },
                    {
                      "name": "y",
                      "fields": [],
                      "type": null,
                      "description": ""
                    }
                  ],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "data",
                  "fields": [],
                  "type": null,
                  "description": ""
                }
              ],
              "type": null,
              "description": ""
            },
            {
              "name": "handles",
              "fields": [
                {
                  "name": "id",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "node_id",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "label",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "direction",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "data_type",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "position",
                  "fields": [],
                  "type": null,
                  "description": ""
                }
              ],
              "type": null,
              "description": ""
            },
            {
              "name": "arrows",
              "fields": [
                {
                  "name": "id",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "source",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "target",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "content_type",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "label",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "data",
                  "fields": [],
                  "type": null,
                  "description": ""
                }
              ],
              "type": null,
              "description": ""
            },
            {
              "name": "persons",
              "fields": [
                {
                  "name": "id",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "label",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "llm_config",
                  "fields": [
                    {
                      "name": "service",
                      "fields": [],
                      "type": null,
                      "description": ""
                    },
                    {
                      "name": "model",
                      "fields": [],
                      "type": null,
                      "description": ""
                    },
                    {
                      "name": "api_key_id",
                      "fields": [],
                      "type": null,
                      "description": ""
                    },
                    {
                      "name": "system_prompt",
                      "fields": [],
                      "type": null,
                      "description": ""
                    }
                  ],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "type",
                  "fields": [],
                  "type": null,
                  "description": ""
                }
              ],
              "type": null,
              "description": ""
            },
            {
              "name": "metadata",
              "fields": [
                {
                  "name": "id",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "name",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "description",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "version",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "created",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "modified",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "author",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "tags",
                  "fields": [],
                  "type": null,
                  "description": ""
                }
              ],
              "type": null,
              "description": ""
            }
          ],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "diagram_id",
              "value": "diagram_id",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "ListDiagrams",
      "operation_name": "ListDiagrams",
      "type": "query",
      "entity": "Diagram",
      "variables": [
        {
          "name": "filter",
          "type": "DiagramFilterInput",
          "graphql_type": "DiagramFilterInput",
          "python_type": "DiagramFilterInput",
          "typescript_type": "DiagramFilterInput",
          "required": false,
          "description": "",
          "default": null
        },
        {
          "name": "limit",
          "type": "Int",
          "graphql_type": "Int",
          "python_type": "float",
          "typescript_type": "number",
          "required": false,
          "description": "",
          "default": null
        },
        {
          "name": "offset",
          "type": "Int",
          "graphql_type": "Int",
          "python_type": "float",
          "typescript_type": "number",
          "required": false,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "diagrams",
          "fields": [
            {
              "name": "metadata",
              "fields": [
                {
                  "name": "id",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "name",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "description",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "author",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "created",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "modified",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "tags",
                  "fields": [],
                  "type": null,
                  "description": ""
                }
              ],
              "type": null,
              "description": ""
            }
          ],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "filter",
              "value": "filter",
              "isVariable": true
            },
            {
              "name": "limit",
              "value": "limit",
              "isVariable": true
            },
            {
              "name": "offset",
              "value": "offset",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "CreateDiagram",
      "operation_name": "CreateDiagram",
      "type": "mutation",
      "entity": "Diagram",
      "variables": [
        {
          "name": "input",
          "type": "CreateDiagramInput",
          "graphql_type": "CreateDiagramInput",
          "python_type": "CreateDiagramInput",
          "typescript_type": "CreateDiagramInput",
          "required": true,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "create_diagram",
          "fields": [
            {
              "name": "success",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "diagram",
              "fields": [
                {
                  "name": "metadata",
                  "fields": [
                    {
                      "name": "id",
                      "fields": [],
                      "type": null,
                      "description": ""
                    },
                    {
                      "name": "name",
                      "fields": [],
                      "type": null,
                      "description": ""
                    }
                  ],
                  "type": null,
                  "description": ""
                }
              ],
              "type": null,
              "description": ""
            },
            {
              "name": "message",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "error",
              "fields": [],
              "type": null,
              "description": ""
            }
          ],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "input",
              "value": "input",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "ExecuteDiagram",
      "operation_name": "ExecuteDiagram",
      "type": "mutation",
      "entity": "Diagram",
      "variables": [
        {
          "name": "input",
          "type": "ExecuteDiagramInput",
          "graphql_type": "ExecuteDiagramInput",
          "python_type": "ExecuteDiagramInput",
          "typescript_type": "ExecuteDiagramInput",
          "required": true,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "execute_diagram",
          "fields": [
            {
              "name": "success",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "execution",
              "fields": [
                {
                  "name": "id",
                  "fields": [],
                  "type": null,
                  "description": ""
                }
              ],
              "type": null,
              "description": ""
            },
            {
              "name": "message",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "error",
              "fields": [],
              "type": null,
              "description": ""
            }
          ],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "input",
              "value": "input",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "DeleteDiagram",
      "operation_name": "DeleteDiagram",
      "type": "mutation",
      "entity": "Diagram",
      "variables": [
        {
          "name": "diagram_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": true,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "delete_diagram",
          "fields": [
            {
              "name": "success",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "message",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "error",
              "fields": [],
              "type": null,
              "description": ""
            }
          ],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "diagram_id",
              "value": "diagram_id",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "GetExecution",
      "operation_name": "GetExecution",
      "type": "query",
      "entity": "Execution",
      "variables": [
        {
          "name": "execution_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": true,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "execution",
          "fields": [
            {
              "name": "id",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "status",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "diagram_id",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "started_at",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "ended_at",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "error",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "node_states",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "node_outputs",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "variables",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "metrics",
              "fields": [
                {
                  "name": "execution_id",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "start_time",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "end_time",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "total_duration_ms",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "node_metrics",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "critical_path",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "parallelizable_groups",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "bottlenecks",
                  "fields": [
                    {
                      "name": "node_id",
                      "fields": [],
                      "type": null,
                      "description": ""
                    },
                    {
                      "name": "node_type",
                      "fields": [],
                      "type": null,
                      "description": ""
                    },
                    {
                      "name": "duration_ms",
                      "fields": [],
                      "type": null,
                      "description": ""
                    },
                    {
                      "name": "percentage",
                      "fields": [],
                      "type": null,
                      "description": ""
                    }
                  ],
                  "type": null,
                  "description": ""
                }
              ],
              "type": null,
              "description": ""
            },
            {
              "name": "llm_usage",
              "fields": [
                {
                  "name": "input",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "output",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "cached",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "total",
                  "fields": [],
                  "type": null,
                  "description": ""
                }
              ],
              "type": null,
              "description": ""
            }
          ],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "execution_id",
              "value": "execution_id",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "ListExecutions",
      "operation_name": "ListExecutions",
      "type": "query",
      "entity": "Execution",
      "variables": [
        {
          "name": "filter",
          "type": "ExecutionFilterInput",
          "graphql_type": "ExecutionFilterInput",
          "python_type": "ExecutionFilterInput",
          "typescript_type": "ExecutionFilterInput",
          "required": false,
          "description": "",
          "default": null
        },
        {
          "name": "limit",
          "type": "Int",
          "graphql_type": "Int",
          "python_type": "float",
          "typescript_type": "number",
          "required": false,
          "description": "",
          "default": null
        },
        {
          "name": "offset",
          "type": "Int",
          "graphql_type": "Int",
          "python_type": "float",
          "typescript_type": "number",
          "required": false,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "executions",
          "fields": [
            {
              "name": "id",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "status",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "diagram_id",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "started_at",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "ended_at",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "error",
              "fields": [],
              "type": null,
              "description": ""
            }
          ],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "filter",
              "value": "filter",
              "isVariable": true
            },
            {
              "name": "limit",
              "value": "limit",
              "isVariable": true
            },
            {
              "name": "offset",
              "value": "offset",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "ExecutionUpdates",
      "operation_name": "ExecutionUpdates",
      "type": "subscription",
      "entity": "Execution",
      "variables": [
        {
          "name": "execution_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": true,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "execution_updates",
          "fields": [
            {
              "name": "execution_id",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "type",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "data",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "timestamp",
              "fields": [],
              "type": null,
              "description": ""
            }
          ],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "execution_id",
              "value": "execution_id",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "ControlExecution",
      "operation_name": "ControlExecution",
      "type": "mutation",
      "entity": "Execution",
      "variables": [
        {
          "name": "input",
          "type": "ExecutionControlInput",
          "graphql_type": "ExecutionControlInput",
          "python_type": "ExecutionControlInput",
          "typescript_type": "ExecutionControlInput",
          "required": true,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "control_execution",
          "fields": [
            {
              "name": "success",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "execution",
              "fields": [
                {
                  "name": "id",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "status",
                  "fields": [],
                  "type": null,
                  "description": ""
                }
              ],
              "type": null,
              "description": ""
            },
            {
              "name": "message",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "error",
              "fields": [],
              "type": null,
              "description": ""
            }
          ],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "input",
              "value": "input",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "SendInteractiveResponse",
      "operation_name": "SendInteractiveResponse",
      "type": "mutation",
      "entity": "Execution",
      "variables": [
        {
          "name": "input",
          "type": "InteractiveResponseInput",
          "graphql_type": "InteractiveResponseInput",
          "python_type": "InteractiveResponseInput",
          "typescript_type": "InteractiveResponseInput",
          "required": true,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "send_interactive_response",
          "fields": [
            {
              "name": "success",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "message",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "error",
              "fields": [],
              "type": null,
              "description": ""
            }
          ],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "input",
              "value": "input",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "UpdateNodeState",
      "operation_name": "UpdateNodeState",
      "type": "mutation",
      "entity": "Execution",
      "variables": [
        {
          "name": "input",
          "type": "UpdateNodeStateInput",
          "graphql_type": "UpdateNodeStateInput",
          "python_type": "UpdateNodeStateInput",
          "typescript_type": "UpdateNodeStateInput",
          "required": true,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "update_node_state",
          "fields": [
            {
              "name": "success",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "execution",
              "fields": [
                {
                  "name": "id",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "status",
                  "fields": [],
                  "type": null,
                  "description": ""
                }
              ],
              "type": null,
              "description": ""
            },
            {
              "name": "message",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "error",
              "fields": [],
              "type": null,
              "description": ""
            }
          ],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "input",
              "value": "input",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "UploadFile",
      "operation_name": "UploadFile",
      "type": "mutation",
      "entity": "File",
      "variables": [
        {
          "name": "file",
          "type": "Upload",
          "graphql_type": "Upload",
          "python_type": "Upload",
          "typescript_type": "Upload",
          "required": true,
          "description": "",
          "default": null
        },
        {
          "name": "path",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": false,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "upload_file",
          "fields": [],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "file",
              "value": "file",
              "isVariable": true
            },
            {
              "name": "path",
              "value": "path",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "UploadDiagram",
      "operation_name": "UploadDiagram",
      "type": "mutation",
      "entity": "File",
      "variables": [
        {
          "name": "file",
          "type": "Upload",
          "graphql_type": "Upload",
          "python_type": "Upload",
          "typescript_type": "Upload",
          "required": true,
          "description": "",
          "default": null
        },
        {
          "name": "format",
          "type": "DiagramFormatGraphQL",
          "graphql_type": "DiagramFormatGraphQL",
          "python_type": "DiagramFormatGraphQL",
          "typescript_type": "DiagramFormatGraphQL",
          "required": true,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "upload_diagram",
          "fields": [],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "file",
              "value": "file",
              "isVariable": true
            },
            {
              "name": "format",
              "value": "format",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "ValidateDiagram",
      "operation_name": "ValidateDiagram",
      "type": "mutation",
      "entity": "File",
      "variables": [
        {
          "name": "content",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": true,
          "description": "",
          "default": null
        },
        {
          "name": "format",
          "type": "DiagramFormatGraphQL",
          "graphql_type": "DiagramFormatGraphQL",
          "python_type": "DiagramFormatGraphQL",
          "typescript_type": "DiagramFormatGraphQL",
          "required": true,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "validate_diagram",
          "fields": [],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "content",
              "value": "content",
              "isVariable": true
            },
            {
              "name": "format",
              "value": "format",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "ConvertDiagramFormat",
      "operation_name": "ConvertDiagramFormat",
      "type": "mutation",
      "entity": "File",
      "variables": [
        {
          "name": "content",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": true,
          "description": "",
          "default": null
        },
        {
          "name": "from_format",
          "type": "DiagramFormatGraphQL",
          "graphql_type": "DiagramFormatGraphQL",
          "python_type": "DiagramFormatGraphQL",
          "typescript_type": "DiagramFormatGraphQL",
          "required": true,
          "description": "",
          "default": null
        },
        {
          "name": "to_format",
          "type": "DiagramFormatGraphQL",
          "graphql_type": "DiagramFormatGraphQL",
          "python_type": "DiagramFormatGraphQL",
          "typescript_type": "DiagramFormatGraphQL",
          "required": true,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "convert_diagram_format",
          "fields": [
            {
              "name": "success",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "data",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "format",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "message",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "error",
              "fields": [],
              "type": null,
              "description": ""
            }
          ],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "content",
              "value": "content",
              "isVariable": true
            },
            {
              "name": "from_format",
              "value": "from_format",
              "isVariable": true
            },
            {
              "name": "to_format",
              "value": "to_format",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "GetSupportedFormats",
      "operation_name": "GetSupportedFormats",
      "type": "query",
      "entity": "Format",
      "variables": [],
      "fields": [
        {
          "name": "supported_formats",
          "fields": [],
          "type": null,
          "description": ""
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "CreateNode",
      "operation_name": "CreateNode",
      "type": "mutation",
      "entity": "Node",
      "variables": [
        {
          "name": "diagram_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": true,
          "description": "",
          "default": null
        },
        {
          "name": "input",
          "type": "CreateNodeInput",
          "graphql_type": "CreateNodeInput",
          "python_type": "CreateNodeInput",
          "typescript_type": "CreateNodeInput",
          "required": true,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "create_node",
          "fields": [
            {
              "name": "success",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "node",
              "fields": [
                {
                  "name": "id",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "type",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "position",
                  "fields": [
                    {
                      "name": "x",
                      "fields": [],
                      "type": null,
                      "description": ""
                    },
                    {
                      "name": "y",
                      "fields": [],
                      "type": null,
                      "description": ""
                    }
                  ],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "data",
                  "fields": [],
                  "type": null,
                  "description": ""
                }
              ],
              "type": null,
              "description": ""
            },
            {
              "name": "message",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "error",
              "fields": [],
              "type": null,
              "description": ""
            }
          ],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "diagram_id",
              "value": "diagram_id",
              "isVariable": true
            },
            {
              "name": "input",
              "value": "input",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "UpdateNode",
      "operation_name": "UpdateNode",
      "type": "mutation",
      "entity": "Node",
      "variables": [
        {
          "name": "diagram_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": true,
          "description": "",
          "default": null
        },
        {
          "name": "node_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": true,
          "description": "",
          "default": null
        },
        {
          "name": "input",
          "type": "UpdateNodeInput",
          "graphql_type": "UpdateNodeInput",
          "python_type": "UpdateNodeInput",
          "typescript_type": "UpdateNodeInput",
          "required": true,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "update_node",
          "fields": [
            {
              "name": "success",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "message",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "error",
              "fields": [],
              "type": null,
              "description": ""
            }
          ],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "diagram_id",
              "value": "diagram_id",
              "isVariable": true
            },
            {
              "name": "node_id",
              "value": "node_id",
              "isVariable": true
            },
            {
              "name": "input",
              "value": "input",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "DeleteNode",
      "operation_name": "DeleteNode",
      "type": "mutation",
      "entity": "Node",
      "variables": [
        {
          "name": "diagram_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": true,
          "description": "",
          "default": null
        },
        {
          "name": "node_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": true,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "delete_node",
          "fields": [
            {
              "name": "success",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "message",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "error",
              "fields": [],
              "type": null,
              "description": ""
            }
          ],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "diagram_id",
              "value": "diagram_id",
              "isVariable": true
            },
            {
              "name": "node_id",
              "value": "node_id",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "GetPerson",
      "operation_name": "GetPerson",
      "type": "query",
      "entity": "Person",
      "variables": [
        {
          "name": "person_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": true,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "person",
          "fields": [
            {
              "name": "id",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "label",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "type",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "llm_config",
              "fields": [
                {
                  "name": "service",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "model",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "api_key_id",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "system_prompt",
                  "fields": [],
                  "type": null,
                  "description": ""
                }
              ],
              "type": null,
              "description": ""
            }
          ],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "person_id",
              "value": "person_id",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "ListPersons",
      "operation_name": "ListPersons",
      "type": "query",
      "entity": "Person",
      "variables": [
        {
          "name": "limit",
          "type": "Int",
          "graphql_type": "Int",
          "python_type": "float",
          "typescript_type": "number",
          "required": false,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "persons",
          "fields": [
            {
              "name": "id",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "label",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "type",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "llm_config",
              "fields": [
                {
                  "name": "service",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "model",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "api_key_id",
                  "fields": [],
                  "type": null,
                  "description": ""
                }
              ],
              "type": null,
              "description": ""
            }
          ],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "limit",
              "value": "limit",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "CreatePerson",
      "operation_name": "CreatePerson",
      "type": "mutation",
      "entity": "Person",
      "variables": [
        {
          "name": "input",
          "type": "CreatePersonInput",
          "graphql_type": "CreatePersonInput",
          "python_type": "CreatePersonInput",
          "typescript_type": "CreatePersonInput",
          "required": true,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "create_person",
          "fields": [
            {
              "name": "success",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "person",
              "fields": [
                {
                  "name": "id",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "label",
                  "fields": [],
                  "type": null,
                  "description": ""
                }
              ],
              "type": null,
              "description": ""
            },
            {
              "name": "message",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "error",
              "fields": [],
              "type": null,
              "description": ""
            }
          ],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "input",
              "value": "input",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "UpdatePerson",
      "operation_name": "UpdatePerson",
      "type": "mutation",
      "entity": "Person",
      "variables": [
        {
          "name": "person_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": true,
          "description": "",
          "default": null
        },
        {
          "name": "input",
          "type": "UpdatePersonInput",
          "graphql_type": "UpdatePersonInput",
          "python_type": "UpdatePersonInput",
          "typescript_type": "UpdatePersonInput",
          "required": true,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "update_person",
          "fields": [
            {
              "name": "success",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "person",
              "fields": [
                {
                  "name": "id",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "label",
                  "fields": [],
                  "type": null,
                  "description": ""
                }
              ],
              "type": null,
              "description": ""
            },
            {
              "name": "message",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "error",
              "fields": [],
              "type": null,
              "description": ""
            }
          ],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "person_id",
              "value": "person_id",
              "isVariable": true
            },
            {
              "name": "input",
              "value": "input",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "DeletePerson",
      "operation_name": "DeletePerson",
      "type": "mutation",
      "entity": "Person",
      "variables": [
        {
          "name": "person_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": true,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "delete_person",
          "fields": [
            {
              "name": "success",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "message",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "error",
              "fields": [],
              "type": null,
              "description": ""
            }
          ],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "person_id",
              "value": "person_id",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "ListPromptFiles",
      "operation_name": "ListPromptFiles",
      "type": "query",
      "entity": "Prompt",
      "variables": [],
      "fields": [
        {
          "name": "prompt_files",
          "fields": [],
          "type": null,
          "description": ""
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "GetPromptFile",
      "operation_name": "GetPromptFile",
      "type": "query",
      "entity": "Prompt",
      "variables": [
        {
          "name": "filename",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": true,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "prompt_file",
          "fields": [],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "filename",
              "value": "filename",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "GetProviders",
      "operation_name": "GetProviders",
      "type": "query",
      "entity": "Provider",
      "variables": [],
      "fields": [
        {
          "name": "providers",
          "fields": [],
          "type": null,
          "description": ""
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "GetProviderOperations",
      "operation_name": "GetProviderOperations",
      "type": "query",
      "entity": "Provider",
      "variables": [
        {
          "name": "provider",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": true,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "provider_operations",
          "fields": [],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "provider",
              "value": "provider",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "GetOperationSchema",
      "operation_name": "GetOperationSchema",
      "type": "query",
      "entity": "Provider",
      "variables": [
        {
          "name": "provider",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": true,
          "description": "",
          "default": null
        },
        {
          "name": "operation",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": true,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "operation_schema",
          "fields": [],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "provider",
              "value": "provider",
              "isVariable": true
            },
            {
              "name": "operation",
              "value": "operation",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "GetSystemInfo",
      "operation_name": "GetSystemInfo",
      "type": "query",
      "entity": "System",
      "variables": [],
      "fields": [
        {
          "name": "system_info",
          "fields": [],
          "type": null,
          "description": ""
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "GetExecutionCapabilities",
      "operation_name": "GetExecutionCapabilities",
      "type": "query",
      "entity": "System",
      "variables": [],
      "fields": [
        {
          "name": "execution_capabilities",
          "fields": [],
          "type": null,
          "description": ""
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "HealthCheck",
      "operation_name": "HealthCheck",
      "type": "query",
      "entity": "System",
      "variables": [],
      "fields": [
        {
          "name": "health_check",
          "fields": [],
          "type": null,
          "description": ""
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "GetExecutionOrder",
      "operation_name": "GetExecutionOrder",
      "type": "query",
      "entity": "System",
      "variables": [
        {
          "name": "execution_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": true,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "execution_order",
          "fields": [],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "execution_id",
              "value": "execution_id",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "GetExecutionMetrics",
      "operation_name": "GetExecutionMetrics",
      "type": "query",
      "entity": "System",
      "variables": [
        {
          "name": "execution_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": true,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "execution_metrics",
          "fields": [],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "execution_id",
              "value": "execution_id",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "GetExecutionHistory",
      "operation_name": "GetExecutionHistory",
      "type": "query",
      "entity": "System",
      "variables": [
        {
          "name": "diagram_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": false,
          "description": "",
          "default": null
        },
        {
          "name": "limit",
          "type": "Int",
          "graphql_type": "Int",
          "python_type": "float",
          "typescript_type": "number",
          "required": false,
          "description": "",
          "default": null
        },
        {
          "name": "include_metrics",
          "type": "Boolean",
          "graphql_type": "Boolean",
          "python_type": "bool",
          "typescript_type": "boolean",
          "required": false,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "execution_history",
          "fields": [],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "diagram_id",
              "value": "diagram_id",
              "isVariable": true
            },
            {
              "name": "limit",
              "value": "limit",
              "isVariable": true
            },
            {
              "name": "include_metrics",
              "value": "include_metrics",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "GetActiveCliSession",
      "operation_name": "GetActiveCliSession",
      "type": "query",
      "entity": "System",
      "variables": [],
      "fields": [
        {
          "name": "active_cli_session",
          "fields": [],
          "type": null,
          "description": ""
        }
      ],
      "description": "",
      "return_type": null
    }
  ],
  "queries": [
    {
      "name": "GetApiKeys",
      "operation_name": "GetApiKeys",
      "type": "query",
      "entity": "ApiKey",
      "variables": [
        {
          "name": "service",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": false,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "api_keys",
          "fields": [],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "service",
              "value": "service",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "GetApiKey",
      "operation_name": "GetApiKey",
      "type": "query",
      "entity": "ApiKey",
      "variables": [
        {
          "name": "api_key_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": true,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "api_key",
          "fields": [
            {
              "name": "id",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "label",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "service",
              "fields": [],
              "type": null,
              "description": ""
            }
          ],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "api_key_id",
              "value": "api_key_id",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "GetAvailableModels",
      "operation_name": "GetAvailableModels",
      "type": "query",
      "entity": "ApiKey",
      "variables": [
        {
          "name": "service",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": true,
          "description": "",
          "default": null
        },
        {
          "name": "api_key_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": true,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "available_models",
          "fields": [],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "service",
              "value": "service",
              "isVariable": true
            },
            {
              "name": "api_key_id",
              "value": "api_key_id",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "ListConversations",
      "operation_name": "ListConversations",
      "type": "query",
      "entity": "Conversation",
      "variables": [
        {
          "name": "person_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": false,
          "description": "",
          "default": null
        },
        {
          "name": "execution_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": false,
          "description": "",
          "default": null
        },
        {
          "name": "search",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": false,
          "description": "",
          "default": null
        },
        {
          "name": "show_forgotten",
          "type": "Boolean",
          "graphql_type": "Boolean",
          "python_type": "bool",
          "typescript_type": "boolean",
          "required": false,
          "description": "",
          "default": null
        },
        {
          "name": "limit",
          "type": "Int",
          "graphql_type": "Int",
          "python_type": "float",
          "typescript_type": "number",
          "required": false,
          "description": "",
          "default": null
        },
        {
          "name": "offset",
          "type": "Int",
          "graphql_type": "Int",
          "python_type": "float",
          "typescript_type": "number",
          "required": false,
          "description": "",
          "default": null
        },
        {
          "name": "since",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": false,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "conversations",
          "fields": [],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "person_id",
              "value": "person_id",
              "isVariable": true
            },
            {
              "name": "execution_id",
              "value": "execution_id",
              "isVariable": true
            },
            {
              "name": "search",
              "value": "search",
              "isVariable": true
            },
            {
              "name": "show_forgotten",
              "value": "show_forgotten",
              "isVariable": true
            },
            {
              "name": "limit",
              "value": "limit",
              "isVariable": true
            },
            {
              "name": "offset",
              "value": "offset",
              "isVariable": true
            },
            {
              "name": "since",
              "value": "since",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "GetDiagram",
      "operation_name": "GetDiagram",
      "type": "query",
      "entity": "Diagram",
      "variables": [
        {
          "name": "diagram_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": true,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "diagram",
          "fields": [
            {
              "name": "nodes",
              "fields": [
                {
                  "name": "id",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "type",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "position",
                  "fields": [
                    {
                      "name": "x",
                      "fields": [],
                      "type": null,
                      "description": ""
                    },
                    {
                      "name": "y",
                      "fields": [],
                      "type": null,
                      "description": ""
                    }
                  ],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "data",
                  "fields": [],
                  "type": null,
                  "description": ""
                }
              ],
              "type": null,
              "description": ""
            },
            {
              "name": "handles",
              "fields": [
                {
                  "name": "id",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "node_id",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "label",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "direction",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "data_type",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "position",
                  "fields": [],
                  "type": null,
                  "description": ""
                }
              ],
              "type": null,
              "description": ""
            },
            {
              "name": "arrows",
              "fields": [
                {
                  "name": "id",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "source",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "target",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "content_type",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "label",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "data",
                  "fields": [],
                  "type": null,
                  "description": ""
                }
              ],
              "type": null,
              "description": ""
            },
            {
              "name": "persons",
              "fields": [
                {
                  "name": "id",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "label",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "llm_config",
                  "fields": [
                    {
                      "name": "service",
                      "fields": [],
                      "type": null,
                      "description": ""
                    },
                    {
                      "name": "model",
                      "fields": [],
                      "type": null,
                      "description": ""
                    },
                    {
                      "name": "api_key_id",
                      "fields": [],
                      "type": null,
                      "description": ""
                    },
                    {
                      "name": "system_prompt",
                      "fields": [],
                      "type": null,
                      "description": ""
                    }
                  ],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "type",
                  "fields": [],
                  "type": null,
                  "description": ""
                }
              ],
              "type": null,
              "description": ""
            },
            {
              "name": "metadata",
              "fields": [
                {
                  "name": "id",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "name",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "description",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "version",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "created",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "modified",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "author",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "tags",
                  "fields": [],
                  "type": null,
                  "description": ""
                }
              ],
              "type": null,
              "description": ""
            }
          ],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "diagram_id",
              "value": "diagram_id",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "ListDiagrams",
      "operation_name": "ListDiagrams",
      "type": "query",
      "entity": "Diagram",
      "variables": [
        {
          "name": "filter",
          "type": "DiagramFilterInput",
          "graphql_type": "DiagramFilterInput",
          "python_type": "DiagramFilterInput",
          "typescript_type": "DiagramFilterInput",
          "required": false,
          "description": "",
          "default": null
        },
        {
          "name": "limit",
          "type": "Int",
          "graphql_type": "Int",
          "python_type": "float",
          "typescript_type": "number",
          "required": false,
          "description": "",
          "default": null
        },
        {
          "name": "offset",
          "type": "Int",
          "graphql_type": "Int",
          "python_type": "float",
          "typescript_type": "number",
          "required": false,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "diagrams",
          "fields": [
            {
              "name": "metadata",
              "fields": [
                {
                  "name": "id",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "name",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "description",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "author",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "created",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "modified",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "tags",
                  "fields": [],
                  "type": null,
                  "description": ""
                }
              ],
              "type": null,
              "description": ""
            }
          ],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "filter",
              "value": "filter",
              "isVariable": true
            },
            {
              "name": "limit",
              "value": "limit",
              "isVariable": true
            },
            {
              "name": "offset",
              "value": "offset",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "GetExecution",
      "operation_name": "GetExecution",
      "type": "query",
      "entity": "Execution",
      "variables": [
        {
          "name": "execution_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": true,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "execution",
          "fields": [
            {
              "name": "id",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "status",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "diagram_id",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "started_at",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "ended_at",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "error",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "node_states",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "node_outputs",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "variables",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "metrics",
              "fields": [
                {
                  "name": "execution_id",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "start_time",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "end_time",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "total_duration_ms",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "node_metrics",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "critical_path",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "parallelizable_groups",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "bottlenecks",
                  "fields": [
                    {
                      "name": "node_id",
                      "fields": [],
                      "type": null,
                      "description": ""
                    },
                    {
                      "name": "node_type",
                      "fields": [],
                      "type": null,
                      "description": ""
                    },
                    {
                      "name": "duration_ms",
                      "fields": [],
                      "type": null,
                      "description": ""
                    },
                    {
                      "name": "percentage",
                      "fields": [],
                      "type": null,
                      "description": ""
                    }
                  ],
                  "type": null,
                  "description": ""
                }
              ],
              "type": null,
              "description": ""
            },
            {
              "name": "llm_usage",
              "fields": [
                {
                  "name": "input",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "output",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "cached",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "total",
                  "fields": [],
                  "type": null,
                  "description": ""
                }
              ],
              "type": null,
              "description": ""
            }
          ],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "execution_id",
              "value": "execution_id",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "ListExecutions",
      "operation_name": "ListExecutions",
      "type": "query",
      "entity": "Execution",
      "variables": [
        {
          "name": "filter",
          "type": "ExecutionFilterInput",
          "graphql_type": "ExecutionFilterInput",
          "python_type": "ExecutionFilterInput",
          "typescript_type": "ExecutionFilterInput",
          "required": false,
          "description": "",
          "default": null
        },
        {
          "name": "limit",
          "type": "Int",
          "graphql_type": "Int",
          "python_type": "float",
          "typescript_type": "number",
          "required": false,
          "description": "",
          "default": null
        },
        {
          "name": "offset",
          "type": "Int",
          "graphql_type": "Int",
          "python_type": "float",
          "typescript_type": "number",
          "required": false,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "executions",
          "fields": [
            {
              "name": "id",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "status",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "diagram_id",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "started_at",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "ended_at",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "error",
              "fields": [],
              "type": null,
              "description": ""
            }
          ],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "filter",
              "value": "filter",
              "isVariable": true
            },
            {
              "name": "limit",
              "value": "limit",
              "isVariable": true
            },
            {
              "name": "offset",
              "value": "offset",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "GetSupportedFormats",
      "operation_name": "GetSupportedFormats",
      "type": "query",
      "entity": "Format",
      "variables": [],
      "fields": [
        {
          "name": "supported_formats",
          "fields": [],
          "type": null,
          "description": ""
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "GetPerson",
      "operation_name": "GetPerson",
      "type": "query",
      "entity": "Person",
      "variables": [
        {
          "name": "person_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": true,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "person",
          "fields": [
            {
              "name": "id",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "label",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "type",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "llm_config",
              "fields": [
                {
                  "name": "service",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "model",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "api_key_id",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "system_prompt",
                  "fields": [],
                  "type": null,
                  "description": ""
                }
              ],
              "type": null,
              "description": ""
            }
          ],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "person_id",
              "value": "person_id",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "ListPersons",
      "operation_name": "ListPersons",
      "type": "query",
      "entity": "Person",
      "variables": [
        {
          "name": "limit",
          "type": "Int",
          "graphql_type": "Int",
          "python_type": "float",
          "typescript_type": "number",
          "required": false,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "persons",
          "fields": [
            {
              "name": "id",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "label",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "type",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "llm_config",
              "fields": [
                {
                  "name": "service",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "model",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "api_key_id",
                  "fields": [],
                  "type": null,
                  "description": ""
                }
              ],
              "type": null,
              "description": ""
            }
          ],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "limit",
              "value": "limit",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "ListPromptFiles",
      "operation_name": "ListPromptFiles",
      "type": "query",
      "entity": "Prompt",
      "variables": [],
      "fields": [
        {
          "name": "prompt_files",
          "fields": [],
          "type": null,
          "description": ""
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "GetPromptFile",
      "operation_name": "GetPromptFile",
      "type": "query",
      "entity": "Prompt",
      "variables": [
        {
          "name": "filename",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": true,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "prompt_file",
          "fields": [],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "filename",
              "value": "filename",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "GetProviders",
      "operation_name": "GetProviders",
      "type": "query",
      "entity": "Provider",
      "variables": [],
      "fields": [
        {
          "name": "providers",
          "fields": [],
          "type": null,
          "description": ""
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "GetProviderOperations",
      "operation_name": "GetProviderOperations",
      "type": "query",
      "entity": "Provider",
      "variables": [
        {
          "name": "provider",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": true,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "provider_operations",
          "fields": [],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "provider",
              "value": "provider",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "GetOperationSchema",
      "operation_name": "GetOperationSchema",
      "type": "query",
      "entity": "Provider",
      "variables": [
        {
          "name": "provider",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": true,
          "description": "",
          "default": null
        },
        {
          "name": "operation",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": true,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "operation_schema",
          "fields": [],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "provider",
              "value": "provider",
              "isVariable": true
            },
            {
              "name": "operation",
              "value": "operation",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "GetSystemInfo",
      "operation_name": "GetSystemInfo",
      "type": "query",
      "entity": "System",
      "variables": [],
      "fields": [
        {
          "name": "system_info",
          "fields": [],
          "type": null,
          "description": ""
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "GetExecutionCapabilities",
      "operation_name": "GetExecutionCapabilities",
      "type": "query",
      "entity": "System",
      "variables": [],
      "fields": [
        {
          "name": "execution_capabilities",
          "fields": [],
          "type": null,
          "description": ""
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "HealthCheck",
      "operation_name": "HealthCheck",
      "type": "query",
      "entity": "System",
      "variables": [],
      "fields": [
        {
          "name": "health_check",
          "fields": [],
          "type": null,
          "description": ""
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "GetExecutionOrder",
      "operation_name": "GetExecutionOrder",
      "type": "query",
      "entity": "System",
      "variables": [
        {
          "name": "execution_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": true,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "execution_order",
          "fields": [],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "execution_id",
              "value": "execution_id",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "GetExecutionMetrics",
      "operation_name": "GetExecutionMetrics",
      "type": "query",
      "entity": "System",
      "variables": [
        {
          "name": "execution_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": true,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "execution_metrics",
          "fields": [],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "execution_id",
              "value": "execution_id",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "GetExecutionHistory",
      "operation_name": "GetExecutionHistory",
      "type": "query",
      "entity": "System",
      "variables": [
        {
          "name": "diagram_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": false,
          "description": "",
          "default": null
        },
        {
          "name": "limit",
          "type": "Int",
          "graphql_type": "Int",
          "python_type": "float",
          "typescript_type": "number",
          "required": false,
          "description": "",
          "default": null
        },
        {
          "name": "include_metrics",
          "type": "Boolean",
          "graphql_type": "Boolean",
          "python_type": "bool",
          "typescript_type": "boolean",
          "required": false,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "execution_history",
          "fields": [],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "diagram_id",
              "value": "diagram_id",
              "isVariable": true
            },
            {
              "name": "limit",
              "value": "limit",
              "isVariable": true
            },
            {
              "name": "include_metrics",
              "value": "include_metrics",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "GetActiveCliSession",
      "operation_name": "GetActiveCliSession",
      "type": "query",
      "entity": "System",
      "variables": [],
      "fields": [
        {
          "name": "active_cli_session",
          "fields": [],
          "type": null,
          "description": ""
        }
      ],
      "description": "",
      "return_type": null
    }
  ],
  "mutations": [
    {
      "name": "CreateApiKey",
      "operation_name": "CreateApiKey",
      "type": "mutation",
      "entity": "ApiKey",
      "variables": [
        {
          "name": "input",
          "type": "CreateApiKeyInput",
          "graphql_type": "CreateApiKeyInput",
          "python_type": "CreateApiKeyInput",
          "typescript_type": "CreateApiKeyInput",
          "required": true,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "create_api_key",
          "fields": [
            {
              "name": "success",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "api_key",
              "fields": [
                {
                  "name": "id",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "label",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "service",
                  "fields": [],
                  "type": null,
                  "description": ""
                }
              ],
              "type": null,
              "description": ""
            },
            {
              "name": "message",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "error",
              "fields": [],
              "type": null,
              "description": ""
            }
          ],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "input",
              "value": "input",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "TestApiKey",
      "operation_name": "TestApiKey",
      "type": "mutation",
      "entity": "ApiKey",
      "variables": [
        {
          "name": "api_key_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": true,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "test_api_key",
          "fields": [
            {
              "name": "success",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "message",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "error",
              "fields": [],
              "type": null,
              "description": ""
            }
          ],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "api_key_id",
              "value": "api_key_id",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "DeleteApiKey",
      "operation_name": "DeleteApiKey",
      "type": "mutation",
      "entity": "ApiKey",
      "variables": [
        {
          "name": "api_key_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": true,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "delete_api_key",
          "fields": [
            {
              "name": "success",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "message",
              "fields": [],
              "type": null,
              "description": ""
            }
          ],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "api_key_id",
              "value": "api_key_id",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "RegisterCliSession",
      "operation_name": "RegisterCliSession",
      "type": "mutation",
      "entity": "CliSession",
      "variables": [
        {
          "name": "input",
          "type": "RegisterCliSessionInput",
          "graphql_type": "RegisterCliSessionInput",
          "python_type": "RegisterCliSessionInput",
          "typescript_type": "RegisterCliSessionInput",
          "required": true,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "register_cli_session",
          "fields": [
            {
              "name": "success",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "message",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "error",
              "fields": [],
              "type": null,
              "description": ""
            }
          ],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "input",
              "value": "input",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "UnregisterCliSession",
      "operation_name": "UnregisterCliSession",
      "type": "mutation",
      "entity": "CliSession",
      "variables": [
        {
          "name": "input",
          "type": "UnregisterCliSessionInput",
          "graphql_type": "UnregisterCliSessionInput",
          "python_type": "UnregisterCliSessionInput",
          "typescript_type": "UnregisterCliSessionInput",
          "required": true,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "unregister_cli_session",
          "fields": [
            {
              "name": "success",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "message",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "error",
              "fields": [],
              "type": null,
              "description": ""
            }
          ],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "input",
              "value": "input",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "CreateDiagram",
      "operation_name": "CreateDiagram",
      "type": "mutation",
      "entity": "Diagram",
      "variables": [
        {
          "name": "input",
          "type": "CreateDiagramInput",
          "graphql_type": "CreateDiagramInput",
          "python_type": "CreateDiagramInput",
          "typescript_type": "CreateDiagramInput",
          "required": true,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "create_diagram",
          "fields": [
            {
              "name": "success",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "diagram",
              "fields": [
                {
                  "name": "metadata",
                  "fields": [
                    {
                      "name": "id",
                      "fields": [],
                      "type": null,
                      "description": ""
                    },
                    {
                      "name": "name",
                      "fields": [],
                      "type": null,
                      "description": ""
                    }
                  ],
                  "type": null,
                  "description": ""
                }
              ],
              "type": null,
              "description": ""
            },
            {
              "name": "message",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "error",
              "fields": [],
              "type": null,
              "description": ""
            }
          ],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "input",
              "value": "input",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "ExecuteDiagram",
      "operation_name": "ExecuteDiagram",
      "type": "mutation",
      "entity": "Diagram",
      "variables": [
        {
          "name": "input",
          "type": "ExecuteDiagramInput",
          "graphql_type": "ExecuteDiagramInput",
          "python_type": "ExecuteDiagramInput",
          "typescript_type": "ExecuteDiagramInput",
          "required": true,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "execute_diagram",
          "fields": [
            {
              "name": "success",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "execution",
              "fields": [
                {
                  "name": "id",
                  "fields": [],
                  "type": null,
                  "description": ""
                }
              ],
              "type": null,
              "description": ""
            },
            {
              "name": "message",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "error",
              "fields": [],
              "type": null,
              "description": ""
            }
          ],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "input",
              "value": "input",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "DeleteDiagram",
      "operation_name": "DeleteDiagram",
      "type": "mutation",
      "entity": "Diagram",
      "variables": [
        {
          "name": "diagram_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": true,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "delete_diagram",
          "fields": [
            {
              "name": "success",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "message",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "error",
              "fields": [],
              "type": null,
              "description": ""
            }
          ],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "diagram_id",
              "value": "diagram_id",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "ControlExecution",
      "operation_name": "ControlExecution",
      "type": "mutation",
      "entity": "Execution",
      "variables": [
        {
          "name": "input",
          "type": "ExecutionControlInput",
          "graphql_type": "ExecutionControlInput",
          "python_type": "ExecutionControlInput",
          "typescript_type": "ExecutionControlInput",
          "required": true,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "control_execution",
          "fields": [
            {
              "name": "success",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "execution",
              "fields": [
                {
                  "name": "id",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "status",
                  "fields": [],
                  "type": null,
                  "description": ""
                }
              ],
              "type": null,
              "description": ""
            },
            {
              "name": "message",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "error",
              "fields": [],
              "type": null,
              "description": ""
            }
          ],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "input",
              "value": "input",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "SendInteractiveResponse",
      "operation_name": "SendInteractiveResponse",
      "type": "mutation",
      "entity": "Execution",
      "variables": [
        {
          "name": "input",
          "type": "InteractiveResponseInput",
          "graphql_type": "InteractiveResponseInput",
          "python_type": "InteractiveResponseInput",
          "typescript_type": "InteractiveResponseInput",
          "required": true,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "send_interactive_response",
          "fields": [
            {
              "name": "success",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "message",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "error",
              "fields": [],
              "type": null,
              "description": ""
            }
          ],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "input",
              "value": "input",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "UpdateNodeState",
      "operation_name": "UpdateNodeState",
      "type": "mutation",
      "entity": "Execution",
      "variables": [
        {
          "name": "input",
          "type": "UpdateNodeStateInput",
          "graphql_type": "UpdateNodeStateInput",
          "python_type": "UpdateNodeStateInput",
          "typescript_type": "UpdateNodeStateInput",
          "required": true,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "update_node_state",
          "fields": [
            {
              "name": "success",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "execution",
              "fields": [
                {
                  "name": "id",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "status",
                  "fields": [],
                  "type": null,
                  "description": ""
                }
              ],
              "type": null,
              "description": ""
            },
            {
              "name": "message",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "error",
              "fields": [],
              "type": null,
              "description": ""
            }
          ],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "input",
              "value": "input",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "UploadFile",
      "operation_name": "UploadFile",
      "type": "mutation",
      "entity": "File",
      "variables": [
        {
          "name": "file",
          "type": "Upload",
          "graphql_type": "Upload",
          "python_type": "Upload",
          "typescript_type": "Upload",
          "required": true,
          "description": "",
          "default": null
        },
        {
          "name": "path",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": false,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "upload_file",
          "fields": [],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "file",
              "value": "file",
              "isVariable": true
            },
            {
              "name": "path",
              "value": "path",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "UploadDiagram",
      "operation_name": "UploadDiagram",
      "type": "mutation",
      "entity": "File",
      "variables": [
        {
          "name": "file",
          "type": "Upload",
          "graphql_type": "Upload",
          "python_type": "Upload",
          "typescript_type": "Upload",
          "required": true,
          "description": "",
          "default": null
        },
        {
          "name": "format",
          "type": "DiagramFormatGraphQL",
          "graphql_type": "DiagramFormatGraphQL",
          "python_type": "DiagramFormatGraphQL",
          "typescript_type": "DiagramFormatGraphQL",
          "required": true,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "upload_diagram",
          "fields": [],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "file",
              "value": "file",
              "isVariable": true
            },
            {
              "name": "format",
              "value": "format",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "ValidateDiagram",
      "operation_name": "ValidateDiagram",
      "type": "mutation",
      "entity": "File",
      "variables": [
        {
          "name": "content",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": true,
          "description": "",
          "default": null
        },
        {
          "name": "format",
          "type": "DiagramFormatGraphQL",
          "graphql_type": "DiagramFormatGraphQL",
          "python_type": "DiagramFormatGraphQL",
          "typescript_type": "DiagramFormatGraphQL",
          "required": true,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "validate_diagram",
          "fields": [],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "content",
              "value": "content",
              "isVariable": true
            },
            {
              "name": "format",
              "value": "format",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "ConvertDiagramFormat",
      "operation_name": "ConvertDiagramFormat",
      "type": "mutation",
      "entity": "File",
      "variables": [
        {
          "name": "content",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": true,
          "description": "",
          "default": null
        },
        {
          "name": "from_format",
          "type": "DiagramFormatGraphQL",
          "graphql_type": "DiagramFormatGraphQL",
          "python_type": "DiagramFormatGraphQL",
          "typescript_type": "DiagramFormatGraphQL",
          "required": true,
          "description": "",
          "default": null
        },
        {
          "name": "to_format",
          "type": "DiagramFormatGraphQL",
          "graphql_type": "DiagramFormatGraphQL",
          "python_type": "DiagramFormatGraphQL",
          "typescript_type": "DiagramFormatGraphQL",
          "required": true,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "convert_diagram_format",
          "fields": [
            {
              "name": "success",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "data",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "format",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "message",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "error",
              "fields": [],
              "type": null,
              "description": ""
            }
          ],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "content",
              "value": "content",
              "isVariable": true
            },
            {
              "name": "from_format",
              "value": "from_format",
              "isVariable": true
            },
            {
              "name": "to_format",
              "value": "to_format",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "CreateNode",
      "operation_name": "CreateNode",
      "type": "mutation",
      "entity": "Node",
      "variables": [
        {
          "name": "diagram_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": true,
          "description": "",
          "default": null
        },
        {
          "name": "input",
          "type": "CreateNodeInput",
          "graphql_type": "CreateNodeInput",
          "python_type": "CreateNodeInput",
          "typescript_type": "CreateNodeInput",
          "required": true,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "create_node",
          "fields": [
            {
              "name": "success",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "node",
              "fields": [
                {
                  "name": "id",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "type",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "position",
                  "fields": [
                    {
                      "name": "x",
                      "fields": [],
                      "type": null,
                      "description": ""
                    },
                    {
                      "name": "y",
                      "fields": [],
                      "type": null,
                      "description": ""
                    }
                  ],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "data",
                  "fields": [],
                  "type": null,
                  "description": ""
                }
              ],
              "type": null,
              "description": ""
            },
            {
              "name": "message",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "error",
              "fields": [],
              "type": null,
              "description": ""
            }
          ],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "diagram_id",
              "value": "diagram_id",
              "isVariable": true
            },
            {
              "name": "input",
              "value": "input",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "UpdateNode",
      "operation_name": "UpdateNode",
      "type": "mutation",
      "entity": "Node",
      "variables": [
        {
          "name": "diagram_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": true,
          "description": "",
          "default": null
        },
        {
          "name": "node_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": true,
          "description": "",
          "default": null
        },
        {
          "name": "input",
          "type": "UpdateNodeInput",
          "graphql_type": "UpdateNodeInput",
          "python_type": "UpdateNodeInput",
          "typescript_type": "UpdateNodeInput",
          "required": true,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "update_node",
          "fields": [
            {
              "name": "success",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "message",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "error",
              "fields": [],
              "type": null,
              "description": ""
            }
          ],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "diagram_id",
              "value": "diagram_id",
              "isVariable": true
            },
            {
              "name": "node_id",
              "value": "node_id",
              "isVariable": true
            },
            {
              "name": "input",
              "value": "input",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "DeleteNode",
      "operation_name": "DeleteNode",
      "type": "mutation",
      "entity": "Node",
      "variables": [
        {
          "name": "diagram_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": true,
          "description": "",
          "default": null
        },
        {
          "name": "node_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": true,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "delete_node",
          "fields": [
            {
              "name": "success",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "message",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "error",
              "fields": [],
              "type": null,
              "description": ""
            }
          ],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "diagram_id",
              "value": "diagram_id",
              "isVariable": true
            },
            {
              "name": "node_id",
              "value": "node_id",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "CreatePerson",
      "operation_name": "CreatePerson",
      "type": "mutation",
      "entity": "Person",
      "variables": [
        {
          "name": "input",
          "type": "CreatePersonInput",
          "graphql_type": "CreatePersonInput",
          "python_type": "CreatePersonInput",
          "typescript_type": "CreatePersonInput",
          "required": true,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "create_person",
          "fields": [
            {
              "name": "success",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "person",
              "fields": [
                {
                  "name": "id",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "label",
                  "fields": [],
                  "type": null,
                  "description": ""
                }
              ],
              "type": null,
              "description": ""
            },
            {
              "name": "message",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "error",
              "fields": [],
              "type": null,
              "description": ""
            }
          ],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "input",
              "value": "input",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "UpdatePerson",
      "operation_name": "UpdatePerson",
      "type": "mutation",
      "entity": "Person",
      "variables": [
        {
          "name": "person_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": true,
          "description": "",
          "default": null
        },
        {
          "name": "input",
          "type": "UpdatePersonInput",
          "graphql_type": "UpdatePersonInput",
          "python_type": "UpdatePersonInput",
          "typescript_type": "UpdatePersonInput",
          "required": true,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "update_person",
          "fields": [
            {
              "name": "success",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "person",
              "fields": [
                {
                  "name": "id",
                  "fields": [],
                  "type": null,
                  "description": ""
                },
                {
                  "name": "label",
                  "fields": [],
                  "type": null,
                  "description": ""
                }
              ],
              "type": null,
              "description": ""
            },
            {
              "name": "message",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "error",
              "fields": [],
              "type": null,
              "description": ""
            }
          ],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "person_id",
              "value": "person_id",
              "isVariable": true
            },
            {
              "name": "input",
              "value": "input",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    },
    {
      "name": "DeletePerson",
      "operation_name": "DeletePerson",
      "type": "mutation",
      "entity": "Person",
      "variables": [
        {
          "name": "person_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": true,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "delete_person",
          "fields": [
            {
              "name": "success",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "message",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "error",
              "fields": [],
              "type": null,
              "description": ""
            }
          ],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "person_id",
              "value": "person_id",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    }
  ],
  "subscriptions": [
    {
      "name": "ExecutionUpdates",
      "operation_name": "ExecutionUpdates",
      "type": "subscription",
      "entity": "Execution",
      "variables": [
        {
          "name": "execution_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "str",
          "typescript_type": "string",
          "required": true,
          "description": "",
          "default": null
        }
      ],
      "fields": [
        {
          "name": "execution_updates",
          "fields": [
            {
              "name": "execution_id",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "type",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "data",
              "fields": [],
              "type": null,
              "description": ""
            },
            {
              "name": "timestamp",
              "fields": [],
              "type": null,
              "description": ""
            }
          ],
          "type": null,
          "description": "",
          "args": [
            {
              "name": "execution_id",
              "value": "execution_id",
              "isVariable": true
            }
          ]
        }
      ],
      "description": "",
      "return_type": null
    }
  ],
  "grouped_queries": {
    "ApiKey": [
      {
        "name": "GetApiKeys",
        "operation_name": "GetApiKeys",
        "type": "query",
        "entity": "ApiKey",
        "variables": [
          {
            "name": "service",
            "type": "String",
            "graphql_type": "String",
            "python_type": "str",
            "typescript_type": "string",
            "required": false,
            "description": "",
            "default": null
          }
        ],
        "fields": [
          {
            "name": "api_keys",
            "fields": [],
            "type": null,
            "description": "",
            "args": [
              {
                "name": "service",
                "value": "service",
                "isVariable": true
              }
            ]
          }
        ],
        "description": "",
        "return_type": null
      },
      {
        "name": "GetApiKey",
        "operation_name": "GetApiKey",
        "type": "query",
        "entity": "ApiKey",
        "variables": [
          {
            "name": "api_key_id",
            "type": "String",
            "graphql_type": "String",
            "python_type": "str",
            "typescript_type": "string",
            "required": true,
            "description": "",
            "default": null
          }
        ],
        "fields": [
          {
            "name": "api_key",
            "fields": [
              {
                "name": "id",
                "fields": [],
                "type": null,
                "description": ""
              },
              {
                "name": "label",
                "fields": [],
                "type": null,
                "description": ""
              },
              {
                "name": "service",
                "fields": [],
                "type": null,
                "description": ""
              }
            ],
            "type": null,
            "description": "",
            "args": [
              {
                "name": "api_key_id",
                "value": "api_key_id",
                "isVariable": true
              }
            ]
          }
        ],
        "description": "",
        "return_type": null
      },
      {
        "name": "GetAvailableModels",
        "operation_name": "GetAvailableModels",
        "type": "query",
        "entity": "ApiKey",
        "variables": [
          {
            "name": "service",
            "type": "String",
            "graphql_type": "String",
            "python_type": "str",
            "typescript_type": "string",
            "required": true,
            "description": "",
            "default": null
          },
          {
            "name": "api_key_id",
            "type": "String",
            "graphql_type": "String",
            "python_type": "str",
            "typescript_type": "string",
            "required": true,
            "description": "",
            "default": null
          }
        ],
        "fields": [
          {
            "name": "available_models",
            "fields": [],
            "type": null,
            "description": "",
            "args": [
              {
                "name": "service",
                "value": "service",
                "isVariable": true
              },
              {
                "name": "api_key_id",
                "value": "api_key_id",
                "isVariable": true
              }
            ]
          }
        ],
        "description": "",
        "return_type": null
      },
      {
        "name": "CreateApiKey",
        "operation_name": "CreateApiKey",
        "type": "mutation",
        "entity": "ApiKey",
        "variables": [
          {
            "name": "input",
            "type": "CreateApiKeyInput",
            "graphql_type": "CreateApiKeyInput",
            "python_type": "CreateApiKeyInput",
            "typescript_type": "CreateApiKeyInput",
            "required": true,
            "description": "",
            "default": null
          }
        ],
        "fields": [
          {
            "name": "create_api_key",
            "fields": [
              {
                "name": "success",
                "fields": [],
                "type": null,
                "description": ""
              },
              {
                "name": "api_key",
                "fields": [
                  {
                    "name": "id",
                    "fields": [],
                    "type": null,
                    "description": ""
                  },
                  {
                    "name": "label",
                    "fields": [],
                    "type": null,
                    "description": ""
                  },
                  {
                    "name": "service",
                    "fields": [],
                    "type": null,
                    "description": ""
                  }
                ],
                "type": null,
                "description": ""
              },
              {
                "name": "message",
                "fields": [],
                "type": null,
                "description": ""
              },
              {
                "name": "error",
                "fields": [],
                "type": null,
                "description": ""
              }
            ],
            "type": null,
            "description": "",
            "args": [
              {
                "name": "input",
                "value": "input",
                "isVariable": true
              }
            ]
          }
        ],
        "description": "",
        "return_type": null
      },
      {
        "name": "TestApiKey",
        "operation_name": "TestApiKey",
        "type": "mutation",
        "entity": "ApiKey",
        "variables": [
          {
            "name": "api_key_id",
            "type": "String",
            "graphql_type": "String",
            "python_type": "str",
            "typescript_type": "string",
            "required": true,
            "description": "",
            "default": null
          }
        ],
        "fields": [
          {
            "name": "test_api_key",
            "fields": [
              {
                "name": "success",
                "fields": [],
                "type": null,
                "description": ""
              },
              {
                "name": "message",
                "fields": [],
                "type": null,
                "description": ""
              },
              {
                "name": "error",
                "fields": [],
                "type": null,
                "description": ""
              }
            ],
            "type": null,
            "description": "",
            "args": [
              {
                "name": "api_key_id",
                "value": "api_key_id",
                "isVariable": true
              }
            ]
          }
        ],
        "description": "",
        "return_type": null
      },
      {
        "name": "DeleteApiKey",
        "operation_name": "DeleteApiKey",
        "type": "mutation",
        "entity": "ApiKey",
        "variables": [
          {
            "name": "api_key_id",
            "type": "String",
            "graphql_type": "String",
            "python_type": "str",
            "typescript_type": "string",
            "required": true,
            "description": "",
            "default": null
          }
        ],
        "fields": [
          {
            "name": "delete_api_key",
            "fields": [
              {
                "name": "success",
                "fields": [],
                "type": null,
                "description": ""
              },
              {
                "name": "message",
                "fields": [],
                "type": null,
                "description": ""
              }
            ],
            "type": null,
            "description": "",
            "args": [
              {
                "name": "api_key_id",
                "value": "api_key_id",
                "isVariable": true
              }
            ]
          }
        ],
        "description": "",
        "return_type": null
      }
    ],
    "CliSession": [
      {
        "name": "RegisterCliSession",
        "operation_name": "RegisterCliSession",
        "type": "mutation",
        "entity": "CliSession",
        "variables": [
          {
            "name": "input",
            "type": "RegisterCliSessionInput",
            "graphql_type": "RegisterCliSessionInput",
            "python_type": "RegisterCliSessionInput",
            "typescript_type": "RegisterCliSessionInput",
            "required": true,
            "description": "",
            "default": null
          }
        ],
        "fields": [
          {
            "name": "register_cli_session",
            "fields": [
              {
                "name": "success",
                "fields": [],
                "type": null,
                "description": ""
              },
              {
                "name": "message",
                "fields": [],
                "type": null,
                "description": ""
              },
              {
                "name": "error",
                "fields": [],
                "type": null,
                "description": ""
              }
            ],
            "type": null,
            "description": "",
            "args": [
              {
                "name": "input",
                "value": "input",
                "isVariable": true
              }
            ]
          }
        ],
        "description": "",
        "return_type": null
      },
      {
        "name": "UnregisterCliSession",
        "operation_name": "UnregisterCliSession",
        "type": "mutation",
        "entity": "CliSession",
        "variables": [
          {
            "name": "input",
            "type": "UnregisterCliSessionInput",
            "graphql_type": "UnregisterCliSessionInput",
            "python_type": "UnregisterCliSessionInput",
            "typescript_type": "UnregisterCliSessionInput",
            "required": true,
            "description": "",
            "default": null
          }
        ],
        "fields": [
          {
            "name": "unregister_cli_session",
            "fields": [
              {
                "name": "success",
                "fields": [],
                "type": null,
                "description": ""
              },
              {
                "name": "message",
                "fields": [],
                "type": null,
                "description": ""
              },
              {
                "name": "error",
                "fields": [],
                "type": null,
                "description": ""
              }
            ],
            "type": null,
            "description": "",
            "args": [
              {
                "name": "input",
                "value": "input",
                "isVariable": true
              }
            ]
          }
        ],
        "description": "",
        "return_type": null
      }
    ],
    "Conversation": [
      {
        "name": "ListConversations",
        "operation_name": "ListConversations",
        "type": "query",
        "entity": "Conversation",
        "variables": [
          {
            "name": "person_id",
            "type": "String",
            "graphql_type": "String",
            "python_type": "str",
            "typescript_type": "string",
            "required": false,
            "description": "",
            "default": null
          },
          {
            "name": "execution_id",
            "type": "String",
            "graphql_type": "String",
            "python_type": "str",
            "typescript_type": "string",
            "required": false,
            "description": "",
            "default": null
          },
          {
            "name": "search",
            "type": "String",
            "graphql_type": "String",
            "python_type": "str",
            "typescript_type": "string",
            "required": false,
            "description": "",
            "default": null
          },
          {
            "name": "show_forgotten",
            "type": "Boolean",
            "graphql_type": "Boolean",
            "python_type": "bool",
            "typescript_type": "boolean",
            "required": false,
            "description": "",
            "default": null
          },
          {
            "name": "limit",
            "type": "Int",
            "graphql_type": "Int",
            "python_type": "float",
            "typescript_type": "number",
            "required": false,
            "description": "",
            "default": null
          },
          {
            "name": "offset",
            "type": "Int",
            "graphql_type": "Int",
            "python_type": "float",
            "typescript_type": "number",
            "required": false,
            "description": "",
            "default": null
          },
          {
            "name": "since",
            "type": "String",
            "graphql_type": "String",
            "python_type": "str",
            "typescript_type": "string",
            "required": false,
            "description": "",
            "default": null
          }
        ],
        "fields": [
          {
            "name": "conversations",
            "fields": [],
            "type": null,
            "description": "",
            "args": [
              {
                "name": "person_id",
                "value": "person_id",
                "isVariable": true
              },
              {
                "name": "execution_id",
                "value": "execution_id",
                "isVariable": true
              },
              {
                "name": "search",
                "value": "search",
                "isVariable": true
              },
              {
                "name": "show_forgotten",
                "value": "show_forgotten",
                "isVariable": true
              },
              {
                "name": "limit",
                "value": "limit",
                "isVariable": true
              },
              {
                "name": "offset",
                "value": "offset",
                "isVariable": true
              },
              {
                "name": "since",
                "value": "since",
                "isVariable": true
              }
            ]
          }
        ],
        "description": "",
        "return_type": null
      }
    ],
    "Diagram": [
      {
        "name": "GetDiagram",
        "operation_name": "GetDiagram",
        "type": "query",
        "entity": "Diagram",
        "variables": [
          {
            "name": "diagram_id",
            "type": "String",
            "graphql_type": "String",
            "python_type": "str",
            "typescript_type": "string",
            "required": true,
            "description": "",
            "default": null
          }
        ],
        "fields": [
          {
            "name": "diagram",
            "fields": [
              {
                "name": "nodes",
                "fields": [
                  {
                    "name": "id",
                    "fields": [],
                    "type": null,
                    "description": ""
                  },
                  {
                    "name": "type",
                    "fields": [],
                    "type": null,
                    "description": ""
                  },
                  {
                    "name": "position",
                    "fields": [
                      {
                        "name": "x",
                        "fields": [],
                        "type": null,
                        "description": ""
                      },
                      {
                        "name": "y",
                        "fields": [],
                        "type": null,
                        "description": ""
                      }
                    ],
                    "type": null,
                    "description": ""
                  },
                  {
                    "name": "data",
                    "fields": [],
                    "type": null,
                    "description": ""
                  }
                ],
                "type": null,
                "description": ""
              },
              {
                "name": "handles",
                "fields": [
                  {
                    "name": "id",
                    "fields": [],
                    "type": null,
                    "description": ""
                  },
                  {
                    "name": "node_id",
                    "fields": [],
                    "type": null,
                    "description": ""
                  },
                  {
                    "name": "label",
                    "fields": [],
                    "type": null,
                    "description": ""
                  },
                  {
                    "name": "direction",
                    "fields": [],
                    "type": null,
                    "description": ""
                  },
                  {
                    "name": "data_type",
                    "fields": [],
                    "type": null,
                    "description": ""
                  },
                  {
                    "name": "position",
                    "fields": [],
                    "type": null,
                    "description": ""
                  }
                ],
                "type": null,
                "description": ""
              },
              {
                "name": "arrows",
                "fields": [
                  {
                    "name": "id",
                    "fields": [],
                    "type": null,
                    "description": ""
                  },
                  {
                    "name": "source",
                    "fields": [],
                    "type": null,
                    "description": ""
                  },
                  {
                    "name": "target",
                    "fields": [],
                    "type": null,
                    "description": ""
                  },
                  {
                    "name": "content_type",
                    "fields": [],
                    "type": null,
                    "description": ""
                  },
                  {
                    "name": "label",
                    "fields": [],
                    "type": null,
                    "description": ""
                  },
                  {
                    "name": "data",
                    "fields": [],
                    "type": null,
                    "description": ""
                  }
                ],
                "type": null,
                "description": ""
              },
              {
                "name": "persons",
                "fields": [
                  {
                    "name": "id",
                    "fields": [],
                    "type": null,
                    "description": ""
                  },
                  {
                    "name": "label",
                    "fields": [],
                    "type": null,
                    "description": ""
                  },
                  {
                    "name": "llm_config",
                    "fields": [
                      {
                        "name": "service",
                        "fields": [],
                        "type": null,
                        "description": ""
                      },
                      {
                        "name": "model",
                        "fields": [],
                        "type": null,
                        "description": ""
                      },
                      {
                        "name": "api_key_id",
                        "fields": [],
                        "type": null,
                        "description": ""
                      },
                      {
                        "name": "system_prompt",
                        "fields": [],
                        "type": null,
                        "description": ""
                      }
                    ],
                    "type": null,
                    "description": ""
                  },
                  {
                    "name": "type",
                    "fields": [],
                    "type": null,
                    "description": ""
                  }
                ],
                "type": null,
                "description": ""
              },
              {
                "name": "metadata",
                "fields": [
                  {
                    "name": "id",
                    "fields": [],
                    "type": null,
                    "description": ""
                  },
                  {
                    "name": "name",
                    "fields": [],
                    "type": null,
                    "description": ""
                  },
                  {
                    "name": "description",
                    "fields": [],
                    "type": null,
                    "description": ""
                  },
                  {
                    "name": "version",
                    "fields": [],
                    "type": null,
                    "description": ""
                  },
                  {
                    "name": "created",
                    "fields": [],
                    "type": null,
                    "description": ""
                  },
                  {
                    "name": "modified",
                    "fields": [],
                    "type": null,
                    "description": ""
                  },
                  {
                    "name": "author",
                    "fields": [],
                    "type": null,
                    "description": ""
                  },
                  {
                    "name": "tags",
                    "fields": [],
                    "type": null,
                    "description": ""
                  }
                ],
                "type": null,
                "description": ""
              }
            ],
            "type": null,
            "description": "",
            "args": [
              {
                "name": "diagram_id",
                "value": "diagram_id",
                "isVariable": true
              }
            ]
          }
        ],
        "description": "",
        "return_type": null
      },
      {
        "name": "ListDiagrams",
        "operation_name": "ListDiagrams",
        "type": "query",
        "entity": "Diagram",
        "variables": [
          {
            "name": "filter",
            "type": "DiagramFilterInput",
            "graphql_type": "DiagramFilterInput",
            "python_type": "DiagramFilterInput",
            "typescript_type": "DiagramFilterInput",
            "required": false,
            "description": "",
            "default": null
          },
          {
            "name": "limit",
            "type": "Int",
            "graphql_type": "Int",
            "python_type": "float",
            "typescript_type": "number",
            "required": false,
            "description": "",
            "default": null
          },
          {
            "name": "offset",
            "type": "Int",
            "graphql_type": "Int",
            "python_type": "float",
            "typescript_type": "number",
            "required": false,
            "description": "",
            "default": null
          }
        ],
        "fields": [
          {
            "name": "diagrams",
            "fields": [
              {
                "name": "metadata",
                "fields": [
                  {
                    "name": "id",
                    "fields": [],
                    "type": null,
                    "description": ""
                  },
                  {
                    "name": "name",
                    "fields": [],
                    "type": null,
                    "description": ""
                  },
                  {
                    "name": "description",
                    "fields": [],
                    "type": null,
                    "description": ""
                  },
                  {
                    "name": "author",
                    "fields": [],
                    "type": null,
                    "description": ""
                  },
                  {
                    "name": "created",
                    "fields": [],
                    "type": null,
                    "description": ""
                  },
                  {
                    "name": "modified",
                    "fields": [],
                    "type": null,
                    "description": ""
                  },
                  {
                    "name": "tags",
                    "fields": [],
                    "type": null,
                    "description": ""
                  }
                ],
                "type": null,
                "description": ""
              }
            ],
            "type": null,
            "description": "",
            "args": [
              {
                "name": "filter",
                "value": "filter",
                "isVariable": true
              },
              {
                "name": "limit",
                "value": "limit",
                "isVariable": true
              },
              {
                "name": "offset",
                "value": "offset",
                "isVariable": true
              }
            ]
          }
        ],
        "description": "",
        "return_type": null
      },
      {
        "name": "CreateDiagram",
        "operation_name": "CreateDiagram",
        "type": "mutation",
        "entity": "Diagram",
        "variables": [
          {
            "name": "input",
            "type": "CreateDiagramInput",
            "graphql_type": "CreateDiagramInput",
            "python_type": "CreateDiagramInput",
            "typescript_type": "CreateDiagramInput",
            "required": true,
            "description": "",
            "default": null
          }
        ],
        "fields": [
          {
            "name": "create_diagram",
            "fields": [
              {
                "name": "success",
                "fields": [],
                "type": null,
                "description": ""
              },
              {
                "name": "diagram",
                "fields": [
                  {
                    "name": "metadata",
                    "fields": [
                      {
                        "name": "id",
                        "fields": [],
                        "type": null,
                        "description": ""
                      },
                      {
                        "name": "name",
                        "fields": [],
                        "type": null,
                        "description": ""
                      }
                    ],
                    "type": null,
                    "description": ""
                  }
                ],
                "type": null,
                "description": ""
              },
              {
                "name": "message",
                "fields": [],
                "type": null,
                "description": ""
              },
              {
                "name": "error",
                "fields": [],
                "type": null,
                "description": ""
              }
            ],
            "type": null,
            "description": "",
            "args": [
              {
                "name": "input",
                "value": "input",
                "isVariable": true
              }
            ]
          }
        ],
        "description": "",
        "return_type": null
      },
      {
        "name": "ExecuteDiagram",
        "operation_name": "ExecuteDiagram",
        "type": "mutation",
        "entity": "Diagram",
        "variables": [
          {
            "name": "input",
            "type": "ExecuteDiagramInput",
            "graphql_type": "ExecuteDiagramInput",
            "python_type": "ExecuteDiagramInput",
            "typescript_type": "ExecuteDiagramInput",
            "required": true,
            "description": "",
            "default": null
          }
        ],
        "fields": [
          {
            "name": "execute_diagram",
            "fields": [
              {
                "name": "success",
                "fields": [],
                "type": null,
                "description": ""
              },
              {
                "name": "execution",
                "fields": [
                  {
                    "name": "id",
                    "fields": [],
                    "type": null,
                    "description": ""
                  }
                ],
                "type": null,
                "description": ""
              },
              {
                "name": "message",
                "fields": [],
                "type": null,
                "description": ""
              },
              {
                "name": "error",
                "fields": [],
                "type": null,
                "description": ""
              }
            ],
            "type": null,
            "description": "",
            "args": [
              {
                "name": "input",
                "value": "input",
                "isVariable": true
              }
            ]
          }
        ],
        "description": "",
        "return_type": null
      },
      {
        "name": "DeleteDiagram",
        "operation_name": "DeleteDiagram",
        "type": "mutation",
        "entity": "Diagram",
        "variables": [
          {
            "name": "diagram_id",
            "type": "String",
            "graphql_type": "String",
            "python_type": "str",
            "typescript_type": "string",
            "required": true,
            "description": "",
            "default": null
          }
        ],
        "fields": [
          {
            "name": "delete_diagram",
            "fields": [
              {
                "name": "success",
                "fields": [],
                "type": null,
                "description": ""
              },
              {
                "name": "message",
                "fields": [],
                "type": null,
                "description": ""
              },
              {
                "name": "error",
                "fields": [],
                "type": null,
                "description": ""
              }
            ],
            "type": null,
            "description": "",
            "args": [
              {
                "name": "diagram_id",
                "value": "diagram_id",
                "isVariable": true
              }
            ]
          }
        ],
        "description": "",
        "return_type": null
      }
    ],
    "Execution": [
      {
        "name": "GetExecution",
        "operation_name": "GetExecution",
        "type": "query",
        "entity": "Execution",
        "variables": [
          {
            "name": "execution_id",
            "type": "String",
            "graphql_type": "String",
            "python_type": "str",
            "typescript_type": "string",
            "required": true,
            "description": "",
            "default": null
          }
        ],
        "fields": [
          {
            "name": "execution",
            "fields": [
              {
                "name": "id",
                "fields": [],
                "type": null,
                "description": ""
              },
              {
                "name": "status",
                "fields": [],
                "type": null,
                "description": ""
              },
              {
                "name": "diagram_id",
                "fields": [],
                "type": null,
                "description": ""
              },
              {
                "name": "started_at",
                "fields": [],
                "type": null,
                "description": ""
              },
              {
                "name": "ended_at",
                "fields": [],
                "type": null,
                "description": ""
              },
              {
                "name": "error",
                "fields": [],
                "type": null,
                "description": ""
              },
              {
                "name": "node_states",
                "fields": [],
                "type": null,
                "description": ""
              },
              {
                "name": "node_outputs",
                "fields": [],
                "type": null,
                "description": ""
              },
              {
                "name": "variables",
                "fields": [],
                "type": null,
                "description": ""
              },
              {
                "name": "metrics",
                "fields": [
                  {
                    "name": "execution_id",
                    "fields": [],
                    "type": null,
                    "description": ""
                  },
                  {
                    "name": "start_time",
                    "fields": [],
                    "type": null,
                    "description": ""
                  },
                  {
                    "name": "end_time",
                    "fields": [],
                    "type": null,
                    "description": ""
                  },
                  {
                    "name": "total_duration_ms",
                    "fields": [],
                    "type": null,
                    "description": ""
                  },
                  {
                    "name": "node_metrics",
                    "fields": [],
                    "type": null,
                    "description": ""
                  },
                  {
                    "name": "critical_path",
                    "fields": [],
                    "type": null,
                    "description": ""
                  },
                  {
                    "name": "parallelizable_groups",
                    "fields": [],
                    "type": null,
                    "description": ""
                  },
                  {
                    "name": "bottlenecks",
                    "fields": [
                      {
                        "name": "node_id",
                        "fields": [],
                        "type": null,
                        "description": ""
                      },
                      {
                        "name": "node_type",
                        "fields": [],
                        "type": null,
                        "description": ""
                      },
                      {
                        "name": "duration_ms",
                        "fields": [],
                        "type": null,
                        "description": ""
                      },
                      {
                        "name": "percentage",
                        "fields": [],
                        "type": null,
                        "description": ""
                      }
                    ],
                    "type": null,
                    "description": ""
                  }
                ],
                "type": null,
                "description": ""
              },
              {
                "name": "llm_usage",
                "fields": [
                  {
                    "name": "input",
                    "fields": [],
                    "type": null,
                    "description": ""
                  },
                  {
                    "name": "output",
                    "fields": [],
                    "type": null,
                    "description": ""
                  },
                  {
                    "name": "cached",
                    "fields": [],
                    "type": null,
                    "description": ""
                  },
                  {
                    "name": "total",
                    "fields": [],
                    "type": null,
                    "description": ""
                  }
                ],
                "type": null,
                "description": ""
              }
            ],
            "type": null,
            "description": "",
            "args": [
              {
                "name": "execution_id",
                "value": "execution_id",
                "isVariable": true
              }
            ]
          }
        ],
        "description": "",
        "return_type": null
      },
      {
        "name": "ListExecutions",
        "operation_name": "ListExecutions",
        "type": "query",
        "entity": "Execution",
        "variables": [
          {
            "name": "filter",
            "type": "ExecutionFilterInput",
            "graphql_type": "ExecutionFilterInput",
            "python_type": "ExecutionFilterInput",
            "typescript_type": "ExecutionFilterInput",
            "required": false,
            "description": "",
            "default": null
          },
          {
            "name": "limit",
            "type": "Int",
            "graphql_type": "Int",
            "python_type": "float",
            "typescript_type": "number",
            "required": false,
            "description": "",
            "default": null
          },
          {
            "name": "offset",
            "type": "Int",
            "graphql_type": "Int",
            "python_type": "float",
            "typescript_type": "number",
            "required": false,
            "description": "",
            "default": null
          }
        ],
        "fields": [
          {
            "name": "executions",
            "fields": [
              {
                "name": "id",
                "fields": [],
                "type": null,
                "description": ""
              },
              {
                "name": "status",
                "fields": [],
                "type": null,
                "description": ""
              },
              {
                "name": "diagram_id",
                "fields": [],
                "type": null,
                "description": ""
              },
              {
                "name": "started_at",
                "fields": [],
                "type": null,
                "description": ""
              },
              {
                "name": "ended_at",
                "fields": [],
                "type": null,
                "description": ""
              },
              {
                "name": "error",
                "fields": [],
                "type": null,
                "description": ""
              }
            ],
            "type": null,
            "description": "",
            "args": [
              {
                "name": "filter",
                "value": "filter",
                "isVariable": true
              },
              {
                "name": "limit",
                "value": "limit",
                "isVariable": true
              },
              {
                "name": "offset",
                "value": "offset",
                "isVariable": true
              }
            ]
          }
        ],
        "description": "",
        "return_type": null
      },
      {
        "name": "ExecutionUpdates",
        "operation_name": "ExecutionUpdates",
        "type": "subscription",
        "entity": "Execution",
        "variables": [
          {
            "name": "execution_id",
            "type": "String",
            "graphql_type": "String",
            "python_type": "str",
            "typescript_type": "string",
            "required": true,
            "description": "",
            "default": null
          }
        ],
        "fields": [
          {
            "name": "execution_updates",
            "fields": [
              {
                "name": "execution_id",
                "fields": [],
                "type": null,
                "description": ""
              },
              {
                "name": "type",
                "fields": [],
                "type": null,
                "description": ""
              },
              {
                "name": "data",
                "fields": [],
                "type": null,
                "description": ""
              },
              {
                "name": "timestamp",
                "fields": [],
                "type": null,
                "description": ""
              }
            ],
            "type": null,
            "description": "",
            "args": [
              {
                "name": "execution_id",
                "value": "execution_id",
                "isVariable": true
              }
            ]
          }
        ],
        "description": "",
        "return_type": null
      },
      {
        "name": "ControlExecution",
        "operation_name": "ControlExecution",
        "type": "mutation",
        "entity": "Execution",
        "variables": [
          {
            "name": "input",
            "type": "ExecutionControlInput",
            "graphql_type": "ExecutionControlInput",
            "python_type": "ExecutionControlInput",
            "typescript_type": "ExecutionControlInput",
            "required": true,
            "description": "",
            "default": null
          }
        ],
        "fields": [
          {
            "name": "control_execution",
            "fields": [
              {
                "name": "success",
                "fields": [],
                "type": null,
                "description": ""
              },
              {
                "name": "execution",
                "fields": [
                  {
                    "name": "id",
                    "fields": [],
                    "type": null,
                    "description": ""
                  },
                  {
                    "name": "status",
                    "fields": [],
                    "type": null,
                    "description": ""
                  }
                ],
                "type": null,
                "description": ""
              },
              {
                "name": "message",
                "fields": [],
                "type": null,
                "description": ""
              },
              {
                "name": "error",
                "fields": [],
                "type": null,
                "description": ""
              }
            ],
            "type": null,
            "description": "",
            "args": [
              {
                "name": "input",
                "value": "input",
                "isVariable": true
              }
            ]
          }
        ],
        "description": "",
        "return_type": null
      },
      {
        "name": "SendInteractiveResponse",
        "operation_name": "SendInteractiveResponse",
        "type": "mutation",
        "entity": "Execution",
        "variables": [
          {
            "name": "input",
            "type": "InteractiveResponseInput",
            "graphql_type": "InteractiveResponseInput",
            "python_type": "InteractiveResponseInput",
            "typescript_type": "InteractiveResponseInput",
            "required": true,
            "description": "",
            "default": null
          }
        ],
        "fields": [
          {
            "name": "send_interactive_response",
            "fields": [
              {
                "name": "success",
                "fields": [],
                "type": null,
                "description": ""
              },
              {
                "name": "message",
                "fields": [],
                "type": null,
                "description": ""
              },
              {
                "name": "error",
                "fields": [],
                "type": null,
                "description": ""
              }
            ],
            "type": null,
            "description": "",
            "args": [
              {
                "name": "input",
                "value": "input",
                "isVariable": true
              }
            ]
          }
        ],
        "description": "",
        "return_type": null
      },
      {
        "name": "UpdateNodeState",
        "operation_name": "UpdateNodeState",
        "type": "mutation",
        "entity": "Execution",
        "variables": [
          {
            "name": "input",
            "type": "UpdateNodeStateInput",
            "graphql_type": "UpdateNodeStateInput",
            "python_type": "UpdateNodeStateInput",
            "typescript_type": "UpdateNodeStateInput",
            "required": true,
            "description": "",
            "default": null
          }
        ],
        "fields": [
          {
            "name": "update_node_state",
            "fields": [
              {
                "name": "success",
                "fields": [],
                "type": null,
                "description": ""
              },
              {
                "name": "execution",
                "fields": [
                  {
                    "name": "id",
                    "fields": [],
                    "type": null,
                    "description": ""
                  },
                  {
                    "name": "status",
                    "fields": [],
                    "type": null,
                    "description": ""
                  }
                ],
                "type": null,
                "description": ""
              },
              {
                "name": "message",
                "fields": [],
                "type": null,
                "description": ""
              },
              {
                "name": "error",
                "fields": [],
                "type": null,
                "description": ""
              }
            ],
            "type": null,
            "description": "",
            "args": [
              {
                "name": "input",
                "value": "input",
                "isVariable": true
              }
            ]
          }
        ],
        "description": "",
        "return_type": null
      }
    ],
    "File": [
      {
        "name": "UploadFile",
        "operation_name": "UploadFile",
        "type": "mutation",
        "entity": "File",
        "variables": [
          {
            "name": "file",
            "type": "Upload",
            "graphql_type": "Upload",
            "python_type": "Upload",
            "typescript_type": "Upload",
            "required": true,
            "description": "",
            "default": null
          },
          {
            "name": "path",
            "type": "String",
            "graphql_type": "String",
            "python_type": "str",
            "typescript_type": "string",
            "required": false,
            "description": "",
            "default": null
          }
        ],
        "fields": [
          {
            "name": "upload_file",
            "fields": [],
            "type": null,
            "description": "",
            "args": [
              {
                "name": "file",
                "value": "file",
                "isVariable": true
              },
              {
                "name": "path",
                "value": "path",
                "isVariable": true
              }
            ]
          }
        ],
        "description": "",
        "return_type": null
      },
      {
        "name": "UploadDiagram",
        "operation_name": "UploadDiagram",
        "type": "mutation",
        "entity": "File",
        "variables": [
          {
            "name": "file",
            "type": "Upload",
            "graphql_type": "Upload",
            "python_type": "Upload",
            "typescript_type": "Upload",
            "required": true,
            "description": "",
            "default": null
          },
          {
            "name": "format",
            "type": "DiagramFormatGraphQL",
            "graphql_type": "DiagramFormatGraphQL",
            "python_type": "DiagramFormatGraphQL",
            "typescript_type": "DiagramFormatGraphQL",
            "required": true,
            "description": "",
            "default": null
          }
        ],
        "fields": [
          {
            "name": "upload_diagram",
            "fields": [],
            "type": null,
            "description": "",
            "args": [
              {
                "name": "file",
                "value": "file",
                "isVariable": true
              },
              {
                "name": "format",
                "value": "format",
                "isVariable": true
              }
            ]
          }
        ],
        "description": "",
        "return_type": null
      },
      {
        "name": "ValidateDiagram",
        "operation_name": "ValidateDiagram",
        "type": "mutation",
        "entity": "File",
        "variables": [
          {
            "name": "content",
            "type": "String",
            "graphql_type": "String",
            "python_type": "str",
            "typescript_type": "string",
            "required": true,
            "description": "",
            "default": null
          },
          {
            "name": "format",
            "type": "DiagramFormatGraphQL",
            "graphql_type": "DiagramFormatGraphQL",
            "python_type": "DiagramFormatGraphQL",
            "typescript_type": "DiagramFormatGraphQL",
            "required": true,
            "description": "",
            "default": null
          }
        ],
        "fields": [
          {
            "name": "validate_diagram",
            "fields": [],
            "type": null,
            "description": "",
            "args": [
              {
                "name": "content",
                "value": "content",
                "isVariable": true
              },
              {
                "name": "format",
                "value": "format",
                "isVariable": true
              }
            ]
          }
        ],
        "description": "",
        "return_type": null
      },
      {
        "name": "ConvertDiagramFormat",
        "operation_name": "ConvertDiagramFormat",
        "type": "mutation",
        "entity": "File",
        "variables": [
          {
            "name": "content",
            "type": "String",
            "graphql_type": "String",
            "python_type": "str",
            "typescript_type": "string",
            "required": true,
            "description": "",
            "default": null
          },
          {
            "name": "from_format",
            "type": "DiagramFormatGraphQL",
            "graphql_type": "DiagramFormatGraphQL",
            "python_type": "DiagramFormatGraphQL",
            "typescript_type": "DiagramFormatGraphQL",
            "required": true,
            "description": "",
            "default": null
          },
          {
            "name": "to_format",
            "type": "DiagramFormatGraphQL",
            "graphql_type": "DiagramFormatGraphQL",
            "python_type": "DiagramFormatGraphQL",
            "typescript_type": "DiagramFormatGraphQL",
            "required": true,
            "description": "",
            "default": null
          }
        ],
        "fields": [
          {
            "name": "convert_diagram_format",
            "fields": [
              {
                "name": "success",
                "fields": [],
                "type": null,
                "description": ""
              },
              {
                "name": "data",
                "fields": [],
                "type": null,
                "description": ""
              },
              {
                "name": "format",
                "fields": [],
                "type": null,
                "description": ""
              },
              {
                "name": "message",
                "fields": [],
                "type": null,
                "description": ""
              },
              {
                "name": "error",
                "fields": [],
                "type": null,
                "description": ""
              }
            ],
            "type": null,
            "description": "",
            "args": [
              {
                "name": "content",
                "value": "content",
                "isVariable": true
              },
              {
                "name": "from_format",
                "value": "from_format",
                "isVariable": true
              },
              {
                "name": "to_format",
                "value": "to_format",
                "isVariable": true
              }
            ]
          }
        ],
        "description": "",
        "return_type": null
      }
    ],
    "Format": [
      {
        "name": "GetSupportedFormats",
        "operation_name": "GetSupportedFormats",
        "type": "query",
        "entity": "Format",
        "variables": [],
        "fields": [
          {
            "name": "supported_formats",
            "fields": [],
            "type": null,
            "description": ""
          }
        ],
        "description": "",
        "return_type": null
      }
    ],
    "Node": [
      {
        "name": "CreateNode",
        "operation_name": "CreateNode",
        "type": "mutation",
        "entity": "Node",
        "variables": [
          {
            "name": "diagram_id",
            "type": "String",
            "graphql_type": "String",
            "python_type": "str",
            "typescript_type": "string",
            "required": true,
            "description": "",
            "default": null
          },
          {
            "name": "input",
            "type": "CreateNodeInput",
            "graphql_type": "CreateNodeInput",
            "python_type": "CreateNodeInput",
            "typescript_type": "CreateNodeInput",
            "required": true,
            "description": "",
            "default": null
          }
        ],
        "fields": [
          {
            "name": "create_node",
            "fields": [
              {
                "name": "success",
                "fields": [],
                "type": null,
                "description": ""
              },
              {
                "name": "node",
                "fields": [
                  {
                    "name": "id",
                    "fields": [],
                    "type": null,
                    "description": ""
                  },
                  {
                    "name": "type",
                    "fields": [],
                    "type": null,
                    "description": ""
                  },
                  {
                    "name": "position",
                    "fields": [
                      {
                        "name": "x",
                        "fields": [],
                        "type": null,
                        "description": ""
                      },
                      {
                        "name": "y",
                        "fields": [],
                        "type": null,
                        "description": ""
                      }
                    ],
                    "type": null,
                    "description": ""
                  },
                  {
                    "name": "data",
                    "fields": [],
                    "type": null,
                    "description": ""
                  }
                ],
                "type": null,
                "description": ""
              },
              {
                "name": "message",
                "fields": [],
                "type": null,
                "description": ""
              },
              {
                "name": "error",
                "fields": [],
                "type": null,
                "description": ""
              }
            ],
            "type": null,
            "description": "",
            "args": [
              {
                "name": "diagram_id",
                "value": "diagram_id",
                "isVariable": true
              },
              {
                "name": "input",
                "value": "input",
                "isVariable": true
              }
            ]
          }
        ],
        "description": "",
        "return_type": null
      },
      {
        "name": "UpdateNode",
        "operation_name": "UpdateNode",
        "type": "mutation",
        "entity": "Node",
        "variables": [
          {
            "name": "diagram_id",
            "type": "String",
            "graphql_type": "String",
            "python_type": "str",
            "typescript_type": "string",
            "required": true,
            "description": "",
            "default": null
          },
          {
            "name": "node_id",
            "type": "String",
            "graphql_type": "String",
            "python_type": "str",
            "typescript_type": "string",
            "required": true,
            "description": "",
            "default": null
          },
          {
            "name": "input",
            "type": "UpdateNodeInput",
            "graphql_type": "UpdateNodeInput",
            "python_type": "UpdateNodeInput",
            "typescript_type": "UpdateNodeInput",
            "required": true,
            "description": "",
            "default": null
          }
        ],
        "fields": [
          {
            "name": "update_node",
            "fields": [
              {
                "name": "success",
                "fields": [],
                "type": null,
                "description": ""
              },
              {
                "name": "message",
                "fields": [],
                "type": null,
                "description": ""
              },
              {
                "name": "error",
                "fields": [],
                "type": null,
                "description": ""
              }
            ],
            "type": null,
            "description": "",
            "args": [
              {
                "name": "diagram_id",
                "value": "diagram_id",
                "isVariable": true
              },
              {
                "name": "node_id",
                "value": "node_id",
                "isVariable": true
              },
              {
                "name": "input",
                "value": "input",
                "isVariable": true
              }
            ]
          }
        ],
        "description": "",
        "return_type": null
      },
      {
        "name": "DeleteNode",
        "operation_name": "DeleteNode",
        "type": "mutation",
        "entity": "Node",
        "variables": [
          {
            "name": "diagram_id",
            "type": "String",
            "graphql_type": "String",
            "python_type": "str",
            "typescript_type": "string",
            "required": true,
            "description": "",
            "default": null
          },
          {
            "name": "node_id",
            "type": "String",
            "graphql_type": "String",
            "python_type": "str",
            "typescript_type": "string",
            "required": true,
            "description": "",
            "default": null
          }
        ],
        "fields": [
          {
            "name": "delete_node",
            "fields": [
              {
                "name": "success",
                "fields": [],
                "type": null,
                "description": ""
              },
              {
                "name": "message",
                "fields": [],
                "type": null,
                "description": ""
              },
              {
                "name": "error",
                "fields": [],
                "type": null,
                "description": ""
              }
            ],
            "type": null,
            "description": "",
            "args": [
              {
                "name": "diagram_id",
                "value": "diagram_id",
                "isVariable": true
              },
              {
                "name": "node_id",
                "value": "node_id",
                "isVariable": true
              }
            ]
          }
        ],
        "description": "",
        "return_type": null
      }
    ],
    "Person": [
      {
        "name": "GetPerson",
        "operation_name": "GetPerson",
        "type": "query",
        "entity": "Person",
        "variables": [
          {
            "name": "person_id",
            "type": "String",
            "graphql_type": "String",
            "python_type": "str",
            "typescript_type": "string",
            "required": true,
            "description": "",
            "default": null
          }
        ],
        "fields": [
          {
            "name": "person",
            "fields": [
              {
                "name": "id",
                "fields": [],
                "type": null,
                "description": ""
              },
              {
                "name": "label",
                "fields": [],
                "type": null,
                "description": ""
              },
              {
                "name": "type",
                "fields": [],
                "type": null,
                "description": ""
              },
              {
                "name": "llm_config",
                "fields": [
                  {
                    "name": "service",
                    "fields": [],
                    "type": null,
                    "description": ""
                  },
                  {
                    "name": "model",
                    "fields": [],
                    "type": null,
                    "description": ""
                  },
                  {
                    "name": "api_key_id",
                    "fields": [],
                    "type": null,
                    "description": ""
                  },
                  {
                    "name": "system_prompt",
                    "fields": [],
                    "type": null,
                    "description": ""
                  }
                ],
                "type": null,
                "description": ""
              }
            ],
            "type": null,
            "description": "",
            "args": [
              {
                "name": "person_id",
                "value": "person_id",
                "isVariable": true
              }
            ]
          }
        ],
        "description": "",
        "return_type": null
      },
      {
        "name": "ListPersons",
        "operation_name": "ListPersons",
        "type": "query",
        "entity": "Person",
        "variables": [
          {
            "name": "limit",
            "type": "Int",
            "graphql_type": "Int",
            "python_type": "float",
            "typescript_type": "number",
            "required": false,
            "description": "",
            "default": null
          }
        ],
        "fields": [
          {
            "name": "persons",
            "fields": [
              {
                "name": "id",
                "fields": [],
                "type": null,
                "description": ""
              },
              {
                "name": "label",
                "fields": [],
                "type": null,
                "description": ""
              },
              {
                "name": "type",
                "fields": [],
                "type": null,
                "description": ""
              },
              {
                "name": "llm_config",
                "fields": [
                  {
                    "name": "service",
                    "fields": [],
                    "type": null,
                    "description": ""
                  },
                  {
                    "name": "model",
                    "fields": [],
                    "type": null,
                    "description": ""
                  },
                  {
                    "name": "api_key_id",
                    "fields": [],
                    "type": null,
                    "description": ""
                  }
                ],
                "type": null,
                "description": ""
              }
            ],
            "type": null,
            "description": "",
            "args": [
              {
                "name": "limit",
                "value": "limit",
                "isVariable": true
              }
            ]
          }
        ],
        "description": "",
        "return_type": null
      },
      {
        "name": "CreatePerson",
        "operation_name": "CreatePerson",
        "type": "mutation",
        "entity": "Person",
        "variables": [
          {
            "name": "input",
            "type": "CreatePersonInput",
            "graphql_type": "CreatePersonInput",
            "python_type": "CreatePersonInput",
            "typescript_type": "CreatePersonInput",
            "required": true,
            "description": "",
            "default": null
          }
        ],
        "fields": [
          {
            "name": "create_person",
            "fields": [
              {
                "name": "success",
                "fields": [],
                "type": null,
                "description": ""
              },
              {
                "name": "person",
                "fields": [
                  {
                    "name": "id",
                    "fields": [],
                    "type": null,
                    "description": ""
                  },
                  {
                    "name": "label",
                    "fields": [],
                    "type": null,
                    "description": ""
                  }
                ],
                "type": null,
                "description": ""
              },
              {
                "name": "message",
                "fields": [],
                "type": null,
                "description": ""
              },
              {
                "name": "error",
                "fields": [],
                "type": null,
                "description": ""
              }
            ],
            "type": null,
            "description": "",
            "args": [
              {
                "name": "input",
                "value": "input",
                "isVariable": true
              }
            ]
          }
        ],
        "description": "",
        "return_type": null
      },
      {
        "name": "UpdatePerson",
        "operation_name": "UpdatePerson",
        "type": "mutation",
        "entity": "Person",
        "variables": [
          {
            "name": "person_id",
            "type": "String",
            "graphql_type": "String",
            "python_type": "str",
            "typescript_type": "string",
            "required": true,
            "description": "",
            "default": null
          },
          {
            "name": "input",
            "type": "UpdatePersonInput",
            "graphql_type": "UpdatePersonInput",
            "python_type": "UpdatePersonInput",
            "typescript_type": "UpdatePersonInput",
            "required": true,
            "description": "",
            "default": null
          }
        ],
        "fields": [
          {
            "name": "update_person",
            "fields": [
              {
                "name": "success",
                "fields": [],
                "type": null,
                "description": ""
              },
              {
                "name": "person",
                "fields": [
                  {
                    "name": "id",
                    "fields": [],
                    "type": null,
                    "description": ""
                  },
                  {
                    "name": "label",
                    "fields": [],
                    "type": null,
                    "description": ""
                  }
                ],
                "type": null,
                "description": ""
              },
              {
                "name": "message",
                "fields": [],
                "type": null,
                "description": ""
              },
              {
                "name": "error",
                "fields": [],
                "type": null,
                "description": ""
              }
            ],
            "type": null,
            "description": "",
            "args": [
              {
                "name": "person_id",
                "value": "person_id",
                "isVariable": true
              },
              {
                "name": "input",
                "value": "input",
                "isVariable": true
              }
            ]
          }
        ],
        "description": "",
        "return_type": null
      },
      {
        "name": "DeletePerson",
        "operation_name": "DeletePerson",
        "type": "mutation",
        "entity": "Person",
        "variables": [
          {
            "name": "person_id",
            "type": "String",
            "graphql_type": "String",
            "python_type": "str",
            "typescript_type": "string",
            "required": true,
            "description": "",
            "default": null
          }
        ],
        "fields": [
          {
            "name": "delete_person",
            "fields": [
              {
                "name": "success",
                "fields": [],
                "type": null,
                "description": ""
              },
              {
                "name": "message",
                "fields": [],
                "type": null,
                "description": ""
              },
              {
                "name": "error",
                "fields": [],
                "type": null,
                "description": ""
              }
            ],
            "type": null,
            "description": "",
            "args": [
              {
                "name": "person_id",
                "value": "person_id",
                "isVariable": true
              }
            ]
          }
        ],
        "description": "",
        "return_type": null
      }
    ],
    "Prompt": [
      {
        "name": "ListPromptFiles",
        "operation_name": "ListPromptFiles",
        "type": "query",
        "entity": "Prompt",
        "variables": [],
        "fields": [
          {
            "name": "prompt_files",
            "fields": [],
            "type": null,
            "description": ""
          }
        ],
        "description": "",
        "return_type": null
      },
      {
        "name": "GetPromptFile",
        "operation_name": "GetPromptFile",
        "type": "query",
        "entity": "Prompt",
        "variables": [
          {
            "name": "filename",
            "type": "String",
            "graphql_type": "String",
            "python_type": "str",
            "typescript_type": "string",
            "required": true,
            "description": "",
            "default": null
          }
        ],
        "fields": [
          {
            "name": "prompt_file",
            "fields": [],
            "type": null,
            "description": "",
            "args": [
              {
                "name": "filename",
                "value": "filename",
                "isVariable": true
              }
            ]
          }
        ],
        "description": "",
        "return_type": null
      }
    ],
    "Provider": [
      {
        "name": "GetProviders",
        "operation_name": "GetProviders",
        "type": "query",
        "entity": "Provider",
        "variables": [],
        "fields": [
          {
            "name": "providers",
            "fields": [],
            "type": null,
            "description": ""
          }
        ],
        "description": "",
        "return_type": null
      },
      {
        "name": "GetProviderOperations",
        "operation_name": "GetProviderOperations",
        "type": "query",
        "entity": "Provider",
        "variables": [
          {
            "name": "provider",
            "type": "String",
            "graphql_type": "String",
            "python_type": "str",
            "typescript_type": "string",
            "required": true,
            "description": "",
            "default": null
          }
        ],
        "fields": [
          {
            "name": "provider_operations",
            "fields": [],
            "type": null,
            "description": "",
            "args": [
              {
                "name": "provider",
                "value": "provider",
                "isVariable": true
              }
            ]
          }
        ],
        "description": "",
        "return_type": null
      },
      {
        "name": "GetOperationSchema",
        "operation_name": "GetOperationSchema",
        "type": "query",
        "entity": "Provider",
        "variables": [
          {
            "name": "provider",
            "type": "String",
            "graphql_type": "String",
            "python_type": "str",
            "typescript_type": "string",
            "required": true,
            "description": "",
            "default": null
          },
          {
            "name": "operation",
            "type": "String",
            "graphql_type": "String",
            "python_type": "str",
            "typescript_type": "string",
            "required": true,
            "description": "",
            "default": null
          }
        ],
        "fields": [
          {
            "name": "operation_schema",
            "fields": [],
            "type": null,
            "description": "",
            "args": [
              {
                "name": "provider",
                "value": "provider",
                "isVariable": true
              },
              {
                "name": "operation",
                "value": "operation",
                "isVariable": true
              }
            ]
          }
        ],
        "description": "",
        "return_type": null
      }
    ],
    "System": [
      {
        "name": "GetSystemInfo",
        "operation_name": "GetSystemInfo",
        "type": "query",
        "entity": "System",
        "variables": [],
        "fields": [
          {
            "name": "system_info",
            "fields": [],
            "type": null,
            "description": ""
          }
        ],
        "description": "",
        "return_type": null
      },
      {
        "name": "GetExecutionCapabilities",
        "operation_name": "GetExecutionCapabilities",
        "type": "query",
        "entity": "System",
        "variables": [],
        "fields": [
          {
            "name": "execution_capabilities",
            "fields": [],
            "type": null,
            "description": ""
          }
        ],
        "description": "",
        "return_type": null
      },
      {
        "name": "HealthCheck",
        "operation_name": "HealthCheck",
        "type": "query",
        "entity": "System",
        "variables": [],
        "fields": [
          {
            "name": "health_check",
            "fields": [],
            "type": null,
            "description": ""
          }
        ],
        "description": "",
        "return_type": null
      },
      {
        "name": "GetExecutionOrder",
        "operation_name": "GetExecutionOrder",
        "type": "query",
        "entity": "System",
        "variables": [
          {
            "name": "execution_id",
            "type": "String",
            "graphql_type": "String",
            "python_type": "str",
            "typescript_type": "string",
            "required": true,
            "description": "",
            "default": null
          }
        ],
        "fields": [
          {
            "name": "execution_order",
            "fields": [],
            "type": null,
            "description": "",
            "args": [
              {
                "name": "execution_id",
                "value": "execution_id",
                "isVariable": true
              }
            ]
          }
        ],
        "description": "",
        "return_type": null
      },
      {
        "name": "GetExecutionMetrics",
        "operation_name": "GetExecutionMetrics",
        "type": "query",
        "entity": "System",
        "variables": [
          {
            "name": "execution_id",
            "type": "String",
            "graphql_type": "String",
            "python_type": "str",
            "typescript_type": "string",
            "required": true,
            "description": "",
            "default": null
          }
        ],
        "fields": [
          {
            "name": "execution_metrics",
            "fields": [],
            "type": null,
            "description": "",
            "args": [
              {
                "name": "execution_id",
                "value": "execution_id",
                "isVariable": true
              }
            ]
          }
        ],
        "description": "",
        "return_type": null
      },
      {
        "name": "GetExecutionHistory",
        "operation_name": "GetExecutionHistory",
        "type": "query",
        "entity": "System",
        "variables": [
          {
            "name": "diagram_id",
            "type": "String",
            "graphql_type": "String",
            "python_type": "str",
            "typescript_type": "string",
            "required": false,
            "description": "",
            "default": null
          },
          {
            "name": "limit",
            "type": "Int",
            "graphql_type": "Int",
            "python_type": "float",
            "typescript_type": "number",
            "required": false,
            "description": "",
            "default": null
          },
          {
            "name": "include_metrics",
            "type": "Boolean",
            "graphql_type": "Boolean",
            "python_type": "bool",
            "typescript_type": "boolean",
            "required": false,
            "description": "",
            "default": null
          }
        ],
        "fields": [
          {
            "name": "execution_history",
            "fields": [],
            "type": null,
            "description": "",
            "args": [
              {
                "name": "diagram_id",
                "value": "diagram_id",
                "isVariable": true
              },
              {
                "name": "limit",
                "value": "limit",
                "isVariable": true
              },
              {
                "name": "include_metrics",
                "value": "include_metrics",
                "isVariable": true
              }
            ]
          }
        ],
        "description": "",
        "return_type": null
      },
      {
        "name": "GetActiveCliSession",
        "operation_name": "GetActiveCliSession",
        "type": "query",
        "entity": "System",
        "variables": [],
        "fields": [
          {
            "name": "active_cli_session",
            "fields": [],
            "type": null,
            "description": ""
          }
        ],
        "description": "",
        "return_type": null
      }
    ]
  },
  "enums": [],
  "metadata": {
    "node_count": 16,
    "config_count": 16,
    "field_config_count": 9,
    "model_count": 16,
    "query_count": 45,
    "enum_count": 0
  }
}