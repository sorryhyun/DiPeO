enum APIServiceType {
  OPENAI
  ANTHROPIC
  GOOGLE
  GEMINI
  OLLAMA
  CLAUDE_CODE
  CLAUDE_CODE_CUSTOM
}

"""Branded scalar type for ApiKeyID"""
scalar ApiKeyID

type ApiKeyResult {
  success: Boolean!
  message: String
  error: String
  error_type: String
  envelope: JSON
  data: DomainApiKeyType
  api_key: DomainApiKeyType @deprecated(reason: "Use 'data' field instead")
}

"""Branded scalar type for ArrowID"""
scalar ArrowID

type AuthConfigType {
  strategy: String!
  header: String
  query_param: String
  format: String
  scopes: [String!]
}

type CliSessionResult {
  success: Boolean!
  message: String
  error: String
  error_type: String
  envelope: JSON
  data: JSON
  session_id: String
  execution_id: String
}

enum ContentType {
  RAW_TEXT
  CONVERSATION_STATE
  OBJECT
  EMPTY
  GENERIC
  VARIABLE
  BINARY
}

input CreateApiKeyInput {
  key: String!
  label: String!
  service: APIServiceType!
}

input CreateDiagramInput {
  author: String = null
  description: String = null
  name: String!
  tags: [String!] = null
}

input CreateNodeInput {
  data: JSON!
  position: Vec2Input!
  type: NodeType!
}

input CreatePersonInput {
  label: String!
  llm_config: PersonLLMConfigInput!
  type: String = null
}

enum DataType {
  ANY
  STRING
  NUMBER
  BOOLEAN
  OBJECT
  ARRAY
}

"""Date with time (isoformat)"""
scalar DateTime

type DeleteResult {
  success: Boolean!
  message: String
  error: String
  error_type: String
  envelope: JSON
  data: JSON
  deleted_id: String
  deleted_count: Int
}

input DiagramFilterInput {
  author: String = null
  created_after: DateTime = null
  created_before: DateTime = null
  name: String = null
  tags: String = null
}

enum DiagramFormatGraphQL {
  NATIVE
  YAML
  JSON
  READABLE
  LIGHT
}

"""Branded scalar type for DiagramID"""
scalar DiagramID

type DiagramMetadataType {
  id: String
  name: String
  description: String
  version: String!
  created: String!
  modified: String!
  author: String
  tags: [String!]
  format: String
}

type DiagramResult {
  success: Boolean!
  message: String
  error: String
  error_type: String
  envelope: JSON
  data: DomainDiagramType
  diagram: DomainDiagramType @deprecated(reason: "Use 'data' field instead")
}

type DomainApiKeyType {
  id: ID!
  label: String!
  service: APIServiceType!
  key: String
}

type DomainArrowType {
  id: ID!
  source: ID!
  target: ID!
  content_type: ContentType
  label: String
  execution_priority: Float
  data: JSON
}

type DomainDiagramType {
  nodes: [DomainNodeType!]!
  handles: [DomainHandleType!]!
  arrows: [DomainArrowType!]!
  persons: [DomainPersonType!]!
  metadata: DiagramMetadataType
}

type DomainHandleType {
  id: ID!
  node_id: ID!
  label: HandleLabel!
  direction: HandleDirection!
  data_type: DataType!
  position: String
}

type DomainNodeType {
  id: ID!
  type: NodeType!
  position: Vec2Type!
  data: JSON!
}

type DomainPersonType {
  id: ID!
  label: String!
  llm_config: PersonLLMConfigType!
  type: String!
}

enum EventType {
  EXECUTION_STARTED
  EXECUTION_COMPLETED
  EXECUTION_ERROR
  NODE_STARTED
  NODE_COMPLETED
  NODE_ERROR
  NODE_OUTPUT
  EXECUTION_LOG
  INTERACTIVE_PROMPT
  INTERACTIVE_RESPONSE
}

input ExecuteDiagramInput {
  debug_mode: Boolean = null
  diagram_data: JSON = null
  diagram_id: ID = null
  max_iterations: Int = null
  timeout_seconds: Int = null
  use_unified_monitoring: Boolean = null
  variables: JSON = null
}

input ExecuteIntegrationInput {
  provider: String!
  operation: String!
  config: JSON!
  api_key_id: ID = null
  timeout: Int = null
  resource_id: String = null
}

input ExecutionControlInput {
  action: String!
  execution_id: ID!
  reason: String = null
}

input ExecutionFilterInput {
  diagram_id: ID = null
  started_after: DateTime = null
  started_before: DateTime = null
  status: Status = null
}

"""Branded scalar type for ExecutionID"""
scalar ExecutionID

type ExecutionResult {
  success: Boolean!
  message: String
  error: String
  error_type: String
  envelope: JSON
  data: ExecutionStateType
  execution: ExecutionStateType @deprecated(reason: "Use 'data' field instead")
}

type ExecutionStateType {
  id: ID!
  status: Status!
  diagram_id: ID
  started_at: String
  ended_at: String
  error: String
  llm_usage: LLMUsageType
  is_active: Boolean
  executed_nodes: [String!]!
  node_states: JSON!
  node_outputs: JSON!
  variables: JSON
  exec_counts: JSON!
  metrics: JSON
}

type ExecutionUpdateType {
  type: EventType!
  execution_id: ID!
  node_id: ID
  status: Status
  result: JSON
  error: String
  timestamp: String
  total_tokens: Float
  node_type: String
  tokens: Float
  data: JSON
}

type FormatConversionResult {
  success: Boolean!
  message: String
  error: String
  error_type: String
  envelope: JSON
  data: String
  format: String
  original_format: String
}

enum HandleDirection {
  INPUT
  OUTPUT
}

"""Branded scalar type for HandleID"""
scalar HandleID

enum HandleLabel {
  DEFAULT
  FIRST
  CONDTRUE
  CONDFALSE
  SUCCESS
  ERROR
  RESULTS
}

"""Branded scalar type for HookID"""
scalar HookID

type IntegrationTestResultType {
  success: Boolean!
  provider: String!
  operation: String!
  status_code: Float
  response_time_ms: Float
  error: String
  response_preview: JSON
}

input InteractiveResponseInput {
  execution_id: ID!
  metadata: JSON = null
  node_id: ID!
  response: String!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](https://ecma-international.org/wp-content/uploads/ECMA-404_2nd_edition_december_2017.pdf).
"""
scalar JSON @specifiedBy(url: "https://ecma-international.org/wp-content/uploads/ECMA-404_2nd_edition_december_2017.pdf")

enum LLMService {
  OPENAI
  ANTHROPIC
  CLAUDE_CODE
  CLAUDE_CODE_CUSTOM
  GOOGLE
  GEMINI
  OLLAMA
}

type LLMUsageType {
  input: Float!
  output: Float!
  cached: Float
  total: Float
}

type Mutation {
  createApiKey(input: CreateApiKeyInput!): ApiKeyResult!
  testApiKey(api_key_id: String!): ApiKeyResult!
  deleteApiKey(api_key_id: String!): DeleteResult!
  registerCliSession(input: RegisterCliSessionInput!): CliSessionResult!
  unregisterCliSession(input: UnregisterCliSessionInput!): CliSessionResult!
  createDiagram(input: CreateDiagramInput!): DiagramResult!
  executeDiagram(input: ExecuteDiagramInput!): ExecutionResult!
  deleteDiagram(diagram_id: String!): DeleteResult!
  controlExecution(input: ExecutionControlInput!): ExecutionResult!
  sendInteractiveResponse(input: InteractiveResponseInput!): ExecutionResult!
  updateNodeState(input: UpdateNodeStateInput!): ExecutionResult!
  uploadFile(file: Upload!, path: String = null): JSON!
  uploadDiagram(file: Upload!, format: DiagramFormatGraphQL!): JSON!
  validateDiagram(content: String!, format: DiagramFormatGraphQL!): JSON!
  convertDiagramFormat(content: String!, from_format: DiagramFormatGraphQL!, to_format: DiagramFormatGraphQL!): FormatConversionResult!
  createNode(diagram_id: String!, input: CreateNodeInput!): NodeResult!
  updateNode(diagram_id: String!, node_id: String!, input: UpdateNodeInput!): NodeResult!
  deleteNode(diagram_id: String!, node_id: String!): DeleteResult!
  createPerson(input: CreatePersonInput!): PersonResult!
  updatePerson(person_id: String!, input: UpdatePersonInput!): PersonResult!
  deletePerson(person_id: String!): DeleteResult!
  executeIntegration(input: ExecuteIntegrationInput!): JSON!
  testIntegration(input: TestIntegrationInput!): IntegrationTestResultType!
  reloadProvider(name: String!): JSON!
}

"""Branded scalar type for NodeID"""
scalar NodeID

type NodeResult {
  success: Boolean!
  message: String
  error: String
  error_type: String
  envelope: JSON
  data: DomainNodeType
  node: DomainNodeType @deprecated(reason: "Use 'data' field instead")
}

enum NodeType {
  START
  PERSON_JOB
  CONDITION
  CODE_JOB
  API_JOB
  ENDPOINT
  DB
  USER_RESPONSE
  HOOK
  TEMPLATE_JOB
  JSON_SCHEMA_VALIDATOR
  TYPESCRIPT_AST
  SUB_DIAGRAM
  INTEGRATED_API
  IR_BUILDER
  DIFF_PATCH
}

type OperationSchemaType {
  operation: String!
  method: String!
  path: String!
  description: String
  request_body: JSON
  query_params: JSON
  response: JSON
}

type OperationType {
  name: String!
  method: String!
  path: String!
  description: String
  required_scopes: [String!]
  has_pagination: Boolean!
  timeout_override: Float
}

"""Branded scalar type for PersonID"""
scalar PersonID

input PersonLLMConfigInput {
  api_key_id: ID!
  model: String!
  service: LLMService!
  system_prompt: String = null
}

type PersonLLMConfigType {
  service: LLMService!
  model: String!
  api_key_id: ID!
  system_prompt: String
  prompt_file: String
}

type PersonResult {
  success: Boolean!
  message: String
  error: String
  error_type: String
  envelope: JSON
  data: DomainPersonType
  person: DomainPersonType @deprecated(reason: "Use 'data' field instead")
}

type ProviderMetadataType {
  version: String!
  type: String!
  manifest_path: String
  description: String
  documentation_url: String
  support_email: String
}

type ProviderStatisticsType {
  total_providers: Float!
  total_operations: Float!
  provider_types: JSON!
  providers: JSON!
}

type ProviderType {
  name: String!
  operations: [OperationType!]!
  metadata: ProviderMetadataType!
  base_url: String
  auth_config: AuthConfigType
  rate_limit: RateLimitConfigType
  retry_policy: RetryPolicyType
  default_timeout: Float!
}

type Query {
  getApiKeys(service: String = null): JSON!
  getApiKey(api_key_id: String!): DomainApiKeyType!
  getAvailableModels(service: String!, api_key_id: String!): JSON!
  listConversations(person_id: String = null, execution_id: String = null, search: String = null, show_forgotten: Boolean = null, limit: Float = null, offset: Float = null, since: String = null): [JSON!]!
  getDiagram(diagram_id: String!): DomainDiagramType!
  listDiagrams(filter: DiagramFilterInput = null, limit: Float = null, offset: Float = null): [DomainDiagramType!]!
  getExecution(execution_id: String!): ExecutionStateType
  listExecutions(filter: ExecutionFilterInput = null, limit: Float = null, offset: Float = null): [ExecutionStateType!]!
  getSupportedFormats: JSON!
  getPerson(person_id: String!): DomainPersonType!
  listPersons(limit: Float = null): [DomainPersonType!]!
  listPromptFiles: [JSON!]!
  getPromptFile(filename: String!): JSON!
  listProviders: [ProviderType!]!
  getProvider(name: String!): ProviderType
  getProviderOperations(provider: String!): JSON!
  getOperationSchema(provider: String!, operation: String!): OperationSchemaType
  getProviderStatistics: ProviderStatisticsType!
  getSystemInfo: JSON!
  getExecutionCapabilities: JSON!
  healthCheck: JSON!
  getExecutionOrder(execution_id: String!): JSON!
  getExecutionMetrics(execution_id: String!): JSON!
  getExecutionHistory(diagram_id: String = null, limit: Float = null, include_metrics: Boolean = null): JSON!
  getActiveCliSession: JSON!
}

type RateLimitConfigType {
  algorithm: String!
  capacity: Float!
  refill_per_sec: Float!
  window_size_sec: Float
}

input RegisterCliSessionInput {
  execution_id: ID!
  diagram_name: String!
  diagram_format: DiagramFormatGraphQL!
  diagram_data: JSON = null
}

type RetryPolicyType {
  strategy: String!
  max_retries: Float!
  base_delay_ms: Float!
  max_delay_ms: Float
  retry_on_status: [Float!]!
}

enum Status {
  PENDING
  RUNNING
  PAUSED
  COMPLETED
  FAILED
  ABORTED
  SKIPPED
  MAXITER_REACHED
}

type Subscription {
  executionUpdates(execution_id: String!): ExecutionUpdateType!
}

"""Branded scalar type for TaskID"""
scalar TaskID

input TestIntegrationInput {
  provider: String!
  operation: String!
  config_preview: JSON!
  api_key_id: ID = null
  dry_run: Boolean = null
}

input UnregisterCliSessionInput {
  execution_id: ID!
}

input UpdateNodeInput {
  data: JSON = null
  position: Vec2Input = null
}

input UpdateNodeStateInput {
  error: String = null
  execution_id: ID!
  node_id: ID!
  output: JSON = null
  status: Status!
}

input UpdatePersonInput {
  label: String = null
  llm_config: PersonLLMConfigInput = null
}

scalar Upload

input Vec2Input {
  x: Float!
  y: Float!
}

type Vec2Type {
  x: Float!
  y: Float!
}
