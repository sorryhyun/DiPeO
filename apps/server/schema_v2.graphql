type ApiJobNode implements Node {
  id: NodeID!
  position: Point!
  url: String!
  method: HttpMethod!
  headers: JSONScalar
  params: JSONScalar
  body: JSONScalar
  timeout: Int
  auth_type: AuthType
  auth_config: JSONScalar
}

type ApiJobNodeResult {
  success: Boolean!
  node: ApiJobNode
  message: String
  error: String
}

enum AuthType {
  NONE
  BEARER
  BASIC
  API_KEY
}

type CodeNode implements Node {
  id: NodeID!
  position: Point!
  language: String!
  code: String!
  timeout_seconds: Int
}

type CodeNodeResult {
  success: Boolean!
  node: CodeNode
  message: String
  error: String
}

type ConditionNode implements Node {
  id: NodeID!
  position: Point!
  condition_type: String!
  expression: String
  node_indices: [String!]
}

type ConditionNodeResult {
  success: Boolean!
  node: ConditionNode
  message: String
  error: String
}

input CreateApiJobNodeInput {
  position: PointInput!
  url: String!
  method: HttpMethod!
  headers: JSONScalar = null
  params: JSONScalar = null
  body: JSONScalar = null
  timeout: Int = null
  auth_type: AuthType = null
  auth_config: JSONScalar = null
}

input CreateCodeNodeInput {
  position: PointInput!
  language: String!
  code: String!
  timeout_seconds: Int = 30
}

input CreateConditionNodeInput {
  position: PointInput!
  condition_type: String!
  expression: String = null
  node_indices: [String!] = null
}

input CreateDBNodeInput {
  position: PointInput!
  file: String = null
  collection: String = null
  sub_type: DBBlockSubType!
  operation: String!
  query: String = null
  data: JSONScalar = null
}

input CreatePersonNodeInput {
  position: PointInput!
  person_id: PersonID!
  model: String!
  prompt: String!
  temperature: Float! = 0.7
  max_tokens: Int = null
  system_prompt: String = null
}

input CreateStartNodeInput {
  position: PointInput!
  initial_values: JSONScalar = null
}

input CreateTemplateJobNodeInput {
  position: PointInput!
  template_path: String = null
  template_content: String = null
  output_path: String = null
  variables: JSONScalar = null
  engine: TemplateEngine = null
}

input CreateUserResponseNodeInput {
  position: PointInput!
  prompt: String!
  timeout: Int!
}

enum DBBlockSubType {
  FIXED_PROMPT
  FILE
  CODE
  API_TOOL
}

type DBNode implements Node {
  id: NodeID!
  position: Point!
  file: String
  collection: String
  sub_type: DBBlockSubType!
  operation: String!
  query: String
  data: JSONScalar
}

type DBNodeResult {
  success: Boolean!
  node: DBNode
  message: String
  error: String
}

"""Date with time (isoformat)"""
scalar DateTime

type Diagram {
  id: DiagramID!
  name: String!
  description: String
  nodes: [Node!]!
  created_at: DateTime!
  updated_at: DateTime!
}

"""Unique identifier for diagram"""
scalar DiagramID

enum HttpMethod {
  GET
  POST
  PUT
  DELETE
  PATCH
}

"""Arbitrary JSON data"""
scalar JSONScalar

type Mutation {
  create_person_node(diagram_id: DiagramID!, input: CreatePersonNodeInput!): PersonNodeResult!
  create_code_node(diagram_id: DiagramID!, input: CreateCodeNodeInput!): CodeNodeResult!
  create_start_node(diagram_id: DiagramID!, input: CreateStartNodeInput!): StartNodeResult!
  create_condition_node(diagram_id: DiagramID!, input: CreateConditionNodeInput!): ConditionNodeResult!
  create_api_job_node(diagram_id: DiagramID!, input: CreateApiJobNodeInput!): ApiJobNodeResult!
  create_template_job_node(diagram_id: DiagramID!, input: CreateTemplateJobNodeInput!): TemplateJobNodeResult!
  create_db_node(diagram_id: DiagramID!, input: CreateDBNodeInput!): DBNodeResult!
  create_user_response_node(diagram_id: DiagramID!, input: CreateUserResponseNodeInput!): UserResponseNodeResult!
}

interface Node {
  id: NodeID!
  position: Point!
}

"""Unique identifier for node"""
scalar NodeID

"""Unique identifier for person"""
scalar PersonID

type PersonNode implements Node {
  id: NodeID!
  position: Point!
  person_id: PersonID!
  model: String!
  prompt: String!
  temperature: Float!
  max_tokens: Int
  system_prompt: String
}

type PersonNodeResult {
  success: Boolean!
  node: PersonNode
  message: String
  error: String
}

type Point {
  x: Float!
  y: Float!
}

input PointInput {
  x: Float!
  y: Float!
}

type Query {
  diagram(id: DiagramID!): Diagram
  node(id: NodeID!): Node
}

type StartNode implements Node {
  id: NodeID!
  position: Point!
  initial_values: JSONScalar
}

type StartNodeResult {
  success: Boolean!
  node: StartNode
  message: String
  error: String
}

type Subscription {
  placeholder: String!
}

enum TemplateEngine {
  INTERNAL
  JINJA2
  HANDLEBARS
}

type TemplateJobNode implements Node {
  id: NodeID!
  position: Point!
  template_path: String
  template_content: String
  output_path: String
  variables: JSONScalar
  engine: TemplateEngine
}

type TemplateJobNodeResult {
  success: Boolean!
  node: TemplateJobNode
  message: String
  error: String
}

type UserResponseNode implements Node {
  id: NodeID!
  position: Point!
  prompt: String!
  timeout: Int!
}

type UserResponseNodeResult {
  success: Boolean!
  node: UserResponseNode
  message: String
  error: String
}