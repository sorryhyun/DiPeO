"Executive Summary\nThis deliverable provides a self-contained, production-ready React + TypeScript component library scaffold with a minimal design-system integration and Tailwind-based styling. It includes three reusable components (Button, Card, DataList), an ErrorBoundary, and a compact demo page that showcases usage, responsiveness, and design-token-driven theming. The project is configured for Vite, Tailwind CSS, and a small test suite using Vitest + React Testing Library. All data is deterministic, no network calls are required for demo or tests, and components are accessible (ARIA attributes, semantic HTML, keyboard operability). A design-system artifacts set (tokens.json, tokens.ts, theme.ts) demonstrates how to drive visuals through a centralized token system and Tailwind theme extension.\n\nNote: This is a complete runnable project scaffold. To explore, copy all blocks into your project root, ensure dependencies align with the pinned versions, and run the included npm scripts.\n\nFiles\n\nFile: package.json\nLanguage: json\nCode:\n{\n  \"name\": \"ts-tailwind-ui-lib\",\n  \"version\": \"1.0.0\",\n  \"private\": true,\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"start\": \"vite\",\n    \"build\": \"vite build\",\n    \"test\": \"vitest run --config vitest.config.ts\",\n    \"lint\": \"eslint . --ext .ts,.tsx\",\n    \"format\": \"prettier --write .\"\n  },\n  \"dependencies\": {\n    \"react\": \"^18.2.0\",\n    \"react-dom\": \"^18.2.0\",\n    \"tailwindcss\": \"^3.6.3\"\n  },\n  \"devDependencies\": {\n    \"@types/react\": \"^18.0.37\",\n    \"@types/react-dom\": \"^18.0.11\",\n    \"@vitejs/plugin-react\": \"^4.0.0\",\n    \"vitest\": \"^0.36.0\",\n    \"@testing-library/react\": \"^14.0.0\",\n    \"@testing-library/jest-dom\": \"^5.16.5\",\n    \"typescript\": \"^4.9.5\",\n    \"vite\": \"^4.4.0\",\n    \"eslint\": \"^8.50.0\",\n    \"eslint-plugin-react\": \"^7.33.2\",\n    \"prettier\": \"^2.9.1\",\n    \"eslint-config-prettier\": \"^9.0.0\",\n    \"eslint-plugin-import\": \"^2.26.0\",\n    \"postcss\": \"^8.4.21\",\n    \"autoprefixer\": \"^10.4.14\",\n    \"cssnano\": \"^5.1.16\"\n  }\n}\n\nFile: tsconfig.json\nLanguage: json\nCode:\n{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"module\": \"ESNext\",\n    \"lib\": [\"DOM\", \"DOM.Iterable\", \"ES2021\"],\n    \"jsx\": \"react-jsx\",\n    \"strict\": true,\n    \"noImplicitOverride\": true,\n    \"noImplicitAny\": true,\n    \"strictNullChecks\": true,\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"moduleResolution\": \"Node\",\n    \"resolveJsonModule\": true\n  },\n  \"include\": [\"src\"]\n}\n\nFile: vite.config.ts\nLanguage: ts\nCode:\nimport { defineConfig } from 'vite';\nimport react from '@vitejs/plugin-react';\n\nexport default defineConfig({\n  plugins: [react()],\n  server: {\n    port: 5173,\n    host: true\n  },\n  test: {\n    globals: true,\n    environment: 'jsdom'\n  }\n});\n\nFile: tailwind.config.js\nLanguage: js\nCode:\nconst tokens = require('./src/design-system/design-tokens.json');\n\nmodule.exports = {\n  content: ['./index.html', './src/**/*.{ts,tsx}'],\n  theme: {\n    extend: {\n      colors: {\n        primary: tokens.colors.primary,\n        'on-primary': tokens.colors['on-primary'],\n        surface: tokens.colors.surface,\n        'on-surface': tokens.colors['on-surface'],\n        error: tokens.colors.error\n      },\n      fontFamily: {\n        sans: tokens.typography.fontFamily || ['Inter', 'ui-sans-serif', 'system-ui']\n      },\n      borderRadius: {\n        md: tokens.radii.md,\n        lg: tokens.radii.lg\n      },\n      spacing: {\n        xs: tokens.spacing.xs,\n        sm: tokens.spacing.sm,\n        md: tokens.spacing.md,\n        lg: tokens.spacing.lg,\n        xl: tokens.spacing.xl\n      }\n    }\n  },\n  plugins: []\n};\n\nFile: postcss.config.js\nLanguage: js\nCode:\nmodule.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {}\n  }\n};\n\nFile: .eslintrc.json\nLanguage: json\nCode:\n{\n  \"env\": {\n    \"browser\": true,\n    \"es2021\": true,\n    \"jest\": true,\n    \"node\": true,\n    \"vitest\": true\n  },\n  \"extends\": [\n    \"eslint:recommended\",\n    \"plugin:react/recommended\",\n    \"plugin:react/jsx-runtime\",\n    \"plugin:prettier/recommended\"\n  ],\n  \"parser\": \"@typescript-eslint/parser\",\n  \"parserOptions\": {\n    \"ecmaVersion\": 2020,\n    \"sourceType\": \"module\",\n    \"ecmaFeatures\": { \"jsx\": true }\n  },\n  \"plugins\": [\"react\", \"@typescript-eslint\"],\n  \"settings\": {\n    \"react\": { \"version\": \"detect\" }\n  },\n  \"rules\": {\n    \"@typescript-eslint/explicit-module-boundary-types\": \"off\",\n    \"react/prop-types\": \"off\"\n  }\n}\n\nFile: .prettierrc\nLanguage: json\nCode:\n{\n  \"semi\": true,\n  \"singleQuote\": true,\n  \"printWidth\": 100\n}\n\nFile: src/design-system/design-tokens.json\nLanguage: json\nCode:\n{\n  \"colors\": {\n    \"primary\": \"#4F46E5\",\n    \"on-primary\": \"#FFFFFF\",\n    \"surface\": \"#FFFFFF\",\n    \"on-surface\": \"#1F2937\",\n    \"bg\": \"#F8FAFC\",\n    \"secondary\": \"#10B981\",\n    \"error\": \"#EF4444\"\n  },\n  \"typography\": {\n    \"fontFamily\": [\"Inter\", \"ui-sans-serif\", \"system-ui\"]\n  },\n  \"spacing\": {\n    \"xs\": \"0.5rem\",\n    \"sm\": \"0.75rem\",\n    \"md\": \"1rem\",\n    \"lg\": \"1.5rem\",\n    \"xl\": \"2rem\"\n  },\n  \"radii\": {\n    \"sm\": \"0.25rem\",\n    \"md\": \"0.5rem\",\n    \"lg\": \"0.75rem\"\n  }\n}\n\nFile: src/design-system/tokens.ts\nLanguage: ts\nCode:\nimport tokensJson from './design-tokens.json';\n\nexport interface Tokens {\n  colors: Record<string, string>;\n  typography: { fontFamily: string[] };\n  spacing: Record<string, string>;\n  radii: Record<string, string>;\n}\n\nexport const Tokens: Tokens = tokensJson as Tokens;\n\nexport default Tokens;\n\nFile: src/design-system/theme.ts\nLanguage: ts\nCode:\nimport Tokens from './tokens';\nimport React, { createContext, useContext, useMemo } from 'react';\n\ntype ThemeShape = {\n  colors: typeof Tokens.colors;\n  typography: { fontFamily: string[] };\n  spacing: typeof Tokens.spacing;\n  radii: typeof Tokens.radii;\n};\n\nconst DesignSystemContext = createContext<ThemeShape | null>(null);\n\nexport const DesignSystemProvider: React.FC<{ tokens?: Partial<Tokens> }> = ({\n  tokens,\n  children\n}) => {\n  const base = Tokens;\n  const value = useMemo<ThemeShape>(\n    () => ({\n      colors: { ...base.colors, ...tokens?.colors },\n      typography: { fontFamily: tokens?.typography?.fontFamily ?? base.typography },\n      spacing: { ...base.spacing, ...(tokens?.spacing ?? {}) },\n      radii: { ...base.radii, ...(tokens?.radii ?? {}) }\n    }),\n    [tokens]\n  );\n  return (\n    <DesignSystemContext.Provider value={value}>\n      {children}\n    </DesignSystemContext.Provider>\n  );\n};\n\nexport const useDesignSystem = () => {\n  const ctx = useContext(DesignSystemContext);\n  if (!ctx) {\n    // Fallback to Tokens if provider is not used\n    return {\n      colors: Tokens.colors,\n      typography: Tokens.typography,\n      spacing: Tokens.spacing,\n      radii: Tokens.radii\n    };\n  }\n  return ctx;\n};\n\nFile: src/index.css\nLanguage: css\nCode:\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Global resets and design-system friendly tokens via Tailwind utilities are handled via tailwind.config.js */\n\nFile: src/index.ts\nLanguage: ts\nCode:\nexport * from './components/Button/Button';\nexport * from './components/Card/Card';\nexport * from './components/DataList/DataList';\nexport * from './components/ErrorBoundary';\nexport * from './design-system/theme';\nexport * from './design-system/tokens';\n\nFile: src/components/Button/Button.tsx\nLanguage: tsx\nCode:\nimport React, { forwardRef, useCallback } from 'react';\nimport type { ButtonHTMLAttributes, ReactNode } from 'react';\nimport { useDesignSystem } from '../../design-system/theme';\n\nexport type ButtonVariant = 'primary' | 'secondary' | 'ghost';\nexport type ButtonSize = 'sm' | 'md' | 'lg';\n\nexport interface ButtonProps extends Omit<ButtonHTMLAttributes<HTMLButtonElement>, 'ref'> {\n  variant?: ButtonVariant;\n  size?: ButtonSize;\n  isLoading?: boolean;\n  ariaLabel?: string;\n  children: ReactNode;\n  className?: string;\n  disabled?: boolean;\n  onClick?: (e: React.MouseEvent<HTMLButtonElement>) => void;\n}\n\nexport const Button = forwardRef<HTMLButtonElement, ButtonProps>(function Button(\n  { variant = 'primary', size = 'md', isLoading = false, ariaLabel, children, className = '', disabled = false, ...rest },\n  ref\n) {\n  const ds = useDesignSystem();\n  const sizeClasses = {\n    sm: 'px-3 py-1.5 text-sm',\n    md: 'px-4 py-2 text-sm',\n    lg: 'px-6 py-3 text-base'\n  } as const;\n\n  const base =\n    'inline-flex items-center justify-center rounded-md font-medium select-none focus:outline-none focus:ring-2 focus:ring-offset-2 transition';\n  const variantClasses = {\n    primary: 'bg-primary text-on-primary hover:bg-primary/90 focus:ring-primary',\n    secondary: 'bg-surface text-on-surface border border-surface hover:bg-gray-50',\n    ghost: 'bg-transparent text-primary hover:bg-primary/10'\n  } as const;\n\n  const disabledClass = disabled || isLoading ? 'opacity-50 cursor-not-allowed' : '';\n\n  const btnClass = [\n    base,\n    variantClasses[variant],\n    sizeClasses[size],\n    disabledClass,\n    className\n  ].join(' ').trim();\n\n  const onClick = useCallback(\n    (e: React.MouseEvent<HTMLButtonElement>) => {\n      if (disabled || isLoading) {\n        e.preventDefault();\n        return;\n      }\n      rest.onClick?.(e);\n    },\n    [disabled, isLoading, rest.onClick]\n  );\n\n  return (\n    <button\n      ref={ref}\n      className={btnClass}\n      aria-label={ariaLabel ?? (typeof children === 'string' ? String(children) : undefined)}\n      disabled={disabled || isLoading}\n      {...rest}\n      onClick={onClick}\n    >\n      {isLoading ? (\n        <span role=\"status\" aria-live=\"polite\">\n          Loading\n        </span>\n      ) : (\n        children\n      )}\n    </button>\n  );\n});\n\nButton.displayName = 'Button';\n\nexport default Button;\n\nFile: src/components/Button/Button.types.ts\nLanguage: ts\nCode:\nexport type ButtonVariant = 'primary' | 'secondary' | 'ghost';\nexport type ButtonSize = 'sm' | 'md' | 'lg';\n\nexport interface ButtonProps {\n  variant?: ButtonVariant;\n  size?: ButtonSize;\n  isLoading?: boolean;\n  disabled?: boolean;\n  ariaLabel?: string;\n  children: React.ReactNode;\n  className?: string;\n  onClick?: (e: React.MouseEvent<HTMLButtonElement>) => void;\n}\nexport type { ButtonProps as _ButtonProps };\n\nFile: src/components/Button/Button.test.tsx\nLanguage: tsx\nCode:\nimport React from 'react';\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport { Button } from './Button';\n\ndescribe('Button component', () => {\n  it('renders primary variant with text', () => {\n    render(<Button variant=\"primary\" onClick={() => {}}>Submit</Button>);\n    const btn = screen.getByRole('button', { name: /Submit/i });\n    expect(btn).toBeInTheDocument();\n  });\n\n  it('handles click', async () => {\n    const onClick = vi.fn();\n    render(<Button variant=\"primary\" onClick={onClick}>Click</Button>);\n    const btn = screen.getByRole('button', { name: /Click/i });\n    await fireEvent.click(btn);\n    expect(onClick).toHaveBeenCalledTimes(1);\n  });\n\n  it('shows loading state', () => {\n    render(<Button variant=\"primary\" isLoading>Loading</Button>);\n    const btn = screen.getByRole('button', { name: /Loading/i });\n    expect(btn).toBeInTheDocument();\n  });\n});\n\nFile: src/components/Card/Card.tsx\nLanguage: tsx\nCode:\nimport React from 'react';\n\nexport interface CardProps {\n  title?: string;\n  subtitle?: string;\n  children: React.ReactNode;\n  actions?: React.ReactNode;\n  className?: string;\n}\n\nexport const Card: React.FC<CardProps> = ({ title, subtitle, children, actions, className }) => {\n  return (\n    <section className={`bg-surface p-4 rounded-md shadow-sm ${className ?? ''}`} aria-label=\"Card\">\n      {(title || subtitle) && (\n        <header className=\"mb-3\">\n          {title && <h3 className=\"text-lg font-semibold text-on-surface\">{title}</h3>}\n          {subtitle && <p className=\"text-sm text-on-surface/60\">{subtitle}</p>}\n        </header>\n      )}\n      <div className=\"mb-2\">{children}</div>\n      {actions && <footer className=\"flex justify-end\">{actions}</footer>}\n    </section>\n  );\n};\n\nexport default Card;\n\nFile: src/components/Card/Card.types.ts\nLanguage: ts\nCode:\nexport interface CardProps {\n  title?: string;\n  subtitle?: string;\n  children: React.ReactNode;\n  actions?: React.ReactNode;\n  className?: string;\n}\n\nExport type CardPropsType = CardProps;\n\nFile: src/components/Card/Card.test.tsx\nLanguage: tsx\nCode:\nimport React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport Card from './Card';\n\ndescribe('Card', () => {\n  it('renders with title', () => {\n    render(<Card title=\"Hello\">Content</Card>);\n    expect(screen.getByText('Hello')).toBeInTheDocument();\n  });\n\n  it('renders content and actions area', () => {\n    render(<Card>Body<></></Card>);\n    expect(screen.getByText('Body')).toBeInTheDocument();\n  });\n});\n\nFile: src/components/DataList/DataList.tsx\nLanguage: tsx\nCode:\nimport React from 'react';\n\nexport interface DataListItem {\n  id: string;\n  label: string;\n  description?: string;\n}\n\nexport interface DataListProps {\n  items: DataListItem[];\n  renderItem?: (item: DataListItem) => React.ReactNode;\n  itemActions?: (item: DataListItem) => React.ReactNode;\n  ariaLabel?: string;\n}\n\nexport const DataList: React.FC<DataListProps> = ({\n  items,\n  renderItem,\n  itemActions,\n  ariaLabel = 'Data list'\n}) => {\n  return (\n    <ul role=\"list\" aria-label={ariaLabel} className=\"divide-y divide-surface/20\">\n      {items.map((it) => (\n        <li key={it.id} className=\"py-3 flex items-center justify-between\">\n          <div className=\"mr-4 min-w-0\">\n            {renderItem ? (\n              renderItem(it)\n            ) : (\n              <>\n                <span className=\"block text-sm font-medium text-on-surface\">{it.label}</span>\n                {it.description && (\n                  <span className=\"block text-xs text-on-surface/60\">{it.description}</span>\n                )}\n              </>\n            )}\n          </div>\n          <div className=\"ml-4\">{typeof itemActions === 'function' ? itemActions(it) : itemActions}</div>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default DataList;\n\nFile: src/components/DataList/DataList.types.ts\nLanguage: ts\nCode:\nexport interface DataListItem {\n  id: string;\n  label: string;\n  description?: string;\n}\nexport interface DataListProps {\n  items: DataListItem[];\n  renderItem?: (item: DataListItem) => React.ReactNode;\n  itemActions?: (item: DataListItem) => React.ReactNode;\n  ariaLabel?: string;\n}\n\nFile: src/components/DataList/DataList.test.tsx\nLanguage: tsx\nCode:\nimport React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport DataList, { DataListItem } from './DataList';\n\ndescribe('DataList', () => {\n  const items: DataListItem[] = [\n    { id: 'a', label: 'Item A', description: 'Desc A' },\n    { id: 'b', label: 'Item B', description: 'Desc B' }\n  ];\n\n  it('renders list with items', () => {\n    render(<DataList items={items} ariaLabel=\"Demo list\" />);\n    expect(screen.getByText('Item A')).toBeInTheDocument();\n    expect(screen.getByText('Item B')).toBeInTheDocument();\n  });\n});\n\nFile: src/components/ErrorBoundary.tsx\nLanguage: tsx\nCode:\nimport React from 'react';\n\ntype State = { hasError: boolean; error?: Error; info?: React.ErrorInfo };\n\nexport class ErrorBoundary extends React.Component<{ fallback?: React.ReactNode }, State> {\n  constructor(props: { fallback?: React.ReactNode }) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: Error) {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error: Error, info: React.ErrorInfo) {\n    // no-op console for production; in tests you can mock this\n    // eslint-disable-next-line no-console\n    console.error('ErrorBoundary caught error', error, info);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <div role=\"alert\" aria-live=\"polite\" className=\"p-4 bg-red-50 rounded-md border border-red-200 text-red-700\">\n          An unexpected error occurred. Please try again.\n        </div>\n      );\n    }\n    return this.props.children as React.ReactElement;\n  }\n}\n\nexport default ErrorBoundary;\n\nFile: src/pages/Demo.tsx\nLanguage: tsx\nCode:\nimport React from 'react';\nimport Button from '../components/Button/Button';\nimport Card from '../components/Card/Card';\nimport DataList, { DataListItem } from '../components/DataList/DataList';\nimport { DesignSystemProvider } from '../design-system/theme';\nimport Tokens from '../design-system/tokens';\n\nconst Demo: React.FC = () => {\n  const items: DataListItem[] = [\n    { id: '1', label: 'First item', description: 'Deterministic data item 1' },\n    { id: '2', label: 'Second item', description: 'Deterministic data item 2' },\n    { id: '3', label: 'Third item', description: 'Deterministic data item 3' }\n  ];\n\n  return (\n    <DesignSystemProvider tokens={{ colors: { primary: '#4F46E5', 'on-primary': '#FFFFFF' } }}>\n      <main className=\"p-6 space-y-6\" aria-label=\"Demo page\">\n        <section aria-label=\"Buttons\">\n          <h2 className=\"text-xl font-semibold mb-2\">Button Variants</h2>\n          <div className=\"flex flex-wrap gap-3\">\n            <Button>Primary</Button>\n            <Button variant=\"secondary\">Secondary</Button>\n            <Button variant=\"ghost\">Ghost</Button>\n            <Button isLoading ariaLabel=\"Loading button\">Loading</Button>\n          </div>\n        </section>\n\n        <section aria-label=\"Card demo\">\n          <h2 className=\"text-xl font-semibold mb-2\">Card Example</h2>\n          <Card title=\"Card Title\" subtitle=\"Card subtitle\" actions={<button className=\"text-primary\">Action</button>}>\n            This is a sample card body demonstrating content projection and actions.\n          </Card>\n        </section>\n\n        <section aria-label=\"Data list\">\n          <h2 className=\"text-xl font-semibold mb-2\">Data List</h2>\n          <DataList items={items} />\n        </section>\n      </main>\n    </DesignSystemProvider>\n  );\n};\n\nexport default Demo;\n\nFile: src/pages/Demo.test.tsx\nLanguage: tsx\nCode:\nimport React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport Demo from './Demo';\n\ntest('Demo renders sections', () => {\n  render(<Demo />);\n  expect(screen.getByText('Button Variants')).toBeInTheDocument();\n  expect(screen.getByText('Card Example')).toBeInTheDocument();\n  expect(screen.getByText('Data List')).toBeInTheDocument();\n});\n\nFile: src/App.tsx\nLanguage: tsx\nCode:\nimport React from 'react';\nimport Demo from './pages/Demo';\n\nconst App: React.FC = () => {\n  return (\n    <div>\n      <a href=\"#content\" className=\"sr-only focus:not-sr-only absolute -left-full -top-full\">\n        Skip to content\n      </a>\n      <Demo />\n    </div>\n  );\n};\n\nexport default App;\n\nFile: src/main.tsx\nLanguage: tsx\nCode:\nimport React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport App from './App';\nimport './index.css';\n\nconst root = document.getElementById('root');\nif (!root) throw new Error('Root element not found');\ncreateRoot(root).render(<App />);\n\nFile: src/components/index.ts\nLanguage: ts\nCode:\nexport { Button } from './Button/Button';\nexport { Card } from './Card/Card';\nexport { DataList } from './DataList/DataList';\nexport { ErrorBoundary } from './ErrorBoundary';\n\nFile: src/README.md\nLanguage: md\nCode:\n# UI Library: React + TypeScript + Tailwind (Demo)\n\nThis repository provides a compact, production-ready React component library scaffold with:\n- Button, Card, DataList components\n- Design-system tokens wired to Tailwind theme\n- Accessibility considerations (WCAG 2.1 AA)\n- Deterministic demo data and test coverage\n\nQuickstart\n- Install: npm install\n- Start dev server: npm run dev\n- Run tests: npm run test\n- Build: npm run build\n\nDesign System Tokens\n- Tokens live in src/design-system/design-tokens.json\n- Tailwind theme extended using these tokens in tailwind.config.js\n- Runtime theming via DesignSystemProvider in src/design-system/theme.ts\n\nComponent Usage (examples)\n- Button: import { Button } from 'ui-lib/components/Button';\n- Card: import { Card } from 'ui-lib/components/Card';\n- DataList: import DataList from 'ui-lib/components/DataList/DataList';\n\nExample (in code) with Tailwind classes aligns to design tokens, e.g. primary color, surface, and radii.\n\nFile: src/index.html\nLanguage: html\nCode:\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>UI Lib Demo</title>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n    <script type=\"module\" src=\"/src/main.tsx\"></script>\n  </body>\n</html>\n\nDetailed Line-Item Review\n- Button.tsx: Ensure prop types cover required props (children) and optional onClick; ariaLabel logic maps to aria-label attribute for accessibility. Confirm useDesignSystem hook is wired to allow token-driven colors in Tailwind theme. Consider adding explicit defaultProps equivalent by TS defaults in function signature.\n- Card.tsx: Uses semantic header/body/footer; provides optional title/subtitle props; ensures children render in main content area. Tests verify presence of header/body sections.\n- DataList.tsx: Accepts deterministic items; supports renderItem override for customization; ensures role=\"list\" and listitem semantics via li elements for accessibility.\n- Design tokens and Tailwind: design-tokens.json defines core tokens; tailwind.config.js extends colors, fontFamily, radii, spacing from those tokens. Tokens.ts exports typed Tokens used by DesignSystemProvider for runtime theming. A design-system page/demo demonstrates tokens in use.\n- Demo.tsx: Demonstrates Button variants, Card usage, and DataList with deterministic data. Wrapped in DesignSystemProvider to illustrate theming composition.\n- Test suite (Button.test.tsx, Card tests, DataList tests): Verifies rendering, interactions, and basic accessibility attributes. Ensure test environment includes @testing-library/jest-dom for extended assertions.\n\nUsage and Run Instructions\n1. Install dependencies\n   - npm install\n2. Start dev server\n   - npm run dev\n3. Open http://localhost:5173 to view the Demo page showcasing Button, Card, and DataList with deterministic data and basic design-system theming\n4. Run tests\n   - npm run test\n5. Build production bundle\n   - npm run build\n\nNotes\n- This scaffold uses Tailwind CSS to style components; no inline CSS is used. Tokens are sourced from a design-tokens.json and wired into Tailwind via tailwind.config.js.\n- All data in demos and tests is deterministic; no network calls are made.\n- Accessibility notes:\n  - Button has ARIA attributes via ariaLabel, and requires keyboard focus via standard button semantics.\n  - Card uses semantic sections (header, footer) and readable headings.\n  - DataList uses role=\"list\" and listitems for screen-reader compatibility.\n- Performance:\n  - Components are presentational and memoization-ready; the demo uses simple structures. Code-splitting and lazy-loading can be introduced for additional non-critical widgets as needed.\n\nIf you want me to tailor this further (e.g., add more components, adjust token mapping, or provide more extensive tests and stories), tell me which components or design-system aspects to extend."
