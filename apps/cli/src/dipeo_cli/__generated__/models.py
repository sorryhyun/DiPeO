from enum import Enum
from dataclasses import dataclass, field
from typing import Any, Dict, List, Optional

"""
Auto-generated lightweight Python models for CLI
DO NOT EDIT THIS FILE DIRECTLY
Generated by: packages/domain-models/scripts/generate-cli.ts
"""

# Type aliases for branded IDs
NodeID = str
ArrowID = str
HandleID = str
PersonID = str
ApiKeyID = str
DiagramID = str

class ExecutionStatus(str, Enum):
    """ExecutionStatus"""
    STARTED = "STARTED"
    RUNNING = "RUNNING"
    PAUSED = "PAUSED"
    COMPLETED = "COMPLETED"
    FAILED = "FAILED"
    ABORTED = "ABORTED"

class NodeExecutionStatus(str, Enum):
    """NodeExecutionStatus"""
    PENDING = "PENDING"
    RUNNING = "RUNNING"
    COMPLETED = "COMPLETED"
    FAILED = "FAILED"
    SKIPPED = "SKIPPED"
    PAUSED = "PAUSED"

class EventType(str, Enum):
    """EventType"""
    EXECUTION_STARTED = "EXECUTION_STARTED"
    NODE_STARTED = "NODE_STARTED"
    NODE_RUNNING = "NODE_RUNNING"
    NODE_COMPLETED = "NODE_COMPLETED"
    NODE_FAILED = "NODE_FAILED"
    NODE_SKIPPED = "NODE_SKIPPED"
    NODE_PAUSED = "NODE_PAUSED"
    NODE_PROGRESS = "NODE_PROGRESS"
    EXECUTION_COMPLETED = "EXECUTION_COMPLETED"
    EXECUTION_FAILED = "EXECUTION_FAILED"
    EXECUTION_ABORTED = "EXECUTION_ABORTED"
    INTERACTIVE_PROMPT = "INTERACTIVE_PROMPT"
    INTERACTIVE_RESPONSE = "INTERACTIVE_RESPONSE"
    EXECUTION_ERROR = "EXECUTION_ERROR"
    EXECUTION_UPDATE = "EXECUTION_UPDATE"

class NodeType(str, Enum):
    """Shared diagram domain models
These interfaces serve as the single source of truth for diagram-related types
Used by both frontend (TypeScript) and backend (Python via code generation)"""
    START = "start"
    PERSON_JOB = "person_job"
    CONDITION = "condition"
    JOB = "job"
    ENDPOINT = "endpoint"
    DB = "db"
    USER_RESPONSE = "user_response"
    NOTION = "notion"
    PERSON_BATCH_JOB = "person_batch_job"

class HandleDirection(str, Enum):
    """HandleDirection"""
    INPUT = "input"
    OUTPUT = "output"

class DataType(str, Enum):
    """DataType"""
    ANY = "any"
    STRING = "string"
    NUMBER = "number"
    BOOLEAN = "boolean"
    OBJECT = "object"
    ARRAY = "array"

class LLMService(str, Enum):
    """LLMService"""
    OPENAI = "openai"
    ANTHROPIC = "anthropic"
    GOOGLE = "google"
    GROK = "grok"
    BEDROCK = "bedrock"
    VERTEX = "vertex"
    DEEPSEEK = "deepseek"

class ForgettingMode(str, Enum):
    """ForgettingMode"""
    NO_FORGET = "no_forget"
    ON_EVERY_TURN = "on_every_turn"
    UPON_REQUEST = "upon_request"

class DiagramFormat(str, Enum):
    """DiagramFormat"""
    NATIVE = "native"
    LIGHT = "light"
    READABLE = "readable"
    NATIVE_YAML = "native_yaml"

class DBBlockSubType(str, Enum):
    """DBBlockSubType"""
    FIXED_PROMPT = "fixed_prompt"
    FILE = "file"
    CODE = "code"
    API_TOOL = "api_tool"

class ContentType(str, Enum):
    """ContentType"""
    VARIABLE = "variable"
    RAW_TEXT = "raw_text"
    CONVERSATION_STATE = "conversation_state"

class NotionOperation(str, Enum):
    """NotionOperation"""
    CREATE_PAGE = "create_page"
    UPDATE_PAGE = "update_page"
    READ_PAGE = "read_page"
    DELETE_PAGE = "delete_page"
    CREATE_DATABASE = "create_database"
    QUERY_DATABASE = "query_database"
    UPDATE_DATABASE = "update_database"

class SupportedLanguage(str, Enum):
    """SupportedLanguage"""
    PYTHON = "python"
    JAVASCRIPT = "javascript"
    BASH = "bash"

@dataclass
class Vec2:
    x: float
    y: float

@dataclass
class DomainHandle:
    id: HandleID
    node_id: NodeID
    label: str
    direction: HandleDirection
    data_type: DataType
    position: Optional[str] = None

@dataclass
class DomainNode:
    id: NodeID
    type: NodeType
    position: Vec2
    data: Dict[str, Any] = field(default_factory=dict)
    display_name: Optional[str] = None

@dataclass
class DomainArrow:
    id: ArrowID
    source: HandleID
    target: HandleID
    data: Optional[Dict[str, Any]] = None

@dataclass
class DomainPerson:
    id: PersonID
    label: str
    service: LLMService
    model: str
    forgetting_mode: ForgettingMode
    type: str
    api_key_id: Optional[ApiKeyID] = None
    system_prompt: Optional[str] = None
    masked_api_key: Optional[str] = None

@dataclass
class DomainApiKey:
    id: ApiKeyID
    label: str
    service: LLMService
    masked_key: str
    key: Optional[str] = None

@dataclass
class DiagramMetadata:
    version: str
    created: str
    modified: str
    id: Optional[DiagramID] = None
    name: Optional[str] = None
    description: Optional[str] = None
    author: Optional[str] = None
    tags: Optional[List[str]] = None

@dataclass
class DomainDiagram:
    nodes: List[DomainNode] = field(default_factory=list)
    handles: List[DomainHandle] = field(default_factory=list)
    arrows: List[DomainArrow] = field(default_factory=list)
    persons: List[DomainPerson] = field(default_factory=list)
    api_keys: List[DomainApiKey] = field(default_factory=list)
    metadata: Optional[DiagramMetadata] = None

@dataclass
class DiagramDictFormat:
    nodes: Dict[str, Any] = field(default_factory=dict)
    handles: Dict[str, Any] = field(default_factory=dict)
    arrows: Dict[str, Any] = field(default_factory=dict)
    persons: Dict[str, Any] = field(default_factory=dict)
    api_keys: Dict[str, Any] = field(default_factory=dict)
    metadata: Optional[DiagramMetadata] = None

@dataclass
class StartNodeData:
    custom_data: Dict[str, Any] = field(default_factory=dict)
    output_data_structure: Dict[str, Any] = field(default_factory=dict)

@dataclass
class ConditionNodeData:
    condition_type: str
    expression: Optional[str] = None
    node_indices: Optional[List[str]] = None

@dataclass
class PersonJobNodeData:
    first_only_prompt: str
    max_iteration: float
    person: Optional[PersonID] = None
    default_prompt: Optional[str] = None
    forgetting_mode: Optional[str] = None

@dataclass
class EndpointNodeData:
    save_to_file: bool
    file_name: Optional[str] = None

@dataclass
class DBNodeData:
    sub_type: DBBlockSubType
    operation: str
    file: Optional[str] = None
    collection: Optional[str] = None
    query: Optional[str] = None
    data: Optional[Dict[str, Any]] = None

@dataclass
class JobNodeData:
    code_type: SupportedLanguage
    code: str

@dataclass
class UserResponseNodeData:
    prompt: str
    timeout: float

# Utility functions for CLI

def create_node_id() -> str:
    """Generate a new node ID"""
    import uuid
    return f"node_{uuid.uuid4().hex[:8]}"

def create_arrow_id() -> str:
    """Generate a new arrow ID"""
    import uuid
    return f"arrow_{uuid.uuid4().hex[:8]}"

def create_handle_id(node_id: str, handle_name: str) -> str:
    """Generate a handle ID from node ID and handle name"""
    return f"{node_id}:{handle_name}"
