{"version":3,"file":"execution-list-Bw2xgK-Z.js","sources":["../../../../../dipeo/models/dist/core/enums/execution.js","../../../src/execution-list/index.tsx"],"sourcesContent":["/**\n * Execution and event-related enumerations\n */\n/**\n * Unified status enum for both executions and nodes\n * Note: MAXITER_REACHED only applies to node contexts\n */\nexport var Status;\n(function (Status) {\n    Status[\"PENDING\"] = \"pending\";\n    Status[\"RUNNING\"] = \"running\";\n    Status[\"PAUSED\"] = \"paused\";\n    Status[\"COMPLETED\"] = \"completed\";\n    Status[\"FAILED\"] = \"failed\";\n    Status[\"ABORTED\"] = \"aborted\";\n    Status[\"SKIPPED\"] = \"skipped\";\n    Status[\"MAXITER_REACHED\"] = \"maxiter_reached\";\n})(Status || (Status = {}));\n/**\n * Flow control status for node execution\n */\nexport var FlowStatus;\n(function (FlowStatus) {\n    FlowStatus[\"WAITING\"] = \"waiting\";\n    FlowStatus[\"READY\"] = \"ready\";\n    FlowStatus[\"RUNNING\"] = \"running\";\n    FlowStatus[\"BLOCKED\"] = \"blocked\";\n})(FlowStatus || (FlowStatus = {}));\n/**\n * Node execution completion status\n */\nexport var CompletionStatus;\n(function (CompletionStatus) {\n    CompletionStatus[\"SUCCESS\"] = \"success\";\n    CompletionStatus[\"FAILED\"] = \"failed\";\n    CompletionStatus[\"SKIPPED\"] = \"skipped\";\n    CompletionStatus[\"MAX_ITER\"] = \"max_iter\";\n})(CompletionStatus || (CompletionStatus = {}));\n/**\n * Execution phases for LLM and workflow operations\n */\nexport var ExecutionPhase;\n(function (ExecutionPhase) {\n    ExecutionPhase[\"MEMORY_SELECTION\"] = \"memory_selection\";\n    ExecutionPhase[\"DIRECT_EXECUTION\"] = \"direct_execution\";\n    ExecutionPhase[\"DECISION_EVALUATION\"] = \"decision_evaluation\";\n    ExecutionPhase[\"DEFAULT\"] = \"default\";\n})(ExecutionPhase || (ExecutionPhase = {}));\nexport var EventType;\n(function (EventType) {\n    // Execution lifecycle\n    EventType[\"EXECUTION_STARTED\"] = \"execution_started\";\n    EventType[\"EXECUTION_COMPLETED\"] = \"execution_completed\";\n    EventType[\"EXECUTION_ERROR\"] = \"execution_error\";\n    // Node lifecycle\n    EventType[\"NODE_STARTED\"] = \"node_started\";\n    EventType[\"NODE_COMPLETED\"] = \"node_completed\";\n    EventType[\"NODE_ERROR\"] = \"node_error\";\n    // Node output and logging\n    EventType[\"NODE_OUTPUT\"] = \"node_output\";\n    EventType[\"EXECUTION_LOG\"] = \"execution_log\";\n    // Interactive\n    EventType[\"INTERACTIVE_PROMPT\"] = \"interactive_prompt\";\n    EventType[\"INTERACTIVE_RESPONSE\"] = \"interactive_response\";\n})(EventType || (EventType = {}));\n//# sourceMappingURL=execution.js.map","/**\n * Execution List Widget\n *\n * Displays a list of diagram executions with status and timing information\n */\n\nimport { useState } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Status } from '@dipeo/models';\nimport { useGraphQLQuery } from '../hooks/use-graphql-query';\nimport { WidgetLayout } from '../components/WidgetLayout';\nimport { ErrorBoundary } from '../components/ErrorBoundary';\nimport { StatusBadge } from '../components/StatusBadge';\nimport { LIST_EXECUTIONS_QUERY } from '../__generated__/queries/all-queries';\nimport type { ListExecutionsQuery } from '../__generated__/graphql';\nimport '../shared/index.css';\n\nfunction ExecutionList() {\n  const [statusFilter, setStatusFilter] = useState<Status | 'all'>('all');\n  const { data, loading, error, refetch } = useGraphQLQuery<ListExecutionsQuery>(\n    LIST_EXECUTIONS_QUERY,\n    { limit: 50 },\n    { refetchInterval: 10000 } // Refetch every 10 seconds\n  );\n\n  const filteredExecutions = data?.listExecutions?.filter((execution) => {\n    if (statusFilter === 'all') return true;\n    return execution.status === statusFilter;\n  }) || [];\n\n  const formatDuration = (started_at: string | null, ended_at: string | null) => {\n    if (!started_at) return 'N/A';\n    if (!ended_at) return 'In progress';\n    const duration = new Date(ended_at).getTime() - new Date(started_at).getTime();\n    const seconds = Math.floor(duration / 1000);\n    if (seconds < 60) return `${seconds}s`;\n    const minutes = Math.floor(seconds / 60);\n    return `${minutes}m ${seconds % 60}s`;\n  };\n\n  return (\n    <WidgetLayout\n      title=\"Execution History\"\n      error={error}\n      loading={loading && !data}\n    >\n      {/* Status Filter */}\n      <div className=\"mb-4 flex gap-2 flex-wrap\">\n        {['all', Status.RUNNING, Status.COMPLETED, Status.FAILED, Status.PENDING].map((status) => (\n          <button\n            key={status}\n            onClick={() => setStatusFilter(status as Status | 'all')}\n            className={`px-3 py-1 rounded-md text-sm font-medium transition-colors ${\n              statusFilter === status\n                ? 'bg-blue-600 text-white'\n                : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n            }`}\n          >\n            {status === 'all' ? 'All' : status.charAt(0).toUpperCase() + status.slice(1).toLowerCase()}\n          </button>\n        ))}\n      </div>\n\n      {/* Execution Count */}\n      <div className=\"text-sm text-gray-600 mb-3\">\n        {filteredExecutions.length} execution{filteredExecutions.length !== 1 ? 's' : ''}\n      </div>\n\n      {/* Execution Cards */}\n      <div className=\"space-y-3\">\n        {filteredExecutions.length === 0 ? (\n          <div className=\"text-center py-8 text-gray-500\">\n            No executions found\n          </div>\n        ) : (\n          filteredExecutions.map((execution) => (\n            <div\n              key={execution.id}\n              className=\"border border-gray-200 rounded-lg p-4 hover:border-blue-400 hover:shadow-sm transition-all\"\n            >\n              <div className=\"flex items-start justify-between mb-2\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center gap-2 mb-1\">\n                    <StatusBadge status={execution.status} />\n                    <span className=\"font-semibold text-gray-900\">\n                      {execution.diagram_id || 'Unknown Diagram'}\n                    </span>\n                  </div>\n                  <div className=\"text-xs font-mono text-gray-500\">\n                    {execution.id}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex items-center justify-between text-xs text-gray-600\">\n                <span>\n                  Started: {execution.started_at ? new Date(execution.started_at).toLocaleString() : 'N/A'}\n                </span>\n                <span className=\"font-medium\">\n                  {formatDuration(execution.started_at, execution.ended_at)}\n                </span>\n              </div>\n\n              {execution.error && (\n                <div className=\"mt-2 text-xs text-red-600 bg-red-50 rounded px-2 py-1\">\n                  Error: {execution.error}\n                </div>\n              )}\n            </div>\n          ))\n        )}\n      </div>\n\n      {/* Refresh Button */}\n      {data && (\n        <button\n          onClick={() => refetch()}\n          className=\"mt-4 w-full py-2 px-4 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors\"\n        >\n          Refresh\n        </button>\n      )}\n    </WidgetLayout>\n  );\n}\n\n// Mount the widget\nconst rootElement = document.getElementById('execution-list-root');\nif (rootElement) {\n  const root = createRoot(rootElement);\n  root.render(\n    <ErrorBoundary>\n      <ExecutionList />\n    </ErrorBoundary>\n  );\n}\n"],"names":["Status","FlowStatus","CompletionStatus","ExecutionPhase","EventType","ExecutionList","statusFilter","setStatusFilter","useState","data","loading","error","refetch","useGraphQLQuery","LIST_EXECUTIONS_QUERY","filteredExecutions","execution","formatDuration","started_at","ended_at","duration","seconds","jsxs","WidgetLayout","jsx","status","StatusBadge","rootElement","createRoot","ErrorBoundary"],"mappings":"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"}