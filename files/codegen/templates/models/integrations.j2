"""
Integration-specific models and enums for DiPeO.
DO NOT EDIT - This file is automatically generated from integration.ts.
"""

from enum import Enum
from typing import Optional, Any, Dict, List

# Import from other generated modules
from .enums import {{ integration_data.imports.from_enums | join(', ') }}
from .domain_models import {{ integration_data.imports.from_execution | join(', ') }}

{% if integration_data.enums %}
# Integration-specific enums
{% for enum in integration_data.enums %}
class {{ enum.name }}(str, Enum):
    """{{ enum.description or '' }}"""
    {% for value in enum['values'] %}
    {{ value.python_name }} = "{{ value.value }}"
    {% endfor %}

{% endfor %}
{% endif %}

{% if integration_data.interfaces %}
# Integration interfaces (converted to Python classes)
{% for interface in integration_data.interfaces %}
class {{ interface.name }}:
    """{{ interface.description or interface.name + ' model' }}"""
    def __init__(self{% for prop in interface.properties %}, {{ prop.name | to_snake_case }}{% if prop.optional %}=None{% endif %}{% endfor %}):
        {% for prop in interface.properties %}
        self.{{ prop.name | to_snake_case }} = {{ prop.name | to_snake_case }}
        {% endfor %}

{% endfor %}
{% endif %}

# Export all integration types
__all__ = [
    # Re-exported from enums
    {% for import in integration_data.imports.from_enums %}
    "{{ import }}",
    {% endfor %}
    {% if integration_data.enums %}
    # Integration enums
    {% for enum in integration_data.enums %}
    "{{ enum.name }}",
    {% endfor %}
    {% endif %}
    {% if integration_data.interfaces %}
    # Integration interfaces
    {% for interface in integration_data.interfaces %}
    "{{ interface.name }}",
    {% endfor %}
    {% endif %}
]