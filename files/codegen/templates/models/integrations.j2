"""
Integration-specific models and enums for DiPeO.
DO NOT EDIT - This file is automatically generated from integration.ts.
"""

from enum import *
from typing import *
from pydantic import BaseModel, Field

# Import from other generated modules
from .enums import *
# Note: Not importing domain_models to avoid circular dependency
# TokenUsage is forward-referenced in ChatResult

{% if integration_data.enums %}
# Integration-specific enums
{% for enum in integration_data.enums %}
class {{ enum.name }}(str, Enum):
    """{{ enum.description or '' }}"""
    {% for value in enum['values'] %}
    {{ value.python_name }} = "{{ value.value }}"
    {% endfor %}

{% endfor %}
{% endif %}

{% if integration_data.interfaces %}
# Integration interfaces (converted to Pydantic models)
{% for interface in integration_data.interfaces %}
class {{ interface.name }}(BaseModel):
    """{{ interface.description or interface.name + ' model' }}"""
    {% for prop in interface.properties %}
    {{ prop.name | snake_case }}: {% if prop.optional %}Optional[{% endif %}{{ prop.type | ts_to_python }}{% if prop.optional %}] = None{% endif %}{% if prop.description %} = Field(description="{{ prop.description }}"){% endif %}
    {% endfor %}

    class Config:
        extra = "forbid"
        validate_assignment = True

{% endfor %}
{% endif %}

# Export all integration types
__all__ = [
    # Re-exported from enums
    {% for import in integration_data.imports.from_enums %}
    "{{ import }}",
    {% endfor %}
    {% if integration_data.enums %}
    # Integration enums
    {% for enum in integration_data.enums %}
    "{{ enum.name }}",
    {% endfor %}
    {% endif %}
    {% if integration_data.interfaces %}
    # Integration interfaces
    {% for interface in integration_data.interfaces %}
    "{{ interface.name }}",
    {% endfor %}
    {% endif %}
]