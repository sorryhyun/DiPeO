"""
Auto-generated static node types from domain models.
DO NOT EDIT THIS FILE DIRECTLY.
Generated at: {{ now }}
Generated by: domain model static nodes generation
"""


from dataclasses import *
from typing import *

from .domain_models import *
from .enums import *
from .integrations import *


def _to_enum(value: Optional[str], enum_class) -> Optional[Any]:
    """Convert string value to enum instance if not None."""
    if value is None:
        return None
    if isinstance(value, enum_class):
        return value
    return enum_class(value)


@dataclass(frozen=True)
class BaseExecutableNode:
    """Base class for all executable node types."""
    # Required fields only - no defaults in base class
    id: NodeID
    position: Vec2
    
    def to_dict(self) -> Dict[str, Any]:
        """Convert node to dictionary representation."""
        result = {
            "id": self.id,
            "position": {"x": self.position.x, "y": self.position.y}
        }
        # Subclasses should extend this
        return result


# Debug: Show all available variables
# Available variables: {{ "now: " ~ now if now is defined else "now not defined" }}
# static_nodes_data exists: {{ "yes" if static_nodes_data is defined else "no" }}
{%- if static_nodes_data is defined %}
# static_nodes_data keys: {{ static_nodes_data.keys() | list }}
{%- set classes = static_nodes_data.node_classes if static_nodes_data.node_classes is defined else [] %}
{%- else %}
{%- set classes = node_classes if node_classes is defined else [] %}
{%- endif %}
# Number of classes: {{ classes | length }}
{% for node_class in classes %}
@dataclass(frozen=True)
class {{ node_class.class_name }}(BaseExecutableNode):
{%- set required_fields = node_class.fields | selectattr("has_default", "equalto", false) | list %}
{%- set optional_fields = node_class.fields | selectattr("has_default", "equalto", true) | list %}
{%- if required_fields %}
    # Required node-specific fields
{%- for field in required_fields %}
    {{ field.py_name }}: {{ field.py_type }} = field()
{%- endfor %}
{%- endif %}
    # Type field with default
    type: NodeType = field(default=NodeType.{{ node_class.node_type | upper }}, init=False)
    # Base optional fields
    label: str = ""
    flipped: bool = False
    metadata: Optional[Dict[str, Any]] = None
{%- if optional_fields %}
    # Optional node-specific fields
{%- for field in optional_fields %}
{%- if field.default_value == "None" and not field.py_type.startswith('Optional[') %}
    {{ field.py_name }}: Optional[{{ field.py_type }}] = {{ field.default_value }}
{%- else %}
    {{ field.py_name }}: {{ field.py_type }} = {{ field.default_value }}
{%- endif %}
{%- endfor %}
{%- endif %}

    def to_dict(self) -> Dict[str, Any]:
        """Convert node to dictionary representation."""
        data = super().to_dict()
        data["type"] = self.type.value
        data["label"] = self.label
        data["flipped"] = self.flipped
        if self.metadata:
            data["metadata"] = self.metadata
{%- for field in node_class.fields %}
{%- set field_name = field.py_name %}
{%- set ts_name = field.ts_name %}
{%- if ts_name in enum_fields and not (ts_name == 'operation' and node_class.node_type == 'db') %}
        data["{{ ts_name }}"] = self.{{ field_name }}.value if self.{{ field_name }} is not None else None
{%- else %}
        data["{{ ts_name }}"] = self.{{ field_name }}
{%- endif %}
{%- endfor %}
        return data


{% endfor %}
@dataclass(frozen=True)
class PersonBatchJobNode(PersonJobNode):
    """Person batch job node - same as PersonJobNode but with different type."""
    type: NodeType = field(default=NodeType.PERSON_BATCH_JOB, init=False)


ExecutableNode = Union[
{%- set classes2 = static_nodes_data.node_classes if static_nodes_data else node_classes %}
{%- for node_class in classes2 %}
    {{ node_class.class_name }},
{%- endfor %}
    PersonBatchJobNode
]


def create_executable_node(
    node_type: NodeType,
    node_id: NodeID,
    position: Vec2,
    label: str = "",
    data: Optional[Dict[str, Any]] = None,
    flipped: bool = False,
    metadata: Optional[Dict[str, Any]] = None
) -> ExecutableNode:
    """Factory function to create typed executable nodes from diagram data."""
    data = data or {}
    
{%- set classes = node_classes if node_classes is defined else [] %}
{% for node_class in classes %}
    if node_type == NodeType.{{ node_class.node_type | upper }}:
        return {{ node_class.class_name }}(
            id=node_id,
            position=position,
            label=label,
            flipped=flipped,
            metadata=metadata,
{%- for field in node_class.fields %}
{%- set field_name = field.py_name %}
{%- set ts_name = field.ts_name %}
{%- if ts_name in enum_fields and not (ts_name == 'operation' and node_class.node_type == 'db') %}
{%- if field.has_default and field.default_value == "None" %}
            {{ field_name }}=_to_enum(data.get("{{ ts_name }}", None), {{ enum_fields[ts_name] }}),
{%- else %}
            {{ field_name }}=_to_enum(data.get("{{ ts_name }}"), {{ enum_fields[ts_name] }}),
{%- endif %}
{%- elif field.special_handling %}
            {{ field_name }}={{ field.special_handling }},
{%- elif field.has_default and not field.is_field_default %}
            {{ field_name }}=data.get("{{ ts_name }}", {{ field.default_value }}),
{%- else %}
            {{ field_name }}=data.get("{{ ts_name }}"),
{%- endif %}
{%- endfor %}
        )
    
{% endfor %}
    if node_type == NodeType.PERSON_BATCH_JOB:
        return PersonBatchJobNode(
            id=node_id,
            position=position,
            label=label,
            flipped=flipped,
            metadata=metadata,
{%- set person_job_node = classes | selectattr("node_type", "equalto", "person_job") | first %}
{%- if person_job_node %}
{%- for field in person_job_node.fields %}
{%- set field_name = field.py_name %}
{%- set ts_name = field.ts_name %}
{%- if ts_name in enum_fields %}
{%- if field.has_default and field.default_value == "None" %}
            {{ field_name }}=_to_enum(data.get("{{ ts_name }}", None), {{ enum_fields[ts_name] }}),
{%- else %}
            {{ field_name }}=_to_enum(data.get("{{ ts_name }}"), {{ enum_fields[ts_name] }}),
{%- endif %}
{%- elif field.special_handling %}
            {{ field_name }}={{ field.special_handling }},
{%- elif field.has_default and not field.is_field_default %}
            {{ field_name }}=data.get("{{ ts_name }}", {{ field.default_value }}),
{%- else %}
            {{ field_name }}=data.get("{{ ts_name }}"),
{%- endif %}
{%- endfor %}
{%- endif %}
        )
    
    raise ValueError(f"Unknown node type: {node_type}")