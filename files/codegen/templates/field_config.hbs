// Generated field configuration for {{spec_data.nodeType}}
import type { UnifiedFieldDefinition } from '@/core/config/unifiedConfig';

export const {{spec_data.camelCase}}Fields: UnifiedFieldDefinition[] = [
  {{#each spec_data.fields}}
  {
    name: '{{name}}',
    type: '{{#if (eq type 'enum')}}select{{else}}{{#if (eq type 'boolean')}}checkbox{{else}}{{#if (eq type 'number')}}number{{else}}{{#if (eq type 'code')}}textarea{{else}}text{{/if}}{{/if}}{{/if}}{{/if}}',
    label: '{{humanize name}}',
    required: {{required}},
    {{#if defaultValue}}
    defaultValue: {{{safeJson defaultValue}}},
    {{/if}}
    {{#if placeholder}}
    placeholder: '{{placeholder}}',
    {{/if}}
    {{#if description}}
    description: '{{description}}',
    {{/if}}
    {{#if (eq type 'enum')}}
    options: [
      {{#each values}}
      { value: '{{this}}', label: '{{humanize this}}' },
      {{/each}}
    ],
    {{/if}}
    {{#if validation}}
    validate: (value: unknown) => {
      {{#if validation.pattern}}
      if (typeof value === 'string' && !new RegExp('{{{validation.pattern}}}').test(value)) {
        return { isValid: false, error: 'Invalid format' };
      }
      {{/if}}
      {{#if validation.min}}
      if (typeof value === 'number' && value < {{validation.min}}) {
        return { isValid: false, error: 'Value must be at least {{validation.min}}' };
      }
      {{/if}}
      {{#if validation.max}}
      if (typeof value === 'number' && value > {{validation.max}}) {
        return { isValid: false, error: 'Value must be at most {{validation.max}}' };
      }
      {{/if}}
      return { isValid: true };
    },
    {{/if}}
  },
  {{/each}}
];