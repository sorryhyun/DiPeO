// Auto-generated node configuration for {{ nodeType }}
import type { UnifiedNodeConfig } from '@/core/config/unifiedConfig';
import { {{ nodeTypeCamel }}Fields } from '../fields/{{ nodeTypePascal }}Fields';

export const {{ nodeTypeCamel }}Config: UnifiedNodeConfig = {
  label: '{{ displayName }}',
  icon: '{{ icon }}',
  color: '{{ color | default('#6366f1') }}',
  nodeType: '{{ nodeType }}',
  category: '{{ category | default('utility') }}',
  handles: {
{%- if handles and handles.inputs %}
    input: [
{%- for input in handles.inputs %}
      { label: '{{ input.label | default('') }}', displayLabel: '{{ input.displayLabel | default('') }}', position: '{{ input.position | default('left') }}' },
{%- endfor %}
    ],
{%- endif %}
{%- if handles and handles.outputs %}
    output: [
{%- for output in handles.outputs %}
      { label: '{{ output.label | default('') }}', displayLabel: '{{ output.displayLabel | default('') }}', position: '{{ output.position | default('right') }}' },
{%- endfor %}
    ],
{%- endif %}
  },
  defaults: {
{%- for field in fields if field.default is defined %}
{%- if field.default is string %}
    {{ field.name }}: '{{ field.default }}',
{%- elif field.default is boolean %}
    {{ field.name }}: {{ field.default | lower }},
{%- else %}
    {{ field.name }}: {{ field.default | tojson }},
{%- endif %}
{%- endfor %}
  },
  customFields: {{ nodeTypeCamel }}Fields,
{%- if primaryDisplayField %}
  primaryDisplayField: '{{ primaryDisplayField }}',
{%- endif %}
};

export default {{ nodeTypeCamel }}Config;