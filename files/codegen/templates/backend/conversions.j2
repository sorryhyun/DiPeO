"""
Generated conversion functions for TypeScript <-> Python transformations.
DO NOT EDIT - This file is automatically generated.
"""

from typing import Any, Dict, List, Optional, Union, Type, TypeVar
from enum import Enum
import json
from pydantic import BaseModel

# Import enums from generated definitions
from dipeo.diagram_generated.enums import (
    NodeType, DiagramFormat, HookType, HookTriggerMode,
    HttpMethod, DBBlockSubType, SupportedLanguage,
    NotionOperation, ExecutionStatus, LLMService, APIServiceType
)

# Import generated models
from dipeo.diagram_generated.models import *

T = TypeVar('T')


# Enum conversion helpers
{% for enum in conversion_data.enums %}
def {{ enum.name|snakeCase }}_to_string(value: {{ enum.name }}) -> str:
    """Convert {{ enum.name }} enum to string."""
    return value.value if isinstance(value, {{ enum.name }}) else str(value)


def string_to_{{ enum.name|snakeCase }}(value: str) -> {{ enum.name }}:
    """Convert string to {{ enum.name }} enum."""
    try:
        return {{ enum.name }}(value)
    except ValueError:
        raise ValueError(f"Invalid {{ enum.name }} value: {value}")

{% endfor %}

# Model conversion functions
{% for model in conversion_data.models %}
{% if model.type == 'class' %}
def {{ model.name|snakeCase }}_to_dict(model: {{ model.name }}) -> Dict[str, Any]:
    """Convert {{ model.name }} to dictionary."""
    if not isinstance(model, {{ model.name }}):
        raise TypeError(f"Expected {{ model.name }}, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    {% for field in model.fields.values() %}
    {% if field.type|isEnum %}
    if "{{ field.name }}" in data and data["{{ field.name }}"] is not None:
        data["{{ field.name }}"] = {{ field.type|snakeCase }}_to_string(data["{{ field.name }}"])
    {% endif %}
    {% endfor %}
    
    return data


def dict_to_{{ model.name|snakeCase }}(data: Dict[str, Any]) -> {{ model.name }}:
    """Convert dictionary to {{ model.name }}."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    {% for field in model.fields.values() %}
    {% if field.type|isEnum %}
    if "{{ field.name }}" in data_copy and data_copy["{{ field.name }}"] is not None:
        data_copy["{{ field.name }}"] = string_to_{{ field.type|snakeCase }}(data_copy["{{ field.name }}"])
    {% endif %}
    {% endfor %}
    
    return {{ model.name }}(**data_copy)
{% endif %}

{% endfor %}

# Generic conversion helpers
def model_to_dict(model: BaseModel) -> Dict[str, Any]:
    """Convert any Pydantic model to dictionary."""
    model_type = type(model).__name__
    converter_name = f"{model_type[0].lower()}{model_type[1:]}_to_dict"
    
    # Try to find specific converter
    converter = globals().get(converter_name)
    if converter:
        return converter(model)
    
    # Fallback to generic conversion
    return model.dict(exclude_none=True)


def dict_to_model(data: Dict[str, Any], model_type: Type[T]) -> T:
    """Convert dictionary to specified model type."""
    type_name = model_type.__name__
    converter_name = f"dict_to_{type_name[0].lower()}{type_name[1:]}"
    
    # Try to find specific converter
    converter = globals().get(converter_name)
    if converter:
        return converter(data)
    
    # Fallback to direct instantiation
    return model_type(**data)


# JSON conversion helpers
def model_to_json(model: BaseModel, **kwargs) -> str:
    """Convert model to JSON string."""
    return json.dumps(model_to_dict(model), **kwargs)


def json_to_model(json_str: str, model_type: Type[T]) -> T:
    """Convert JSON string to model."""
    data = json.loads(json_str)
    return dict_to_model(data, model_type)


# Batch conversion helpers
def models_to_dicts(models: List[BaseModel]) -> List[Dict[str, Any]]:
    """Convert list of models to list of dictionaries."""
    return [model_to_dict(model) for model in models]


def dicts_to_models(data_list: List[Dict[str, Any]], model_type: Type[T]) -> List[T]:
    """Convert list of dictionaries to list of models."""
    return [dict_to_model(data, model_type) for data in data_list]


# Node-specific conversion helpers
NODE_TYPE_MAP = {
    {% for model in conversion_data.models %}
    {% if model.name|endsWith("NodeData") %}
    "{{ model.name|toNodeType }}": {{ model.name }},
    {% endif %}
    {% endfor %}
}


def create_node_from_dict(node_type: str, data: Dict[str, Any]) -> BaseModel:
    """Create a node model from node type and data."""
    model_class = NODE_TYPE_MAP.get(node_type)
    if not model_class:
        raise ValueError(f"Unknown node type: {node_type}")
    
    return dict_to_model(data, model_class)


def node_to_dict(node: BaseModel) -> Dict[str, Any]:
    """Convert any node model to dictionary with type information."""
    data = model_to_dict(node)
    
    # Add node type if not present
    if "type" not in data:
        # Infer node type from class name
        class_name = type(node).__name__
        if class_name.endswith("NodeData"):
            node_type = class_name[:-8].lower()  # Remove 'NodeData'
            # Convert camelCase to snake_case
            import re
            node_type = re.sub(r'(?<!^)(?=[A-Z])', '_', node_type).lower()
            data["type"] = node_type
        elif class_name.endswith("Node"):
            node_type = class_name[:-4].lower()  # Remove 'Node'
            # Convert camelCase to snake_case
            import re
            node_type = re.sub(r'(?<!^)(?=[A-Z])', '_', node_type).lower()
            data["type"] = node_type
    
    return data


# Export all conversion functions
__all__ = [
    # Enum converters
    {% for enum in conversion_data.enums %}
    "{{ enum.name|snakeCase }}_to_string",
    "string_to_{{ enum.name|snakeCase }}",
    {% endfor %}
    # Model converters
    {% for model in conversion_data.models %}
    "{{ model.name|snakeCase }}_to_dict",
    "dict_to_{{ model.name|snakeCase }}",
    {% endfor %}
    # Generic helpers
    "model_to_dict",
    "dict_to_model",
    "model_to_json",
    "json_to_model",
    "models_to_dicts",
    "dicts_to_models",
    # Node helpers
    "create_node_from_dict",
    "node_to_dict",
    "NODE_TYPE_MAP",
]