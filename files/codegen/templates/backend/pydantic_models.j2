"""
Generated Pydantic models from TypeScript definitions.
DO NOT EDIT - This file is automatically generated.
"""

# Standard library imports
{% for import in model_data.imports %}
{% if import.module == "typing" %}from typing import {{ import['items']|join(", ") }}
{% endif %}
{% if import.module == "enum" %}from enum import {{ import['items']|join(", ") }}
{% endif %}
{% if import.module == "datetime" %}from datetime import {{ import['items']|join(", ") }}
{% endif %}
{% if import.module == "re" %}from re import {{ import['items']|join(", ") }}
{% endif %}
{% endfor %}

# Third-party imports
from pydantic import BaseModel, Field, field_validator, model_validator
{% for import in model_data.imports %}
{% if import.module not in ["typing", "enum", "datetime", "re"] and not import.module.startswith("dipeo") %}
from {{ import.module }} import {{ import['items']|join(", ") }}
{% endif %}
{% endfor %}

# Local imports
{% for import in model_data.imports %}
{% if import.module.startswith("dipeo") %}
from {{ import.module }} import {{ import['items']|join(", ") }}
{% endif %}
{% endfor %}

# Type aliases
{% for key, value in model_data.type_aliases.items() %}
{{ key }} = {{ value }}
{% endfor %}


# Enums
{% for model in model_data.models %}
{% if model.type == "enum" %}
class {{ model.name }}({{ model.bases|join(", ") }}):
    """{% if model.docstring %}{{ model.docstring }}{% else %}{{ model.name }} enumeration.{% endif %}"""
    {% for enum_value in model.enum_values %}
    {{ enum_value[0] }} = "{{ enum_value[1] }}"
    {% endfor %}

{% endif %}
{% endfor %}

# Models
{% for model in model_data.models %}
{% if model.type == "class" %}
class {{ model.name }}({{ model.bases|join(", ") }}):
    """{% if model.docstring %}{{ model.docstring }}{% else %}{{ model.name }} model.{% endif %}"""
    {% if model.fields %}
    # Fields
    {% for field in model.fields.values() %}
    {{ field.name }}: {% if field.required %}{{ field.type }}{% else %}{% if field.type.startswith('Optional[') %}{{ field.type }}{% else %}Optional[{{ field.type }}]{% endif %}{% endif %}{% if field.field_definition %} = {{ field.field_definition }}{% else %}{% if not field.required %} = None{% endif %}{% endif %}
    {% endfor %}
    {% else %}
    pass
    {% endif %}
    
    {% if model.methods %}
    # Validators
    {% for method in model.methods %}
    {{ method.decorator }}
    {% for line in method.body %}
    {{ line }}
    {% endfor %}
    
    {% endfor %}
    {% endif %}
    
    {% if model.name == "BaseNode" %}
    # Common model configuration
    model_config = {
        "extra": "forbid",
        "validate_assignment": True,
        "arbitrary_types_allowed": True,
    }
    {% endif %}
    
    {% if model.fields %}
    def dict(self, **kwargs) -> Dict[str, Any]:
        """Override dict to handle custom serialization."""
        # Remove None values for cleaner output
        data = super().dict(**kwargs)
        return {k: v for k, v in data.items() if v is not None}
    {% endif %}

{% endif %}
{% endfor %}

# Helper functions
def validate_node_type(node_type: str) -> str:
    """Validate that node_type is a valid NodeType."""
    try:
        NodeType(node_type)
        return node_type
    except ValueError:
        raise ValueError(f"Invalid node type: {node_type}")


def validate_handle(handle: str) -> str:
    """Validate handle format."""
    if not handle or not isinstance(handle, str):
        raise ValueError("Handle must be a non-empty string")
    return handle


# Model registry for dynamic instantiation
MODEL_REGISTRY = {
    {% for model in model_data.models %}
    {% if model.type == "class" and model.name.endswith("Node") %}
    "{{ model.name }}": {{ model.name }},
    {% endif %}
    {% endfor %}
}


def create_node_model(node_type: str, data: Dict[str, Any]) -> BaseModel:
    """Create a node model instance based on node type."""
    model_name = f"{node_type.replace('_', ' ').title().replace(' ', '')}Node"
    model_class = MODEL_REGISTRY.get(model_name)
    
    if not model_class:
        raise ValueError(f"Unknown node type: {node_type}")
    
    return model_class(**data)