# Parse Single Node Data File
# Loads cached AST data for a single node data TypeScript file to extract interface

version: light

nodes:
  - label: Start
    type: start
    position: {x: 50, y: 200}
    
  # Parse input to get node type
  - label: Parse Input
    type: code_job
    position: {x: 150, y: 200}
    props:
      language: python
      code: |
        # Handle input from batch processing
        # In batch mode, the item data is available in 'default' variable
        # Try to get node_type from default first (batch case), then inputs
        node_type = None
        
        
        # Try getting from default variable (batch processing)
        if 'default' in locals():
            if isinstance(default, dict) and 'node_type' in default:
                node_type = default['node_type']
            elif isinstance(default, str):
                node_type = default
        
        # If not found, try inputs
        if not node_type and 'node_type' in inputs:
            node_type = inputs['node_type']
        
        # If still not found, check if default is in inputs
        if not node_type and 'default' in inputs:
            default_data = inputs['default']
            if isinstance(default_data, dict) and 'node_type' in default_data:
                node_type = default_data['node_type']
        
        if not node_type:
            # Debug output to understand what we're receiving
            debug_info = {
                'inputs': inputs,
                'has_default_var': 'default' in locals(),
                'default_value': locals().get('default', 'NOT_FOUND')
            }
            raise ValueError(f"node_type not provided in input. Debug: {debug_info}")
        
        # Convert underscore to hyphen for cache filename
        cache_filename = node_type.replace('_', '-') + '_data'
        
        result = {"node_type": node_type, "cache_filename": cache_filename}
  
  # Load cached AST data for this node type
  - label: Load Cached AST
    type: db
    position: {x: 350, y: 200}
    props:
      operation: read
      sub_type: file
      source_details: .temp/{data.cache_filename}_ast.json
      
  # Extract interface data from cached AST
  - label: Extract Interface
    type: code_job
    position: {x: 550, y: 200}
    props:
      language: python
      code: |
        import json
        
        # Parse cached AST data
        ast_data = inputs.get('ast_data', {})
        if isinstance(ast_data, str):
            ast_data = json.loads(ast_data)
        
        node_info = inputs.get('node_info', {})
        node_type = node_info.get('node_type', 'unknown')
        
        interfaces = ast_data.get('interfaces', [])
        types = ast_data.get('types', [])
        
        # Find the interface or type for this node type
        interface_name = None
        interface_data = None
        
        # First check interfaces
        for iface in interfaces:
            name = iface.get('name', '')
            # Match interface name pattern like PersonJobNodeData
            if name.endswith('NodeData'):
                interface_data = iface
                interface_name = name
                break
        
        # If not found in interfaces, check types
        if not interface_data:
            for type_def in types:
                name = type_def.get('name', '')
                if name.endswith('NodeData'):
                    interface_data = type_def
                    interface_name = name
                    break
        
        if not interface_data:
            # If still not found, try to handle cases where data might be missing
            # Return a placeholder that won't break the parent process
            result = {
                'node_type': node_type,
                'interface_name': None,
                'interface': None,
                'error': f"No interface or type found for node type: {node_type}"
            }
        else:
            result = {
                'node_type': node_type,
                'interface_name': interface_name,
                'interface': interface_data
            }
        
  # Save result to temp file
  - label: Save to Temp
    type: code_job
    position: {x: 750, y: 200}
    props:
      language: python
      code: |
        import json
        import os
        
        # Get interface data
        interface_data = inputs.get('interface_data', {})
        
        # Create temp directory if it doesn't exist
        temp_dir = '.temp/codegen/node_data'
        os.makedirs(temp_dir, exist_ok=True)
        
        # Save to temp file
        node_type = interface_data.get('node_type', 'unknown')
        temp_file = os.path.join(temp_dir, f"{node_type}.json")
        
        with open(temp_file, 'w') as f:
            json.dump(interface_data, f, indent=2)
        
        result = {"saved": temp_file}
      
connections:
  - from: Start
    to: Parse Input
    
  - from: Parse Input
    to: Load Cached AST
    label: data
    content_type: object
    
  - from: Load Cached AST
    to: Extract Interface
    label: ast_data
    
  - from: Parse Input
    to: Extract Interface
    label: node_info
    
  - from: Extract Interface
    to: Save to Temp
    label: interface_data