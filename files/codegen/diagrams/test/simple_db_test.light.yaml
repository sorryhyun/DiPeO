# Simple DB Node Test Diagram
# Tests basic DB read/write functionality

version: light

nodes:
  - label: Start
    type: start
    position: {x: 50, y: 200}

  - label: Read Test File
    type: db
    position: {x: 200, y: 200}
    props:
      operation: read
      sub_type: file
      source_details: files/codegen/manifests/frontend.json

  - label: Process Data
    type: code_job
    position: {x: 400, y: 200}
    props:
      language: python
      code: |
        # Test that we received the file content
        import json
        
        print(f"Input type: {type(file_content)}")
        print(f"Input content preview: {str(file_content)[:100]}...")
        
        # Try to parse as JSON
        try:
            data = json.loads(file_content) if isinstance(file_content, str) else file_content
            node_count = len(data.get('nodes', []))
            result = f"Successfully read manifest with {node_count} nodes"
        except Exception as e:
            result = f"Error processing data: {e}"

  - label: Write Test Result
    type: db
    position: {x: 600, y: 200}
    props:
      operation: write
      sub_type: file
      source_details: files/codegen/test_output.txt

  - label: End
    type: endpoint
    position: {x: 800, y: 200}
    props:
      file_format: txt
      save_to_file: false

connections:
  - from: Start
    to: Read Test File
  
  - from: Read Test File
    to: Process Data
    label: file_content
    
  - from: Process Data
    to: Write Test Result
    label: result
    
  - from: Write Test Result
    to: End