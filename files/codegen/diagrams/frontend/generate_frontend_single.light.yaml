# Frontend Single Node Generation Diagram
# Generates TypeScript model, node config, and field config for a single node type

version: light

nodes:
  # Start node - no custom_data needed
  - label: Start
    type: start
    position: {x: 50, y: 100}

  # Parse input to handle both direct variables and nested inputs
  - label: Parse Input
    type: code_job
    position: {x: 50, y: 150}
    props:
      language: python
      code: |
        # Handle both direct input (from CLI) and nested input (from sub_diagram)
        # Input could be:
        # 1. Direct: {"node_spec_path": "person_job"} (from CLI --input-data)
        # 2. Nested: {"default": {"node_spec_path": "person_job"}} (from sub_diagram)
        
        if "node_spec_path" in default:
            # Direct case - pass through the dict
            result = {"node_spec_path": default["node_spec_path"]}
        elif "default" in default and isinstance(default["default"], dict) and "node_spec_path" in default["default"]:
            # Nested case from sub_diagram - extract and restructure
            result = {"node_spec_path": default["default"]["node_spec_path"]}
        else:
            raise ValueError(f"node_spec_path not found in input: {default}")

  # Load node specification
  - label: Load Node Spec
    type: db
    position: {x: 100, y: 200}
    props:
      operation: read
      sub_type: file
      source_details: files/codegen/specifications/nodes/{default.node_spec_path}.json
      
  # Load frontend templates
  - label: Load TypeScript Template
    type: db
    position: {x: 100, y: 300}
    props:
      operation: read
      sub_type: file
      source_details: files/codegen/templates/frontend/typescript_model.j2
  
  - label: Load Node Config Template
    type: db
    position: {x: 100, y: 400}
    props:
      operation: read
      sub_type: file
      source_details: files/codegen/templates/frontend/node_config.j2

  - label: Load Field Config Template
    type: db
    position: {x: 100, y: 500}
    props:
      operation: read
      sub_type: file
      source_details: files/codegen/templates/frontend/field_config.j2

  # Generate frontend code
  - label: Generate TypeScript Model
    type: code_job
    position: {x: 400, y: 300}
    props:
      language: python
      filePath: files/codegen/code/frontend/generators/typescript_model.py
      functionName: main
  
  - label: Generate Node Config
    type: code_job
    position: {x: 400, y: 400}
    props:
      language: python
      filePath: files/codegen/code/frontend/generators/node_config.py
      functionName: main

  - label: Generate Field Config
    type: code_job
    position: {x: 400, y: 500}
    props:
      language: python
      filePath: files/codegen/code/frontend/generators/field_config.py
      functionName: main

  # Extract node type from spec for file paths
  - label: Extract Node Type
    type: code_job
    position: {x: 250, y: 100}
    props:
      language: python
      code: |
        # Extract node type from spec for use in file paths
        from files.codegen.code.shared.filters import pascal_case
        spec = spec_data
        node_type = spec.get('nodeType', 'unknown')
        node_name = pascal_case(node_type)
        result = {
            'node_type': node_type,
            'node_name': node_name
        }

  # Write frontend outputs
  - label: Write TypeScript Model
    type: db
    position: {x: 700, y: 300}
    props:
      operation: write
      sub_type: file
      source_details: apps/web/src/__generated__/{node_naming.node_name}Node.ts
  
  - label: Write Node Config
    type: db
    position: {x: 700, y: 400}
    props:
      operation: write
      sub_type: file
      source_details: apps/web/src/__generated__/nodes/{node_naming.node_name}Config.ts

  - label: Write Field Config
    type: db
    position: {x: 700, y: 500}
    props:
      operation: write
      sub_type: file
      source_details: apps/web/src/__generated__/{node_naming.node_name}Fields.ts

connections:
  # Parse input first to handle nested structures
  - from: Start
    to: Parse Input
    
  # Pass parsed node_spec_path for placeholder resolution
  - from: Parse Input
    to: Load Node Spec
    
  # Pass spec to extract node type
  - from: Load Node Spec
    to: Extract Node Type
    label: spec_data
    
  # Pass node naming to all writers (for file paths)
  - from: Extract Node Type
    to: Write TypeScript Model
    label: node_naming
  - from: Extract Node Type
    to: Write Node Config
    label: node_naming
  - from: Extract Node Type
    to: Write Field Config
    label: node_naming

  # Connect spec and templates to TypeScript generator
  - from: Load Node Spec
    to: Generate TypeScript Model
    label: spec_data
  - from: Load TypeScript Template
    to: Generate TypeScript Model
    label: template_content
  
  # Connect spec and templates to Node Config generator  
  - from: Load Node Spec
    to: Generate Node Config
    label: spec_data
  - from: Load Node Config Template
    to: Generate Node Config
    label: template_content

  # Connect spec and templates to Field Config generator
  - from: Load Node Spec
    to: Generate Field Config
    label: spec_data
  - from: Load Field Config Template
    to: Generate Field Config
    label: template_content
  
  # Connect generators to writers (passing generated code)
  - from: Generate TypeScript Model
    to: Write TypeScript Model
    label: generated_code
  - from: Generate Node Config
    to: Write Node Config
    label: generated_code
  - from: Generate Field Config
    to: Write Field Config
    label: generated_code