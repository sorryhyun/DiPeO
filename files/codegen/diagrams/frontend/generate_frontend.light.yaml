# Frontend Batch Generation with TypeScript Specifications
# Uses the TypeScript specification parser to generate frontend files for multiple node types

version: light

nodes:
  - label: Start
    type: start
    position: {x: 50, y: 200}
    props:
      custom_data:
        message: Starting batch generation using TypeScript specifications

  # Run batch parser for all node specs
  - label: Parse All Node Specs
    type: sub_diagram
    position: {x: 200, y: 200}
    props:
      diagram_name: codegen/diagrams/shared/parse_all_node_specs_batch
      diagram_format: light
      passInputData: false
      ignoreIfSub: true

  - label: Load Manifest
    type: db
    position: {x: 350, y: 200}
    props:
      file: files/codegen/manifests/all.json
      operation: read

  - label: Prepare Node List
    type: code_job
    position: {x: 500, y: 200}
    props:
      language: python
      code: |
        # DB node now returns DataOutput, no need to parse JSON
        manifest_data = inputs.get('default', {})
        
        # Get node types from manifest
        node_types = manifest_data.get('nodes', [])
        
        if not node_types:
            raise ValueError("No node types found in manifest")
        
        # Create array of inputs for batch processing
        result = {
            'items': [{'node_spec_path': node_type} for node_type in node_types]
        }
        
        print(f"Generating frontend files for {len(node_types)} nodes from TypeScript specifications:")
        for nt in node_types:
            print(f"  - {nt}")

  - label: Batch Generate Frontend
    type: sub_diagram
    position: {x: 700, y: 200}
    props:
      diagram_name: codegen/diagrams/frontend/generate_frontend_single_ts
      diagram_format: light
      batch: true  # Enable batch mode
      batch_input_key: items  # Use 'items' key from input
      batch_parallel: true  # Process in parallel

  - label: Process Results
    type: code_job
    position: {x: 900, y: 200}
    props:
      language: python
      code: |
        # Process batch results
        batch_results = inputs.get('default', {})
        
        total = batch_results.get('total_items', 0)
        successful = batch_results.get('successful', 0)
        failed = batch_results.get('failed', 0)
        
        print(f"\n=== TypeScript Batch Generation Summary ===")
        print(f"Total items: {total}")
        print(f"Successful: {successful}")
        print(f"Failed: {failed}")
        
        if batch_results.get('errors'):
            print("\nErrors:")
            for error in batch_results['errors']:
                print(f"  - Item {error['index']}: {error['error']}")
        
        # Extract generated file counts
        results = batch_results.get('results', [])
        total_files = 0
        for r in results:
            if isinstance(r, dict) and 'files_generated' in r:
                total_files += r['files_generated']
        
        result = {
            'message': f'TypeScript batch generation completed: {successful}/{total} successful',
            'total_files_generated': total_files,
            'status': 'success' if failed == 0 else 'partial_failure'
        }

  - label: Generate Registry
    type: sub_diagram
    position: {x: 1100, y: 200}
    props:
      diagram_name: codegen/diagrams/frontend/generate_frontend_registry
      diagram_format: light

  - label: Generate GraphQL Queries
    type: sub_diagram
    position: {x: 1300, y: 200}
    props:
      diagram_name: codegen/diagrams/frontend/generate_graphql_queries
      diagram_format: light

  - label: Generate Zod Schemas
    type: sub_diagram
    position: {x: 1300, y: 300}
    props:
      diagram_name: codegen/diagrams/frontend/generate_zod_schemas
      diagram_format: light

  - label: End
    type: endpoint
    position: {x: 1500, y: 200}
    props:
      save_to_file: false

connections:
  - from: Start
    to: Parse All Node Specs
  
  - from: Parse All Node Specs
    to: Load Manifest
  
  - from: Load Manifest
    to: Prepare Node List
  
  - from: Prepare Node List
    to: Batch Generate Frontend
  
  - from: Batch Generate Frontend
    to: Process Results
  
  - from: Process Results
    to: Generate Registry
  
  - from: Generate Registry
    to: Generate GraphQL Queries
  
  - from: Generate Registry
    to: Generate Zod Schemas
  
  - from: Generate GraphQL Queries
    to: End
  
  - from: Generate Zod Schemas
    to: End