# Frontend All Generation Diagram - With Iteration
# Generates all frontend artifacts dynamically from manifest

version: light

nodes:
  - label: Start
    type: start
    position: {x: 50, y: 200}

  - label: Initialize
    type: code_job
    position: {x: 200, y: 200}
    props:
      code: |
        # Load manifest
        import json
        with open('files/codegen/manifests/frontend.json', 'r') as f:
            manifest = json.load(f)
        
        # Set up iteration variables
        nodes_list = manifest.get('nodes', [])
        idx = 0
        total = len(nodes_list)
        processed = []
        
        print(f"Will process {total} nodes: {nodes_list}")
        result = "initialized"
      code_type: python

  - label: Check Condition
    type: condition
    position: {x: 400, y: 200}
    props:
      condition_type: custom
      expression: idx < total

  - label: Process Node
    type: code_job
    position: {x: 600, y: 150}
    props:
      code: |
        # Get current node
        current_node = nodes_list[idx]
        print(f"\n=== Processing {idx+1}/{total}: {current_node} ===")
        
        # Run the single generator
        import subprocess
        import sys
        import json
        
        cmd = [
            sys.executable, "-m", "dipeo", "run",
            "codegen/diagrams/frontend/generate_frontend_single",
            "--light", "--no-browser", "--timeout=15",
            "--input-data", json.dumps({"node_spec_path": current_node})
        ]
        
        try:
            result = subprocess.run(cmd, capture_output=True, text=True, check=True)
            print(f"✓ Generated files for {current_node}")
            processed.append(current_node)
        except subprocess.CalledProcessError as e:
            print(f"✗ Failed for {current_node}: {e}")
        
        # Increment counter
        idx += 1
        
        result = f"Processed {current_node}"
      code_type: python

  - label: Finalize
    type: code_job
    position: {x: 600, y: 300}
    props:
      code: |
        print(f"\n=== Generation Complete ===")
        print(f"Processed {len(processed)}/{total} nodes successfully")
        print(f"Nodes: {processed}")
        
        result = {
            "total": total,
            "processed": processed,
            "success": len(processed) == total
        }
      code_type: python

  - label: End
    type: endpoint
    position: {x: 800, y: 300}
    props:
      file_format: json
      save_to_file: false

connections:
  - from: Start
    to: Initialize
  
  - from: Initialize
    to: Check Condition
  
  - from: Check Condition_condtrue
    to: Process Node
  
  - from: Process Node
    to: Check Condition
  
  - from: Check Condition_condfalse
    to: Finalize
  
  - from: Finalize
    to: End