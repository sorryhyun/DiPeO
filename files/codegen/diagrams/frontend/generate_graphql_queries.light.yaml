# Generate GraphQL queries from domain model specifications
# Uses the query specifications defined in @dipeo/models/src/frontend

version: light

nodes:
  - label: Start
    type: start
    position: {x: 50, y: 200}
    props:
      custom_data:
        message: Starting GraphQL query generation from domain specifications

  - label: Generate Queries
    type: code_job
    position: {x: 300, y: 200}
    props:
      language: python
      code: |
        import os
        import sys
        sys.path.append('/home/soryhyun/DiPeO/files/codegen/code')
        
        from frontend.generators.query_generator_dipeo import DiPeOQueryGenerator
        
        # Output directory for generated queries
        output_dir = '/home/soryhyun/DiPeO/apps/web/src/__generated__/queries'
        
        # Create generator and generate all queries
        generator = DiPeOQueryGenerator(output_dir)
        generator.generate_all_queries()
        
        result = {
            'message': 'GraphQL queries generated successfully',
            'output_dir': output_dir,
            'entities': ['Diagram', 'Person', 'Execution']
        }

  - label: Verify Generated Files
    type: code_job
    position: {x: 500, y: 200}
    props:
      language: python
      code: |
        import os
        from pathlib import Path
        
        output_dir = inputs['default']['output_dir']
        entities = inputs['default']['entities']
        
        # Check that all expected files were generated
        generated_files = []
        missing_files = []
        
        # Update entity filenames to match actual naming
        expected_files = [
            'diagrams.graphql',
            'persons.graphql', 
            'executions.graphql',
            'apiKeys.graphql',
            'files.graphql',
            'formats.graphql',
            'nodes.graphql',
            'system.graphql',
            'prompts.graphql',
            'conversations.graphql'
        ]
        
        for filename in expected_files:
            file_path = Path(output_dir) / filename
            if file_path.exists():
                generated_files.append(str(file_path))
            else:
                missing_files.append(str(file_path))
        
        print(f"\nGenerated {len(generated_files)} query files:")
        for f in generated_files:
            print(f"  ✓ {f}")
        
        if missing_files:
            print(f"\nMissing files:")
            for f in missing_files:
                print(f"  ✗ {f}")
        
        result = {
            'success': len(missing_files) == 0,
            'generated_count': len(generated_files),
            'files': generated_files
        }

  - label: End
    type: endpoint
    position: {x: 700, y: 200}
    props:
      save_to_file: false

connections:
  - from: Start
    to: Generate Queries
  
  - from: Generate Queries
    to: Verify Generated Files
  
  - from: Verify Generated Files
    to: End