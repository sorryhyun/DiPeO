# Generate Strawberry GraphQL Types from Node Specifications
# Generates type-safe GraphQL types using Strawberry's Pydantic integration

version: light

nodes:
  - label: Start
    type: start
    position: {x: 50, y: 300}
    props:
      custom_data:
        message: Starting Strawberry GraphQL types generation

  # Run batch parser if cache doesn't exist
  - label: Parse Node Specs Batch
    type: sub_diagram
    position: {x: 200, y: 300}
    props:
      diagram_name: codegen/diagrams/shared/parse_all_node_specs_batch
      diagram_format: light
      passInputData: false
      ignoreIfSub: true

  # Extract node specifications
  - label: Extract Node Specs
    type: code_job
    position: {x: 400, y: 300}
    props:
      language: python
      filePath: files/codegen/code/models/generate_strawberry_types/strawberry_types_generator.py
      functionName: extract_node_specs

  # Generate Strawberry types
  - label: Generate Strawberry Types
    type: code_job
    position: {x: 600, y: 300}
    props:
      language: python
      filePath: files/codegen/code/models/generate_strawberry_types/strawberry_types_generator.py
      functionName: generate_strawberry_types

  # Load Strawberry types template
  - label: Load Types Template
    type: db
    position: {x: 600, y: 200}
    props:
      operation: read
      sub_type: file
      source_details: files/codegen/templates/models/strawberry_types.j2

  # Prepare template data
  - label: Prepare Template Data
    type: code_job
    position: {x: 800, y: 300}
    props:
      language: python
      filePath: files/codegen/code/models/generate_strawberry_types/strawberry_types_generator.py
      functionName: prepare_template_data

  # Render Strawberry types
  - label: Render Types
    type: code_job
    position: {x: 1000, y: 300}
    props:
      language: python
      filePath: files/codegen/code/models/generate_strawberry_types/strawberry_types_generator.py
      functionName: render_strawberry_schema

  # Write Strawberry types file to staged
  - label: Write Types File
    type: db
    position: {x: 1000, y: 300}
    props:
      operation: write
      sub_type: file
      source_details: dipeo/diagram_generated_staged/graphql/strawberry_nodes.py

  - label: End
    type: endpoint
    position: {x: 1200, y: 300}
    props:
      save_to_file: false

connections:
  # Parse specs first
  - from: Start
    to: Parse Node Specs Batch
  
  # Extract specifications
  - from: Parse Node Specs Batch
    to: Extract Node Specs
  
  # Generate types
  - from: Extract Node Specs
    to: Generate Strawberry Types
    label: node_specs
  
  # Pass strawberry types to prepare step
  - from: Generate Strawberry Types
    to: Prepare Template Data
    label: strawberry_types
  
  # Pass prepared data and template to render
  - from: Prepare Template Data
    to: Render Types
    label: default
  - from: Load Types Template
    to: Render Types
    label: template_content
  
  # Write file
  - from: Render Types
    to: Write Types File
    label: generated_code
  
  - from: Write Types File
    to: End