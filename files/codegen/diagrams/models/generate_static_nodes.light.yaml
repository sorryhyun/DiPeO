# Generate Static Node Classes from Domain Models
# Replaces dipeo/models/scripts/generate-static-nodes.ts
# Generates Python static node classes from TypeScript domain model interfaces

version: light

nodes:
  - label: Start
    type: start
    position: {x: 50, y: 300}
    props:
      custom_data:
        message: Starting static nodes generation from cached AST data

  # Run batch parser if cache doesn't exist
  - label: Parse TypeScript Batch
    type: sub_diagram
    position: {x: 200, y: 300}
    props:
      diagram_name: codegen/diagrams/models/parse_all_typescript_batch
      diagram_format: light
      passInputData: false
      ignoreIfSub: true

  # Load cached codegen mappings AST
  - label: Load Mappings AST
    type: db
    position: {x: 400, y: 150}
    props:
      operation: read
      sub_type: file
      source_details: .temp/codegen_mappings_ast.json

  # Extract mappings
  - label: Extract Mappings
    type: code_job
    position: {x: 600, y: 150}
    props:
      language: python
      filePath: files/codegen/code/shared/extract_mappings.py
      functionName: main

  # Load manifest to get node types
  - label: Load Manifest
    type: db
    position: {x: 400, y: 300}
    props:
      operation: read
      sub_type: file
      source_details: files/codegen/manifests/all.json

  # Prepare temp directory and node list
  - label: Prepare Batch Processing
    type: code_job
    position: {x: 600, y: 300}
    props:
      language: python
      filePath: files/codegen/code/models/generate_static_nodes/setup_node_batch.py
      functionName: setup_node_batch

  # Batch parse node data files
  - label: Batch Parse Node Data
    type: sub_diagram
    position: {x: 800, y: 300}
    props:
      diagram_name: codegen/diagrams/shared/parse_node_data_single
      diagram_format: light
      batch: true
      batch_input_key: items
      batch_parallel: true

  # Load cached diagram AST for BaseNodeData
  - label: Load Diagram AST
    type: db
    position: {x: 400, y: 450}
    props:
      operation: read
      sub_type: file
      source_details: .temp/diagram_ast.json

  # Extract BaseNodeData interface
  - label: Extract Base Interface
    type: code_job
    position: {x: 600, y: 450}
    props:
      language: python
      filePath: files/codegen/code/models/generate_static_nodes/extract_base_interface.py
      functionName: extract_base_interface

  # Read all temp files
  - label: Read Temp Results
    type: code_job
    position: {x: 1000, y: 400}
    props:
      language: python
      filePath: files/codegen/code/models/generate_static_nodes/read_batch_results.py
      functionName: read_batch_results

  # Generate static nodes from all parsed data
  - label: Generate Static Nodes
    type: code_job
    position: {x: 1000, y: 300}
    props:
      language: python
      filePath: files/codegen/code/models/generate_static_nodes/generate_static_nodes.py
      functionName: generate_static_nodes

  # Generate Python code using template
  - label: Generate Python Code
    type: template_job
    position: {x: 1200, y: 300}
    props:
      engine: jinja2
      template_path: files/codegen/templates/models/static_nodes_all.j2
      output_path: dipeo/diagram_generated_staged/generated_nodes.py
      # Template will automatically receive inputs from connections
      variables:
        # Define enum fields mapping
        enum_fields:
          method: HttpMethod
          language: SupportedLanguage
          sub_type: DBBlockSubType
          hook_type: HookType
          operation: NotionOperation
          trigger_mode: HookTriggerMode
          diagram_format: DiagramFormat
          memory_profile: MemoryProfile
          tools: ToolSelection

  # Generate success summary
  - label: Generate Summary
    type: code_job
    position: {x: 1600, y: 300}
    props:
      language: python
      filePath: files/codegen/code/shared/generators/summary_generator.py
      functionName: main

  - label: End
    type: endpoint
    position: {x: 1800, y: 300}
    props:
      save_to_file: false

connections:
  # Run batch parser first
  - from: Start
    to: Parse TypeScript Batch
  
  # Load cached data after parsing
  - from: Parse TypeScript Batch
    to: Load Mappings AST
  - from: Parse TypeScript Batch
    to: Load Manifest
  - from: Parse TypeScript Batch
    to: Load Diagram AST
  
  # Extract mappings
  - from: Load Mappings AST
    to: Extract Mappings
    label: default
  
  # Prepare batch processing
  - from: Load Manifest
    to: Prepare Batch Processing
    label: manifest
  
  # Batch parse node data
  - from: Prepare Batch Processing
    to: Batch Parse Node Data
    label: default
  
  # Extract base interface
  - from: Load Diagram AST
    to: Extract Base Interface
    label: diagram_ast
  
  # Read temp results after batch processing
  - from: Batch Parse Node Data
    to: Read Temp Results
  - from: Prepare Batch Processing
    to: Read Temp Results
    label: batch_info
  
  # Generate static nodes with all inputs
  - from: Read Temp Results
    to: Generate Static Nodes
    label: temp_results
  - from: Extract Mappings
    to: Generate Static Nodes
    label: mappings
  - from: Extract Base Interface
    to: Generate Static Nodes
    label: base_data
  
  # Generate Python code
  - from: Generate Static Nodes
    to: Generate Python Code
    label: static_nodes_data
  
  # Summary and End
  - from: Generate Static Nodes
    to: Generate Summary
    label: static_nodes_data
  - from: Generate Python Code
    to: End
  - from: Generate Summary
    to: End