# Generate All Domain Models
# Master diagram that orchestrates all domain model generation
# Replaces: make codegen-models

version: light

nodes:
  - label: Start
    type: start
    position: {x: 50, y: 300}
    props:
      custom_data:
        message: Starting complete domain model generation pipeline

  # Parse all TypeScript files once
  - label: Parse All TypeScript
    type: sub_diagram
    position: {x: 200, y: 300}
    props:
      diagram_name: codegen/diagrams/shared/parse_typescript_batch
      diagram_format: light
      passInputData: false

  # Generate Python models
  - label: Generate Python Models
    type: sub_diagram
    position: {x: 400, y: 100}
    props:
      diagram_name: codegen/diagrams/models/generate_python_models_dynamic
      diagram_format: light
      passInputData: false

  # Generate enums
  - label: Generate Enums
    type: sub_diagram
    position: {x: 400, y: 150}
    props:
      diagram_name: codegen/diagrams/models/generate_enums
      diagram_format: light
      passInputData: false

  # Generate integrations
  - label: Generate Integrations
    type: sub_diagram
    position: {x: 400, y: 200}
    props:
      diagram_name: codegen/diagrams/models/generate_integrations
      diagram_format: light
      passInputData: false

  # Generate conversions
  - label: Generate Conversions
    type: sub_diagram
    position: {x: 400, y: 300}
    props:
      diagram_name: codegen/diagrams/models/generate_conversions
      diagram_format: light
      passInputData: false

  # Generate GraphQL schema
  - label: Generate GraphQL Schema
    type: sub_diagram
    position: {x: 400, y: 550}
    props:
      diagram_name: codegen/diagrams/models/generate_graphql_schema_template_dynamic
      diagram_format: light
      passInputData: false

  # Generate static nodes
  - label: Generate Static Nodes
    type: sub_diagram
    position: {x: 400, y: 650}
    props:
      diagram_name: codegen/diagrams/models/generate_static_nodes
      diagram_format: light
      passInputData: false

  # Generate Strawberry GraphQL types
  - label: Generate Strawberry Types
    type: sub_diagram
    position: {x: 400, y: 450}
    props:
      diagram_name: codegen/diagrams/models/generate_strawberry_types_v2_dynamic
      diagram_format: light
      passInputData: false

  # Generate Strawberry GraphQL mutations
  - label: Generate Strawberry Mutations
    type: sub_diagram
    position: {x: 400, y: 500}
    props:
      diagram_name: codegen/diagrams/models/generate_strawberry_mutations_v2
      diagram_format: light
      passInputData: false

  # Generate Validation Models (JSON Schema + Pydantic)
  - label: Generate Validation Models
    type: sub_diagram
    position: {x: 400, y: 250}
    props:
      diagram_name: codegen/diagrams/models/generate_validation_models
      diagram_format: light
      passInputData: false

  # Generate TypeScript Indexes (core/nodes and specifications/nodes)
  - label: Generate TypeScript Indexes
    type: code_job
    position: {x: 400, y: 375}
    props:
      language: python
      filePath: files/codegen/code/models/generate_typescript_indexes.py
      functionName: main

  # Build TypeScript models
  - label: Build TypeScript Models
    type: code_job
    position: {x: 600, y: 400}
    props:
      language: bash
      code: |
        cd dipeo/models && pnpm build
        echo "TypeScript models built successfully"

  # Generate summary report
  - label: Generate Summary
    type: code_job
    position: {x: 800, y: 400}
    props:
      language: python
      code: |
        from datetime import datetime
        import json
        
        # Collect results from all sub-diagrams
        python_models = inputs.get('python_models', {})
        enums = inputs.get('enums', {})
        integrations = inputs.get('integrations', {})
        conversions = inputs.get('conversions', {})
        field_configs = inputs.get('field_configs', {})
        graphql_schema = inputs.get('graphql_schema', {})
        static_nodes = inputs.get('static_nodes', {})
        build_result = inputs.get('build_result', {})
        
        print(f"Model generation complete - 11 artifact types generated - done!")
        
        result = {
            'status': 'success',
            'message': 'All domain models generated successfully',
            'artifacts': {
                'python_models': 'dipeo/diagram_generated_staged/domain_models.py',
                'enums': 'dipeo/diagram_generated_staged/enums.py',
                'integrations': 'dipeo/diagram_generated_staged/integrations.py',
                'conversions': 'dipeo/diagram_generated_staged/conversions.py',
                'field_configs': 'apps/web/src/__generated__/fields.ts',
                'zod_schemas': 'apps/web/src/__generated__/schemas.ts',
                'graphql_schema': 'dipeo/diagram_generated_staged/domain-schema.graphql',
                'static_nodes': 'dipeo/diagram_generated_staged/generated_nodes.py'
            }
        }

  - label: End
    type: endpoint
    position: {x: 1000, y: 400}
    props:
      save_to_file: false

connections:
  # First parse all TypeScript files to create cache
  - {from: Start, to: Parse All TypeScript}
  
  # After cache is created, start all generation tasks in parallel
  - {from: Parse All TypeScript, to: Generate Python Models}
  - {from: Parse All TypeScript, to: Generate Enums}
  - {from: Parse All TypeScript, to: Generate Integrations}
  - {from: Parse All TypeScript, to: Generate Conversions}
  - {from: Parse All TypeScript, to: Generate GraphQL Schema}
  - {from: Parse All TypeScript, to: Generate Static Nodes}
  - {from: Parse All TypeScript, to: Generate Strawberry Types}
  - {from: Parse All TypeScript, to: Generate Strawberry Mutations}
  - {from: Parse All TypeScript, to: Generate Validation Models}
  - {from: Parse All TypeScript, to: Generate TypeScript Indexes}
  
  # Python generation tasks connect directly to Generate Summary
  - {from: Generate Python Models, to: Generate Summary, label: python_models}
  - {from: Generate Enums, to: Generate Summary, label: enums}
  - {from: Generate Integrations, to: Generate Summary, label: integrations}
  - {from: Generate Conversions, to: Generate Summary, label: conversions}
  - {from: Generate GraphQL Schema, to: Generate Summary, label: graphql_schema}
  - {from: Generate Static Nodes, to: Generate Summary, label: static_nodes}
  - {from: Generate Strawberry Types, to: Generate Summary, label: strawberry_types}
  - {from: Generate Strawberry Mutations, to: Generate Summary, label: strawberry_mutations}
  - {from: Generate Validation Models, to: Generate Summary, label: validation_models}
  - {from: Generate TypeScript Indexes, to: Generate Summary, label: typescript_indexes}
  
  # Build TypeScript after summary
  - {from: Generate Summary, to: Build TypeScript Models}
  
  # Connect build result to End
  - {from: Build TypeScript Models, to: End, label: build_result}
  - {from: Generate Summary, to: End}