# Generate GraphQL Schema from Domain Models
# Generates GraphQL type definitions from TypeScript domain models using cached AST data

version: light

nodes:
  - label: Start
    type: start
    position: {x: 50, y: 300}
    props:
      custom_data:
        message: Starting GraphQL schema generation from cached AST data

  # Run batch parser if cache doesn't exist
  - label: Parse TypeScript Batch
    type: sub_diagram
    position: {x: 200, y: 300}
    props:
      diagram_name: codegen/diagrams/models/parse_all_typescript_batch
      diagram_format: light
      passInputData: false

  # Load cached AST data
  - label: Load Diagram AST
    type: db
    position: {x: 400, y: 200}
    props:
      operation: read
      sub_type: file
      source_details: apps/server/.temp/ast_cache/diagram_ast.json

  - label: Load Execution AST
    type: db
    position: {x: 400, y: 300}
    props:
      operation: read
      sub_type: file
      source_details: apps/server/.temp/ast_cache/execution_ast.json

  - label: Load Conversation AST
    type: db
    position: {x: 400, y: 400}
    props:
      operation: read
      sub_type: file
      source_details: apps/server/.temp/ast_cache/conversation_ast.json

  - label: Load Enums AST
    type: db
    position: {x: 400, y: 500}
    props:
      operation: read
      sub_type: file
      source_details: apps/server/.temp/ast_cache/enums_ast.json

  # Combine all node data AST files
  - label: Combine Node Data AST
    type: code_job
    position: {x: 400, y: 600}
    props:
      language: python
      code: |
        import json
        import os
        from pathlib import Path
        
        # Get base directory
        base_dir = Path(os.getenv('DIPEO_BASE_DIR', os.getcwd()))
        
        # Read all node data AST files from cache
        cache_dir = base_dir / 'apps/server/.temp/ast_cache'
        
        # Combine all interfaces, types, and enums from node data files
        all_interfaces = []
        all_types = []
        all_enums = []
        
        # List of node data cache files
        node_data_files = [
            'start_data_ast.json', 'condition_data_ast.json', 'person-job_data_ast.json',
            'code-job_data_ast.json', 'api-job_data_ast.json', 'endpoint_data_ast.json',
            'db_data_ast.json', 'user-response_data_ast.json', 'notion_data_ast.json',
            'person-batch-job_data_ast.json', 'hook_data_ast.json', 'template-job_data_ast.json',
            'json-schema-validator_data_ast.json', 'typescript-ast_data_ast.json', 'sub-diagram_data_ast.json'
        ]
        
        print(f"Looking for cache files in: {cache_dir}")
        
        for filename in node_data_files:
            file_path = cache_dir / filename
            if file_path.exists():
                try:
                    with open(file_path, 'r') as f:
                        data = json.load(f)
                        all_interfaces.extend(data.get('interfaces', []))
                        all_types.extend(data.get('types', []))
                        all_enums.extend(data.get('enums', []))
                        print(f"  Loaded {filename}: {len(data.get('interfaces', []))} interfaces")
                except Exception as e:
                    print(f"  Error reading {filename}: {e}")
            else:
                print(f"  File not found: {filename}")
        
        print(f"Combined node data: {len(all_interfaces)} interfaces, {len(all_types)} types, {len(all_enums)} enums")
        
        result = {
            'interfaces': all_interfaces,
            'types': all_types,
            'enums': all_enums
        }


  # Extract GraphQL types
  - label: Extract GraphQL Types
    type: code_job
    position: {x: 600, y: 400}
    props:
      language: python
      filePath: files/codegen/code/models/extractors/graphql_types_extractor.py
      functionName: main

  # Load GraphQL template
  - label: Load GraphQL Template
    type: db
    position: {x: 600, y: 450}
    props:
      operation: read
      sub_type: file
      source_details: files/codegen/templates/models/graphql_schema.j2

  # Prepare template data
  - label: Prepare Template Data
    type: code_job
    position: {x: 800, y: 350}
    props:
      language: python
      code: |
        from datetime import datetime
        
        graphql_types = inputs.get('graphql_types', {})
        
        # Prepare the template data
        template_data = {
            'scalars': graphql_types.get('scalars', []),
            'enums': graphql_types.get('enums', []),
            'types': graphql_types.get('types', []),
            'input_types': graphql_types.get('input_types', []),
            'node_types': graphql_types.get('node_types', []),
            'now': datetime.now().isoformat()
        }
        
        result = template_data

  # Generate GraphQL schema
  - label: Generate GraphQL Schema
    type: code_job
    position: {x: 1000, y: 400}
    props:
      language: python
      code: |
        from datetime import datetime
        from jinja2 import Template, StrictUndefined
        
        # Get template content - it comes as a direct string input
        template_content = inputs.get('template_content', '')
        
        # Get prepared data - it comes from the 'default' connection
        template_data = inputs.get('default', {})
        
        # Ensure all expected keys exist with proper defaults
        template_context = {
            'scalars': template_data.get('scalars', []),
            'enums': template_data.get('enums', []),
            'types': template_data.get('types', []),
            'input_types': template_data.get('input_types', []),
            'node_types': template_data.get('node_types', []),
            'now': template_data.get('now', datetime.now().isoformat())
        }
        
        # Render template with error handling
        try:
            jinja_template = Template(template_content, undefined=StrictUndefined)
            rendered = jinja_template.render(**template_context)
            # Return the rendered content as 'generated_code' for DB node
            result = {'generated_code': rendered}
        except Exception as e:
            import traceback
            error_msg = f"Template rendering error: {str(e)}\n{traceback.format_exc()}"
            print(error_msg)
            # Return the error as the generated content so we can see it
            result = {'generated_code': error_msg}

  # Write GraphQL schema file
  - label: Write GraphQL Schema
    type: db
    position: {x: 1200, y: 400}
    props:
      operation: write
      sub_type: file
      source_details: dipeo/diagram_generated_staged/domain-schema.graphql

  # Generate success summary
  - label: Generate Summary
    type: code_job
    position: {x: 1400, y: 400}
    props:
      language: python
      filePath: files/codegen/code/models/generators/summary_generator.py
      functionName: main

  - label: End
    type: endpoint
    position: {x: 1600, y: 400}
    props:
      save_to_file: false

connections:
  # Run batch parser first
  - from: Start
    to: Parse TypeScript Batch
  
  # Load cached AST data after parsing
  - from: Parse TypeScript Batch
    to: Load Diagram AST
  - from: Parse TypeScript Batch
    to: Load Execution AST
  - from: Parse TypeScript Batch
    to: Load Conversation AST
  - from: Parse TypeScript Batch
    to: Load Enums AST
  - from: Parse TypeScript Batch
    to: Combine Node Data AST
  
  # Extract GraphQL types from cached data
  - from: Load Diagram AST
    to: Extract GraphQL Types
    label: diagram_ast
  - from: Load Execution AST
    to: Extract GraphQL Types
    label: execution_ast
  - from: Load Conversation AST
    to: Extract GraphQL Types
    label: conversation_ast
  - from: Combine Node Data AST
    to: Extract GraphQL Types
    label: node_data_ast
  - from: Load Enums AST
    to: Extract GraphQL Types
    label: enums_ast
  
  # Prepare template data
  - from: Extract GraphQL Types
    to: Prepare Template Data
    label: graphql_types
  
  # Generate GraphQL
  - from: Prepare Template Data
    to: Generate GraphQL Schema
    label: default
  - from: Load GraphQL Template
    to: Generate GraphQL Schema
    label: template_content
  
  # Write output
  - from: Generate GraphQL Schema
    to: Write GraphQL Schema
    label: generated_code
  
  # Generate summary
  - from: Extract GraphQL Types
    to: Generate Summary
    label: graphql_types
  - from: Write GraphQL Schema
    to: End
  - from: Generate Summary
    to: End