# Generate Zod Validation Schemas from Domain Models
# Replaces dipeo/models/scripts/generate-zod-schemas.ts
# Generates Zod validation schemas from TypeScript interfaces

version: light

nodes:
  - label: Start
    type: start
    position: {x: 50, y: 300}
    props:
      custom_data:
        message: Starting Zod schemas generation from cached AST data

  # Run batch parser if cache doesn't exist
  - label: Parse TypeScript Batch
    type: sub_diagram
    position: {x: 200, y: 300}
    props:
      diagram_name: codegen/diagrams/models/parse_all_typescript_batch
      diagram_format: light
      passInputData: false
      ignoreIfSub: true

  # Load cached codegen mappings AST
  - label: Load Mappings AST
    type: db
    position: {x: 400, y: 150}
    props:
      operation: read
      sub_type: file
      source_details: apps/server/.temp/ast_cache/codegen_mappings_ast.json

  # Extract mappings
  - label: Extract Mappings
    type: code_job
    position: {x: 600, y: 150}
    props:
      language: python
      filePath: files/codegen/code/shared/extract_mappings.py
      functionName: main

  # Load cached diagram AST
  - label: Load Diagram AST
    type: db
    position: {x: 400, y: 300}
    props:
      operation: read
      sub_type: file
      source_details: apps/server/.temp/ast_cache/diagram_ast.json

  # Load cached node data AST
  - label: Load Node Data AST
    type: db
    position: {x: 400, y: 400}
    props:
      operation: read
      sub_type: file
      source_details: apps/server/.temp/ast_cache/node_data_ast.json

  # Generate Zod schemas
  - label: Generate Zod Schemas
    type: code_job
    position: {x: 700, y: 300}
    props:
      language: python
      filePath: files/codegen/code/models/extractors/zod_schemas_extractor.py
      functionName: main

  # Load template
  - label: Load Zod Template
    type: db
    position: {x: 400, y: 500}
    props:
      operation: read
      sub_type: file
      source_details: files/codegen/templates/models/zod_schemas.j2

  # Generate TypeScript Zod schemas
  - label: Generate Zod Code
    type: code_job
    position: {x: 900, y: 400}
    props:
      language: python
      code: |
        from datetime import datetime
        from jinja2 import Template, StrictUndefined
        
        # Get template content
        template_content = inputs.get('template_content', '')
        
        # Get data from extractor
        data = inputs.get('data', {})
        schemas = data.get('schemas', [])
        enum_schemas = data.get('enum_schemas', {})
        branded_types = data.get('branded_types', [])
        
        # Prepare template variables
        template_vars = {
            'schemas': schemas,
            'enum_schemas': enum_schemas,
            'branded_types': branded_types,
            'now': datetime.now().isoformat()
        }
        
        # Render template
        jinja_template = Template(template_content, undefined=StrictUndefined)
        rendered = jinja_template.render(**template_vars)
        
        result = {'generated_code': rendered}

  # Write TypeScript file
  - label: Write Zod Schemas TS
    type: db
    position: {x: 1100, y: 400}
    props:
      operation: write
      sub_type: file
      source_details: apps/web/src/__generated__/schemas.ts

  # Generate success summary
  - label: Generate Summary
    type: code_job
    position: {x: 1300, y: 400}
    props:
      language: python
      filePath: files/codegen/code/models/generators/summary_generator.py
      functionName: main

  - label: End
    type: endpoint
    position: {x: 1500, y: 400}
    props:
      save_to_file: false

connections:
  # Run batch parser first
  - from: Start
    to: Parse TypeScript Batch
  
  # Load cached data after parsing
  - from: Parse TypeScript Batch
    to: Load Mappings AST
  - from: Parse TypeScript Batch
    to: Load Diagram AST
  - from: Parse TypeScript Batch
    to: Load Node Data AST
  - from: Parse TypeScript Batch
    to: Load Zod Template
  
  # Extract mappings
  - from: Load Mappings AST
    to: Extract Mappings
    label: default
  
  # Generate schemas with all cached data
  - from: Load Diagram AST
    to: Generate Zod Schemas
  - from: Load Node Data AST
    to: Generate Zod Schemas
    label: node_data
  - from: Extract Mappings
    to: Generate Zod Schemas
    label: mappings
  
  # Send data to code generator
  - from: Generate Zod Schemas
    to: Generate Zod Code
    label: data
  
  # Send template to code generator
  - from: Load Zod Template
    to: Generate Zod Code
    label: template_content
  
  # Write output
  - from: Generate Zod Code
    to: Write Zod Schemas TS
    label: generated_code
  
  # Generate summary
  - from: Generate Zod Schemas
    to: Generate Summary
    label: default
  - from: Write Zod Schemas TS
    to: End
  - from: Generate Summary
    to: End