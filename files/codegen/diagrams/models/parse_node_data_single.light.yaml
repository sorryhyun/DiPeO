# Parse Single Node Data File
# Loads and parses a single node data TypeScript file to extract interface

version: light

nodes:
  - label: Start
    type: start
    position: {x: 50, y: 200}
    
  # Parse input to get node type
  - label: Parse Input
    type: code_job
    position: {x: 150, y: 200}
    props:
      language: python
      code: |
        # Handle input from batch processing
        # Try different ways to get node_type
        node_type = None
        
        # Handle deeply nested structure from batch processing
        current = default
        
        # Keep unwrapping 'default' keys until we find node_type
        max_depth = 5  # Prevent infinite loops
        depth = 0
        while isinstance(current, dict) and 'default' in current and depth < max_depth:
            current = current['default']
            depth += 1
        
        # Now check if we have node_type
        if isinstance(current, dict) and 'node_type' in current:
            node_type = current['node_type']
        elif isinstance(current, str):
            # In case it's passed as a string directly
            node_type = current
        elif 'node_type' in inputs:
            node_type = inputs['node_type']
        
        if not node_type:
            raise ValueError(f"node_type not provided in input")
        
        # Convert underscore to hyphen for filename
        node_type_filename = node_type.replace('_', '-')
        
        result = {"node_type": node_type, "node_type_filename": node_type_filename}
  
  # Load the node data TypeScript file
  - label: Load Node Data File
    type: db
    position: {x: 300, y: 200}
    props:
      operation: read
      sub_type: file
      source_details: dipeo/models/src/node-data/{data.node_type_filename}.data.ts
      
  # Parse TypeScript to extract interfaces and types
  - label: Parse TypeScript AST
    type: typescript_ast
    position: {x: 500, y: 200}
    props:
      extractPatterns: ["interface", "type", "export"]
      includeJSDoc: false
      parseMode: module
      
  # Extract interface data
  - label: Extract Interface
    type: code_job
    position: {x: 700, y: 200}
    props:
      language: python
      code: |
        ast_data = inputs.get('ast_data', {})
        node_info = inputs.get('node_info', {})
        node_type = node_info.get('node_type', 'unknown')
        
        interfaces = ast_data.get('interfaces', [])
        types = ast_data.get('types', [])
        
        # Find the interface or type for this node type
        interface_name = None
        interface_data = None
        
        # First check interfaces
        for iface in interfaces:
            name = iface.get('name', '')
            # Match interface name pattern like PersonJobNodeData
            if name.endswith('NodeData'):
                interface_data = iface
                interface_name = name
                break
        
        # If not found in interfaces, check types
        if not interface_data:
            for type_def in types:
                name = type_def.get('name', '')
                if name.endswith('NodeData'):
                    interface_data = type_def
                    interface_name = name
                    break
        
        if not interface_data:
            raise ValueError(f"No interface or type found for node type: {node_type}")
        
        result = {
            'node_type': node_type,
            'interface_name': interface_name,
            'interface': interface_data
        }
        
  # Save result to temp file
  - label: Save to Temp
    type: code_job
    position: {x: 900, y: 200}
    props:
      language: python
      code: |
        import json
        import os
        
        # Get interface data
        interface_data = inputs.get('interface_data', {})
        
        # Create temp directory if it doesn't exist
        temp_dir = '.temp/codegen/node_data'
        os.makedirs(temp_dir, exist_ok=True)
        
        # Save to temp file
        node_type = interface_data.get('node_type', 'unknown')
        temp_file = os.path.join(temp_dir, f"{node_type}.json")
        
        with open(temp_file, 'w') as f:
            json.dump(interface_data, f, indent=2)
        
        result = {"saved": temp_file}
      
connections:
  - from: Start
    to: Parse Input
    
  - from: Parse Input
    to: Load Node Data File
    label: data
    content_type: object
    
  - from: Load Node Data File
    to: Parse TypeScript AST
    label: source
    
  - from: Parse TypeScript AST
    to: Extract Interface
    label: ast_data
    
  - from: Parse Input
    to: Extract Interface
    label: node_info
    
  - from: Extract Interface
    to: Save to Temp
    label: interface_data