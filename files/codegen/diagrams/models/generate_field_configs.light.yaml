# Generate Field Configurations from Domain Models
# Replaces dipeo/models/scripts/generate-field-configs.ts
# Generates UI field configurations from TypeScript interfaces

version: light

nodes:
  - label: Start
    type: start
    position: {x: 50, y: 300}
    props:
      custom_data:
        message: Starting field configurations generation

  # Load codegen mappings TypeScript file
  - label: Load Codegen Mappings
    type: db
    position: {x: 200, y: 150}
    props:
      operation: read
      sub_type: file
      source_details: dipeo/models/src/codegen-mappings.ts

  # Parse codegen mappings
  - label: Parse Mappings AST
    type: typescript_ast
    position: {x: 350, y: 150}
    props:
      extractPatterns: ["const", "export"]
      includeJSDoc: false
      parseMode: module

  # Extract mappings
  - label: Extract Mappings
    type: code_job
    position: {x: 500, y: 150}
    props:
      language: python
      filePath: files/codegen/code/shared/extract_mappings.py
      functionName: main

  # Load diagram.ts file
  - label: Load Diagram TS
    type: db
    position: {x: 200, y: 300}
    props:
      operation: read
      sub_type: file
      source_details: dipeo/models/src/diagram.ts

  # Load node-data index file
  - label: Load Node Data TS
    type: db
    position: {x: 200, y: 400}
    props:
      operation: read
      sub_type: file
      source_details: dipeo/models/src/node-data/index.ts

  # Parse TypeScript to extract interfaces and enums
  - label: Parse Diagram AST
    type: typescript_ast
    position: {x: 400, y: 300}
    props:
      extractPatterns: ["interface", "enum"]
      includeJSDoc: false
      parseMode: module

  # Parse node data TypeScript
  - label: Parse Node Data AST
    type: typescript_ast
    position: {x: 400, y: 400}
    props:
      extractPatterns: ["interface", "enum", "type"]
      includeJSDoc: false
      parseMode: module

  # Extract field configurations
  - label: Extract Field Configs
    type: code_job
    position: {x: 600, y: 300}
    props:
      language: python
      filePath: files/codegen/code/models/extractors/field_config_extractor.py
      functionName: main

  # Load field configs template
  - label: Load Field Configs Template
    type: db
    position: {x: 600, y: 450}
    props:
      operation: read
      sub_type: file
      source_details: files/codegen/templates/models/field_configs.j2

  # Prepare template data
  - label: Prepare Template Data
    type: code_job
    position: {x: 800, y: 350}
    props:
      language: python
      code: |
        from datetime import datetime
        
        # Get the extracted field configs - it returns a dict with 'node_configs' key
        field_configs_data = inputs.get('node_configs', {})
        
        # Extract the actual node configs array
        if isinstance(field_configs_data, dict):
            node_configs = field_configs_data.get('node_configs', [])
        else:
            node_configs = field_configs_data
        
        print(f"Preparing template data with {len(node_configs)} node configs")
        if node_configs:
            print(f"First node config keys: {list(node_configs[0].keys()) if node_configs else []}")
        
        result = {
            'node_configs': node_configs,
            'now': datetime.now().isoformat()
        }

  # Generate TypeScript field configs
  - label: Generate Field Configs Code
    type: code_job
    position: {x: 1000, y: 400}
    props:
      language: python
      code: |
        from datetime import datetime
        from jinja2 import Template, StrictUndefined
        import traceback
        
        # Get template content
        template_content = inputs.get('template_content', '')
        
        # Get prepared data
        template_data = inputs.get('default', {})
        
        print(f"Template data keys: {list(template_data.keys())}")
        print(f"Node configs count: {len(template_data.get('node_configs', []))}")
        
        try:
            # Render template
            jinja_template = Template(template_content, undefined=StrictUndefined)
            rendered = jinja_template.render(**template_data)
            
            print(f"Successfully rendered template, length: {len(rendered)}")
            
            # DB write node expects the string directly as 'default' input
            result = rendered
        except Exception as e:
            print(f"Template rendering error: {e}")
            print(traceback.format_exc())
            # Return error as content so we can see it
            result = f"/* Template rendering error: {e} */\n"

  # Write TypeScript file
  - label: Write Field Configs TS
    type: db
    position: {x: 1200, y: 400}
    props:
      operation: write
      sub_type: file
      source_details: apps/web/src/__generated__/nodes/fields.ts

  # Also write JSON output
  - label: Write Field Configs JSON
    type: code_job
    position: {x: 1200, y: 500}
    props:
      language: python
      filePath: files/codegen/code/models/writers/json_writer.py
      functionName: main

  # Generate success summary
  - label: Generate Summary
    type: code_job
    position: {x: 1400, y: 450}
    props:
      language: python
      filePath: files/codegen/code/models/generators/summary_generator.py
      functionName: main

  - label: End
    type: endpoint
    position: {x: 1600, y: 450}
    props:
      save_to_file: false

connections:
  # Load and parse mappings
  - from: Start
    to: Load Codegen Mappings
  - from: Load Codegen Mappings
    to: Parse Mappings AST
    label: source
  - from: Parse Mappings AST
    to: Extract Mappings
    label: default
  
  # Load and parse TypeScript
  - from: Start
    to: Load Diagram TS
  - from: Start
    to: Load Node Data TS
  - from: Load Diagram TS
    to: Parse Diagram AST
    label: source
  - from: Load Node Data TS
    to: Parse Node Data AST
    label: source
  
  # Extract field configs with mappings
  - from: Parse Diagram AST
    to: Extract Field Configs
    label: default
  - from: Parse Node Data AST
    to: Extract Field Configs
    label: node_data
  - from: Extract Mappings
    to: Extract Field Configs
    label: mappings
  
  # Prepare template data
  - from: Extract Field Configs
    to: Prepare Template Data
    label: node_configs
  
  # Generate TypeScript
  - from: Prepare Template Data
    to: Generate Field Configs Code
    label: default
  - from: Load Field Configs Template
    to: Generate Field Configs Code
    label: template_content
  
  # Write outputs
  - from: Generate Field Configs Code
    to: Write Field Configs TS
  - from: Extract Field Configs
    to: Write Field Configs JSON
    label: node_configs
  
  # Generate summary
  - from: Extract Field Configs
    to: Generate Summary
    label: node_configs
  - from: Write Field Configs TS
    to: End
  - from: Write Field Configs JSON
    to: End
  - from: Generate Summary
    to: End