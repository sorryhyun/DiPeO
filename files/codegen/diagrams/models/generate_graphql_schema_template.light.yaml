# Generate GraphQL Schema using Template Job
# Uses template_job with GraphQL filters for type conversion

version: light

nodes:
  - label: Start
    type: start
    position: {x: 50, y: 300}
    props:
      custom_data:
        message: Starting GraphQL schema generation using template_job

  # Run batch parser if cache doesn't exist
  - label: Parse TypeScript Batch
    type: sub_diagram
    position: {x: 200, y: 300}
    props:
      diagram_name: codegen/diagrams/shared/parse_typescript_batch
      diagram_format: light
      passInputData: false
      ignoreIfSub: true

  # Load all cached AST data at once
  - label: Load All AST Files
    type: db
    position: {x: 400, y: 400}
    props:
      operation: read
      sub_type: file
      serialize_json: true
      source_details:
        - temp/diagram.ts.json
        - temp/execution.ts.json
        - temp/conversation.ts.json
        - temp/enums.ts.json
        - temp/integration.ts.json
        - temp/start.data.ts.json
        - temp/condition.data.ts.json
        - temp/person-job.data.ts.json
        - temp/code-job.data.ts.json
        - temp/api-job.data.ts.json
        - temp/endpoint.data.ts.json
        - temp/db.data.ts.json
        - temp/user-response.data.ts.json
        - temp/notion.data.ts.json
        - temp/person-batch-job.data.ts.json
        - temp/hook.data.ts.json
        - temp/template-job.data.ts.json
        - temp/json-schema-validator.data.ts.json
        - temp/typescript-ast.data.ts.json
        - temp/sub-diagram.data.ts.json
        - temp/integrated-api.data.ts.json

  # Extract and prepare GraphQL data
  - label: Prepare GraphQL Data
    type: code_job
    position: {x: 600, y: 400}
    props:
      language: python
      filePath: files/codegen/code/models/generate_graphql_schema/graphql_schema_generator.py
      functionName: prepare_graphql_data_for_template

  # Generate GraphQL schema using template_job
  - label: Generate GraphQL Schema
    type: template_job
    position: {x: 800, y: 400}
    props:
      engine: jinja2
      template_path: files/codegen/templates/models/graphql_schema_v2.j2
      output_path: dipeo/diagram_generated_staged/domain-schema.graphql
      variables:
        generated_warning: "DO NOT EDIT - Generated by DiPeO"
      # The data from the previous node is available as input_data
      use_input_data: true

  # Generate success summary
  - label: Generate Summary
    type: code_job
    position: {x: 1000, y: 400}
    props:
      language: python
      filePath: files/codegen/code/models/generate_graphql_schema/graphql_schema_generator.py
      functionName: generate_summary

  - label: End
    type: endpoint
    position: {x: 1200, y: 400}
    props:
      save_to_file: false

connections:
  # Run batch parser first
  - from: Start
    to: Parse TypeScript Batch
  
  # Load cached AST data after parsing
  - from: Parse TypeScript Batch
    to: Load All AST Files
  
  # Prepare GraphQL data from AST
  - from: Load All AST Files
    to: Prepare GraphQL Data
  
  # Pass prepared data to template
  - from: Prepare GraphQL Data
    to: Generate GraphQL Schema
  
  # Generate summary
  - from: Prepare GraphQL Data
    to: Generate Summary
    label: graphql_data
  
  # End
  - from: Generate GraphQL Schema
    to: End
  - from: Generate Summary
    to: End