# Backend Batch Generation with TypeScript Specifications
# Uses the TypeScript specification parser to generate backend files for multiple node types
# Also generates conversion functions for TypeScript <-> Python transformations

version: light

nodes:
  - label: Start
    type: start
    position: {x: 50, y: 200}
    props:
      custom_data:
        message: Starting batch generation using TypeScript specifications for backend files

  # Run batch parser for all TypeScript files
  - label: Parse All TypeScript
    type: sub_diagram
    position: {x: 200, y: 200}
    props:
      diagram_name: codegen/diagrams/shared/parse_typescript_batch
      diagram_format: light
      passInputData: false
      ignoreIfSub: true

  - label: Load Manifest
    type: db
    position: {x: 350, y: 200}
    props:
      file: files/codegen/manifests/all.json
      operation: read
      

  - label: Prepare Node List
    type: code_job
    position: {x: 500, y: 200}
    props:
      language: python
      code: |
        # DB node now returns DataOutput, no need to parse JSON
        manifest_data = inputs.get('default', {})
        
        # Get node types from manifest
        node_types = manifest_data.get('nodes', [])
        
        if not node_types:
            raise ValueError("No node types found in manifest")
        
        # Create array of inputs for batch processing
        # Add 'default' wrapper to prevent unwrapping by runtime resolver
        result = {
            'default': {
                'items': [{'node_spec_path': node_type} for node_type in node_types]
            }
        }
        
        print(f"Generating backend files for {len(node_types)} nodes from TypeScript specifications:")
        for nt in node_types:
            print(f"  - {nt}")

  - label: Batch Generate Backend Models
    type: sub_diagram
    position: {x: 700, y: 200}
    props:
      diagram_name: codegen/diagrams/models/generate_backend_models_single
      diagram_format: light
      batch: true  # Enable batch mode
      batch_input_key: items  # Use 'items' key from input
      batch_parallel: true  # Process in parallel


  - label: Prepare Init Context
    type: code_job
    position: {x: 900, y: 200}
    props:
      language: python
      code: |
        # Prepare context for __init__.py generation
        manifest_data = inputs.get('default', {})
        node_types = manifest_data.get('nodes', [])
        
        print(f"Preparing to generate __init__.py for {len(node_types)} models")
        
        # Wrap in 'default' to prevent unwrapping by runtime resolver
        result = {
            'default': {
                'node_types': node_types
            }
        }

  - label: Generate Models Init
    type: template_job
    position: {x: 1100, y: 200}
    props:
      engine: jinja2
      template_path: files/codegen/templates/backend/models_init.j2
      output_path: dipeo/diagram_generated_staged/models/__init__.py

  - label: End
    type: endpoint
    position: {x: 1500, y: 200}
    props:
      save_to_file: false

connections:
  - from: Start
    to: Parse All TypeScript
  
  - from: Parse All TypeScript
    to: Load Manifest
  
  - from: Load Manifest
    to: Prepare Node List
  
  - from: Prepare Node List
    to: Batch Generate Backend Models
  
  # Also pass manifest to prepare init context
  - from: Load Manifest
    to: Prepare Init Context
  
  # Generate the models __init__.py
  - from: Prepare Init Context
    to: Generate Models Init
  
  # Both paths complete before ending
  - from: Batch Generate Backend Models
    to: End
  - from: Generate Models Init
    to: End