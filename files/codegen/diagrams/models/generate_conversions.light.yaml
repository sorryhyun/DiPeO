# Generate Domain Model Conversions V3
# Uses template_job node for rendering with TypeScript filters

version: light

nodes:
  - label: Start
    type: start
    position: {x: 50, y: 200}
    props:
      custom_data:
        message: Starting conversions generation V3 with template processing

  # Run batch parser if cache doesn't exist
  - label: Parse TypeScript Batch
    type: sub_diagram
    position: {x: 200, y: 200}
    props:
      diagram_name: codegen/diagrams/shared/parse_typescript_batch
      diagram_format: light
      passInputData: false
      ignoreIfSub: true

  # Load cached conversions AST
  - label: Load Conversions AST
    type: db
    position: {x: 400, y: 200}
    props:
      operation: read
      sub_type: file
      source_details: temp/conversions.ts.json

  # Load the original conversions.ts file (still needed for raw source)
  - label: Load Conversions TS
    type: db
    position: {x: 400, y: 300}
    props:
      operation: read
      sub_type: file
      source_details: dipeo/models/src/conversions.ts

  # Extract raw NODE_TYPE_MAP entries (no conversion)
  - label: Extract Raw Conversions Data
    type: code_job
    position: {x: 600, y: 250}
    props:
      language: python
      filePath: files/codegen/code/models/generate_conversions/conversions_extractor_v2.py
      functionName: extract_conversions_data

  # Use template_job with enhanced template for rendering
  - label: Render Conversions Enhanced
    type: template_job
    position: {x: 800, y: 250}
    props:
      engine: jinja2  # Will use enhanced service with TypeScript filters
      template_path: files/codegen/templates/models/conversions.j2
      output_path: dipeo/diagram_generated_staged/conversions.py
      variables:
        module_name: "conversions"
        generated_warning: "DO NOT EDIT - Generated by DiPeO V3"

  # Generate success summary
  - label: Generate Summary
    type: code_job
    position: {x: 1000, y: 250}
    props:
      language: python
      filePath: files/codegen/code/models/generate_conversions/conversions_extractor_v2.py
      functionName: generate_summary

  - label: End
    type: endpoint
    position: {x: 1200, y: 250}
    props:
      save_to_file: false

connections:
  # Run batch parser first
  - from: Start
    to: Parse TypeScript Batch
  
  # Load data after parsing
  - from: Parse TypeScript Batch
    to: Load Conversions AST
  - from: Parse TypeScript Batch
    to: Load Conversions TS
  
  # Extract raw data using cached AST
  - from: Load Conversions AST
    to: Extract Raw Conversions Data
    label: ast_data
  - from: Load Conversions TS
    to: Extract Raw Conversions Data
    label: source
  
  # Pass raw extracted data to template renderer
  - from: Extract Raw Conversions Data
    to: Render Conversions Enhanced
    label: conversions_data  # Raw TypeScript data for template to process
  
  # Generate summary
  - from: Extract Raw Conversions Data
    to: Generate Summary
    label: extraction_result
  
  - from: Render Conversions Enhanced
    to: End
  - from: Generate Summary
    to: End
