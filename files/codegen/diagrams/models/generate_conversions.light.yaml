# Generate Domain Model Conversions from TypeScript
# Replaces dipeo/models/scripts/generate-conversions.ts
# Generates conversion utilities between TypeScript and Python types

version: light

nodes:
  - label: Start
    type: start
    position: {x: 50, y: 200}
    props:
      custom_data:
        message: Starting domain model conversions generation from cached AST data

  # Run batch parser if cache doesn't exist
  - label: Parse TypeScript Batch
    type: sub_diagram
    position: {x: 200, y: 200}
    props:
      diagram_name: codegen/diagrams/models/parse_all_typescript_batch
      diagram_format: light
      passInputData: false
      ignoreIfSub: true

  # Load cached conversions AST
  - label: Load Conversions AST
    type: db
    position: {x: 400, y: 200}
    props:
      operation: read
      sub_type: file
      source_details: .temp/conversions_ast.json

  # Load the original conversions.ts file (still needed for raw source)
  - label: Load Conversions TS
    type: db
    position: {x: 400, y: 300}
    props:
      operation: read
      sub_type: file
      source_details: dipeo/models/src/conversions.ts

  # Extract NODE_TYPE_MAP entries
  - label: Extract NODE_TYPE_MAP
    type: code_job
    position: {x: 600, y: 250}
    props:
      language: python
      filePath: files/codegen/code/models/extractors/node_type_map_extractor.py
      functionName: main

  # Load conversions template
  - label: Load Conversions Template
    type: db
    position: {x: 600, y: 400}
    props:
      operation: read
      sub_type: file
      source_details: files/codegen/templates/models/conversions.j2

  # Generate conversions code
  - label: Generate Conversions Code
    type: code_job
    position: {x: 800, y: 300}
    props:
      language: python
      filePath: files/codegen/code/models/generators/conversions_generator.py
      functionName: main

  # Write conversions.py
  - label: Write Conversions File
    type: db
    position: {x: 1000, y: 300}
    props:
      operation: write
      sub_type: file
      source_details: dipeo/diagram_generated_staged/conversions.py

  # Generate success summary
  - label: Generate Summary
    type: code_job
    position: {x: 1200, y: 300}
    props:
      language: python
      filePath: files/codegen/code/models/generators/summary_generator.py
      functionName: main

  - label: End
    type: endpoint
    position: {x: 1400, y: 300}
    props:
      save_to_file: false

connections:
  # Run batch parser first
  - from: Start
    to: Parse TypeScript Batch
  
  # Load data after parsing
  - from: Parse TypeScript Batch
    to: Load Conversions AST
  - from: Parse TypeScript Batch
    to: Load Conversions TS
  - from: Parse TypeScript Batch
    to: Load Conversions Template
  
  # Extract mappings using cached AST
  - from: Load Conversions AST
    to: Extract NODE_TYPE_MAP
    label: ast_data
  - from: Load Conversions TS
    to: Extract NODE_TYPE_MAP
    label: source
  
  # Send data to code generator
  - from: Extract NODE_TYPE_MAP
    to: Generate Conversions Code
    label: data
  
  # Send template to code generator
  - from: Load Conversions Template
    to: Generate Conversions Code
    label: template_content
  
  # Write output
  - from: Generate Conversions Code
    to: Write Conversions File
    label: generated_code
  
  # Generate summary
  - from: Extract NODE_TYPE_MAP
    to: Generate Summary
    label: node_type_map
  - from: Write Conversions File
    to: End
  - from: Generate Summary
    to: End