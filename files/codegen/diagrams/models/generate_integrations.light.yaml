# Generate Integration Models
# Extracts and generates integration-specific enums and models from integration.ts

version: light

nodes:
  - label: Start
    type: start
    position: {x: 50, y: 200}
    props:
      custom_data:
        message: Starting integration models generation

  # Load integration.ts file
  - label: Load Integration File
    type: db
    position: {x: 200, y: 200}
    props:
      operation: read
      sub_type: file
      source_details: dipeo/models/src/integration.ts

  # Parse integration.ts specifically
  - label: Parse Integration TS
    type: typescript_ast
    position: {x: 350, y: 200}
    props:
      extractPatterns: ["interface", "type", "enum", "export"]
      includeJSDoc: true
      parseMode: module

  # Extract integration-specific definitions
  - label: Extract Integrations
    type: code_job
    position: {x: 500, y: 200}
    props:
      language: python
      filePath: files/codegen/code/shared/extract_integrations.py
      functionName: main

  # Render integrations template
  - label: Render Integrations
    type: template_job
    position: {x: 700, y: 200}
    props:
      engine: jinja2
      template_path: files/codegen/templates/models/integrations.j2
      output_path: dipeo/diagram_generated_staged/integrations.py
      variables:
        module_name: "integrations"
        generated_warning: "DO NOT EDIT - Generated from integration.ts"

  - label: End
    type: endpoint
    position: {x: 900, y: 200}
    props:
      save_to_file: false

connections:
  # Load file first
  - from: Start
    to: Load Integration File

  # Pass file content to parser
  - from: Load Integration File
    to: Parse Integration TS
    label: source

  # Extract definitions
  - from: Parse Integration TS
    to: Extract Integrations

  # Pass extracted data to template
  - from: Extract Integrations
    to: Render Integrations
    label: integration_data

  - from: Render Integrations
    to: End