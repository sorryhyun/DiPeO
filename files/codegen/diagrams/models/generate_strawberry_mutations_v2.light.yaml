# Generate Strawberry GraphQL Node Mutations V2
# Uses template_job node for enhanced rendering when services are available

version: light

nodes:
  - label: Start
    type: start
    position: {x: 50, y: 300}
    props:
      custom_data:
        message: Starting Strawberry mutations generation with template job

  # Run batch parser if cache doesn't exist
  - label: Parse TypeScript Batch
    type: sub_diagram
    position: {x: 200, y: 300}
    props:
      diagram_name: codegen/diagrams/shared/parse_typescript_batch
      diagram_format: light
      passInputData: false
      ignoreIfSub: true

  # NEW: Load all spec files dynamically using glob patterns
  - label: Load All Spec Files
    type: db
    position: {x: 350, y: 300}
    props:
      operation: read
      sub_type: file
      serialize_json: true  # Parse JSON files automatically
      glob: true  # Enable glob pattern expansion
      source_details:
        # Also load the consolidated cache if available
        - "temp/all_node_specs_ast.json"
        # Dynamically discover all node spec files
        - "temp/specifications/nodes/*.spec.ts.json"

  # Extract node specifications from loaded AST files
  - label: Extract Node Specs
    type: code_job
    position: {x: 500, y: 300}
    props:
      language: python
      filePath: files/codegen/code/models/generate_strawberry_types/extract_node_specs_from_ast.py
      functionName: extract_node_specs_from_ast

  # Generate Strawberry types (needed for mutations)
  - label: Generate Strawberry Types
    type: code_job
    position: {x: 700, y: 300}
    props:
      language: python
      filePath: files/codegen/code/models/generate_strawberry_types/strawberry_types_generator_v2.py
      functionName: generate_strawberry_types

  # Generate mutations
  - label: Generate Node Mutations
    type: code_job
    position: {x: 900, y: 300}
    props:
      language: python
      filePath: files/codegen/code/models/generate_strawberry_types/strawberry_types_generator_v2.py
      functionName: generate_node_mutations

  # NEW: Use template_job for rendering with automatic enhancements
  - label: Render Mutations Template
    type: template_job
    position: {x: 1100, y: 300}
    props:
      engine: jinja2  # Will use enhanced rendering if services available
      template_path: files/codegen/templates/models/strawberry_mutations.j2
      output_path: dipeo/diagram_generated_staged/graphql/node_mutations.py
      # Can add variables here if needed
      variables:
        module_name: "node_mutations"
        generated_warning: "DO NOT EDIT - Generated by DiPeO"

  - label: End
    type: endpoint
    position: {x: 1300, y: 300}
    props:
      save_to_file: false

connections:
  # Parse specs first
  - {from: Start, to: Parse TypeScript Batch}
  
  # Load spec files
  - {from: Parse TypeScript Batch, to: Load All Spec Files}
  
  # Extract specifications from loaded AST
  - {from: Load All Spec Files, to: Extract Node Specs}
  
  # Generate types
  - {from: Extract Node Specs, to: Generate Strawberry Types, label: node_specs}
  
  # Generate mutations
  - {from: Generate Strawberry Types, to: Generate Node Mutations, label: strawberry_types}
  
  # Pass mutations data to template renderer
  - {from: Generate Node Mutations, to: Render Mutations Template, label: mutations}  # This becomes available as 'mutations' in template
  
  - {from: Render Mutations Template, to: End}