# Generate Strawberry GraphQL Node Mutations
# Generates type-safe mutations for each node type

version: light

nodes:
  - label: Start
    type: start
    position: {x: 50, y: 300}
    props:
      custom_data:
        message: Starting Strawberry mutations generation

  # Run batch parser if cache doesn't exist
  - label: Parse Node Specs Batch
    type: sub_diagram
    position: {x: 200, y: 300}
    props:
      diagram_name: codegen/diagrams/shared/parse_all_node_specs_batch
      diagram_format: light
      passInputData: false
      ignoreIfSub: true

  # Extract node specifications
  - label: Extract Node Specs
    type: code_job
    position: {x: 400, y: 300}
    props:
      language: python
      filePath: files/codegen/code/models/generate_strawberry_types/strawberry_types_generator.py
      functionName: extract_node_specs

  # Generate Strawberry types (needed for mutations)
  - label: Generate Strawberry Types
    type: code_job
    position: {x: 600, y: 300}
    props:
      language: python
      filePath: files/codegen/code/models/generate_strawberry_types/strawberry_types_generator.py
      functionName: generate_strawberry_types

  # Generate mutations
  - label: Generate Node Mutations
    type: code_job
    position: {x: 800, y: 300}
    props:
      language: python
      filePath: files/codegen/code/models/generate_strawberry_types/strawberry_types_generator.py
      functionName: generate_node_mutations

  # Load mutations template
  - label: Load Mutations Template
    type: db
    position: {x: 800, y: 200}
    props:
      operation: read
      sub_type: file
      source_details: files/codegen/templates/models/strawberry_mutations.j2

  # Prepare mutations data
  - label: Prepare Mutations Data
    type: code_job
    position: {x: 1000, y: 300}
    props:
      language: python
      filePath: files/codegen/code/models/generate_strawberry_types/strawberry_types_generator.py
      functionName: prepare_template_data

  # Render mutations
  - label: Render Mutations
    type: code_job
    position: {x: 1200, y: 300}
    props:
      language: python
      filePath: files/codegen/code/models/generate_strawberry_types/strawberry_types_generator.py
      functionName: render_strawberry_schema

  # Write mutations file to staged
  - label: Write Mutations File
    type: db
    position: {x: 1400, y: 300}
    props:
      operation: write
      sub_type: file
      source_details: dipeo/diagram_generated_staged/graphql/node_mutations.py

  - label: End
    type: endpoint
    position: {x: 1600, y: 300}
    props:
      save_to_file: false

connections:
  # Parse specs first
  - from: Start
    to: Parse Node Specs Batch
  
  # Extract specifications
  - from: Parse Node Specs Batch
    to: Extract Node Specs
  
  # Generate types
  - from: Extract Node Specs
    to: Generate Strawberry Types
    label: node_specs
  
  # Generate mutations
  - from: Generate Strawberry Types
    to: Generate Node Mutations
    label: strawberry_types
  
  # Pass mutations to prepare step
  - from: Generate Node Mutations
    to: Prepare Mutations Data
    label: mutations
  
  # Pass prepared data and template to render
  - from: Prepare Mutations Data
    to: Render Mutations
    label: default
  - from: Load Mutations Template
    to: Render Mutations
    label: template_content
  
  # Write file
  - from: Render Mutations
    to: Write Mutations File
    label: generated_code
  
  - from: Write Mutations File
    to: End