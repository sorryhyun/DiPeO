# Generate Backend Conversions - Simple Version
# Generates conversion functions for TypeScript <-> Python transformations

version: light

nodes:
  - label: Start
    type: start
    position: {x: 50, y: 200}

  - label: Load Manifest
    type: db
    position: {x: 200, y: 200}
    props:
      file: files/codegen/manifests/all.json
      operation: read

  - label: Load Conversions Template
    type: db
    position: {x: 200, y: 300}
    props:
      operation: read
      sub_type: file
      source_details: files/codegen/templates/backend/conversions.j2

  - label: Load All Specs
    type: code_job
    position: {x: 400, y: 200}
    props:
      language: python
      code: |
        import json
        import os
        
        # Parse manifest
        manifest_data = inputs.get('default', {})
        if isinstance(manifest_data, str):
            manifest_data = json.loads(manifest_data)
        
        node_types = manifest_data.get('nodes', [])
        
        # Load all specs
        all_specs = []
        # Use absolute path from DIPEO_BASE_DIR
        base_dir = os.environ.get('DIPEO_BASE_DIR', '/home/soryhyun/DiPeO')
        base_path = os.path.join(base_dir, 'files/codegen/specifications/nodes')
        
        for node_type in node_types:
            spec_path = os.path.join(base_path, f'{node_type}.json')
            try:
                with open(spec_path, 'r') as f:
                    spec_data = json.load(f)
                    all_specs.append(spec_data)
            except Exception as e:
                print(f"Warning: Could not load spec for {node_type}: {e}")
        
        print(f"Loaded {len(all_specs)} specifications")
        
        result = {
            'specs': all_specs,
            'manifest_data': manifest_data
        }

  - label: Generate Conversions
    type: code_job
    position: {x: 600, y: 250}
    props:
      language: python
      filePath: files/codegen/code/backend/generators/conversions.py
      functionName: main

  - label: Write Conversions
    type: db
    position: {x: 800, y: 250}
    props:
      operation: write
      sub_type: file
      source_details: dipeo/diagram_generated/conversions.py

  - label: End
    type: endpoint
    position: {x: 1000, y: 250}
    props:
      save_to_file: false

connections:
  - from: Start
    to: Load Manifest

  - from: Start
    to: Load Conversions Template

  - from: Load Manifest
    to: Load All Specs

  - from: Load All Specs
    to: Generate Conversions
    label: all_specs

  - from: Load Conversions Template
    to: Generate Conversions
    label: template_content

  - from: Generate Conversions
    to: Write Conversions
    label: generated_code

  - from: Write Conversions
    to: End