# Backend Single Node Generation from TypeScript
# Generates Pydantic model and static node from TypeScript specifications

version: light

nodes:
  # Start node
  - label: Start
    type: start
    position: {x: 50, y: 100}

  # Parse input to handle both direct variables and nested inputs
  - label: Parse Input
    type: code_job
    position: {x: 50, y: 150}
    props:
      language: python
      code: |
        # Handle both direct input (from CLI) and nested input (from sub_diagram)
        if "node_spec_path" in default:
            # Direct case - pass through
            result = {"node_spec_path": default["node_spec_path"]}
        elif "default" in default and isinstance(default["default"], dict) and "node_spec_path" in default["default"]:
            # Nested case from sub_diagram
            result = {"node_spec_path": default["default"]["node_spec_path"]}
        else:
            raise ValueError(f"node_spec_path not found in input: {default}")
      
  # Extract node type from input
  - label: Extract Node Type
    type: code_job
    position: {x: 200, y: 200}
    props:
      language: python
      code: |
        # Extract node type from input
        # node_spec_path comes as a dict from Parse Input
        if isinstance(node_spec_path, dict):
            node_type = node_spec_path.get('node_spec_path', 'unknown')
        else:
            node_type = node_spec_path
            
        result = {
            'node_type': node_type
        }
  
  # Load cached AST data for this node spec
  - label: Load Cached AST
    type: db
    position: {x: 350, y: 200}
    props:
      operation: read
      sub_type: file
      source_details: .temp/node_spec_{node_type.node_type}_ast.json
      serialize_json: true
      
  # Load codegen mappings
  - label: Load Codegen Mappings
    type: db
    position: {x: 350, y: 100}
    props:
      operation: read
      sub_type: file
      source_details: .temp/codegen_mappings_ast.json
      serialize_json: true
      
  # Extract mappings
  - label: Extract Mappings
    type: code_job
    position: {x: 500, y: 100}
    props:
      language: python
      filePath: files/codegen/code/shared/extract_mappings.py
      functionName: main
      
  # Extract specification from AST
  - label: Extract Specification
    type: code_job
    position: {x: 500, y: 200}
    props:
      language: python
      code: |
        # Import the parser helper
        from files.codegen.code.shared.typescript_spec_parser import extract_spec_from_ast, transform_ast_to_spec
        import json
        
        
        # The ast_data comes from cached AST - might be string or dict
        if isinstance(ast_data, str):
            # Check if it's an error message
            if ast_data.startswith("Code execution failed:") or ast_data.startswith("Error:"):
                raise ValueError(f"Failed to load AST data: {ast_data}")
            try:
                ast_data = json.loads(ast_data)
            except json.JSONDecodeError as e:
                raise ValueError(f"Failed to parse AST data as JSON: {e}")
        
        # Extract the actual node type
        actual_node_type = node_type.get('node_type', 'unknown')
        
        # Convert node type to spec name (e.g., "person_job" -> "personJobSpec")
        node_type_clean = actual_node_type.replace('-', '_')  # Normalize to underscores
        spec_name = f"{node_type_clean.replace('_', ' ').title().replace(' ', '')}Spec"
        spec_name = spec_name[0].lower() + spec_name[1:]  # camelCase
        
        # Extract the specification from AST
        spec_data = extract_spec_from_ast(ast_data, spec_name)
        
        if not spec_data:
            available_constants = [const.get('name', '') for const in ast_data.get('constants', [])]
            raise ValueError(
                f"Could not find specification '{spec_name}' for node type '{actual_node_type}'. "
                f"Available constants: {available_constants}"
            )
        
        result = spec_data
  
  # Load backend templates
  - label: Load Pydantic Template
    type: db
    position: {x: 100, y: 300}
    props:
      operation: read
      sub_type: file  
      source_details: files/codegen/templates/backend/pydantic_single_model.j2

  - label: Load Static Node Template
    type: db
    position: {x: 100, y: 500}
    props:
      operation: read
      sub_type: file
      source_details: files/codegen/templates/backend/static_nodes.j2

  # Generate backend code
  - label: Generate Pydantic Model
    type: code_job
    position: {x: 600, y: 300}
    props:
      language: python
      filePath: files/codegen/code/backend/generators/pydantic_model.py
      functionName: main

  - label: Generate Static Node
    type: code_job
    position: {x: 600, y: 500}
    props:
      language: python
      filePath: files/codegen/code/backend/generators/static_nodes.py
      functionName: main

  # Extract node naming for file paths
  - label: Extract Node Naming
    type: code_job
    position: {x: 700, y: 200}
    props:
      language: python
      code: |
        # Extract node type from spec for use in file paths
        spec = spec_data
        
        # Ensure spec is a dict
        if not isinstance(spec, dict):
            raise ValueError(f"Expected dict, got {type(spec)}")
            
        node_type = spec.get('nodeType', 'unknown')
        node_name = node_type.title().replace('_', '')
        result = {
            'node_type': node_type,
            'node_name': node_name
        }

  # Write backend outputs
  - label: Write Pydantic Model
    type: db
    position: {x: 900, y: 300}
    props:
      operation: write
      sub_type: file
      source_details: dipeo/diagram_generated_staged/models/{node_naming.node_type}_model.py

  - label: Write Static Node
    type: db
    position: {x: 900, y: 500}
    props:
      operation: write
      sub_type: file
      source_details: dipeo/diagram_generated_staged/nodes/{node_naming.node_type}_node.py

connections:
  # Parse input first
  - from: Start
    to: Parse Input
    
  # Extract node type
  - from: Parse Input
    to: Extract Node Type
    label: node_spec_path
    
  # Load the cached AST
  - from: Extract Node Type
    to: Load Cached AST
    label: node_type
    
  # Extract specification from AST
  - from: Load Cached AST
    to: Extract Specification
    label: ast_data
    
  # Pass node_type to Extract Specification
  - from: Extract Node Type
    to: Extract Specification
    label: node_type
    
  # Pass spec to extract node naming
  - from: Extract Specification
    to: Extract Node Naming
    label: spec_data
    
  # Pass node naming to all writers (for file paths)
  - from: Extract Node Naming
    to: Write Pydantic Model
    label: node_naming
  - from: Extract Node Naming
    to: Write Static Node
    label: node_naming

  # Pass mappings from Load Codegen Mappings to Extract Mappings
  - from: Load Codegen Mappings
    to: Extract Mappings
    
  # Connect spec and templates to Pydantic generator
  - from: Extract Specification
    to: Generate Pydantic Model
    label: spec_data
  - from: Load Pydantic Template
    to: Generate Pydantic Model
    label: template_content
  - from: Extract Mappings
    to: Generate Pydantic Model
    label: mappings
  
  # Connect spec and templates to Static Node generator
  - from: Extract Specification
    to: Generate Static Node
    label: spec_data
  - from: Load Static Node Template
    to: Generate Static Node
    label: template_content
  
  # Connect generators to writers (passing generated code)
  - from: Generate Pydantic Model
    to: Write Pydantic Model
    label: generated_code
  - from: Generate Static Node
    to: Write Static Node
    label: generated_code