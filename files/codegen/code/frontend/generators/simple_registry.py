"""Simple generator for frontend node registry imports."""
from typing import Dict, Any, List
from dipeo.infrastructure.services.jinja_template.filters.base_filters import BaseFilters

def generate_simple_registry(node_types: List[str], template_content: str) -> str:
    """
    Generate a simple registry file that imports and registers all node configs.
    
    Args:
        node_types: List of node type names (e.g., ['api_job', 'code_job'])
        template_content: Template content (not used, but kept for consistency)
        
    Returns:
        Generated registry code
    """
    lines = [
        "// Auto-generated node registry",
        "// DO NOT EDIT - This file is automatically generated by the codegen system", 
        "import { registerNodeConfig } from '@/domain/diagram/config/nodeRegistry';",
        ""
    ]
    
    # Generate imports
    for node_type in node_types:
        # Handle special cases
        if node_type == 'example_hook':
            config_name = "hookConfig"
            file_name = "HookConfig"
        elif node_type == 'typescript_ast_parser':
            config_name = "typescriptAstConfig"
            file_name = "TypescriptAstConfig"
        else:
            config_name = f"{BaseFilters.camel_case(node_type)}Config"
            file_name = f"{BaseFilters.pascal_case(node_type)}Config"
        lines.append(f"import {{ {config_name} }} from '@/__generated__/nodes/{file_name}';")
    
    lines.append("")
    lines.append("export function registerAllNodes() {")
    
    # Generate registration calls
    for node_type in node_types:
        # Handle special cases
        if node_type == 'example_hook':
            config_name = "hookConfig"
        elif node_type == 'typescript_ast_parser':
            config_name = "typescriptAstConfig"
        else:
            config_name = f"{BaseFilters.camel_case(node_type)}Config"
        lines.append(f"  registerNodeConfig({config_name});")
    
    lines.append("}")
    lines.append("")
    lines.append("// Call this on app initialization")
    lines.append("registerAllNodes();")
    
    return "\n".join(lines)


def main(inputs: Dict[str, Any]) -> Dict[str, Any]:
    """Entry point for code_job node."""
    # Handle both direct input and nested default
    if 'node_list' in inputs:
        node_list_data = inputs['node_list']
        # Handle double nesting case
        if isinstance(node_list_data, dict) and 'node_list' in node_list_data:
            node_list = node_list_data['node_list']
        else:
            node_list = node_list_data
    elif 'default' in inputs and isinstance(inputs['default'], dict):
        node_list = inputs['default'].get('node_list', [])
    else:
        node_list = []
    
    template_content = inputs.get('template_content', '')
    
    if not node_list:
        raise ValueError("node_list is required")
    
    generated_code = generate_simple_registry(node_list, template_content)
    
    return {
        'generated_code': generated_code,
        'filename': 'nodeRegistry.ts'
    }