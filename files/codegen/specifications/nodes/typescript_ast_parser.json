{
  "nodeType": "typescript_ast",
  "displayName": "TypeScript AST Parser",
  "category": "utility",
  "icon": "üîç",
  "color": "#3178c6",
  "description": "Parses TypeScript source code and extracts AST, interfaces, types, and enums",
  "fields": [
    {
      "name": "source",
      "type": "string",
      "required": true,
      "description": "TypeScript source code to parse",
      "uiConfig": {
        "inputType": "code",
        "language": "typescript"
      }
    },
    {
      "name": "extractPatterns",
      "type": "array",
      "required": false,
      "defaultValue": ["interface", "type", "enum"],
      "description": "Patterns to extract from the AST",
      "validation": {
        "itemType": "string",
        "allowedValues": ["interface", "type", "enum", "class", "function", "const", "export"]
      }
    },
    {
      "name": "includeJSDoc",
      "type": "boolean",
      "required": false,
      "defaultValue": false,
      "description": "Include JSDoc comments in the extracted data"
    },
    {
      "name": "parseMode",
      "type": "enum",
      "values": ["module", "script"],
      "required": false,
      "defaultValue": "module",
      "description": "TypeScript parsing mode"
    }
  ],
  "handles": {
    "inputs": ["source"],
    "outputs": ["ast", "interfaces", "types", "enums", "error"]
  },
  "outputs": {
    "ast": {
      "type": "object",
      "description": "Parsed AST structure"
    },
    "interfaces": {
      "type": "array",
      "description": "Extracted interface definitions"
    },
    "types": {
      "type": "array",
      "description": "Extracted type aliases"
    },
    "enums": {
      "type": "array",
      "description": "Extracted enum definitions"
    },
    "error": {
      "type": "string",
      "description": "Error message if parsing fails"
    }
  },
  "execution": {
    "timeout": 30,
    "retryable": false,
    "maxRetries": 0,
    "requires": ["ts-morph"]
  },
  "examples": [
    {
      "name": "Parse Interface",
      "description": "Extract interface from TypeScript code",
      "configuration": {
        "source": "interface User {\n  id: string;\n  name: string;\n  age?: number;\n}",
        "extractPatterns": ["interface"]
      }
    },
    {
      "name": "Parse Multiple Types",
      "description": "Extract interfaces, types, and enums",
      "configuration": {
        "source": "interface User { id: string; }\ntype Status = 'active' | 'inactive';\nenum Role { Admin, User }",
        "extractPatterns": ["interface", "type", "enum"],
        "includeJSDoc": true
      }
    }
  ]
}