{
  "nodes": [
    {
      "id": "node_0",
      "type": "start",
      "position": {
        "x": 50,
        "y": 200
      },
      "data": {
        "custom_data": {
          "message": "Starting model generation using enhanced template_job with foreach"
        },
        "output_data_structure": {},
        "label": "start"
      }
    },
    {
      "id": "node_1",
      "type": "sub_diagram",
      "position": {
        "x": 200,
        "y": 200
      },
      "data": {
        "diagram_name": "projects/codegen/diagrams/shared/parse_typescript_batch_direct",
        "diagram_format": "light",
        "passInputData": false,
        "ignoreIfSub": true,
        "label": "parse all typescript"
      }
    },
    {
      "id": "node_2",
      "type": "db",
      "position": {
        "x": 350,
        "y": 200
      },
      "data": {
        "operation": "read",
        "sub_type": "file",
        "format": "json",
        "glob": true,
        "file": [
          "temp/specifications/nodes/*.spec.ts.json"
        ],
        "label": "discover node specs"
      }
    },
    {
      "id": "node_3",
      "type": "code_job",
      "position": {
        "x": 500,
        "y": 200
      },
      "data": {
        "language": "python",
        "code": "# Extract all node specifications from parsed files\nspecs = []\n# inputs.get('default') contains the glob results\nnode_files = inputs.get('default', {})\n\nfor filepath, ast_data in node_files.items():\n    # Each file should have constants with node specs\n    for const in (ast_data.get('constants') or []):\n        value = const.get('value')\n        if isinstance(value, dict) and 'nodeType' in value:\n            specs.append(value)\n\n# Use result = {} pattern for code_job output\nresult = {'specs': specs}\n",
        "label": "extract specifications"
      }
    },
    {
      "id": "node_4",
      "type": "template_job",
      "position": {
        "x": 700,
        "y": 200
      },
      "data": {
        "engine": "jinja2",
        "template_path": "projects/codegen/templates/backend/pydantic_model_simple.j2",
        "foreach": {
          "items": "specs",
          "as": "spec",
          "output_path": "dipeo/diagram_generated_staged/models/{spec.nodeTypeSnake}_model.py"
        },
        "label": "generate backend models"
      }
    },
    {
      "id": "node_5",
      "type": "template_job",
      "position": {
        "x": 900,
        "y": 200
      },
      "data": {
        "engine": "jinja2",
        "template_path": "projects/codegen/templates/models/enums_simple.j2",
        "output_path": "dipeo/diagram_generated_staged/enums.py",
        "variables": {
          "specs": "{specs}"
        },
        "label": "generate enums"
      }
    },
    {
      "id": "node_6",
      "type": "code_job",
      "position": {
        "x": 1100,
        "y": 200
      },
      "data": {
        "language": "python",
        "code": "# Prepare context for __init__.py generation\nmodel_names = []\nfor spec in specs:\n    model_names.append({\n        'module': spec['nodeTypeSnake'] + '_model',\n        'class': spec['nodeTypePascal'] + 'NodeData'\n    })\n# Use result = {} pattern for code_job output\nresult = {'model_imports': model_names}\n",
        "label": "prepare init context"
      }
    },
    {
      "id": "node_7",
      "type": "template_job",
      "position": {
        "x": 1300,
        "y": 200
      },
      "data": {
        "engine": "jinja2",
        "template_content": "# Auto-generated __init__.py for models package\n\n{% for model in model_imports %}\nfrom .{{ model.module }} import {{ model.class }}\n{% endfor %}\n\n__all__ = [\n{% for model in model_imports %}\n    \"{{ model.class }}\",\n{% endfor %}\n]\n",
        "output_path": "dipeo/diagram_generated_staged/models/__init__.py",
        "label": "generate models init"
      }
    },
    {
      "id": "node_8",
      "type": "endpoint",
      "position": {
        "x": 1500,
        "y": 200
      },
      "data": {
        "save_to_file": false,
        "label": "end"
      }
    }
  ],
  "arrows": [
    {
      "id": "arrow_0",
      "source": "node_0_default_output",
      "target": "node_1_default_input",
      "label": null,
      "packing": null,
      "data": null,
      "content_type": "raw_text"
    },
    {
      "id": "arrow_1",
      "source": "node_1_default_output",
      "target": "node_2_default_input",
      "label": null,
      "packing": null,
      "data": null,
      "content_type": "object"
    },
    {
      "id": "arrow_2",
      "source": "node_2_default_output",
      "target": "node_3_default_input",
      "label": null,
      "packing": null,
      "data": null,
      "content_type": "object"
    },
    {
      "id": "arrow_3",
      "source": "node_3_default_output",
      "target": "node_4_default_input",
      "label": null,
      "packing": null,
      "data": null,
      "content_type": "object"
    },
    {
      "id": "arrow_4",
      "source": "node_3_default_output",
      "target": "node_5_default_input",
      "label": "specs",
      "packing": null,
      "data": null,
      "content_type": "object"
    },
    {
      "id": "arrow_5",
      "source": "node_3_default_output",
      "target": "node_6_default_input",
      "label": "specs",
      "packing": null,
      "data": null,
      "content_type": "object"
    },
    {
      "id": "arrow_6",
      "source": "node_6_default_output",
      "target": "node_7_default_input",
      "label": null,
      "packing": null,
      "data": null,
      "content_type": "object"
    },
    {
      "id": "arrow_7",
      "source": "node_4_default_output",
      "target": "node_8_default_input",
      "label": null,
      "packing": null,
      "data": null,
      "content_type": "raw_text"
    },
    {
      "id": "arrow_8",
      "source": "node_5_default_output",
      "target": "node_8_default_input",
      "label": null,
      "packing": null,
      "data": null,
      "content_type": "raw_text"
    },
    {
      "id": "arrow_9",
      "source": "node_7_default_output",
      "target": "node_8_default_input",
      "label": null,
      "packing": null,
      "data": null,
      "content_type": "raw_text"
    }
  ],
  "persons": [],
  "handles": [
    {
      "id": "node_0_default_output",
      "node_id": "node_0",
      "label": "default",
      "direction": "output",
      "data_type": "any",
      "position": "right"
    },
    {
      "id": "node_1_default_input",
      "node_id": "node_1",
      "label": "default",
      "direction": "input",
      "data_type": "any",
      "position": "left"
    },
    {
      "id": "node_1_default_output",
      "node_id": "node_1",
      "label": "default",
      "direction": "output",
      "data_type": "any",
      "position": "right"
    },
    {
      "id": "node_2_default_input",
      "node_id": "node_2",
      "label": "default",
      "direction": "input",
      "data_type": "any",
      "position": "left"
    },
    {
      "id": "node_2_default_output",
      "node_id": "node_2",
      "label": "default",
      "direction": "output",
      "data_type": "any",
      "position": "right"
    },
    {
      "id": "node_3_default_input",
      "node_id": "node_3",
      "label": "default",
      "direction": "input",
      "data_type": "any",
      "position": "left"
    },
    {
      "id": "node_3_default_output",
      "node_id": "node_3",
      "label": "default",
      "direction": "output",
      "data_type": "any",
      "position": "right"
    },
    {
      "id": "node_4_default_input",
      "node_id": "node_4",
      "label": "default",
      "direction": "input",
      "data_type": "any",
      "position": "left"
    },
    {
      "id": "node_4_default_output",
      "node_id": "node_4",
      "label": "default",
      "direction": "output",
      "data_type": "any",
      "position": "right"
    },
    {
      "id": "node_5_default_input",
      "node_id": "node_5",
      "label": "default",
      "direction": "input",
      "data_type": "any",
      "position": "left"
    },
    {
      "id": "node_5_default_output",
      "node_id": "node_5",
      "label": "default",
      "direction": "output",
      "data_type": "any",
      "position": "right"
    },
    {
      "id": "node_6_default_input",
      "node_id": "node_6",
      "label": "default",
      "direction": "input",
      "data_type": "any",
      "position": "left"
    },
    {
      "id": "node_6_default_output",
      "node_id": "node_6",
      "label": "default",
      "direction": "output",
      "data_type": "any",
      "position": "right"
    },
    {
      "id": "node_7_default_input",
      "node_id": "node_7",
      "label": "default",
      "direction": "input",
      "data_type": "any",
      "position": "left"
    },
    {
      "id": "node_7_default_output",
      "node_id": "node_7",
      "label": "default",
      "direction": "output",
      "data_type": "any",
      "position": "right"
    },
    {
      "id": "node_8_default_input",
      "node_id": "node_8",
      "label": "default",
      "direction": "input",
      "data_type": "any",
      "position": "left"
    }
  ],
  "metadata": {
    "name": "Untitled",
    "description": null,
    "author": null,
    "tags": null,
    "created": "2025-08-16T12:12:40.925Z",
    "modified": "2025-08-16T12:12:40.925Z",
    "version": "1.0.0",
    "id": null
  }
}