version: light
nodes:
- label: start
  type: START
  position: {x: -728, y: 348}
  props:
    trigger_mode: manual
    custom_data:
      processing_config:
        quality_threshold: 70
        output_format: json
- label: load raw data
  type: DB
  position: {x: -386, y: 146}
  props:
    operation: read
    sub_type: file
    file: files/uploads/raw_data.csv
- label: load config
  type: DB
  position: {x: -413, y: 481}
  props:
    flipped: [false, true]
    operation: read
    sub_type: file
    file: files/config/processing_rules.json
- label: parse data
  type: CODE_JOB
  position: {x: 19, y: 342}
  props:
    code: files/code_examples/data_processor.py
    functionName: parse_data
    language: python
- label: quality check
  type: PERSON_JOB
  position: {x: 355, y: 233}
  props:
    default_prompt: |
      Analyze this data summary and provide a quality score (0-100):
      Total rows: {{parsed_data.total_rows}}
      Valid rows: {{parsed_data.valid_rows}}
      Invalid rows: {{parsed_data.invalid_rows}}
      Columns: {{parsed_data.columns}}
      Statistics: {{parsed_data.statistics}}

      IMPORTANT: You MUST respond with ONLY a valid JSON object with score and issues.

      Required format:
      {
        "score": <number 0-100>,
        "issues": ["issue1", "issue2"]
      }

      Example response:
      {
        "score": 85,
        "issues": ["Missing data in row 9", "Invalid region in 1 row"]
      }

      DO NOT include any explanatory text before or after the JSON.
    max_iteration: 1
    person: person_QualityChecker
- label: extract score
  type: CODE_JOB
  position: {x: 731, y: 425}
  props:
    code: files/code_examples/data_processor.py
    functionName: extract_score
    language: python
- label: check quality threshold
  type: CONDITION
  position: {x: 720, y: 775}
  props:
    condition_type: custom
    expression: processing_result.quality_score >= 70
    flipped: [true, false]
- label: transform data
  type: CODE_JOB
  position: {x: 271, y: 943}
  props:
    code: files/code_examples/data_processor.py
    functionName: transform_data
    flipped: [true, false]
    language: python
- label: enrich with api
  type: API_JOB
  position: {x: -79, y: 995}
  props:
    flipped: [true, false]
    headers:
      Accept: application/json
    method: get
    url: https://api.exchangerate-api.com/v4/latest/USD
- label: merge enriched data
  type: CODE_JOB
  position: {x: -393, y: 854}
  props:
    code: files/code_examples/data_processor.py
    flipped: [true, false]
    functionName: enrich_data
    language: python
- label: pattern analysis
  type: CODE_JOB
  position: {x: -550, y: 950}
  props:
    code: files/code_examples/data_processor.py
    functionName: analyze_patterns
    flipped: [true, false]
    language: python
- label: analyze patterns
  type: PERSON_JOB
  position: {x: -722, y: 1054}
  props:
    default_prompt: |
      Analyze these patterns in the enriched data:
      {{enriched_result.patterns}}

      Provide insights on:
      1. Key trends
      2. Anomalies
      3. Recommendations

      Format as JSON with sections for each.
    flipped: [true, false]
    max_iteration: 1
    memory_profile: FOCUSED
    person: person_DataAnalyst
    memory_settings:
      view: conversation_pairs
      max_messages: 20
      preserve_system: true
- label: handle low quality
  type: CODE_JOB
  position: {x: 276, y: 655}
  props:
    code: files/code_examples/data_processor.py
    flipped: [true, false]
    functionName: handle_error
    language: python
- label: generate report
  type: PERSON_JOB
  position: {x: -1040, y: 836}
  props:
    default_prompt: |
      Create a comprehensive data processing report combining:
      - Processing summary: {{final_data.enriched_data}}
      - Pattern analysis: {{final_data.analysis}}
      - Quality metrics: Score {{final_data.quality_score}}

      Format as a professional markdown report with sections, tables, and recommendations.
    flipped: [true, false]
    max_iteration: 1
    memory_profile: FULL
    person: person_ReportWriter
    memory_settings:
      view: all_involved
      max_messages: null
      preserve_system: true
- label: save success report
  type: ENDPOINT
  position: {x: -1305, y: 657}
  props:
    file_format: md
    save_to_file: true
    file_name: files/results/data_processing_report.md
- label: save processed data
  type: ENDPOINT
  position: {x: -869, y: 638}
  props:
    file_format: json
    save_to_file: true
    file_name: files/results/processed_data.json
- label: save error report
  type: ENDPOINT
  position: {x: -102, y: 600}
  props:
    file_format: json
    save_to_file: true
    file_name: files/results/error_report.json
connections:
- from: start
  to: load raw data
  content_type: object
  label: config
- from: start
  to: load config
  content_type: object
  label: config
- from: start
  to: parse data
  content_type: object
  label: processing_config
- from: load raw data
  to: parse data
  content_type: raw_text
  label: raw_data
- from: load config
  to: parse data
  content_type: raw_text
  label: config_data
- from: parse data
  to: quality check
  content_type: object
  label: parsed_data
- from: quality check
  to: extract score
  content_type: raw_text
  label: quality_result
- from: parse data
  to: extract score
  content_type: object
  label: parsed_data
- from: extract score
  to: check quality threshold
  content_type: object
  label: processing_result
- from: start
  to: check quality threshold
  content_type: object
  label: processing_config
- from: check quality threshold_condtrue
  to: transform data
  content_type: object
  label: processing_result
- from: transform data
  to: enrich with api
  content_type: object
  label: transformed_data
- from: enrich with api
  to: merge enriched data
  content_type: raw_text
  label: api_response
- from: transform data
  to: merge enriched data
  content_type: object
  label: transformed_data
- from: merge enriched data
  to: pattern analysis
  content_type: object
  label: enriched_data
- from: pattern analysis
  to: analyze patterns
  content_type: object
  label: enriched_result
- from: analyze patterns
  to: generate report
  content_type: raw_text
  label: analysis
- from: pattern analysis
  to: generate report
  content_type: object
  label: final_data
- from: generate report
  to: save success report
  content_type: raw_text
- from: pattern analysis
  to: save processed data
  content_type: object
  label: enriched_result
- from: check quality threshold_condfalse
  to: handle low quality
  content_type: object
  label: processing_result
- from: handle low quality
  to: save error report
  content_type: object
  label: error_result
persons:
  dataanalyst:
    service: openai
    model: gpt-4.1-nano
    system_prompt: You are a data analyst expert. Analyze data patterns and provide
      insights in JSON format.
    api_key_id: APIKEY_52609F
  qualitychecker:
    service: openai
    model: gpt-4.1-nano
    system_prompt: 'You are a data quality expert. ALWAYS respond with ONLY valid
      JSON in the exact format {"score": number, "issues": []}. Never include explanatory
      text.'
    api_key_id: APIKEY_52609F
  reportwriter:
    service: openai
    model: gpt-4.1-nano
    system_prompt: You write comprehensive data analysis reports in markdown format.
    api_key_id: APIKEY_52609F
  transformer:
    service: openai
    model: gpt-4.1-nano
    system_prompt: You transform data according to business rules. Output clean, structured
      data.
    api_key_id: APIKEY_52609F
