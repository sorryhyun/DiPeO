version: light
description: Convert TypeScript models to Python using diagram-based approach

nodes:
  - label: Start
    type: start
    position: {x: 50, y: 100}
    props:
      trigger_mode: manual
      
  - label: Glob TypeScript Files
    type: code_job
    props:
      functionName: glob_typescript_files
      code: files/codegen/code/domain_model_functions.py
      code_type: python
    position: {x: 250, y: 100}
    
  - label: Read TypeScript Files
    type: code_job
    props:
      functionName: read_typescript_files
      code: files/codegen/code/domain_model_functions.py
      code_type: python
    position: {x: 450, y: 100}
        
    
  - label: Parse TypeScript Files
    type: typescript_ast
    props:
      extractPatterns: ["interface", "type", "enum", "class"]
      includeJSDoc: true
      parseMode: module
    position: {x: 750, y: 100}
      
  - label: Transform to Python Models
    type: code_job
    props:
      functionName: transform_typescript_to_python
      code: files/codegen/code/type_transformers.py
      code_type: python
    position: {x: 850, y: 100}
      
  - label: Generate Pydantic Models
    type: code_job
    props:
      functionName: generate_pydantic_models
      code: files/codegen/code/domain_model_functions.py
      code_type: python
    position: {x: 700, y: 250}
      
  - label: Generate Conversions
    type: code_job
    props:
      functionName: generate_conversions
      code: files/codegen/code/domain_model_functions.py
      code_type: python
    position: {x: 900, y: 250}
    
  - label: Generate Zod Schemas
    type: code_job
    props:
      functionName: generate_zod_schemas
      code: files/codegen/code/domain_model_functions.py
      code_type: python
    position: {x: 1100, y: 250}
    
  - label: Generate JSON Schemas
    type: code_job
    props:
      functionName: generate_json_schemas
      code: files/codegen/code/json_schema_generator.py
      code_type: python
    position: {x: 1300, y: 250}
    
  - label: Combine Results
    type: code_job
    props:
      functionName: combine_generation_results
      code: files/codegen/code/domain_model_functions.py
      code_type: python
    position: {x: 1200, y: 400}
    
  - label: Verify Generated Code
    type: code_job
    props:
      functionName: verify_generated_code
      code: files/codegen/code/domain_model_functions.py
      code_type: python
    position: {x: 1200, y: 550}
    
  - label: Generate Summary Report
    type: person_job
    props:
      person: reporter
      default_prompt: |
        Code generation completed for TypeScript → Python models.
        
        Files processed: {{file_count}}
        Generated files:
        {{#each generated_files}}
        - {{this.path}} ({{this.type}})
        {{/each}}
        
        {{#if verification_results.errors}}
        ❌ Errors found:
        {{#each verification_results.errors}}
        - {{this}}
        {{/each}}
        {{else}}
        ✅ All generated code is syntactically valid!
        {{/if}}
        
        {{#if verification_results.warnings}}
        ⚠️ Warnings:
        {{#each verification_results.warnings}}
        - {{this}}
        {{/each}}
        {{/if}}
        
        Please provide a summary of the code generation results.
      max_iteration: 1
    position: {x: 1200, y: 700}
    
  - label: Save Results
    type: code_job
    position: {x: 1200, y: 850}
    props:
      code_type: python
      code: files/codegen/code/phase3/sub_diagram_helpers.py
      functionName: save_domain_model_results
      
  - label: End
    type: endpoint
    position: {x: 1200, y: 1000}
    props:
      save_to_file: false

connections:
  - from: Start
    to: Glob TypeScript Files
    content_type: object
    
  - from: Glob TypeScript Files
    to: Read TypeScript Files
    content_type: object
    
  - from: Read TypeScript Files
    to: Parse TypeScript Files
    content_type: object
    
  - from: Parse TypeScript Files
    to: Transform to Python Models
    content_type: object
    
  - from: Transform to Python Models_model_data
    to: Generate Pydantic Models
    content_type: object
    
  - from: Transform to Python Models_conversion_data
    to: Generate Conversions
    content_type: object
    
  - from: Transform to Python Models_zod_data
    to: Generate Zod Schemas
    content_type: object
    
  - from: Transform to Python Models_schema_data
    to: Generate JSON Schemas
    content_type: object
    
  - from: Generate Pydantic Models
    to: Combine Results
    content_type: object
    label: pydantic_result
    
  - from: Generate Conversions
    to: Combine Results
    content_type: object
    label: conversion_result
    
  - from: Generate Zod Schemas
    to: Combine Results
    content_type: object
    label: zod_result
    
  - from: Generate JSON Schemas
    to: Combine Results
    content_type: object
    label: schema_result
    
  - from: Read TypeScript Files
    to: Combine Results
    content_type: object
    label: file_info
    
  - from: Combine Results
    to: Verify Generated Code
    content_type: object
    
  - from: Verify Generated Code
    to: Generate Summary Report
    content_type: object
    label: verification_results
    
  - from: Combine Results
    to: Generate Summary Report
    content_type: object
    label: generation_info
    
  - from: Generate Summary Report
    to: Save Results
    content_type: raw_text
    
  - from: Verify Generated Code
    to: Save Results
    content_type: object
    label: verification_result
    
  - from: Combine Results
    to: Save Results
    content_type: object
    label: combined_results
    
  - from: Save Results
    to: End
    content_type: object

persons:
  reporter:
    service: openai
    model: gpt-4.1-mini
    api_key_id: APIKEY_52609F
    system_prompt: |
      You are a code generation reporter. Provide clear, concise summaries
      of code generation results, highlighting any issues that need attention.