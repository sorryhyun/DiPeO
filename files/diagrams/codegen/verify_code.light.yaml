version: light
nodes:
- label: Start
  type: start
  position: {x: 100, y: 200}
  props:
    trigger_mode: manual
    custom_data:
      file_path: "{{FILE_PATH}}"
      code_type: "{{CODE_TYPE}}"
    output_data_structure:
      file_path: string
      code_type: string

- label: Read Generated File
  type: db
  position: {x: 300, y: 200}
  props:
    operation: read
    sub_type: file
    source_details: "{{file_path}}"

- label: Verify Code Quality
  type: person_job
  position: {x: 500, y: 200}
  props:
    person: Person 1
    default_prompt: |
      Please perform a comprehensive code review of the following {{code_type}} file:
      
      File: {{file_path}}
      
      Code content:
      ```{{code_type}}
      {{file_content}}
      ```
      
      Review checklist:
      1. **Syntax and Type Safety**
         - Check for syntax errors
         - Verify type annotations are correct
         - Ensure imports are valid
      
      2. **Security**
         - Look for any potentially malicious code patterns
         - Check for hardcoded secrets or API keys
         - Verify no unauthorized file system access
         - Check for code injection vulnerabilities
      
      3. **Code Quality**
         - Verify naming conventions match DiPeO standards
         - Check for proper error handling
         - Ensure code follows project patterns
      
      4. **Completeness**
         - Verify all required fields/methods are present
         - Check that generated code matches the specification
      
      Provide:
      - VERDICT: PASS or FAIL
      - Issues found (if any)
      - Security concerns (if any)
      - Suggestions for improvement
    max_iteration: 1

- label: Format Verification Result
  type: code_job
  position: {x: 700, y: 200}
  props:
    code_type: python
    code: |
      def main(inputs):
          verification = inputs.get('verification', 'No verification result')
          file_path = inputs.get('file_path', 'Unknown file')
          
          # Parse the verification result
          verdict = 'FAIL'
          if 'PASS' in verification.upper():
              verdict = 'PASS'
          
          result = {
              'file': file_path,
              'verdict': verdict,
              'details': verification,
              'timestamp': __import__('datetime').datetime.now().isoformat()
          }
          
          # Save to verification log
          import json
          import os
          
          log_dir = 'output/verification_logs'
          os.makedirs(log_dir, exist_ok=True)
          
          log_file = os.path.join(log_dir, 'code_verification.json')
          logs = []
          if os.path.exists(log_file):
              with open(log_file, 'r') as f:
                  logs = json.load(f)
          
          logs.append(result)
          
          with open(log_file, 'w') as f:
              json.dump(logs, f, indent=2)
          
          return result

- label: End
  type: endpoint
  position: {x: 900, y: 200}
  props:
    save_to_file: true
    file_path: output/verification_logs/latest_verification.md
    file_format: md

connections:
- from: Start
  to: Read Generated File
  content_type: object
  label: config

- from: Read Generated File
  to: Verify Code Quality
  content_type: raw_text
  label: file_content

- from: Start
  to: Verify Code Quality
  content_type: object
  label: config

- from: Verify Code Quality
  to: Format Verification Result
  content_type: raw_text
  label: verification

- from: Start
  to: Format Verification Result
  content_type: object
  label: config

- from: Format Verification Result
  to: End
  content_type: object

persons:
  Person 1:
    service: openai
    model: gpt-4.1-nano
    api_key_id: APIKEY_52609F
    description: Code security and quality verifier