version: light
nodes:
- label: Start
  type: start
  position: {x: 100, y: 100}
  props:
    trigger_mode: manual

- label: Load JSON
  type: db
  position: {x: 300, y: 100}
  props:
    operation: read
    sub_type: file
    source_details: "files/specifications/nodes/example_hook.json"

- label: Debug Loaded
  type: code_job
  position: {x: 500, y: 100}
  props:
    code_type: python
    code: |
      def main(inputs):
          print(f"DEBUG: After DB node, inputs: {list(inputs.keys())}")
          for key, value in inputs.items():
              value_type = type(value).__name__
              if isinstance(value, str):
                  print(f"  {key}: {value_type} - length={len(value)}, first 100 chars: {value[:100]}")
              else:
                  print(f"  {key}: {value_type} - {str(value)[:100]}")
          return {"loaded_data": inputs.get("default", "")}

- label: Validate JSON
  type: json_schema_validator
  position: {x: 700, y: 100}
  props:
    schema_path: files/schemas/node_specification.schema.json
    strict_mode: true

- label: Debug Validated
  type: code_job
  position: {x: 900, y: 100}
  props:
    code_type: python
    code: |
      def main(inputs):
          print(f"DEBUG: After validator, inputs: {list(inputs.keys())}")
          for key, value in inputs.items():
              value_type = type(value).__name__
              if isinstance(value, dict):
                  print(f"  {key}: {value_type} - keys={list(value.keys())[:5]}")
                  if 'valid' in value:
                      print(f"    valid: {value['valid']}")
                  if 'data' in value:
                      data_type = type(value['data']).__name__
                      print(f"    data: {data_type}")
                      if isinstance(value['data'], dict) and 'nodeType' in value['data']:
                          print(f"      nodeType: {value['data']['nodeType']}")
              else:
                  print(f"  {key}: {value_type} - {str(value)[:100]}")
          return {"status": "debug complete"}

- label: End
  type: endpoint
  position: {x: 1100, y: 100}

connections:
- from: Start
  to: Load JSON
- from: Load JSON
  to: Debug Loaded
  content_type: raw_text
- from: Debug Loaded
  to: Validate JSON
  content_type: raw_text
- from: Validate JSON
  to: Debug Validated
  content_type: object
- from: Debug Validated
  to: End