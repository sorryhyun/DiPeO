# Test diagram for Notion manifest-based provider
# This tests the new manifest-based approach before removing legacy providers

label: Test Notion Manifest Provider
description: Verify Notion operations work with the new manifest-based provider

nodes:
  - label: Start
    type: start
    position: {x: 50, y: 200}
    props:
      custom_data:
        page_title: "Test Page from DiPeO Manifest Provider"
        page_content: "This page was created using the new manifest-based Notion provider."
        notion_database_id: null  # Will use workspace as parent

  - label: Prepare Page Data
    type: code_job
    position: {x: 250, y: 200}
    props:
      language: python
      code: |
        import json
        from datetime import datetime
        
        # Prepare the page creation config as a flat structure for integrated_api
        # The manifest will handle the complex JSON structure
        page_config = {
            "parent_type": "workspace",
            "parent_workspace": True,
            "title": page_title,
            "content": page_content,
            "timestamp": datetime.now().isoformat()
        }
        
        # Create simplified config that the manifest can transform
        result = {
            "page_config": json.dumps({
                "parent": {"type": "workspace", "workspace": True},
                "properties": {
                    "title": {
                        "title": [
                            {
                                "type": "text",
                                "text": {"content": page_title}
                            }
                        ]
                    }
                },
                "children": [
                    {
                        "type": "paragraph",
                        "paragraph": {
                            "rich_text": [
                                {
                                    "type": "text",
                                    "text": {"content": page_content}
                                }
                            ]
                        }
                    },
                    {
                        "type": "heading_2",
                        "heading_2": {
                            "rich_text": [
                                {
                                    "type": "text",
                                    "text": {"content": "Test Details"}
                                }
                            ]
                        }
                    },
                    {
                        "type": "paragraph",
                        "paragraph": {
                            "rich_text": [
                                {
                                    "type": "text",
                                    "text": {"content": f"Created at: {datetime.now().isoformat()}"}
                                }
                            ]
                        }
                    }
                ]
            })
        }

  - label: Create Notion Page
    type: integrated_api
    position: {x: 450, y: 200}
    props:
      provider: notion
      operation: create_page
      api_key_id: notion
      config: "{{page_config.page_config}}"  # Pass as JSON string

  - label: Extract Page ID
    type: code_job
    position: {x: 650, y: 200}
    props:
      language: python
      code: |
        # Extract the page ID from the created page
        created_page = created_page_result
        if created_page.get("success"):
            page_data = created_page.get("data", {})
            page_id = page_data.get("id")
            print(f"Created page with ID: {page_id}")
            result = {"page_id": page_id, "page_data": page_data}
        else:
            error = created_page.get("error", "Unknown error")
            print(f"Failed to create page: {error}")
            result = {"error": error}

  - label: Read Created Page
    type: integrated_api
    position: {x: 850, y: 200}
    props:
      provider: notion
      operation: read_page
      api_key_id: notion
      resource_id: "{{page_info.page_id}}"

  - label: Prepare Blocks
    type: code_job
    position: {x: 650, y: 350}
    props:
      language: python
      code: |
        import json
        
        # Prepare blocks to append as JSON string
        blocks_config = json.dumps({
            "blocks": [
                {
                    "type": "divider",
                    "divider": {}
                },
                {
                    "type": "heading_3",
                    "heading_3": {
                        "rich_text": [
                            {
                                "type": "text",
                                "text": {"content": "Appended Content"}
                            }
                        ]
                    }
                },
                {
                    "type": "paragraph",
                    "paragraph": {
                        "rich_text": [
                            {
                                "type": "text",
                                "text": {"content": "This content was added after page creation."}
                            }
                        ]
                    }
                }
            ]
        })
        
        result = {"blocks_config": blocks_config, "page_id": page_info.get("page_id")}

  - label: Append More Content
    type: integrated_api
    position: {x: 850, y: 350}
    props:
      provider: notion
      operation: append_blocks
      api_key_id: notion
      resource_id: "{{blocks_data.page_id}}"
      config: "{{blocks_data.blocks_config}}"

  - label: List Page Blocks
    type: integrated_api
    position: {x: 1050, y: 350}
    props:
      provider: notion
      operation: list_blocks
      api_key_id: notion
      resource_id: "{{page_info.page_id}}"
      config: '{"page_size": 50}'

  - label: Generate Summary
    type: code_job
    position: {x: 1250, y: 250}
    props:
      language: python
      code: |
        # Summarize the test results
        created = created_page_result or {}
        read = read_page_result or {}
        append = append_result or {}
        blocks = blocks_result or {}
        page_info_data = page_info or {}
        
        summary = {
            "test_status": "success" if page_info_data.get("page_id") else "failed",
            "page_id": page_info_data.get("page_id"),
            "operations_tested": {
                "create_page": created.get("success", False),
                "read_page": read.get("success", False),
                "append_blocks": append.get("success", False),
                "list_blocks": blocks.get("success", False)
            },
            "block_count": len(blocks.get("data", {}).get("results", [])) if blocks.get("success") else 0
        }
        
        if created.get("success"):
            page_data = created.get("data", {})
            summary["page_url"] = page_data.get("url")
            summary["created_time"] = page_data.get("created_time")
        
        print("\n=== NOTION MANIFEST PROVIDER TEST RESULTS ===")
        print(f"Test Status: {summary['test_status'].upper()}")
        if summary.get("page_id"):
            print(f"Page ID: {summary['page_id']}")
            print(f"Page URL: {summary.get('page_url', 'N/A')}")
        print(f"\nOperations Tested:")
        for op, success in summary["operations_tested"].items():
            status = "✓" if success else "✗"
            print(f"  {status} {op}")
        print(f"\nTotal blocks in page: {summary['block_count']}")
        
        result = summary

connections:
  - {from: Start, to: Prepare Page Data}
  - {from: Prepare Page Data, to: Create Notion Page, label: page_config}
  - {from: Create Notion Page, to: Extract Page ID, label: created_page_result}
  - {from: Extract Page ID, to: Read Created Page, label: page_info}
  - {from: Extract Page ID, to: Prepare Blocks, label: page_info}
  - {from: Prepare Blocks, to: Append More Content, label: blocks_data}
  - {from: Read Created Page, to: List Page Blocks, label: read_page_result}
  - {from: Extract Page ID, to: List Page Blocks, label: page_info}
  - {from: Append More Content, to: List Page Blocks, label: append_result}
  - {from: Create Notion Page, to: Generate Summary, label: created_page_result}
  - {from: Read Created Page, to: Generate Summary, label: read_page_result}
  - {from: Append More Content, to: Generate Summary, label: append_result}
  - {from: List Page Blocks, to: Generate Summary, label: blocks_result}
  - {from: Extract Page ID, to: Generate Summary, label: page_info}