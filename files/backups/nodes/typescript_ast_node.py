"""
Auto-generated static node type for typescript_ast.
DO NOT EDIT THIS FILE DIRECTLY.
"""

from dataclasses import *
from typing import *

from ..domain_models import *
from ..enums import *
from ..integrations import *


@dataclass(frozen=True)
class TypescriptAstNode:
    """Parses TypeScript source code and extracts AST, interfaces, types, and enums"""

    # Required base fields first
    id: NodeID
    position: Vec2

    # Required node-specific fields
    source: str

    # Optional base fields
    label: str = ""
    flipped: bool = False
    metadata: Optional[Dict[str, Any]] = None

    # Node type (fixed for this node class)
    type: NodeType = field(default=NodeType.TYPESCRIPT_AST, init=False)

    # Optional node-specific fields
    extract_patterns: List[Any] = field(default_factory=list)
    include_js_doc: bool = False
    parse_mode: Literal["module", "script"] = None
    transform_enums: bool = False
    flatten_output: bool = False
    output_format: Literal["standard", "for_codegen", "for_analysis"] = None
    batch: bool = False
    batch_input_key: str = "sources"

    def to_dict(self) -> Dict[str, Any]:
        """Convert node to dictionary representation."""
        data = {
            "id": self.id,
            "type": self.type.value,
            "position": {"x": self.position.x, "y": self.position.y},
            "label": self.label,
            "flipped": self.flipped,
        }
        if self.metadata:
            data["metadata"] = self.metadata

        # Add node-specific fields
        data["source"] = self.source
        data["extractPatterns"] = self.extract_patterns
        data["includeJSDoc"] = self.include_js_doc
        data["parseMode"] = self.parse_mode
        data["transformEnums"] = self.transform_enums
        data["flattenOutput"] = self.flatten_output
        data["outputFormat"] = self.output_format
        data["batch"] = self.batch
        data["batchInputKey"] = self.batch_input_key
        return data
