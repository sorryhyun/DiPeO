{
  "parse_data": {
    "name": "Parse Data",
    "language": "python",
    "code": "import json\nimport csv\nfrom io import StringIO\n\n# Parse CSV data\ncsv_reader = csv.DictReader(StringIO(raw_data))\ndata_rows = list(csv_reader)\n\n# Parse config\nconfig = json.loads(config_data)\n\n# Basic validation\ntotal_rows = len(data_rows)\nvalid_rows = [row for row in data_rows if all(row.values())]\ninvalid_rows = total_rows - len(valid_rows)\n\n# Prepare data for quality check\ndata_summary = {\n    \"total_rows\": total_rows,\n    \"valid_rows\": len(valid_rows),\n    \"invalid_rows\": invalid_rows,\n    \"columns\": list(data_rows[0].keys()) if data_rows else [],\n    \"sample_data\": data_rows[:5] if data_rows else []\n}\n\n# Set result to pass data forward\nresult = data_summary"
  },
  "extract_score": {
    "name": "Extract Score", 
    "language": "python",
    "code": "import json\nquality_result = json.loads(quality_check_output)\nquality_score = quality_result.get(\"score\", 0)\nquality_issues = quality_result.get(\"issues\", [])\n\n# Also store in data_rows and config for later use\ndata_rows = data_rows if 'data_rows' in locals() else []\nconfig = config if 'config' in locals() else {}\n\n# Set result variables\nresult = {\n    \"quality_score\": quality_score,\n    \"quality_issues\": quality_issues,\n    \"data_rows\": data_rows,\n    \"config\": config\n}"
  },
  "merge_enriched_data": {
    "name": "Merge Enriched Data",
    "language": "python",
    "code": "import json\n\n# Parse transformed data\ntransformed = json.loads(transformed_data)\n\n# Parse API response\napi_data = json.loads(api_response)\nexchange_rates = api_data.get(\"rates\", {})\n\n# Enrich data with exchange rates\nenriched_data = []\nfor item in transformed:\n    if \"amount_usd\" in item:\n        item[\"amount_eur\"] = item[\"amount_usd\"] * exchange_rates.get(\"EUR\", 0.85)\n        item[\"amount_gbp\"] = item[\"amount_usd\"] * exchange_rates.get(\"GBP\", 0.73)\n    enriched_data.append(item)\n\nresult = {\n    \"processed_at\": api_data.get(\"date\", \"unknown\"),\n    \"total_records\": len(enriched_data),\n    \"data\": enriched_data\n}"
  },
  "handle_low_quality": {
    "name": "Handle Low Quality",
    "language": "python",
    "code": "error_report = {\n    \"status\": \"failed\",\n    \"reason\": \"Data quality below threshold\",\n    \"quality_score\": quality_score,\n    \"issues\": quality_issues,\n    \"recommendation\": \"Please clean the source data and retry\"\n}\n\n# Set result to pass error report forward\nresult = error_report"
  }
}