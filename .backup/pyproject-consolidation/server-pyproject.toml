[project]
name = "dipeo-server"
version = "1.0.0"
description = "DiPeO Backend API Server"
authors = [
    {name = "sorryhyun", email = "standingbehindnv@gmail.com"},
]
readme = "README.md"
license = {text = "Apache-2.0"}
requires-python = ">=3.13"
dependencies = [
    "aiofiles>=24.1.0",
    "aiohttp>=3.12.13",
    "anthropic>=0.54.0",
    "dependency-injector>=4.41.0",
    "fastapi>=0.115.13",
    "google-genai>=1.21.0",
    "gql>=3.5.3",
    "hypercorn>=0.17.3",
    "notion-client>=2.4.0",
    "ollama>=0.4.0",
    "openai>=1.88.0",
    "prometheus-client>=0.22.1",
    "pydantic>=2.11.7",
    "python-dotenv>=1.1.0",
    "python-multipart>=0.0.20",
    "pyyaml>=6.0.2",
    "strawberry-graphql>=0.275.5",
    "structlog>=24.4.0",
    "tenacity>=8.5.0",
]

[project.optional-dependencies]
dev = [
    "black",
    "isort",
    "mypy",
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
    "ruff>=0.8.0",
]

[project.scripts]
dipeo-server = "dipeo_server.__main__:main"

[build-system]
requires = ["setuptools>=65", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["src"]
include = ["dipeo_server*"]
exclude = ["tests*"]

[tool.import-linter]
root_packages = ["dipeo_server"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
addopts = "-v"
asyncio_mode = "auto"

[tool.black]
line-length = 88
target-version = ['py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | __generated__
  | generated
)/
'''

[tool.isort]
profile = "black"
skip_glob = ["*/__generated__/*", "*/generated/*"]
known_first_party = ["dipeo_server", "src"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
line_length = 88

[tool.mypy]
plugins = ["pydantic.mypy"]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
no_implicit_optional = true
exclude = [
    "__generated__",
    "generated",
]
# Allow using lowercase generics from Python 3.9+
disable_error_code = ["misc"]

[[tool.mypy.overrides]]
module = [
    "strawberry.*",
    "hypercorn.*",
    "uvloop.*",
    "aiofiles.*",
    "prometheus_client.*",
    "structlog.*",
    "tenacity.*",
    "notion_client.*",
    "yaml.*",
    "dotenv.*",
    "multipart.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "dipeo_server.api.graphql.*"
disable_error_code = ["call-arg", "arg-type"]

[tool.ruff]
# Same as Black.
line-length = 88
target-version = "py313"

# Exclude generated files
exclude = [
    "__generated__",
    "generated",
    "migrations",
    "venv",
    ".git",
    "__pycache__",
    ".mypy_cache",
    ".ruff_cache",
    "*/__generated__.py",
    "**/__generated__.py",
]

[tool.ruff.lint]
# Enable rules
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "N",  # pep8-naming
    "UP", # pyupgrade
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "T10", # flake8-debugger
    "ISC", # flake8-implicit-str-concat
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PLC", # pylint convention
    "PLE", # pylint error
    "PLW", # pylint warning
    "RUF", # ruff-specific rules
]

ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
    "N818",  # exception names should end with Error (we have custom exceptions)
    "SIM108", # Use ternary operator (sometimes less readable)
    "SIM102", # Nested if statements can be more readable
    "TID252", # Relative imports are used throughout the codebase
    "DTZ005", # datetime.now() without timezone is common in codebase
    "DTZ003", # datetime.utcnow() is used in several places
    "PLC0415", # imports not at top level - used for lazy loading
    "RUF012", # mutable class attributes - common pattern
    "F401",  # imported but unused
    "F403",  # `from module import *` used; unable to detect undefined names
    "F405",  # name may be undefined, or defined from star imports
    "F841",  # local variable is assigned to but never used
    "B904",  # raise from - stylistic choice
    "RUF006", # asyncio.create_task without storing reference
    "N815",  # mixedCase variables - used in API schema
    "N802",  # function names should be lowercase - GraphQL API
    "E722",  # bare except - used for system capability checks
    "PTH110", # os.path.exists - os.path is used throughout
    "PTH123", # open() should use Path.open()
    "PTH118", # os.path.join - os.path is used throughout
    "ERA001", # commented out code - development artifacts
    "PLW2901", # loop variable overwritten - intentional pattern
    "RUF001", # ambiguous unicode characters in strings
    "RUF002", # ambiguous unicode characters in docstrings
]

[tool.ruff.lint.isort]
known-first-party = ["dipeo_server", "src"]

[tool.ruff.lint.per-file-ignores]
# Tests can use assertions and relative imports
"tests/*" = ["S101", "TID252"]
