from __future__ import annotations
from enum import Enum
from typing import Any, Dict, List, Literal, NewType, Optional
from pydantic import BaseModel, ConfigDict, Field

"""
Auto-generated Python models from TypeScript definitions
DO NOT EDIT THIS FILE DIRECTLY
Generated by: packages/domain-models/scripts/generate-python.ts
"""

class ExecutionStatus(str, Enum):
    STARTED = "STARTED"
    RUNNING = "RUNNING"
    PAUSED = "PAUSED"
    COMPLETED = "COMPLETED"
    FAILED = "FAILED"
    ABORTED = "ABORTED"

class NodeExecutionStatus(str, Enum):
    PENDING = "PENDING"
    RUNNING = "RUNNING"
    COMPLETED = "COMPLETED"
    FAILED = "FAILED"
    SKIPPED = "SKIPPED"
    PAUSED = "PAUSED"

class EventType(str, Enum):
    EXECUTION_STARTED = "EXECUTION_STARTED"
    NODE_STARTED = "NODE_STARTED"
    NODE_RUNNING = "NODE_RUNNING"
    NODE_COMPLETED = "NODE_COMPLETED"
    NODE_FAILED = "NODE_FAILED"
    NODE_SKIPPED = "NODE_SKIPPED"
    NODE_PAUSED = "NODE_PAUSED"
    NODE_PROGRESS = "NODE_PROGRESS"
    EXECUTION_COMPLETED = "EXECUTION_COMPLETED"
    EXECUTION_FAILED = "EXECUTION_FAILED"
    EXECUTION_ABORTED = "EXECUTION_ABORTED"
    INTERACTIVE_PROMPT = "INTERACTIVE_PROMPT"
    INTERACTIVE_RESPONSE = "INTERACTIVE_RESPONSE"
    EXECUTION_ERROR = "EXECUTION_ERROR"
    EXECUTION_UPDATE = "EXECUTION_UPDATE"

class NodeType(str, Enum):
    start = "start"
    person_job = "person_job"
    condition = "condition"
    job = "job"
    endpoint = "endpoint"
    db = "db"
    user_response = "user_response"
    notion = "notion"
    person_batch_job = "person_batch_job"

class HandleDirection(str, Enum):
    input = "input"
    output = "output"

class DataType(str, Enum):
    any = "any"
    string = "string"
    number = "number"
    boolean = "boolean"
    object = "object"
    array = "array"

class LLMService(str, Enum):
    openai = "openai"
    anthropic = "anthropic"
    google = "google"
    grok = "grok"
    bedrock = "bedrock"
    vertex = "vertex"
    deepseek = "deepseek"

class ForgettingMode(str, Enum):
    no_forget = "no_forget"
    on_every_turn = "on_every_turn"
    upon_request = "upon_request"

class DiagramFormat(str, Enum):
    native = "native"
    light = "light"
    readable = "readable"
    native_yaml = "native_yaml"

class DBBlockSubType(str, Enum):
    fixed_prompt = "fixed_prompt"
    file = "file"
    code = "code"
    api_tool = "api_tool"

class ContentType(str, Enum):
    variable = "variable"
    raw_text = "raw_text"
    conversation_state = "conversation_state"

class NotionOperation(str, Enum):
    create_page = "create_page"
    update_page = "update_page"
    read_page = "read_page"
    delete_page = "delete_page"
    create_database = "create_database"
    query_database = "query_database"
    update_database = "update_database"

class SupportedLanguage(str, Enum):
    python = "python"
    javascript = "javascript"
    bash = "bash"

# Branded types
NodeID = NewType('NodeID', str)
ArrowID = NewType('ArrowID', str)
HandleID = NewType('HandleID', str)
PersonID = NewType('PersonID', str)
ApiKeyID = NewType('ApiKeyID', str)
DiagramID = NewType('DiagramID', str)
ExecutionID = NewType('ExecutionID', str)

class Message(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    id: Optional[str] = Field(default=None)
    role: Literal["user", "assistant", "system"]
    content: str
    timestamp: Optional[str] = Field(default=None)
    token_count: Optional[float] = Field(alias="tokenCount", default=None)
    metadata: Optional[Dict[str, Any]] = Field(default=None)

class ConversationMetadata(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    started_at: str = Field(alias="startedAt")
    last_message_at: str = Field(alias="lastMessageAt")
    total_tokens: float = Field(alias="totalTokens")
    message_count: float = Field(alias="messageCount")
    context_resets: float = Field(alias="contextResets")

class Conversation(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    person_id: PersonID = Field(alias="personId")
    messages: List[Message]
    metadata: Optional[ConversationMetadata] = Field(default=None)

class MemoryConfig(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    forget_mode: Optional[Literal["no_forget", "on_every_turn", "upon_request"]] = Field(alias="forgetMode", default=None)
    max_messages: Optional[float] = Field(alias="maxMessages", default=None)
    temperature: Optional[float] = Field(default=None)

class MemoryState(Conversation):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    visible_messages: float = Field(alias="visibleMessages")
    has_more: Optional[bool] = Field(alias="hasMore", default=None)
    config: Optional[MemoryConfig] = Field(default=None)

class PersonConfiguration(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    id: PersonID
    label: str
    service: LLMService
    model: str
    api_key_id: Optional[ApiKeyID] = Field(alias="apiKeyId", default=None)
    system_prompt: Optional[str] = Field(alias="systemPrompt", default=None)
    forgetting_mode: ForgettingMode = Field(alias="forgettingMode")
    temperature: Optional[float] = Field(default=None)
    max_tokens: Optional[float] = Field(alias="maxTokens", default=None)
    top_p: Optional[float] = Field(alias="topP", default=None)
    frequency_penalty: Optional[float] = Field(alias="frequencyPenalty", default=None)
    presence_penalty: Optional[float] = Field(alias="presencePenalty", default=None)

class PersonExecutionContext(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    person_id: PersonID = Field(alias="personId")
    node_id: str = Field(alias="nodeId")
    conversation_id: Optional[str] = Field(alias="conversationId", default=None)
    forgetting_mode: ForgettingMode = Field(alias="forgettingMode")
    system_prompt: Optional[str] = Field(alias="systemPrompt", default=None)
    temperature: Optional[float] = Field(default=None)
    max_tokens: Optional[float] = Field(alias="maxTokens", default=None)

class TokenUsage(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    input: float
    output: float
    cached: Optional[float] = Field(default=None)
    total: Optional[float] = Field(default=None)

class NodeState(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    status: NodeExecutionStatus
    started_at: Optional[str] = Field(alias="startedAt", default=None)
    ended_at: Optional[str] = Field(alias="endedAt", default=None)
    error: Optional[str] = Field(default=None)
    skip_reason: Optional[str] = Field(alias="skipReason", default=None)
    token_usage: Optional[TokenUsage] = Field(alias="tokenUsage", default=None)

class NodeOutput(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    value: Any
    metadata: Optional[Dict[str, Any]] = Field(default=None)

class ExecutionState(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    id: ExecutionID
    status: ExecutionStatus
    diagram_id: Optional[DiagramID] = Field(alias="diagramId", default=None)
    started_at: str = Field(alias="startedAt")
    ended_at: Optional[str] = Field(alias="endedAt", default=None)
    node_states: Dict[str, Any] = Field(alias="nodeStates")
    node_outputs: Dict[str, Any] = Field(alias="nodeOutputs")
    token_usage: TokenUsage = Field(alias="tokenUsage")
    error: Optional[str] = Field(default=None)
    variables: Dict[str, Any]
    duration_seconds: Optional[float] = Field(alias="durationSeconds", default=None)
    is_active: Optional[bool] = Field(alias="isActive", default=None)

class NodeResult(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    node_id: NodeID = Field(alias="nodeId")
    status: NodeExecutionStatus
    output: Optional[Any] = Field(default=None)
    error: Optional[str] = Field(default=None)
    timestamp: str
    token_usage: Optional[TokenUsage] = Field(alias="tokenUsage", default=None)
    skip_reason: Optional[str] = Field(alias="skipReason", default=None)
    progress: Optional[str] = Field(default=None)

class ExecutionResult(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    execution_id: ExecutionID = Field(alias="executionId")
    status: ExecutionStatus
    results: List[NodeResult]
    error: Optional[str] = Field(default=None)
    metadata: Dict[str, Any]
    total_token_usage: Optional[TokenUsage] = Field(alias="totalTokenUsage", default=None)

class ExecutionEvent(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    execution_id: ExecutionID = Field(alias="executionId")
    sequence: float
    event_type: EventType = Field(alias="eventType")
    node_id: Optional[NodeID] = Field(alias="nodeId", default=None)
    timestamp: str
    data: Dict[str, Any]
    formatted_message: Optional[str] = Field(alias="formattedMessage", default=None)

class ExecutionOptions(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    mode: Optional[Literal["normal", "debug", "monitor"]] = Field(default=None)
    timeout: Optional[float] = Field(default=None)
    variables: Optional[Dict[str, Any]] = Field(default=None)
    debug: Optional[bool] = Field(default=None)

class InteractivePromptData(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    node_id: NodeID = Field(alias="nodeId")
    prompt: str
    timeout: Optional[float] = Field(default=None)
    default_value: Optional[str] = Field(alias="defaultValue", default=None)

class InteractiveResponse(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    node_id: NodeID = Field(alias="nodeId")
    response: str
    timestamp: str

class ExecutionUpdate(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    type: EventType
    execution_id: ExecutionID = Field(alias="executionId")
    node_id: Optional[NodeID] = Field(alias="nodeId", default=None)
    status: Optional[NodeExecutionStatus] = Field(default=None)
    result: Optional[Any] = Field(default=None)
    error: Optional[str] = Field(default=None)
    timestamp: Optional[str] = Field(default=None)
    total_tokens: Optional[float] = Field(alias="totalTokens", default=None)
    node_type: Optional[str] = Field(alias="nodeType", default=None)
    tokens: Optional[float] = Field(default=None)
    data: Optional[Dict[str, Any]] = Field(default=None)

class ExecutionContext(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    execution_id: ExecutionID = Field(alias="executionId")
    diagram_id: DiagramID = Field(alias="diagramId")
    node_states: Dict[str, Any] = Field(alias="nodeStates")
    node_outputs: Dict[str, Any] = Field(alias="nodeOutputs")
    variables: Dict[str, Any]

class NodeDefinition(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    type: str
    schema: Any
    handler: Any
    requires_services: Optional[List[str]] = Field(alias="requiresServices", default=None)
    description: Optional[str] = Field(default=None)

class Vec2(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    x: float
    y: float

class DomainHandle(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    id: HandleID
    node_id: NodeID = Field(alias="nodeId")
    label: str
    direction: HandleDirection
    data_type: DataType = Field(alias="dataType")
    position: Optional[str] = Field(default=None)

class DomainNode(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    id: NodeID
    type: NodeType
    position: Vec2
    data: Dict[str, Any]
    display_name: Optional[str] = Field(alias="displayName", default=None)

class DomainArrow(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    id: ArrowID
    source: HandleID
    target: HandleID
    data: Optional[Dict[str, Any]] = Field(default=None)

class DomainPerson(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    id: PersonID
    label: str
    service: LLMService
    model: str
    api_key_id: Optional[ApiKeyID] = Field(alias="apiKeyId", default=None)
    system_prompt: Optional[str] = Field(alias="systemPrompt", default=None)
    forgetting_mode: ForgettingMode = Field(alias="forgettingMode")
    type: Literal["person"]
    masked_api_key: Optional[str] = Field(alias="maskedApiKey", default=None)

class DomainApiKey(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    id: ApiKeyID
    label: str
    service: LLMService
    key: Optional[str] = Field(default=None)
    masked_key: str = Field(alias="maskedKey")

class DiagramMetadata(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    id: Optional[DiagramID] = Field(default=None)
    name: Optional[str] = Field(default=None)
    description: Optional[str] = Field(default=None)
    version: str
    created: str
    modified: str
    author: Optional[str] = Field(default=None)
    tags: Optional[List[str]] = Field(default=None)

class DomainDiagram(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    nodes: List[DomainNode]
    handles: List[DomainHandle]
    arrows: List[DomainArrow]
    persons: List[DomainPerson]
    api_keys: List[DomainApiKey] = Field(alias="apiKeys")
    metadata: Optional[DiagramMetadata] = Field(default=None)

class DiagramDictFormat(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    nodes: Dict[str, Any]
    handles: Dict[str, Any]
    arrows: Dict[str, Any]
    persons: Dict[str, Any]
    api_keys: Dict[str, Any] = Field(alias="apiKeys")
    metadata: Optional[DiagramMetadata] = Field(default=None)

class BaseNodeData(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    label: str
    flipped: Optional[bool] = Field(default=None)

class StartNodeData(BaseNodeData):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    custom_data: Dict[str, Any] = Field(alias="customData")
    output_data_structure: Dict[str, Any] = Field(alias="outputDataStructure")

class ConditionNodeData(BaseNodeData):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    condition_type: str = Field(alias="conditionType")
    expression: Optional[str] = Field(default=None)
    node_indices: Optional[List[str]] = Field(default=None)

class PersonJobNodeData(BaseNodeData):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    person: Optional[PersonID] = Field(default=None)
    first_only_prompt: str = Field(alias="firstOnlyPrompt")
    default_prompt: Optional[str] = Field(alias="defaultPrompt", default=None)
    max_iteration: float = Field(alias="maxIteration")
    forgetting_mode: Optional[str] = Field(alias="forgettingMode", default=None)

class EndpointNodeData(BaseNodeData):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    save_to_file: bool = Field(alias="saveToFile")
    file_name: Optional[str] = Field(alias="fileName", default=None)

class DBNodeData(BaseNodeData):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    file: Optional[str] = Field(default=None)
    collection: Optional[str] = Field(default=None)
    sub_type: DBBlockSubType = Field(alias="subType")
    operation: str
    query: Optional[str] = Field(default=None)
    data: Optional[Dict[str, Any]] = Field(default=None)

class JobNodeData(BaseNodeData):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    code_type: SupportedLanguage = Field(alias="codeType")
    code: str

class UserResponseNodeData(BaseNodeData):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    prompt: str
    timeout: float

class NotionNodeData(BaseNodeData):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    operation: NotionOperation
    page_id: Optional[str] = Field(alias="pageId", default=None)
    database_id: Optional[str] = Field(alias="databaseId", default=None)

# Type aliases for compatibility
PersonMemoryMessage = Message
PersonMemoryState = MemoryState
PersonMemoryConfig = MemoryConfig
PersonConversation = Conversation
ConversationMessage = Message
