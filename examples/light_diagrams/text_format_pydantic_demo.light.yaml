version: light
nodes:
- label: start
  type: start
  position:
    x: 100
    y: 100
  trigger_mode: manual
- label: extract_person_info
  type: person_job
  position:
    x: 300
    y: 100
  person: default
  max_iteration: 1
  first_only_prompt: 'Extract the person''s information from the following text:


    "John Doe is a 35-year-old software engineer living in San Francisco.

    He has been working at TechCorp for 5 years and specializes in Python and JavaScript.

    His hobbies include hiking, photography, and playing guitar."

    '
  text_format: "class PersonInfo(BaseModel):\n    name: str\n    age: int\n    occupation:\
    \ str\n    location: str\n    company: Optional[str] = None\n    years_at_company:\
    \ Optional[int] = None\n    skills: List[str] = []\n    hobbies: List[str] = []\n\
    \nclass Response(BaseModel):\n    person: PersonInfo\n"
- label: display_result
  type: code_job
  position:
    x: 500
    y: 100
  language: python
  code: "import json\n\n# Get the person_data - it should be a JSON string with the\
    \ parsed result\nperson_data = inputs.get('person_data', '{}')\n\n# Parse if it's\
    \ a string, otherwise use as-is\nif isinstance(person_data, str):\n    result\
    \ = json.loads(person_data)\nelse:\n    result = person_data\n\n# Extract the\
    \ person object if it exists\nif 'person' in result:\n    person = result['person']\n\
    else:\n    person = result\n\nprint(\"=== Extracted Person Information ===\")\n\
    print(f\"Name: {person.get('name', 'N/A')}\")\nprint(f\"Age: {person.get('age',\
    \ 'N/A')}\")\nprint(f\"Occupation: {person.get('occupation', 'N/A')}\")\nprint(f\"\
    Location: {person.get('location', 'N/A')}\")\nprint(f\"Company: {person.get('company',\
    \ 'N/A')}\")\nprint(f\"Years at Company: {person.get('years_at_company', 'N/A')}\"\
    )\nprint(f\"Skills: {', '.join(person.get('skills', []))}\")\nprint(f\"Hobbies:\
    \ {', '.join(person.get('hobbies', []))}\")\nprint(\"\\n=== Raw JSON ===\")\n\
    print(json.dumps(result, indent=2))\n\nreturn result\n"
- label: generate_ui_example
  type: person_job
  position:
    x: 300
    y: 250
  person: default
  max_iteration: 1
  first_only_prompt: 'Generate a user profile card UI component structure for:

    Name: John Doe

    Role: Software Engineer

    Company: TechCorp

    '
  text_format: "class UIType(str, Enum):\n    div = \"div\"\n    button = \"button\"\
    \n    header = \"header\"\n    section = \"section\"\n    field = \"field\"\n\
    \    form = \"form\"\n    h1 = \"h1\"\n    h2 = \"h2\"\n    h3 = \"h3\"\n    p\
    \ = \"p\"\n    span = \"span\"\n    img = \"img\"\n    card = \"card\"\n\nclass\
    \ Attribute(BaseModel):\n    name: str\n    value: str\n\nclass UIComponent(BaseModel):\n\
    \    type: UIType\n    className: Optional[str] = None\n    content: Optional[str]\
    \ = None\n    children: List[\"UIComponent\"] = []\n    attributes: List[Attribute]\
    \ = []\n\nUIComponent.model_rebuild()  # Enable recursive types\n\nclass Response(BaseModel):\n\
    \    component: UIComponent\n"
- label: endpoint
  type: endpoint
  position:
    x: 700
    y: 100
connections:
- from: start
  to: extract_person_info
- from: extract_person_info
  to: display_result
  label: person_data
- from: start
  to: generate_ui_example
- from: display_result
  to: endpoint
- from: generate_ui_example
  to: endpoint
persons:
  default:
    service: openai
    model: gpt-5-nano-2025-08-07
    api_key_id: APIKEY_52609F
