version: light

# GitHub API Integration Test Diagram
# Tests creating an issue, listing issues, and adding a comment

persons:
  Assistant:
    service: openai
    model: gpt-5-nano-2025-08-07
    system_prompt: You are a helpful assistant that helps test GitHub API integrations.

nodes:
  - label: Start
    type: start
    position: {x: 50, y: 200}
    props:
      trigger_mode: manual
      custom_data:
        # Configure these values for your test repository
        github_config:
          owner: your-github-username  # Replace with your GitHub username or org
          repo: test-repo              # Replace with your test repository name

  - label: Generate Issue Content
    type: person_job
    position: {x: 250, y: 200}
    props:
      person: Assistant
      default_prompt: |
        Generate a test issue for GitHub with:
        - A clear title about testing the DiPeO GitHub integration
        - A body that explains this is an automated test
        - Include current timestamp: {{timestamp}}

        Return as JSON with keys: title, body
      max_iteration: 1
      memory_profile: GOLDFISH

  - label: Parse Issue Data
    type: code_job
    position: {x: 450, y: 200}
    props:
      language: python
      code: |
        import json
        from datetime import datetime

        # Parse the assistant's response
        try:
            # Extract JSON from the response
            response = issue_content
            if '```json' in response:
                json_start = response.find('```json') + 7
                json_end = response.find('```', json_start)
                response = response[json_start:json_end]
            elif '```' in response:
                json_start = response.find('```') + 3
                json_end = response.find('```', json_start)
                response = response[json_start:json_end]

            issue_data = json.loads(response.strip())
        except:
            # Fallback if parsing fails
            issue_data = {
                "title": f"DiPeO GitHub Integration Test - {datetime.now().strftime('%Y-%m-%d %H:%M')}",
                "body": "This is an automated test issue created by DiPeO to verify GitHub API integration.\n\nTest timestamp: " + datetime.now().isoformat()
            }

        result = issue_data

  - label: Create GitHub Issue
    type: integrated_api
    position: {x: 650, y: 200}
    props:
      provider: github
      operation: create_issue
      config:
        owner: "{{github_config.owner}}"
        repo: "{{github_config.repo}}"
        title: "{{issue_data.title}}"
        body: "{{issue_data.body}}"
        labels: ["test", "dipeo-integration"]

  - label: Extract Issue Number
    type: code_job
    position: {x: 850, y: 200}
    props:
      language: python
      code: |
        import json

        # Parse the created issue response
        if isinstance(created_issue, str):
            issue = json.loads(created_issue)
        else:
            issue = created_issue

        issue_number = issue.get('number')
        issue_url = issue.get('html_url')

        print(f"Created issue #{issue_number}")
        print(f"URL: {issue_url}")

        result = {
            "issue_number": issue_number,
            "issue_url": issue_url,
            "issue_id": issue.get('id')
        }

  - label: Wait Before Listing
    type: code_job
    position: {x: 1050, y: 200}
    props:
      language: python
      code: |
        import time
        # Wait a moment to ensure the issue is indexed
        time.sleep(2)
        result = {"waited": True}

  - label: List Recent Issues
    type: integrated_api
    position: {x: 1250, y: 200}
    props:
      provider: github
      operation: list_issues
      config:
        owner: "{{github_config.owner}}"
        repo: "{{github_config.repo}}"
        state: open
        labels: "dipeo-integration"
        sort: created
        direction: desc
        per_page: 5

  - label: Process Issue List
    type: code_job
    position: {x: 1450, y: 200}
    props:
      language: python
      code: |
        import json

        # Parse the issues list
        if isinstance(issues_list, str):
            issues = json.loads(issues_list)
        else:
            issues = issues_list

        # Count issues and verify our created issue is there
        issue_count = len(issues)
        our_issue = None

        for issue in issues:
            if issue.get('number') == issue_info['issue_number']:
                our_issue = issue
                break

        print(f"Found {issue_count} issues with 'dipeo-integration' label")
        if our_issue:
            print(f"âœ“ Our created issue #{issue_info['issue_number']} is in the list")
        else:
            print(f"âœ— Our created issue #{issue_info['issue_number']} was not found")

        result = {
            "total_issues": issue_count,
            "found_our_issue": our_issue is not None,
            "issues_summary": [
                {
                    "number": i.get('number'),
                    "title": i.get('title'),
                    "state": i.get('state')
                }
                for i in issues[:3]  # First 3 issues
            ]
        }

  - label: Generate Comment
    type: person_job
    position: {x: 1650, y: 200}
    props:
      person: Assistant
      default_prompt: |
        Generate a test comment for the GitHub issue we just created.
        The comment should:
        - Confirm the issue was created successfully
        - Mention this is part of the DiPeO integration test
        - Include test results: {{list_results}}
        - Be friendly and informative

        Return just the comment text.
      max_iteration: 1
      memory_profile: GOLDFISH

  - label: Add Comment to Issue
    type: integrated_api
    position: {x: 1850, y: 200}
    props:
      provider: github
      operation: add_comment
      config:
        owner: "{{github_config.owner}}"
        repo: "{{github_config.repo}}"
        issue_number: "{{issue_info.issue_number}}"
        body: "{{comment_text}}"

  - label: Generate Summary
    type: code_job
    position: {x: 2050, y: 200}
    props:
      language: python
      code: |
        summary = f"""
        âœ… GitHub Integration Test Complete!

        ðŸ“‹ Test Results:
        1. âœ“ Created issue #{issue_info['issue_number']}
           URL: {issue_info['issue_url']}

        2. âœ“ Listed {list_results['total_issues']} issues with 'dipeo-integration' label
           Found our issue: {'âœ“ Yes' if list_results['found_our_issue'] else 'âœ— No'}

        3. âœ“ Added comment to issue #{issue_info['issue_number']}

        ðŸŽ¯ All GitHub API operations completed successfully!

        Note: Remember to clean up the test issue when done.
        """

        print(summary)
        result = {"summary": summary}

  - label: Save Results
    type: endpoint
    position: {x: 2250, y: 200}
    props:
      file_format: md
      save_to_file: true
      file_path: files/results/github_test_results.md

connections:
  - {from: Start, to: Generate Issue Content, label: github_config}
  - {from: Start, to: Generate Issue Content, label: timestamp}
  - {from: Generate Issue Content, to: Parse Issue Data, label: issue_content}
  - {from: Parse Issue Data, to: Create GitHub Issue, label: issue_data}
  - {from: Start, to: Create GitHub Issue, label: github_config}
  - {from: Create GitHub Issue, to: Extract Issue Number, label: created_issue}
  - {from: Extract Issue Number, to: Wait Before Listing, label: issue_info}
  - {from: Wait Before Listing, to: List Recent Issues}
  - {from: Start, to: List Recent Issues, label: github_config}
  - {from: List Recent Issues, to: Process Issue List, label: issues_list}
  - {from: Extract Issue Number, to: Process Issue List, label: issue_info}
  - {from: Process Issue List, to: Generate Comment, label: list_results}
  - {from: Generate Comment, to: Add Comment to Issue, label: comment_text}
  - {from: Start, to: Add Comment to Issue, label: github_config}
  - {from: Extract Issue Number, to: Add Comment to Issue, label: issue_info}
  - {from: Add Comment to Issue, to: Generate Summary}
  - {from: Extract Issue Number, to: Generate Summary, label: issue_info}
  - {from: Process Issue List, to: Generate Summary, label: list_results}
  - {from: Generate Summary, to: Save Results}
