[project]
name = "dipeo-monorepo"
version = "1.0.0"
description = "DiPeO - Diagrammed People & Organizations: Visual programming for AI agent workflows"
authors = [
    {name = "sorryhyun", email = "standingbehindnv@gmail.com"},
]
readme = "README.md"
license = {text = "Apache-2.0"}
requires-python = ">=3.13"

dependencies = [
    # Core dependencies
    "aiofiles==24.1.0",
    "aiohappyeyeballs==2.6.1",
    "aiohttp==3.12.13",
    "aiosignal==1.3.2",
    "aiosqlite~=0.21.0",
    "annotated-types==0.7.0",
    "anthropic==0.54.0",
    "anyio==4.9.0",
    "attrs==25.3.0",
    "backoff==2.2.1",
    "botocore==1.38.39",
    "cachetools==5.5.2",
    "certifi==2025.6.15",
    "charset-normalizer==3.4.2",
    "click~=8.2.1",
    "dependency-injector==4.48.1",
    "dill==0.3.8",
    "distro==1.9.0",
    "fastapi==0.115.13",
    "filelock==3.18.0",
    "frozenlist==1.7.0",
    "fsspec==2025.3.0",
    "google-auth==2.40.3",
    "google-genai==1.21.0",
    "googleapis-common-protos==1.70.0",
    "gql==3.5.3",
    "graphql-core==3.2.6",
    "grpcio==1.73.0",
    "h11==0.16.0",
    "h2==4.2.0",
    "hf-xet==1.1.4",
    "hgtk==0.2.1",
    "hpack==4.1.0",
    "httpcore==1.0.9",
    "httplib2==0.22.0",
    "httpx==0.28.1",
    "Hypercorn==0.17.3",
    "hyperframe==6.1.0",
    "idna==3.10",
    "inflection~=0.5.1",
    "Jinja2~=3.1.6",
    "markupsafe>=2.1.5",
    "jiter==0.10.0",
    "jmespath==1.0.1",
    "jsonpointer==3.0.0",
    "lxml==5.4.0",
    "multidict==6.5.0",
    "multiprocess==0.70.16",
    "notion-client==2.4.0",
    "numpy==2.3.0",
    "openai==1.88.0",
    "packaging==25.0",
    "pandas==2.3.0",
    "pillow~=11.3.0",
    "pre-commit==4.2.0",
    "priority==2.0.0",
    "prometheus_client==0.22.1",
    "propcache==0.3.2",
    "proto-plus==1.26.1",
    "protobuf==5.29.5",
    "pyarrow==20.0.0",
    "pyasn1==0.6.1",
    "pyasn1_modules==0.4.2",
    "pydantic==2.11.7",
    "pydantic-core==2.33.2",
    "pydantic-settings==2.7.1",
    "pyinstaller~=6.14.2",
    "pyparsing==3.2.3",
    "pytest~=8.4.1",
    "python-dateutil==2.9.0.post0",
    "python-docx==1.2.0",
    "python-dotenv==1.1.0",
    "python-multipart==0.0.20",
    "pytz==2025.2",
    "PyYAML==6.0.2",
    "redis~=5.2.0",
    "requests==2.32.4",
    "requests-toolbelt==1.0.0",
    "rsa==4.9.1",
    "six==1.17.0",
    "sniffio==1.3.1",
    "starlette==0.46.2",
    "strawberry-graphql==0.282.0",
    "structlog==24.4.0",
    "tenacity==8.5.0",
    "tqdm==4.67.1",
    "typing-inspection==0.4.1",
    "typing-extensions==4.14.0",
    "tzdata==2025.2",
    "uritemplate==4.2.0",
    "urllib3==2.5.0",
    "websockets==15.0.1",
    "wsproto==1.2.0",
    "xxhash==3.5.0",
    "yarl==1.20.1",
    "datamodel-code-generator>=0.21.0",
    "ollama>=0.5.0",
    "claude-code-sdk>=0.0.21",
    "rich>=13.0.0",
    # Workspace packages (automatically installed as editable by uv)
    "dipeo-cli",
    "dipeo-server",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=8.3.4",
    "pytest-asyncio>=0.25.2",
    "pytest-cov",

    # Type checking
    "mypy>=1.14.1",

    # Code formatting and linting
    "ruff>=0.8.0",
    "black",
    "isort",
    "import-linter",
]

[project.urls]
homepage = "https://github.com/sorryhyun/DiPeO"
repository = "https://github.com/sorryhyun/DiPeO"
documentation = "https://dipeo.readthedocs.io"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["dipeo", "apps", "projects"]

[tool.uv]
# Enable workspace support for monorepo
dev-dependencies = [
    # Development dependencies already in optional-dependencies
]

[tool.uv.workspace]
members = ["dipeo", "apps/server", "apps/cli"]

# UV workspace members are automatically installed as editable

[tool.uv.sources]
dipeo-cli = { workspace = true }
dipeo-server = { workspace = true }

# Tool configurations (inherited from existing configs)
[tool.ruff]
target-version = "py313"
line-length = 100
exclude = [
    "__generated__",
    "generated",
    "migrations",
    "venv",
    ".git",
    "__pycache__",
    ".mypy_cache",
    ".ruff_cache",
    "*/__generated__.py",
    "**/__generated__.py",
    "dipeo/diagram_generated/",
    "dipeo/diagram_generated_staged/",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "SIM", # flake8-simplify
    "RUF", # Ruff-specific rules
    "C90", # mccabe complexity
    "PTH", # flake8-use-pathlib
]
ignore = [
    "E501",   # line too long (handled by formatter)
    "B008",   # do not perform function calls in argument defaults
    "RUF012", # Mutable class attributes should be annotated
    "F841",   # local variable is assigned to but never used
    "F401",   # imported but unused
    "F403",   # `from module import *` used; unable to detect undefined names
    "F405",   # name may be undefined, or defined from star imports
    "SIM102", # use a single if statement instead of nested if statements
    "SIM108", # use ternary operator instead of if-else-block
    "SIM116", # use a dictionary instead of consecutive if statements
    "SIM103", # return the negated condition directly
    "RUF006", # store a reference to the return value of asyncio.create_task
    "UP007",  # use X | Y for type annotations
    "E722",   # do not use bare except
    "N802",   # function name should be lowercase
    "B904",   # Within an except clause, raise exceptions with raise ... from err
    "C901",   # too complex
    "RUF001", # String contains ambiguous character
    "PTH123", # open() should be replaced by Path.open()
    "PTH109", # os.getcwd() should be replaced by Path.cwd()
    "PTH101", # os.chmod() should be replaced by Path.chmod()
    "PTH116", # os.stat() should be replaced by Path.stat()
    "PTH110", # os.path.exists should be replaced by Path.exists()
    "PTH108", # os.unlink should be replaced by Path.unlink()
    "PTH117", # os.path.isabs should be replaced by Path.is_absolute()
    "PTH118", # os.path.join should be replaced by Path.joinpath()
    "PTH119", # os.path.basename should be replaced by Path.name
    "PTH111", # os.path.expanduser should be replaced by Path.expanduser()
    "PTH201", # Path constructor with current directory
    "PTH207", # glob should be replaced by Path.glob
    "N806"
]

[tool.ruff.lint.pep8-naming]
# Enforce Python naming conventions
classmethod-decorators = ["classmethod", "pydantic.validator", "pydantic.field_validator"]
staticmethod-decorators = ["staticmethod"]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.per-file-ignores]
# Allow camelCase in generated files temporarily
"dipeo/diagram_generated/*" = ["N"]
"dipeo/diagram_generated_staged/*" = ["N"]
"__generated__/*" = ["N"]
"**/migrations/*" = ["N"]

[tool.mypy]
python_version = "3.13"

# Gradual typing settings
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

# Start permissive, gradually enable stricter checks
disallow_untyped_defs = false  # Will enable gradually per module
disallow_untyped_calls = false  # Will enable gradually
disallow_incomplete_defs = true
disallow_untyped_decorators = false
check_untyped_defs = true

# Type checking behavior
strict_optional = true
strict_equality = true
no_implicit_optional = true
no_implicit_reexport = true

# Error reporting
show_error_codes = true
show_column_numbers = true
pretty = true

# Import handling
ignore_missing_imports = true  # Gradually reduce
follow_imports = "normal"
namespace_packages = true

exclude = [
    "__generated__",
    "generated",
    "dipeo/diagram_generated/",
    "dipeo/diagram_generated_staged/",
    "projects/frontend_auto/generated/",
    "projects/frontend_enhance/generated/",
    "projects/.*/generated/",
    ".venv",
    "venv",
    "build",
    "dist",
]

# Per-module overrides for gradual adoption
[[tool.mypy.overrides]]
module = "dipeo.domain.*"
disallow_untyped_defs = true
disallow_untyped_calls = true

[[tool.mypy.overrides]]
module = "dipeo.application.registry.*"
disallow_untyped_defs = true

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[tool.black]
line-length = 88
target-version = ['py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | __generated__
  | generated
  | dipeo/diagram_generated
  | dipeo/diagram_generated_staged
)/
'''

[tool.isort]
profile = "black"
skip_glob = ["*/__generated__/*", "*/generated/*", "*/diagram_generated/*", "*/diagram_generated_staged/*"]
known_first_party = ["dipeo", "dipeo_server", "dipeo_cli"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
line_length = 88

[tool.pytest.ini_options]
testpaths = ["tests", "apps/server/tests", "apps/cli/tests"]
python_files = ["test_*.py", "*_test.py"]
addopts = "-v"
asyncio_mode = "auto"
