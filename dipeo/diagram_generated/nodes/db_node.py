







"""
Auto-generated static node type for db.
DO NOT EDIT THIS FILE DIRECTLY.
"""

from dataclasses import *
from typing import *

from ..domain_models import *
from ..enums import *
from ..integrations import *


@dataclass(frozen=True)
class DbNode:
    """Database operations"""
    # Required base fields first
    id: NodeID
    position: Vec2
    
    # Required node-specific fields
    sub_type: DBBlockSubType
    operation: NotionOperation
    
    # Optional base fields
    label: str = ""
    flipped: bool = False
    metadata: Optional[Dict[str, Any]] = None
    
    # Node type (fixed for this node class)
    type: NodeType = field(default=NodeType.DB, init=False)
    
    # Optional node-specific fields
    file: str = ""
    collection: str = ""
    query: str = ""
    data: Dict[str, Any] = field(default_factory=dict)
    serialize_json: bool = False
    format: str = ""

    def to_dict(self) -> Dict[str, Any]:
        """Convert node to dictionary representation."""
        data = {
            "id": self.id,
            "type": self.type.value,
            "position": {"x": self.position.x, "y": self.position.y},
            "label": self.label,
            "flipped": self.flipped
        }
        if self.metadata:
            data["metadata"] = self.metadata
            
        # Add node-specific fields
        data["file"] = self.file
        data["collection"] = self.collection
        data["sub_type"] = self.sub_type
        data["operation"] = self.operation
        data["query"] = self.query
        data["data"] = self.data
        data["serialize_json"] = self.serialize_json
        data["format"] = self.format
        return data