







"""
Auto-generated static node type for sub_diagram.
DO NOT EDIT THIS FILE DIRECTLY.
"""

from dataclasses import *
from typing import *

from dipeo.diagram_generated.domain_models import *
from dipeo.diagram_generated.enums import *
from dipeo.diagram_generated.integrations import *


@dataclass(frozen=True)
class SubDiagramNode:
    """Execute another diagram as a node within the current diagram"""
    # Required base fields first
    id: NodeID
    position: Vec2
    
    # Required node-specific fields
    
    # Optional base fields
    label: str = ""
    flipped: bool = False
    metadata: Optional[Dict[str, Any]] = None
    
    # Node type (fixed for this node class)
    type: NodeType = field(default=NodeType.SUB_DIAGRAM, init=False)
    
    # Optional node-specific fields
    diagram_name: str = ""
    diagram_data: Dict[str, Any] = field(default_factory=dict)
    input_mapping: Dict[str, Any] = field(default_factory=dict)
    output_mapping: Dict[str, Any] = field(default_factory=dict)
    timeout: int = 0
    wait_for_completion: bool = False
    isolate_conversation: bool = False
    ignoreIfSub: bool = False

    def to_dict(self) -> Dict[str, Any]:
        """Convert node to dictionary representation."""
        data = {
            "id": self.id,
            "type": self.type.value,
            "position": {"x": self.position.x, "y": self.position.y},
            "label": self.label,
            "flipped": self.flipped
        }
        if self.metadata:
            data["metadata"] = self.metadata
            
        # Add node-specific fields
        data["diagram_name"] = self.diagram_name
        data["diagram_data"] = self.diagram_data
        data["input_mapping"] = self.input_mapping
        data["output_mapping"] = self.output_mapping
        data["timeout"] = self.timeout
        data["wait_for_completion"] = self.wait_for_completion
        data["isolate_conversation"] = self.isolate_conversation
        data["ignoreIfSub"] = self.ignoreIfSub
        return data