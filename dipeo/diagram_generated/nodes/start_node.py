"""
Auto-generated static node type for start.
DO NOT EDIT THIS FILE DIRECTLY.
"""

from dataclasses import dataclass, field
from typing import Dict, Any, Optional, List, Union, Literal

from dipeo.diagram_generated.domain_models import (
    Vec2, NodeID, PersonID, MemorySettings, ToolConfig, PersonLLMConfig
)
from dipeo.diagram_generated.enums import (
    NodeType, HookTriggerMode, SupportedLanguage, HttpMethod, 
    DBBlockSubType, NotionOperation, HookType, LLMService
)


@dataclass(frozen=True)
class StartNode:
    """Entry point for diagram execution"""
    # Required base fields first
    id: NodeID
    position: Vec2
    
    # Required node-specific fields
    custom_data: str
    output_data_structure: Dict[str, Any]
    
    # Optional base fields
    label: str = ""
    flipped: bool = False
    metadata: Optional[Dict[str, Any]] = None
    
    # Node type (fixed for this node class)
    type: NodeType = field(default=NodeType.start, init=False)
    
    # Optional node-specific fields
    trigger_mode: HookTriggerMode = None
    hook_event: str = ""
    hook_filters: Dict[str, Any] = field(default_factory=dict)

    def to_dict(self) -> Dict[str, Any]:
        """Convert node to dictionary representation."""
        data = {
            "id": self.id,
            "type": self.type.value,
            "position": {"x": self.position.x, "y": self.position.y},
            "label": self.label,
            "flipped": self.flipped
        }
        if self.metadata:
            data["metadata"] = self.metadata
            
        # Add node-specific fields
        data["custom_data"] = self.custom_data
        data["output_data_structure"] = self.output_data_structure
        data["trigger_mode"] = self.trigger_mode
        data["hook_event"] = self.hook_event
        data["hook_filters"] = self.hook_filters
        return data