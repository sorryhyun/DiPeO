







"""
Auto-generated static node type for template_job.
DO NOT EDIT THIS FILE DIRECTLY.
"""

from dataclasses import dataclass, field
from typing import Dict, Any, Optional, List, Union, Literal

from dipeo.diagram_generated.domain_models import (
    Vec2, NodeID, PersonID, MemorySettings, ToolConfig, PersonLLMConfig
)
from dipeo.diagram_generated.enums import (
    NodeType, HookTriggerMode, SupportedLanguage, HttpMethod, 
    DBBlockSubType, NotionOperation, HookType, LLMService
)


@dataclass(frozen=True)
class TemplateJobNode:
    """Process templates with data"""
    # Required base fields first
    id: NodeID
    position: Vec2
    
    # Required node-specific fields
    
    # Optional base fields
    label: str = ""
    flipped: bool = False
    metadata: Optional[Dict[str, Any]] = None
    
    # Node type (fixed for this node class)
    type: NodeType = field(default=NodeType.TEMPLATE_JOB, init=False)
    
    # Optional node-specific fields
    template_path: str = ""
    template_content: str = ""
    output_path: str = ""
    variables: Dict[str, Any] = field(default_factory=dict)
    engine: Literal["internal", "jinja2", "handlebars"] = None

    def to_dict(self) -> Dict[str, Any]:
        """Convert node to dictionary representation."""
        data = {
            "id": self.id,
            "type": self.type.value,
            "position": {"x": self.position.x, "y": self.position.y},
            "label": self.label,
            "flipped": self.flipped
        }
        if self.metadata:
            data["metadata"] = self.metadata
            
        # Add node-specific fields
        data["template_path"] = self.template_path
        data["template_content"] = self.template_content
        data["output_path"] = self.output_path
        data["variables"] = self.variables
        data["engine"] = self.engine
        return data