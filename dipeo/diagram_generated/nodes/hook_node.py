







"""
Auto-generated static node type for hook.
DO NOT EDIT THIS FILE DIRECTLY.
"""

from dataclasses import dataclass, field
from typing import Dict, Any, Optional, List, Union, Literal

from dipeo.diagram_generated.domain_models import (
    Vec2, NodeID, PersonID, MemorySettings, ToolConfig, PersonLLMConfig
)
from dipeo.diagram_generated.enums import (
    NodeType, HookTriggerMode, SupportedLanguage, HttpMethod, 
    DBBlockSubType, HookType, LLMService
)


@dataclass(frozen=True)
class HookNode:
    """Executes hooks at specific points in the diagram execution"""
    # Required base fields first
    id: NodeID
    position: Vec2
    
    # Required node-specific fields
    hook_type: HookType
    
    # Optional base fields
    label: str = ""
    flipped: bool = False
    metadata: Optional[Dict[str, Any]] = None
    
    # Node type (fixed for this node class)
    type: NodeType = field(default=NodeType.HOOK, init=False)
    
    # Optional node-specific fields
    command: str = ""
    url: str = ""
    timeout: int = 0
    retry_count: float = 0

    def to_dict(self) -> Dict[str, Any]:
        """Convert node to dictionary representation."""
        data = {
            "id": self.id,
            "type": self.type.value,
            "position": {"x": self.position.x, "y": self.position.y},
            "label": self.label,
            "flipped": self.flipped
        }
        if self.metadata:
            data["metadata"] = self.metadata
            
        # Add node-specific fields
        data["hook_type"] = self.hook_type
        data["command"] = self.command
        data["url"] = self.url
        data["timeout"] = self.timeout
        data["retry_count"] = self.retry_count
        return data