"""
Generated Strawberry GraphQL schema from TypeScript operation definitions.
DO NOT EDIT - Generated by DiPeO codegen

Generated at: 2025-09-14T15:18:58.153116
"""

import strawberry
from strawberry.types import Info
from strawberry.scalars import JSON
from strawberry.file_uploads import Upload
from typing import Any, Optional, Union
from collections.abc import AsyncGenerator
from datetime import datetime

# Import operation executor
from dipeo.application.graphql.operation_executor import OperationExecutor

# Import all operations
from dipeo.diagram_generated.graphql import operations

# Import input types and enums
from dipeo.diagram_generated.graphql.inputs import *
from dipeo.diagram_generated.graphql.enums import DiagramFormatGraphQL

# Import result types
from dipeo.diagram_generated.graphql.results import (
    DiagramResult,
    DiagramListResult,
    NodeResult,
    NodeListResult,
    ExecutionResult,
    ExecutionListResult,
    PersonResult,
    PersonListResult,
    ApiKeyResult,
    ApiKeyListResult,
    ConversationResult,
    ConversationListResult,
    FileOperationResult,
    DeleteResult,
    TestResult,
    FormatConversionResult,
    ValidationResult,
    CliSessionResult,
    InteractiveResponseResult,
    BatchOperationResult,
)

# Import domain types for direct query returns
from dipeo.diagram_generated.graphql.domain_types import (
    ExecutionStateType,
    DomainDiagramType,
    DomainPersonType,
    DomainApiKeyType,
    DomainNodeType,
    ExecutionUpdate,  # For subscriptions
)


@strawberry.type
class Query:
    """Auto-generated Query type from TypeScript definitions"""


    # Legacy field (verb form)
    @strawberry.field
    async def get_active_cli_session(
        self,
        info: Info
        
    ) -> JSON:
        """
        GetActiveCliSession operation
        Operation: GetActiveCliSessionOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        

        return await executor.execute("GetActiveCliSession", variables=variables)

    


    # Legacy field (verb form)
    @strawberry.field
    async def get_api_key(
        self,
        info: Info,
        
        api_key_id: str
        
    ) -> DomainApiKeyType:
        """
        GetApiKey operation
        Operation: GetApiKeyOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        
        
        variables["api_key_id"] = api_key_id
        
        

        return await executor.execute("GetApiKey", variables=variables)

    


    # Legacy field (verb form)
    @strawberry.field
    async def get_api_keys(
        self,
        info: Info,
        
        service: Optional[str]
        
    ) -> JSON:
        """
        GetApiKeys operation
        Operation: GetApiKeysOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        
        
        if service is not None:
            variables["service"] = service
        
        

        return await executor.execute("GetApiKeys", variables=variables)

    


    # Legacy field (verb form)
    @strawberry.field
    async def get_available_models(
        self,
        info: Info,
        
        service: str,
        
        api_key_id: str
        
    ) -> JSON:
        """
        GetAvailableModels operation
        Operation: GetAvailableModelsOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        
        
        variables["service"] = service
        
        
        
        variables["api_key_id"] = api_key_id
        
        

        return await executor.execute("GetAvailableModels", variables=variables)

    


    # Legacy field (verb form)
    @strawberry.field
    async def get_diagram(
        self,
        info: Info,
        
        diagram_id: str
        
    ) -> DomainDiagramType:
        """
        GetDiagram operation
        Operation: GetDiagramOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        
        
        variables["diagram_id"] = diagram_id
        
        

        return await executor.execute("GetDiagram", variables=variables)

    


    # Legacy field (verb form)
    @strawberry.field
    async def get_execution(
        self,
        info: Info,
        
        execution_id: str
        
    ) -> ExecutionStateType:
        """
        GetExecution operation
        Operation: GetExecutionOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        
        
        variables["execution_id"] = execution_id
        
        

        return await executor.execute("GetExecution", variables=variables)

    


    # Legacy field (verb form)
    @strawberry.field
    async def get_execution_capabilities(
        self,
        info: Info
        
    ) -> JSON:
        """
        GetExecutionCapabilities operation
        Operation: GetExecutionCapabilitiesOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        

        return await executor.execute("GetExecutionCapabilities", variables=variables)

    


    # Legacy field (verb form)
    @strawberry.field
    async def get_execution_history(
        self,
        info: Info,
        
        diagram_id: Optional[str],
        
        limit: Optional[int],
        
        include_metrics: Optional[bool]
        
    ) -> JSON:
        """
        GetExecutionHistory operation
        Operation: GetExecutionHistoryOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        
        
        if diagram_id is not None:
            variables["diagram_id"] = diagram_id
        
        
        
        if limit is not None:
            variables["limit"] = limit
        
        
        
        if include_metrics is not None:
            variables["include_metrics"] = include_metrics
        
        

        return await executor.execute("GetExecutionHistory", variables=variables)

    


    # Legacy field (verb form)
    @strawberry.field
    async def get_execution_metrics(
        self,
        info: Info,
        
        execution_id: str
        
    ) -> JSON:
        """
        GetExecutionMetrics operation
        Operation: GetExecutionMetricsOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        
        
        variables["execution_id"] = execution_id
        
        

        return await executor.execute("GetExecutionMetrics", variables=variables)

    


    # Legacy field (verb form)
    @strawberry.field
    async def get_execution_order(
        self,
        info: Info,
        
        execution_id: str
        
    ) -> JSON:
        """
        GetExecutionOrder operation
        Operation: GetExecutionOrderOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        
        
        variables["execution_id"] = execution_id
        
        

        return await executor.execute("GetExecutionOrder", variables=variables)

    


    # Legacy field (verb form)
    @strawberry.field
    async def get_operation_schema(
        self,
        info: Info,
        
        provider: str,
        
        operation: str
        
    ) -> JSON:
        """
        GetOperationSchema operation
        Operation: GetOperationSchemaOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        
        
        variables["provider"] = provider
        
        
        
        variables["operation"] = operation
        
        

        return await executor.execute("GetOperationSchema", variables=variables)

    


    # Legacy field (verb form)
    @strawberry.field
    async def get_person(
        self,
        info: Info,
        
        person_id: str
        
    ) -> DomainPersonType:
        """
        GetPerson operation
        Operation: GetPersonOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        
        
        variables["person_id"] = person_id
        
        

        return await executor.execute("GetPerson", variables=variables)

    


    # Legacy field (verb form)
    @strawberry.field
    async def get_prompt_file(
        self,
        info: Info,
        
        filename: str
        
    ) -> JSON:
        """
        GetPromptFile operation
        Operation: GetPromptFileOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        
        
        variables["filename"] = filename
        
        

        return await executor.execute("GetPromptFile", variables=variables)

    


    # Legacy field (verb form)
    @strawberry.field
    async def get_provider_operations(
        self,
        info: Info,
        
        provider: str
        
    ) -> JSON:
        """
        GetProviderOperations operation
        Operation: GetProviderOperationsOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        
        
        variables["provider"] = provider
        
        

        return await executor.execute("GetProviderOperations", variables=variables)

    


    # Legacy field (verb form)
    @strawberry.field
    async def get_providers(
        self,
        info: Info
        
    ) -> JSON:
        """
        GetProviders operation
        Operation: GetProvidersOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        

        return await executor.execute("GetProviders", variables=variables)

    


    # Legacy field (verb form)
    @strawberry.field
    async def get_supported_formats(
        self,
        info: Info
        
    ) -> JSON:
        """
        GetSupportedFormats operation
        Operation: GetSupportedFormatsOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        

        return await executor.execute("GetSupportedFormats", variables=variables)

    


    # Legacy field (verb form)
    @strawberry.field
    async def get_system_info(
        self,
        info: Info
        
    ) -> JSON:
        """
        GetSystemInfo operation
        Operation: GetSystemInfoOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        

        return await executor.execute("GetSystemInfo", variables=variables)

    


    # Legacy field (verb form)
    @strawberry.field
    async def health_check(
        self,
        info: Info
        
    ) -> JSON:
        """
        HealthCheck operation
        Operation: HealthCheckOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        

        return await executor.execute("HealthCheck", variables=variables)

    


    # Legacy field (verb form)
    @strawberry.field
    async def list_conversations(
        self,
        info: Info,
        
        person_id: Optional[str],
        
        execution_id: Optional[str],
        
        search: Optional[str],
        
        show_forgotten: Optional[bool],
        
        limit: Optional[int],
        
        offset: Optional[int],
        
        since: Optional[str]
        
    ) -> list[JSON]:
        """
        ListConversations operation
        Operation: ListConversationsOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        
        
        if person_id is not None:
            variables["person_id"] = person_id
        
        
        
        if execution_id is not None:
            variables["execution_id"] = execution_id
        
        
        
        if search is not None:
            variables["search"] = search
        
        
        
        if show_forgotten is not None:
            variables["show_forgotten"] = show_forgotten
        
        
        
        if limit is not None:
            variables["limit"] = limit
        
        
        
        if offset is not None:
            variables["offset"] = offset
        
        
        
        if since is not None:
            variables["since"] = since
        
        

        return await executor.execute("ListConversations", variables=variables)

    


    # Legacy field (verb form)
    @strawberry.field
    async def list_diagrams(
        self,
        info: Info,
        
        filter: Optional[DiagramFilterInput],
        
        limit: Optional[int],
        
        offset: Optional[int]
        
    ) -> list[DomainDiagramType]:
        """
        ListDiagrams operation
        Operation: ListDiagramsOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        
        
        if filter is not None:
            variables["filter"] = filter
        
        
        
        if limit is not None:
            variables["limit"] = limit
        
        
        
        if offset is not None:
            variables["offset"] = offset
        
        

        return await executor.execute("ListDiagrams", variables=variables)

    


    # Legacy field (verb form)
    @strawberry.field
    async def list_executions(
        self,
        info: Info,
        
        filter: Optional[ExecutionFilterInput],
        
        limit: Optional[int],
        
        offset: Optional[int]
        
    ) -> list[ExecutionStateType]:
        """
        ListExecutions operation
        Operation: ListExecutionsOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        
        
        if filter is not None:
            variables["filter"] = filter
        
        
        
        if limit is not None:
            variables["limit"] = limit
        
        
        
        if offset is not None:
            variables["offset"] = offset
        
        

        return await executor.execute("ListExecutions", variables=variables)

    


    # Legacy field (verb form)
    @strawberry.field
    async def list_persons(
        self,
        info: Info,
        
        limit: Optional[int]
        
    ) -> list[DomainPersonType]:
        """
        ListPersons operation
        Operation: ListPersonsOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        
        
        if limit is not None:
            variables["limit"] = limit
        
        

        return await executor.execute("ListPersons", variables=variables)

    


    # Legacy field (verb form)
    @strawberry.field
    async def list_prompt_files(
        self,
        info: Info
        
    ) -> list[JSON]:
        """
        ListPromptFiles operation
        Operation: ListPromptFilesOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        

        return await executor.execute("ListPromptFiles", variables=variables)

    





@strawberry.type
class Mutation:
    """Auto-generated Mutation type from TypeScript definitions"""


    @strawberry.field
    async def control_execution(
        self,
        info: Info,
        
        input: ExecutionControlInput
        
    ) -> ExecutionResult:
        """
        ControlExecution operation
        Operation: ControlExecutionOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        
        
        variables["input"] = input
        
        

        return await executor.execute("ControlExecution", variables=variables)


    @strawberry.field
    async def convert_diagram_format(
        self,
        info: Info,
        
        content: str,
        
        from_format: DiagramFormatGraphQL,
        
        to_format: DiagramFormatGraphQL
        
    ) -> FormatConversionResult:
        """
        ConvertDiagramFormat operation
        Operation: ConvertDiagramFormatOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        
        
        variables["content"] = content
        
        
        
        variables["from_format"] = from_format
        
        
        
        variables["to_format"] = to_format
        
        

        return await executor.execute("ConvertDiagramFormat", variables=variables)


    @strawberry.field
    async def create_api_key(
        self,
        info: Info,
        
        input: CreateApiKeyInput
        
    ) -> ApiKeyResult:
        """
        CreateApiKey operation
        Operation: CreateApiKeyOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        
        
        variables["input"] = input
        
        

        return await executor.execute("CreateApiKey", variables=variables)


    @strawberry.field
    async def create_diagram(
        self,
        info: Info,
        
        input: CreateDiagramInput
        
    ) -> DiagramResult:
        """
        CreateDiagram operation
        Operation: CreateDiagramOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        
        
        variables["input"] = input
        
        

        return await executor.execute("CreateDiagram", variables=variables)


    @strawberry.field
    async def create_node(
        self,
        info: Info,
        
        diagram_id: str,
        
        input: CreateNodeInput
        
    ) -> NodeResult:
        """
        CreateNode operation
        Operation: CreateNodeOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        
        
        variables["diagram_id"] = diagram_id
        
        
        
        variables["input"] = input
        
        

        return await executor.execute("CreateNode", variables=variables)


    @strawberry.field
    async def create_person(
        self,
        info: Info,
        
        input: CreatePersonInput
        
    ) -> PersonResult:
        """
        CreatePerson operation
        Operation: CreatePersonOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        
        
        variables["input"] = input
        
        

        return await executor.execute("CreatePerson", variables=variables)


    @strawberry.field
    async def delete_api_key(
        self,
        info: Info,
        
        api_key_id: str
        
    ) -> DeleteResult:
        """
        DeleteApiKey operation
        Operation: DeleteApiKeyOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        
        
        variables["api_key_id"] = api_key_id
        
        

        return await executor.execute("DeleteApiKey", variables=variables)


    @strawberry.field
    async def delete_diagram(
        self,
        info: Info,
        
        diagram_id: str
        
    ) -> DeleteResult:
        """
        DeleteDiagram operation
        Operation: DeleteDiagramOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        
        
        variables["diagram_id"] = diagram_id
        
        

        return await executor.execute("DeleteDiagram", variables=variables)


    @strawberry.field
    async def delete_node(
        self,
        info: Info,
        
        diagram_id: str,
        
        node_id: str
        
    ) -> DeleteResult:
        """
        DeleteNode operation
        Operation: DeleteNodeOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        
        
        variables["diagram_id"] = diagram_id
        
        
        
        variables["node_id"] = node_id
        
        

        return await executor.execute("DeleteNode", variables=variables)


    @strawberry.field
    async def delete_person(
        self,
        info: Info,
        
        person_id: str
        
    ) -> DeleteResult:
        """
        DeletePerson operation
        Operation: DeletePersonOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        
        
        variables["person_id"] = person_id
        
        

        return await executor.execute("DeletePerson", variables=variables)


    @strawberry.field
    async def execute_diagram(
        self,
        info: Info,
        
        input: ExecuteDiagramInput
        
    ) -> ExecutionResult:
        """
        ExecuteDiagram operation
        Operation: ExecuteDiagramOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        
        
        variables["input"] = input
        
        

        return await executor.execute("ExecuteDiagram", variables=variables)


    @strawberry.field
    async def register_cli_session(
        self,
        info: Info,
        
        input: RegisterCliSessionInput
        
    ) -> CliSessionResult:
        """
        RegisterCliSession operation
        Operation: RegisterCliSessionOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        
        
        variables["input"] = input
        
        

        return await executor.execute("RegisterCliSession", variables=variables)


    @strawberry.field
    async def send_interactive_response(
        self,
        info: Info,
        
        input: InteractiveResponseInput
        
    ) -> ExecutionResult:
        """
        SendInteractiveResponse operation
        Operation: SendInteractiveResponseOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        
        
        variables["input"] = input
        
        

        return await executor.execute("SendInteractiveResponse", variables=variables)


    @strawberry.field
    async def test_api_key(
        self,
        info: Info,
        
        api_key_id: str
        
    ) -> ApiKeyResult:
        """
        TestApiKey operation
        Operation: TestApiKeyOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        
        
        variables["api_key_id"] = api_key_id
        
        

        return await executor.execute("TestApiKey", variables=variables)


    @strawberry.field
    async def unregister_cli_session(
        self,
        info: Info,
        
        input: UnregisterCliSessionInput
        
    ) -> CliSessionResult:
        """
        UnregisterCliSession operation
        Operation: UnregisterCliSessionOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        
        
        variables["input"] = input
        
        

        return await executor.execute("UnregisterCliSession", variables=variables)


    @strawberry.field
    async def update_node(
        self,
        info: Info,
        
        diagram_id: str,
        
        node_id: str,
        
        input: UpdateNodeInput
        
    ) -> NodeResult:
        """
        UpdateNode operation
        Operation: UpdateNodeOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        
        
        variables["diagram_id"] = diagram_id
        
        
        
        variables["node_id"] = node_id
        
        
        
        variables["input"] = input
        
        

        return await executor.execute("UpdateNode", variables=variables)


    @strawberry.field
    async def update_node_state(
        self,
        info: Info,
        
        input: UpdateNodeStateInput
        
    ) -> ExecutionResult:
        """
        UpdateNodeState operation
        Operation: UpdateNodeStateOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        
        
        variables["input"] = input
        
        

        return await executor.execute("UpdateNodeState", variables=variables)


    @strawberry.field
    async def update_person(
        self,
        info: Info,
        
        person_id: str,
        
        input: UpdatePersonInput
        
    ) -> PersonResult:
        """
        UpdatePerson operation
        Operation: UpdatePersonOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        
        
        variables["person_id"] = person_id
        
        
        
        variables["input"] = input
        
        

        return await executor.execute("UpdatePerson", variables=variables)


    @strawberry.field
    async def upload_diagram(
        self,
        info: Info,
        
        file: Upload,
        
        format: DiagramFormatGraphQL
        
    ) -> JSON:
        """
        UploadDiagram operation
        Operation: UploadDiagramOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        
        
        variables["file"] = file
        
        
        
        variables["format"] = format
        
        

        return await executor.execute("UploadDiagram", variables=variables)


    @strawberry.field
    async def upload_file(
        self,
        info: Info,
        
        file: Upload,
        
        path: Optional[str]
        
    ) -> JSON:
        """
        UploadFile operation
        Operation: UploadFileOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        
        
        variables["file"] = file
        
        
        
        if path is not None:
            variables["path"] = path
        
        

        return await executor.execute("UploadFile", variables=variables)


    @strawberry.field
    async def validate_diagram(
        self,
        info: Info,
        
        content: str,
        
        format: DiagramFormatGraphQL
        
    ) -> JSON:
        """
        ValidateDiagram operation
        Operation: ValidateDiagramOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        
        
        variables["content"] = content
        
        
        
        variables["format"] = format
        
        

        return await executor.execute("ValidateDiagram", variables=variables)





@strawberry.type
class Subscription:
    """Auto-generated Subscription type from TypeScript definitions"""


    @strawberry.subscription
    async def execution_updates(
        self,
        info: Info,
        
        execution_id: str
        
    ) -> AsyncGenerator[ExecutionUpdate, None]:
        """
        ExecutionUpdates operation
        Operation: ExecutionUpdatesOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        
        
        variables["execution_id"] = execution_id
        
        

        # Execute subscription and yield items
        async for item in executor.execute_subscription("ExecutionUpdates", variables=variables):
            yield item




# Export the schema types
__all__ = [
    'Query',
    'Mutation',
    'Subscription',
]