"""
Generated Strawberry GraphQL schema from TypeScript operation definitions.
DO NOT EDIT - Generated by DiPeO codegen

Generated at: 2025-09-21T20:14:14.580250
"""

import strawberry
from strawberry.types import Info
from strawberry.scalars import JSON
from strawberry.file_uploads import Upload
from typing import Any, Optional, Union
from collections.abc import AsyncGenerator
from datetime import datetime

# Import operation executor
from dipeo.application.graphql.operation_executor import OperationExecutor

# Import all operations
from dipeo.diagram_generated.graphql import operations

# Import input types and enums
from dipeo.diagram_generated.graphql.inputs import *
from dipeo.diagram_generated.graphql.enums import DiagramFormatGraphQL

# Import result types
from dipeo.diagram_generated.graphql.results import (
    DiagramResult,
    DiagramListResult,
    NodeResult,
    NodeListResult,
    ExecutionResult,
    ExecutionListResult,
    PersonResult,
    PersonListResult,
    ApiKeyResult,
    ApiKeyListResult,
    ConversationResult,
    ConversationListResult,
    FileOperationResult,
    DeleteResult,
    TestResult,
    FormatConversionResult,
    ValidationResult,
    CliSessionResult,
    InteractiveResponseResult,
    BatchOperationResult,
)

# Import domain types for direct query returns
from dipeo.diagram_generated.graphql.domain_types import (
    ExecutionStateType,
    DomainDiagramType,
    DomainPersonType,
    DomainApiKeyType,
    DomainNodeType,
    ExecutionUpdateType,  # For subscriptions
)


@strawberry.type
class Query:
    """Auto-generated Query type from TypeScript definitions"""


    # GraphQL field using noun form
    @strawberry.field(name="api_keys")
    async def api_keys_resolver(
        self,
        info: Info,
        service: Optional[str] = None
    ) -> JSON:
        """
        Query for ApiKey
        Operation: GetApiKeysOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        if service is not None:
            variables["service"] = service

        return await executor.execute("GetApiKeys", variables=variables)


    # GraphQL field using noun form
    @strawberry.field(name="api_key")
    async def api_key_resolver(
        self,
        info: Info,
        api_key_id: str
    ) -> DomainApiKeyType:
        """
        Query for ApiKey
        Operation: GetApiKeyOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        variables["api_key_id"] = api_key_id

        return await executor.execute("GetApiKey", variables=variables)


    # GraphQL field using noun form
    @strawberry.field(name="available_models")
    async def available_models_resolver(
        self,
        info: Info,
        service: str,
        api_key_id: str
    ) -> JSON:
        """
        Query for ApiKey
        Operation: GetAvailableModelsOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        variables["service"] = service
        variables["api_key_id"] = api_key_id

        return await executor.execute("GetAvailableModels", variables=variables)


    # GraphQL field using noun form
    @strawberry.field(name="conversations")
    async def conversations_resolver(
        self,
        info: Info,
        person_id: Optional[str] = None,
        execution_id: Optional[str] = None,
        search: Optional[str] = None,
        show_forgotten: Optional[bool] = None,
        limit: Optional[int] = None,
        offset: Optional[int] = None,
        since: Optional[str] = None
    ) -> list[JSON]:
        """
        Query for Conversation
        Operation: ListConversationsOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        if person_id is not None:
            variables["person_id"] = person_id
        if execution_id is not None:
            variables["execution_id"] = execution_id
        if search is not None:
            variables["search"] = search
        if show_forgotten is not None:
            variables["show_forgotten"] = show_forgotten
        if limit is not None:
            variables["limit"] = limit
        if offset is not None:
            variables["offset"] = offset
        if since is not None:
            variables["since"] = since

        return await executor.execute("ListConversations", variables=variables)


    # GraphQL field using noun form
    @strawberry.field(name="diagram")
    async def diagram_resolver(
        self,
        info: Info,
        diagram_id: str
    ) -> DomainDiagramType:
        """
        Query for Diagram
        Operation: GetDiagramOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        variables["diagram_id"] = diagram_id

        return await executor.execute("GetDiagram", variables=variables)


    # GraphQL field using noun form
    @strawberry.field(name="diagrams")
    async def diagrams_resolver(
        self,
        info: Info,
        filter: Optional[DiagramFilterInput] = None,
        limit: Optional[int] = None,
        offset: Optional[int] = None
    ) -> list[DomainDiagramType]:
        """
        Query for Diagram
        Operation: ListDiagramsOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        if filter is not None:
            variables["filter"] = filter
        if limit is not None:
            variables["limit"] = limit
        if offset is not None:
            variables["offset"] = offset

        return await executor.execute("ListDiagrams", variables=variables)


    # GraphQL field using noun form
    @strawberry.field(name="execution")
    async def execution_resolver(
        self,
        info: Info,
        execution_id: str
    ) -> ExecutionStateType:
        """
        Query for Execution
        Operation: GetExecutionOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        variables["execution_id"] = execution_id

        return await executor.execute("GetExecution", variables=variables)


    # GraphQL field using noun form
    @strawberry.field(name="executions")
    async def executions_resolver(
        self,
        info: Info,
        filter: Optional[ExecutionFilterInput] = None,
        limit: Optional[int] = None,
        offset: Optional[int] = None
    ) -> list[ExecutionStateType]:
        """
        Query for Execution
        Operation: ListExecutionsOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        if filter is not None:
            variables["filter"] = filter
        if limit is not None:
            variables["limit"] = limit
        if offset is not None:
            variables["offset"] = offset

        return await executor.execute("ListExecutions", variables=variables)


    # GraphQL field using noun form
    @strawberry.field(name="supported_formats")
    async def supported_formats_resolver(
        self,
        info: Info
    ) -> JSON:
        """
        Query for Format
        Operation: GetSupportedFormatsOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}

        return await executor.execute("GetSupportedFormats", variables=variables)


    # GraphQL field using noun form
    @strawberry.field(name="person")
    async def person_resolver(
        self,
        info: Info,
        person_id: str
    ) -> DomainPersonType:
        """
        Query for Person
        Operation: GetPersonOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        variables["person_id"] = person_id

        return await executor.execute("GetPerson", variables=variables)


    # GraphQL field using noun form
    @strawberry.field(name="persons")
    async def persons_resolver(
        self,
        info: Info,
        limit: Optional[int] = None
    ) -> list[DomainPersonType]:
        """
        Query for Person
        Operation: ListPersonsOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        if limit is not None:
            variables["limit"] = limit

        return await executor.execute("ListPersons", variables=variables)


    # GraphQL field using noun form
    @strawberry.field(name="prompt_files")
    async def prompt_files_resolver(
        self,
        info: Info
    ) -> list[JSON]:
        """
        Query for Prompt
        Operation: ListPromptFilesOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}

        return await executor.execute("ListPromptFiles", variables=variables)


    # GraphQL field using noun form
    @strawberry.field(name="prompt_file")
    async def prompt_file_resolver(
        self,
        info: Info,
        filename: str
    ) -> JSON:
        """
        Query for Prompt
        Operation: GetPromptFileOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        variables["filename"] = filename

        return await executor.execute("GetPromptFile", variables=variables)


    # GraphQL field using noun form
    @strawberry.field(name="providers")
    async def providers_resolver(
        self,
        info: Info
    ) -> JSON:
        """
        Query for Provider
        Operation: GetProvidersOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}

        return await executor.execute("GetProviders", variables=variables)


    # GraphQL field using noun form
    @strawberry.field(name="provider_operations")
    async def provider_operations_resolver(
        self,
        info: Info,
        provider: str
    ) -> JSON:
        """
        Query for Provider
        Operation: GetProviderOperationsOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        variables["provider"] = provider

        return await executor.execute("GetProviderOperations", variables=variables)


    # GraphQL field using noun form
    @strawberry.field(name="operation_schema")
    async def operation_schema_resolver(
        self,
        info: Info,
        provider: str,
        operation: str
    ) -> JSON:
        """
        Query for Provider
        Operation: GetOperationSchemaOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        variables["provider"] = provider
        variables["operation"] = operation

        return await executor.execute("GetOperationSchema", variables=variables)


    # GraphQL field using noun form
    @strawberry.field(name="system_info")
    async def system_info_resolver(
        self,
        info: Info
    ) -> JSON:
        """
        Query for System
        Operation: GetSystemInfoOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}

        return await executor.execute("GetSystemInfo", variables=variables)


    # GraphQL field using noun form
    @strawberry.field(name="execution_capabilities")
    async def execution_capabilities_resolver(
        self,
        info: Info
    ) -> JSON:
        """
        Query for System
        Operation: GetExecutionCapabilitiesOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}

        return await executor.execute("GetExecutionCapabilities", variables=variables)


    # GraphQL field using noun form
    @strawberry.field(name="health_check")
    async def health_check_resolver(
        self,
        info: Info
    ) -> JSON:
        """
        Query for System
        Operation: HealthCheckOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}

        return await executor.execute("HealthCheck", variables=variables)


    # GraphQL field using noun form
    @strawberry.field(name="execution_order")
    async def execution_order_resolver(
        self,
        info: Info,
        execution_id: str
    ) -> JSON:
        """
        Query for System
        Operation: GetExecutionOrderOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        variables["execution_id"] = execution_id

        return await executor.execute("GetExecutionOrder", variables=variables)


    # GraphQL field using noun form
    @strawberry.field(name="execution_metrics")
    async def execution_metrics_resolver(
        self,
        info: Info,
        execution_id: str
    ) -> JSON:
        """
        Query for System
        Operation: GetExecutionMetricsOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        variables["execution_id"] = execution_id

        return await executor.execute("GetExecutionMetrics", variables=variables)


    # GraphQL field using noun form
    @strawberry.field(name="execution_history")
    async def execution_history_resolver(
        self,
        info: Info,
        diagram_id: Optional[str] = None,
        limit: Optional[int] = None,
        include_metrics: Optional[bool] = None
    ) -> JSON:
        """
        Query for System
        Operation: GetExecutionHistoryOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        if diagram_id is not None:
            variables["diagram_id"] = diagram_id
        if limit is not None:
            variables["limit"] = limit
        if include_metrics is not None:
            variables["include_metrics"] = include_metrics

        return await executor.execute("GetExecutionHistory", variables=variables)


    # GraphQL field using noun form
    @strawberry.field(name="active_cli_session")
    async def active_cli_session_resolver(
        self,
        info: Info
    ) -> JSON:
        """
        Query for System
        Operation: GetActiveCliSessionOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}

        return await executor.execute("GetActiveCliSession", variables=variables)





@strawberry.type
class Mutation:
    """Auto-generated Mutation type from TypeScript definitions"""


    @strawberry.field
    async def create_api_key(
        self,
        info: Info,
        input: CreateApiKeyInput
    ) -> ApiKeyResult:
        """
        Mutation for ApiKey
        Operation: CreateApiKeyOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        variables["input"] = input

        return await executor.execute("CreateApiKey", variables=variables)


    @strawberry.field
    async def test_api_key(
        self,
        info: Info,
        api_key_id: str
    ) -> ApiKeyResult:
        """
        Mutation for ApiKey
        Operation: TestApiKeyOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        variables["api_key_id"] = api_key_id

        return await executor.execute("TestApiKey", variables=variables)


    @strawberry.field
    async def delete_api_key(
        self,
        info: Info,
        api_key_id: str
    ) -> DeleteResult:
        """
        Mutation for ApiKey
        Operation: DeleteApiKeyOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        variables["api_key_id"] = api_key_id

        return await executor.execute("DeleteApiKey", variables=variables)


    @strawberry.field
    async def register_cli_session(
        self,
        info: Info,
        input: RegisterCliSessionInput
    ) -> CliSessionResult:
        """
        Mutation for CliSession
        Operation: RegisterCliSessionOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        variables["input"] = input

        return await executor.execute("RegisterCliSession", variables=variables)


    @strawberry.field
    async def unregister_cli_session(
        self,
        info: Info,
        input: UnregisterCliSessionInput
    ) -> CliSessionResult:
        """
        Mutation for CliSession
        Operation: UnregisterCliSessionOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        variables["input"] = input

        return await executor.execute("UnregisterCliSession", variables=variables)


    @strawberry.field
    async def create_diagram(
        self,
        info: Info,
        input: CreateDiagramInput
    ) -> DiagramResult:
        """
        Mutation for Diagram
        Operation: CreateDiagramOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        variables["input"] = input

        return await executor.execute("CreateDiagram", variables=variables)


    @strawberry.field
    async def execute_diagram(
        self,
        info: Info,
        input: ExecuteDiagramInput
    ) -> ExecutionResult:
        """
        Mutation for Diagram
        Operation: ExecuteDiagramOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        variables["input"] = input

        return await executor.execute("ExecuteDiagram", variables=variables)


    @strawberry.field
    async def delete_diagram(
        self,
        info: Info,
        diagram_id: str
    ) -> DeleteResult:
        """
        Mutation for Diagram
        Operation: DeleteDiagramOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        variables["diagram_id"] = diagram_id

        return await executor.execute("DeleteDiagram", variables=variables)


    @strawberry.field
    async def control_execution(
        self,
        info: Info,
        input: ExecutionControlInput
    ) -> ExecutionResult:
        """
        Mutation for Execution
        Operation: ControlExecutionOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        variables["input"] = input

        return await executor.execute("ControlExecution", variables=variables)


    @strawberry.field
    async def send_interactive_response(
        self,
        info: Info,
        input: InteractiveResponseInput
    ) -> ExecutionResult:
        """
        Mutation for Execution
        Operation: SendInteractiveResponseOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        variables["input"] = input

        return await executor.execute("SendInteractiveResponse", variables=variables)


    @strawberry.field
    async def update_node_state(
        self,
        info: Info,
        input: UpdateNodeStateInput
    ) -> ExecutionResult:
        """
        Mutation for Execution
        Operation: UpdateNodeStateOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        variables["input"] = input

        return await executor.execute("UpdateNodeState", variables=variables)


    @strawberry.field
    async def upload_file(
        self,
        info: Info,
        file: Upload,
        path: Optional[str] = None
    ) -> JSON:
        """
        Mutation for File
        Operation: UploadFileOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        variables["file"] = file
        if path is not None:
            variables["path"] = path

        return await executor.execute("UploadFile", variables=variables)


    @strawberry.field
    async def upload_diagram(
        self,
        info: Info,
        file: Upload,
        format: DiagramFormatGraphQL
    ) -> JSON:
        """
        Mutation for File
        Operation: UploadDiagramOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        variables["file"] = file
        variables["format"] = format

        return await executor.execute("UploadDiagram", variables=variables)


    @strawberry.field
    async def validate_diagram(
        self,
        info: Info,
        content: str,
        format: DiagramFormatGraphQL
    ) -> JSON:
        """
        Mutation for File
        Operation: ValidateDiagramOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        variables["content"] = content
        variables["format"] = format

        return await executor.execute("ValidateDiagram", variables=variables)


    @strawberry.field
    async def convert_diagram_format(
        self,
        info: Info,
        content: str,
        from_format: DiagramFormatGraphQL,
        to_format: DiagramFormatGraphQL
    ) -> FormatConversionResult:
        """
        Mutation for File
        Operation: ConvertDiagramFormatOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        variables["content"] = content
        variables["from_format"] = from_format
        variables["to_format"] = to_format

        return await executor.execute("ConvertDiagramFormat", variables=variables)


    @strawberry.field
    async def create_node(
        self,
        info: Info,
        diagram_id: str,
        input: CreateNodeInput
    ) -> NodeResult:
        """
        Mutation for Node
        Operation: CreateNodeOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        variables["diagram_id"] = diagram_id
        variables["input"] = input

        return await executor.execute("CreateNode", variables=variables)


    @strawberry.field
    async def update_node(
        self,
        info: Info,
        diagram_id: str,
        node_id: str,
        input: UpdateNodeInput
    ) -> NodeResult:
        """
        Mutation for Node
        Operation: UpdateNodeOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        variables["diagram_id"] = diagram_id
        variables["node_id"] = node_id
        variables["input"] = input

        return await executor.execute("UpdateNode", variables=variables)


    @strawberry.field
    async def delete_node(
        self,
        info: Info,
        diagram_id: str,
        node_id: str
    ) -> DeleteResult:
        """
        Mutation for Node
        Operation: DeleteNodeOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        variables["diagram_id"] = diagram_id
        variables["node_id"] = node_id

        return await executor.execute("DeleteNode", variables=variables)


    @strawberry.field
    async def create_person(
        self,
        info: Info,
        input: CreatePersonInput
    ) -> PersonResult:
        """
        Mutation for Person
        Operation: CreatePersonOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        variables["input"] = input

        return await executor.execute("CreatePerson", variables=variables)


    @strawberry.field
    async def update_person(
        self,
        info: Info,
        person_id: str,
        input: UpdatePersonInput
    ) -> PersonResult:
        """
        Mutation for Person
        Operation: UpdatePersonOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        variables["person_id"] = person_id
        variables["input"] = input

        return await executor.execute("UpdatePerson", variables=variables)


    @strawberry.field
    async def delete_person(
        self,
        info: Info,
        person_id: str
    ) -> DeleteResult:
        """
        Mutation for Person
        Operation: DeletePersonOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        variables["person_id"] = person_id

        return await executor.execute("DeletePerson", variables=variables)





@strawberry.type
class Subscription:
    """Auto-generated Subscription type from TypeScript definitions"""


    @strawberry.subscription
    async def execution_updates(
        self,
        info: Info,
        execution_id: str
    ) -> AsyncGenerator[ExecutionUpdateType, None]:
        """
        Subscription for Execution
        Operation: ExecutionUpdatesOperation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        variables["execution_id"] = execution_id

        # Execute subscription and yield items
        async for item in executor.execute_subscription("ExecutionUpdates", variables=variables):
            yield item




# Export the schema types
__all__ = [
    'Query',
    'Mutation',
    'Subscription',
]
