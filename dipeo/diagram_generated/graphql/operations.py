"""
DO NOT EDIT - Generated by DiPeO Unified Strawberry Pipeline

Generated from TypeScript query definitions in dipeo/models/src/frontend/query-definitions/
Total operations: 52 (26 queries, 24 mutations, 2 subscriptions)
Generated at: 2025-09-18T13:14:39.011793
"""

from typing import Any, Dict, List, Optional, TypedDict, Protocol
import strawberry

# Import special Strawberry types
from strawberry.file_uploads import Upload


# Import custom domain types from inputs if needed

from .inputs import ConfigureTodoSyncInput, CreateApiKeyInput, CreateDiagramInput, CreateNodeInput, CreatePersonInput, DiagramFilterInput, DiagramFormatGraphQL, ExecuteDiagramInput, ExecutionControlInput, ExecutionFilterInput, InteractiveResponseInput, RegisterCliSessionInput, ToggleTodoSyncInput, UnregisterCliSessionInput, UpdateNodeInput, UpdateNodeStateInput, UpdatePersonInput


# Helper functions for Strawberry object conversion
def _to_dict_if_strawberry(value: Any) -> Any:
    """Convert Strawberry input object to dict if needed."""
    if hasattr(value, '__strawberry_definition__'):
        return strawberry.asdict(value)
    return value


# Base class for all GraphQL operations
class BaseGraphQLOperation:
    """Base class providing common functionality for all GraphQL operations."""

    query: str
    operation_type: str
    operation_name: str

    @classmethod
    def get_query(cls) -> str:
        """Get the GraphQL query string."""
        return cls.query

    @classmethod
    def _build_variables(cls, **kwargs) -> dict[str, Any]:
        """
        Build variables dictionary, converting Strawberry objects as needed.

        Args:
            **kwargs: Variable name-value pairs

        Returns:
            Dictionary of variables for GraphQL execution
        """
        variables = {}
        for key, value in kwargs.items():
            if value is not None:
                variables[key] = _to_dict_if_strawberry(value)
        return variables

# GraphQL query strings as constants

GET_API_KEYS_QUERY = """query GetApiKeys($service: String) {
    api_keys(service: $service)
}"""



GET_API_KEY_QUERY = """query GetApiKey($api_key_id: String!) {
    api_key(api_key_id: $api_key_id) {
      id
      label
      service
    }
}"""



GET_AVAILABLE_MODELS_QUERY = """query GetAvailableModels($service: String!, $api_key_id: String!) {
    available_models(service: $service, api_key_id: $api_key_id)
}"""



CREATE_API_KEY_MUTATION = """mutation CreateApiKey($input: CreateApiKeyInput!) {
    create_api_key(input: $input) {
      success
      api_key {
        id
        label
        service
      }
      message
      error
    }
}"""



TEST_API_KEY_MUTATION = """mutation TestApiKey($api_key_id: String!) {
    test_api_key(api_key_id: $api_key_id) {
      success
      message
      error
    }
}"""



DELETE_API_KEY_MUTATION = """mutation DeleteApiKey($api_key_id: String!) {
    delete_api_key(api_key_id: $api_key_id) {
      success
      message
    }
}"""



REGISTER_CLI_SESSION_MUTATION = """mutation RegisterCliSession($input: RegisterCliSessionInput!) {
    register_cli_session(input: $input) {
      success
      message
      error
    }
}"""



UNREGISTER_CLI_SESSION_MUTATION = """mutation UnregisterCliSession($input: UnregisterCliSessionInput!) {
    unregister_cli_session(input: $input) {
      success
      message
      error
    }
}"""



LIST_CONVERSATIONS_QUERY = """query ListConversations($person_id: String, $execution_id: String, $search: String, $show_forgotten: Boolean, $limit: Int, $offset: Int, $since: String) {
    conversations(person_id: $person_id, execution_id: $execution_id, search: $search, show_forgotten: $show_forgotten, limit: $limit, offset: $offset, since: $since)
}"""



GET_DIAGRAM_QUERY = """query GetDiagram($diagram_id: String!) {
    diagram(diagram_id: $diagram_id) {
      nodes {
        id
        type
        position {
          x
          y
        }
        data
      }
      handles {
        id
        node_id
        label
        direction
        data_type
        position
      }
      arrows {
        id
        source
        target
        content_type
        label
        data
      }
      persons {
        id
        label
        llm_config {
          service
          model
          api_key_id
          system_prompt
        }
        type
      }
      metadata {
        id
        name
        description
        version
        created
        modified
        author
        tags
      }
    }
}"""



LIST_DIAGRAMS_QUERY = """query ListDiagrams($filter: DiagramFilterInput, $limit: Int, $offset: Int) {
    diagrams(filter: $filter, limit: $limit, offset: $offset) {
      metadata {
        id
        name
        description
        author
        created
        modified
        tags
      }
    }
}"""



CREATE_DIAGRAM_MUTATION = """mutation CreateDiagram($input: CreateDiagramInput!) {
    create_diagram(input: $input) {
      success
      diagram {
        metadata {
          id
          name
        }
      }
      message
      error
    }
}"""



EXECUTE_DIAGRAM_MUTATION = """mutation ExecuteDiagram($input: ExecuteDiagramInput!) {
    execute_diagram(input: $input) {
      success
      execution {
        id
      }
      message
      error
    }
}"""



DELETE_DIAGRAM_MUTATION = """mutation DeleteDiagram($diagram_id: String!) {
    delete_diagram(diagram_id: $diagram_id) {
      success
      message
      error
    }
}"""



GET_EXECUTION_QUERY = """query GetExecution($execution_id: String!) {
    execution(execution_id: $execution_id) {
      id
      status
      diagram_id
      started_at
      ended_at
      error
      node_states
      node_outputs
      variables
      metrics {
        execution_id
        start_time
        end_time
        total_duration_ms
        node_metrics
        critical_path
        parallelizable_groups
        bottlenecks {
          node_id
          node_type
          duration_ms
          percentage
        }
      }
      llm_usage {
        input
        output
        cached
        total
      }
    }
}"""



LIST_EXECUTIONS_QUERY = """query ListExecutions($filter: ExecutionFilterInput, $limit: Int, $offset: Int) {
    executions(filter: $filter, limit: $limit, offset: $offset) {
      id
      status
      diagram_id
      started_at
      ended_at
      error
    }
}"""



EXECUTION_UPDATES_SUBSCRIPTION = """subscription ExecutionUpdates($execution_id: String!) {
    execution_updates(execution_id: $execution_id) {
      execution_id
      type
      data
      timestamp
    }
}"""



CONTROL_EXECUTION_MUTATION = """mutation ControlExecution($input: ExecutionControlInput!) {
    control_execution(input: $input) {
      success
      execution {
        id
        status
      }
      message
      error
    }
}"""



SEND_INTERACTIVE_RESPONSE_MUTATION = """mutation SendInteractiveResponse($input: InteractiveResponseInput!) {
    send_interactive_response(input: $input) {
      success
      message
      error
    }
}"""



UPDATE_NODE_STATE_MUTATION = """mutation UpdateNodeState($input: UpdateNodeStateInput!) {
    update_node_state(input: $input) {
      success
      execution {
        id
        status
      }
      message
      error
    }
}"""



UPLOAD_FILE_MUTATION = """mutation UploadFile($file: Upload!, $path: String) {
    upload_file(file: $file, path: $path)
}"""



UPLOAD_DIAGRAM_MUTATION = """mutation UploadDiagram($file: Upload!, $format: DiagramFormatGraphQL!) {
    upload_diagram(file: $file, format: $format)
}"""



VALIDATE_DIAGRAM_MUTATION = """mutation ValidateDiagram($content: String!, $format: DiagramFormatGraphQL!) {
    validate_diagram(content: $content, format: $format)
}"""



CONVERT_DIAGRAM_FORMAT_MUTATION = """mutation ConvertDiagramFormat($content: String!, $from_format: DiagramFormatGraphQL!, $to_format: DiagramFormatGraphQL!) {
    convert_diagram_format(content: $content, from_format: $from_format, to_format: $to_format) {
      success
      data
      format
      message
      error
    }
}"""



GET_SUPPORTED_FORMATS_QUERY = """query GetSupportedFormats {
    supported_formats
}"""



CREATE_NODE_MUTATION = """mutation CreateNode($diagram_id: String!, $input: CreateNodeInput!) {
    create_node(diagram_id: $diagram_id, input: $input) {
      success
      node {
        id
        type
        position {
          x
          y
        }
        data
      }
      message
      error
    }
}"""



UPDATE_NODE_MUTATION = """mutation UpdateNode($diagram_id: String!, $node_id: String!, $input: UpdateNodeInput!) {
    update_node(diagram_id: $diagram_id, node_id: $node_id, input: $input) {
      success
      message
      error
    }
}"""



DELETE_NODE_MUTATION = """mutation DeleteNode($diagram_id: String!, $node_id: String!) {
    delete_node(diagram_id: $diagram_id, node_id: $node_id) {
      success
      message
      error
    }
}"""



GET_PERSON_QUERY = """query GetPerson($person_id: String!) {
    person(person_id: $person_id) {
      id
      label
      type
      llm_config {
        service
        model
        api_key_id
        system_prompt
      }
    }
}"""



LIST_PERSONS_QUERY = """query ListPersons($limit: Int) {
    persons(limit: $limit) {
      id
      label
      type
      llm_config {
        service
        model
        api_key_id
      }
    }
}"""



CREATE_PERSON_MUTATION = """mutation CreatePerson($input: CreatePersonInput!) {
    create_person(input: $input) {
      success
      person {
        id
        label
      }
      message
      error
    }
}"""



UPDATE_PERSON_MUTATION = """mutation UpdatePerson($person_id: String!, $input: UpdatePersonInput!) {
    update_person(person_id: $person_id, input: $input) {
      success
      person {
        id
        label
      }
      message
      error
    }
}"""



DELETE_PERSON_MUTATION = """mutation DeletePerson($person_id: String!) {
    delete_person(person_id: $person_id) {
      success
      message
      error
    }
}"""



LIST_PROMPT_FILES_QUERY = """query ListPromptFiles {
    prompt_files
}"""



GET_PROMPT_FILE_QUERY = """query GetPromptFile($filename: String!) {
    prompt_file(filename: $filename)
}"""



GET_PROVIDERS_QUERY = """query GetProviders {
    providers
}"""



GET_PROVIDER_OPERATIONS_QUERY = """query GetProviderOperations($provider: String!) {
    provider_operations(provider: $provider)
}"""



GET_OPERATION_SCHEMA_QUERY = """query GetOperationSchema($provider: String!, $operation: String!) {
    operation_schema(provider: $provider, operation: $operation)
}"""



GET_SYSTEM_INFO_QUERY = """query GetSystemInfo {
    system_info
}"""



GET_EXECUTION_CAPABILITIES_QUERY = """query GetExecutionCapabilities {
    execution_capabilities
}"""



HEALTH_CHECK_QUERY = """query HealthCheck {
    health_check
}"""



GET_EXECUTION_ORDER_QUERY = """query GetExecutionOrder($execution_id: String!) {
    execution_order(execution_id: $execution_id)
}"""



GET_EXECUTION_METRICS_QUERY = """query GetExecutionMetrics($execution_id: String!) {
    execution_metrics(execution_id: $execution_id)
}"""



GET_EXECUTION_HISTORY_QUERY = """query GetExecutionHistory($diagram_id: String, $limit: Int, $include_metrics: Boolean) {
    execution_history(diagram_id: $diagram_id, limit: $limit, include_metrics: $include_metrics)
}"""



GET_ACTIVE_CLI_SESSION_QUERY = """query GetActiveCliSession {
    active_cli_session
}"""



TOGGLE_TODO_SYNC_MUTATION = """mutation ToggleTodoSync($input: ToggleTodoSyncInput!) {
    toggle_todo_sync(input: $input)
}"""



CONFIGURE_TODO_SYNC_MUTATION = """mutation ConfigureTodoSync($input: ConfigureTodoSyncInput!) {
    configure_todo_sync(input: $input)
}"""



TRIGGER_TODO_SYNC_MUTATION = """mutation TriggerTodoSync($session_id: String!) {
    trigger_todo_sync(session_id: $session_id)
}"""



GET_TODO_SYNC_STATUS_QUERY = """query GetTodoSyncStatus($session_id: String) {
    todo_sync_status(session_id: $session_id)
}"""



LIST_TODO_DIAGRAMS_QUERY = """query ListTodoDiagrams($session_id: String, $originating_document: String, $is_active: Boolean, $limit: Int, $offset: Int) {
    todo_diagrams(session_id: $session_id, originating_document: $originating_document, is_active: $is_active, limit: $limit, offset: $offset)
}"""



GET_TODO_DIAGRAM_QUERY = """query GetTodoDiagram($id: String!) {
    todo_diagram(id: $id)
}"""



SUBSCRIBE_TODO_UPDATES_SUBSCRIPTION = """subscription SubscribeTodoUpdates($session_id: String!) {
    subscribe_todo_updates(session_id: $session_id)
}"""



# Typed operation classes


class GetApiKeysOperation(BaseGraphQLOperation):
    """
    Query operation for ApiKey.
    GraphQL query: GetApiKeys
    """

    query = GET_API_KEYS_QUERY
    operation_type = "query"
    operation_name = "GetApiKeys"

    
    class Variables(TypedDict, total=False):
        """Variable types for GetApiKeys query."""
        
        service: Optional[str]
        
    

    @classmethod
    def get_variables_dict(cls, service: Optional[str] = None) -> dict[str, Any]:
        """
        Build variables dictionary for the operation.

        Args:
            service: String - Optional (accepts dict or Strawberry input object)

        Returns:
            Dictionary of variables for GraphQL execution
        """
        return cls._build_variables(
            service=service
        )


class GetApiKeyOperation(BaseGraphQLOperation):
    """
    Query operation for ApiKey.
    GraphQL query: GetApiKey
    """

    query = GET_API_KEY_QUERY
    operation_type = "query"
    operation_name = "GetApiKey"

    
    class Variables(TypedDict):
        """Variable types for GetApiKey query."""
        
        api_key_id: str
        
    

    @classmethod
    def get_variables_dict(cls, api_key_id: str) -> dict[str, Any]:
        """
        Build variables dictionary for the operation.

        Args:
            api_key_id: String - Required (accepts dict or Strawberry input object)

        Returns:
            Dictionary of variables for GraphQL execution
        """
        return cls._build_variables(
            api_key_id=api_key_id
        )


class GetAvailableModelsOperation(BaseGraphQLOperation):
    """
    Query operation for ApiKey.
    GraphQL query: GetAvailableModels
    """

    query = GET_AVAILABLE_MODELS_QUERY
    operation_type = "query"
    operation_name = "GetAvailableModels"

    
    class Variables(TypedDict):
        """Variable types for GetAvailableModels query."""
        
        service: str
        
        api_key_id: str
        
    

    @classmethod
    def get_variables_dict(cls, service: str, api_key_id: str) -> dict[str, Any]:
        """
        Build variables dictionary for the operation.

        Args:
            service: String - Required (accepts dict or Strawberry input object)
            api_key_id: String - Required (accepts dict or Strawberry input object)

        Returns:
            Dictionary of variables for GraphQL execution
        """
        return cls._build_variables(
            service=service,
            api_key_id=api_key_id
        )


class CreateApiKeyOperation(BaseGraphQLOperation):
    """
    Mutation operation for ApiKey.
    GraphQL mutation: CreateApiKey
    """

    query = CREATE_API_KEY_MUTATION
    operation_type = "mutation"
    operation_name = "CreateApiKey"

    
    class Variables(TypedDict):
        """Variable types for CreateApiKey mutation."""
        
        input: CreateApiKeyInput
        
    

    @classmethod
    def get_variables_dict(cls, input: CreateApiKeyInput) -> dict[str, Any]:
        """
        Build variables dictionary for the operation.

        Args:
            input: CreateApiKeyInput - Required (accepts dict or Strawberry input object)

        Returns:
            Dictionary of variables for GraphQL execution
        """
        return cls._build_variables(
            input=input
        )


class TestApiKeyOperation(BaseGraphQLOperation):
    """
    Mutation operation for ApiKey.
    GraphQL mutation: TestApiKey
    """

    query = TEST_API_KEY_MUTATION
    operation_type = "mutation"
    operation_name = "TestApiKey"

    
    class Variables(TypedDict):
        """Variable types for TestApiKey mutation."""
        
        api_key_id: str
        
    

    @classmethod
    def get_variables_dict(cls, api_key_id: str) -> dict[str, Any]:
        """
        Build variables dictionary for the operation.

        Args:
            api_key_id: String - Required (accepts dict or Strawberry input object)

        Returns:
            Dictionary of variables for GraphQL execution
        """
        return cls._build_variables(
            api_key_id=api_key_id
        )


class DeleteApiKeyOperation(BaseGraphQLOperation):
    """
    Mutation operation for ApiKey.
    GraphQL mutation: DeleteApiKey
    """

    query = DELETE_API_KEY_MUTATION
    operation_type = "mutation"
    operation_name = "DeleteApiKey"

    
    class Variables(TypedDict):
        """Variable types for DeleteApiKey mutation."""
        
        api_key_id: str
        
    

    @classmethod
    def get_variables_dict(cls, api_key_id: str) -> dict[str, Any]:
        """
        Build variables dictionary for the operation.

        Args:
            api_key_id: String - Required (accepts dict or Strawberry input object)

        Returns:
            Dictionary of variables for GraphQL execution
        """
        return cls._build_variables(
            api_key_id=api_key_id
        )


class RegisterCliSessionOperation(BaseGraphQLOperation):
    """
    Mutation operation for CliSession.
    GraphQL mutation: RegisterCliSession
    """

    query = REGISTER_CLI_SESSION_MUTATION
    operation_type = "mutation"
    operation_name = "RegisterCliSession"

    
    class Variables(TypedDict):
        """Variable types for RegisterCliSession mutation."""
        
        input: RegisterCliSessionInput
        
    

    @classmethod
    def get_variables_dict(cls, input: RegisterCliSessionInput) -> dict[str, Any]:
        """
        Build variables dictionary for the operation.

        Args:
            input: RegisterCliSessionInput - Required (accepts dict or Strawberry input object)

        Returns:
            Dictionary of variables for GraphQL execution
        """
        return cls._build_variables(
            input=input
        )


class UnregisterCliSessionOperation(BaseGraphQLOperation):
    """
    Mutation operation for CliSession.
    GraphQL mutation: UnregisterCliSession
    """

    query = UNREGISTER_CLI_SESSION_MUTATION
    operation_type = "mutation"
    operation_name = "UnregisterCliSession"

    
    class Variables(TypedDict):
        """Variable types for UnregisterCliSession mutation."""
        
        input: UnregisterCliSessionInput
        
    

    @classmethod
    def get_variables_dict(cls, input: UnregisterCliSessionInput) -> dict[str, Any]:
        """
        Build variables dictionary for the operation.

        Args:
            input: UnregisterCliSessionInput - Required (accepts dict or Strawberry input object)

        Returns:
            Dictionary of variables for GraphQL execution
        """
        return cls._build_variables(
            input=input
        )


class ListConversationsOperation(BaseGraphQLOperation):
    """
    Query operation for Conversation.
    GraphQL query: ListConversations
    """

    query = LIST_CONVERSATIONS_QUERY
    operation_type = "query"
    operation_name = "ListConversations"

    
    class Variables(TypedDict, total=False):
        """Variable types for ListConversations query."""
        
        person_id: Optional[str]
        
        execution_id: Optional[str]
        
        search: Optional[str]
        
        show_forgotten: Optional[bool]
        
        limit: Optional[int]
        
        offset: Optional[int]
        
        since: Optional[str]
        
    

    @classmethod
    def get_variables_dict(cls, person_id: Optional[str] = None, execution_id: Optional[str] = None, search: Optional[str] = None, show_forgotten: Optional[bool] = None, limit: Optional[int] = None, offset: Optional[int] = None, since: Optional[str] = None) -> dict[str, Any]:
        """
        Build variables dictionary for the operation.

        Args:
            person_id: String - Optional (accepts dict or Strawberry input object)
            execution_id: String - Optional (accepts dict or Strawberry input object)
            search: String - Optional (accepts dict or Strawberry input object)
            show_forgotten: Boolean - Optional (accepts dict or Strawberry input object)
            limit: Int - Optional (accepts dict or Strawberry input object)
            offset: Int - Optional (accepts dict or Strawberry input object)
            since: String - Optional (accepts dict or Strawberry input object)

        Returns:
            Dictionary of variables for GraphQL execution
        """
        return cls._build_variables(
            person_id=person_id,
            execution_id=execution_id,
            search=search,
            show_forgotten=show_forgotten,
            limit=limit,
            offset=offset,
            since=since
        )


class GetDiagramOperation(BaseGraphQLOperation):
    """
    Query operation for Diagram.
    GraphQL query: GetDiagram
    """

    query = GET_DIAGRAM_QUERY
    operation_type = "query"
    operation_name = "GetDiagram"

    
    class Variables(TypedDict):
        """Variable types for GetDiagram query."""
        
        diagram_id: str
        
    

    @classmethod
    def get_variables_dict(cls, diagram_id: str) -> dict[str, Any]:
        """
        Build variables dictionary for the operation.

        Args:
            diagram_id: String - Required (accepts dict or Strawberry input object)

        Returns:
            Dictionary of variables for GraphQL execution
        """
        return cls._build_variables(
            diagram_id=diagram_id
        )


class ListDiagramsOperation(BaseGraphQLOperation):
    """
    Query operation for Diagram.
    GraphQL query: ListDiagrams
    """

    query = LIST_DIAGRAMS_QUERY
    operation_type = "query"
    operation_name = "ListDiagrams"

    
    class Variables(TypedDict, total=False):
        """Variable types for ListDiagrams query."""
        
        filter: Optional[DiagramFilterInput]
        
        limit: Optional[int]
        
        offset: Optional[int]
        
    

    @classmethod
    def get_variables_dict(cls, filter: Optional[DiagramFilterInput] = None, limit: Optional[int] = None, offset: Optional[int] = None) -> dict[str, Any]:
        """
        Build variables dictionary for the operation.

        Args:
            filter: DiagramFilterInput - Optional (accepts dict or Strawberry input object)
            limit: Int - Optional (accepts dict or Strawberry input object)
            offset: Int - Optional (accepts dict or Strawberry input object)

        Returns:
            Dictionary of variables for GraphQL execution
        """
        return cls._build_variables(
            filter=filter,
            limit=limit,
            offset=offset
        )


class CreateDiagramOperation(BaseGraphQLOperation):
    """
    Mutation operation for Diagram.
    GraphQL mutation: CreateDiagram
    """

    query = CREATE_DIAGRAM_MUTATION
    operation_type = "mutation"
    operation_name = "CreateDiagram"

    
    class Variables(TypedDict):
        """Variable types for CreateDiagram mutation."""
        
        input: CreateDiagramInput
        
    

    @classmethod
    def get_variables_dict(cls, input: CreateDiagramInput) -> dict[str, Any]:
        """
        Build variables dictionary for the operation.

        Args:
            input: CreateDiagramInput - Required (accepts dict or Strawberry input object)

        Returns:
            Dictionary of variables for GraphQL execution
        """
        return cls._build_variables(
            input=input
        )


class ExecuteDiagramOperation(BaseGraphQLOperation):
    """
    Mutation operation for Diagram.
    GraphQL mutation: ExecuteDiagram
    """

    query = EXECUTE_DIAGRAM_MUTATION
    operation_type = "mutation"
    operation_name = "ExecuteDiagram"

    
    class Variables(TypedDict):
        """Variable types for ExecuteDiagram mutation."""
        
        input: ExecuteDiagramInput
        
    

    @classmethod
    def get_variables_dict(cls, input: ExecuteDiagramInput) -> dict[str, Any]:
        """
        Build variables dictionary for the operation.

        Args:
            input: ExecuteDiagramInput - Required (accepts dict or Strawberry input object)

        Returns:
            Dictionary of variables for GraphQL execution
        """
        return cls._build_variables(
            input=input
        )


class DeleteDiagramOperation(BaseGraphQLOperation):
    """
    Mutation operation for Diagram.
    GraphQL mutation: DeleteDiagram
    """

    query = DELETE_DIAGRAM_MUTATION
    operation_type = "mutation"
    operation_name = "DeleteDiagram"

    
    class Variables(TypedDict):
        """Variable types for DeleteDiagram mutation."""
        
        diagram_id: str
        
    

    @classmethod
    def get_variables_dict(cls, diagram_id: str) -> dict[str, Any]:
        """
        Build variables dictionary for the operation.

        Args:
            diagram_id: String - Required (accepts dict or Strawberry input object)

        Returns:
            Dictionary of variables for GraphQL execution
        """
        return cls._build_variables(
            diagram_id=diagram_id
        )


class GetExecutionOperation(BaseGraphQLOperation):
    """
    Query operation for Execution.
    GraphQL query: GetExecution
    """

    query = GET_EXECUTION_QUERY
    operation_type = "query"
    operation_name = "GetExecution"

    
    class Variables(TypedDict):
        """Variable types for GetExecution query."""
        
        execution_id: str
        
    

    @classmethod
    def get_variables_dict(cls, execution_id: str) -> dict[str, Any]:
        """
        Build variables dictionary for the operation.

        Args:
            execution_id: String - Required (accepts dict or Strawberry input object)

        Returns:
            Dictionary of variables for GraphQL execution
        """
        return cls._build_variables(
            execution_id=execution_id
        )


class ListExecutionsOperation(BaseGraphQLOperation):
    """
    Query operation for Execution.
    GraphQL query: ListExecutions
    """

    query = LIST_EXECUTIONS_QUERY
    operation_type = "query"
    operation_name = "ListExecutions"

    
    class Variables(TypedDict, total=False):
        """Variable types for ListExecutions query."""
        
        filter: Optional[ExecutionFilterInput]
        
        limit: Optional[int]
        
        offset: Optional[int]
        
    

    @classmethod
    def get_variables_dict(cls, filter: Optional[ExecutionFilterInput] = None, limit: Optional[int] = None, offset: Optional[int] = None) -> dict[str, Any]:
        """
        Build variables dictionary for the operation.

        Args:
            filter: ExecutionFilterInput - Optional (accepts dict or Strawberry input object)
            limit: Int - Optional (accepts dict or Strawberry input object)
            offset: Int - Optional (accepts dict or Strawberry input object)

        Returns:
            Dictionary of variables for GraphQL execution
        """
        return cls._build_variables(
            filter=filter,
            limit=limit,
            offset=offset
        )


class ExecutionUpdatesOperation(BaseGraphQLOperation):
    """
    Subscription operation for Execution.
    GraphQL subscription: ExecutionUpdates
    """

    query = EXECUTION_UPDATES_SUBSCRIPTION
    operation_type = "subscription"
    operation_name = "ExecutionUpdates"

    
    class Variables(TypedDict):
        """Variable types for ExecutionUpdates subscription."""
        
        execution_id: str
        
    

    @classmethod
    def get_variables_dict(cls, execution_id: str) -> dict[str, Any]:
        """
        Build variables dictionary for the operation.

        Args:
            execution_id: String - Required (accepts dict or Strawberry input object)

        Returns:
            Dictionary of variables for GraphQL execution
        """
        return cls._build_variables(
            execution_id=execution_id
        )


class ControlExecutionOperation(BaseGraphQLOperation):
    """
    Mutation operation for Execution.
    GraphQL mutation: ControlExecution
    """

    query = CONTROL_EXECUTION_MUTATION
    operation_type = "mutation"
    operation_name = "ControlExecution"

    
    class Variables(TypedDict):
        """Variable types for ControlExecution mutation."""
        
        input: ExecutionControlInput
        
    

    @classmethod
    def get_variables_dict(cls, input: ExecutionControlInput) -> dict[str, Any]:
        """
        Build variables dictionary for the operation.

        Args:
            input: ExecutionControlInput - Required (accepts dict or Strawberry input object)

        Returns:
            Dictionary of variables for GraphQL execution
        """
        return cls._build_variables(
            input=input
        )


class SendInteractiveResponseOperation(BaseGraphQLOperation):
    """
    Mutation operation for Execution.
    GraphQL mutation: SendInteractiveResponse
    """

    query = SEND_INTERACTIVE_RESPONSE_MUTATION
    operation_type = "mutation"
    operation_name = "SendInteractiveResponse"

    
    class Variables(TypedDict):
        """Variable types for SendInteractiveResponse mutation."""
        
        input: InteractiveResponseInput
        
    

    @classmethod
    def get_variables_dict(cls, input: InteractiveResponseInput) -> dict[str, Any]:
        """
        Build variables dictionary for the operation.

        Args:
            input: InteractiveResponseInput - Required (accepts dict or Strawberry input object)

        Returns:
            Dictionary of variables for GraphQL execution
        """
        return cls._build_variables(
            input=input
        )


class UpdateNodeStateOperation(BaseGraphQLOperation):
    """
    Mutation operation for Execution.
    GraphQL mutation: UpdateNodeState
    """

    query = UPDATE_NODE_STATE_MUTATION
    operation_type = "mutation"
    operation_name = "UpdateNodeState"

    
    class Variables(TypedDict):
        """Variable types for UpdateNodeState mutation."""
        
        input: UpdateNodeStateInput
        
    

    @classmethod
    def get_variables_dict(cls, input: UpdateNodeStateInput) -> dict[str, Any]:
        """
        Build variables dictionary for the operation.

        Args:
            input: UpdateNodeStateInput - Required (accepts dict or Strawberry input object)

        Returns:
            Dictionary of variables for GraphQL execution
        """
        return cls._build_variables(
            input=input
        )


class UploadFileOperation(BaseGraphQLOperation):
    """
    Mutation operation for File.
    GraphQL mutation: UploadFile
    """

    query = UPLOAD_FILE_MUTATION
    operation_type = "mutation"
    operation_name = "UploadFile"

    
    class Variables(TypedDict):
        """Variable types for UploadFile mutation."""
        
        file: Upload
        
        path: Optional[str]
        
    

    @classmethod
    def get_variables_dict(cls, file: Upload, path: Optional[str] = None) -> dict[str, Any]:
        """
        Build variables dictionary for the operation.

        Args:
            file: Upload - Required (accepts dict or Strawberry input object)
            path: String - Optional (accepts dict or Strawberry input object)

        Returns:
            Dictionary of variables for GraphQL execution
        """
        return cls._build_variables(
            file=file,
            path=path
        )


class UploadDiagramOperation(BaseGraphQLOperation):
    """
    Mutation operation for File.
    GraphQL mutation: UploadDiagram
    """

    query = UPLOAD_DIAGRAM_MUTATION
    operation_type = "mutation"
    operation_name = "UploadDiagram"

    
    class Variables(TypedDict):
        """Variable types for UploadDiagram mutation."""
        
        file: Upload
        
        format: DiagramFormatGraphQL
        
    

    @classmethod
    def get_variables_dict(cls, file: Upload, format: DiagramFormatGraphQL) -> dict[str, Any]:
        """
        Build variables dictionary for the operation.

        Args:
            file: Upload - Required (accepts dict or Strawberry input object)
            format: DiagramFormatGraphQL - Required (accepts dict or Strawberry input object)

        Returns:
            Dictionary of variables for GraphQL execution
        """
        return cls._build_variables(
            file=file,
            format=format
        )


class ValidateDiagramOperation(BaseGraphQLOperation):
    """
    Mutation operation for File.
    GraphQL mutation: ValidateDiagram
    """

    query = VALIDATE_DIAGRAM_MUTATION
    operation_type = "mutation"
    operation_name = "ValidateDiagram"

    
    class Variables(TypedDict):
        """Variable types for ValidateDiagram mutation."""
        
        content: str
        
        format: DiagramFormatGraphQL
        
    

    @classmethod
    def get_variables_dict(cls, content: str, format: DiagramFormatGraphQL) -> dict[str, Any]:
        """
        Build variables dictionary for the operation.

        Args:
            content: String - Required (accepts dict or Strawberry input object)
            format: DiagramFormatGraphQL - Required (accepts dict or Strawberry input object)

        Returns:
            Dictionary of variables for GraphQL execution
        """
        return cls._build_variables(
            content=content,
            format=format
        )


class ConvertDiagramFormatOperation(BaseGraphQLOperation):
    """
    Mutation operation for File.
    GraphQL mutation: ConvertDiagramFormat
    """

    query = CONVERT_DIAGRAM_FORMAT_MUTATION
    operation_type = "mutation"
    operation_name = "ConvertDiagramFormat"

    
    class Variables(TypedDict):
        """Variable types for ConvertDiagramFormat mutation."""
        
        content: str
        
        from_format: DiagramFormatGraphQL
        
        to_format: DiagramFormatGraphQL
        
    

    @classmethod
    def get_variables_dict(cls, content: str, from_format: DiagramFormatGraphQL, to_format: DiagramFormatGraphQL) -> dict[str, Any]:
        """
        Build variables dictionary for the operation.

        Args:
            content: String - Required (accepts dict or Strawberry input object)
            from_format: DiagramFormatGraphQL - Required (accepts dict or Strawberry input object)
            to_format: DiagramFormatGraphQL - Required (accepts dict or Strawberry input object)

        Returns:
            Dictionary of variables for GraphQL execution
        """
        return cls._build_variables(
            content=content,
            from_format=from_format,
            to_format=to_format
        )


class GetSupportedFormatsOperation(BaseGraphQLOperation):
    """
    Query operation for Format.
    GraphQL query: GetSupportedFormats
    """

    query = GET_SUPPORTED_FORMATS_QUERY
    operation_type = "query"
    operation_name = "GetSupportedFormats"

    
    class Variables(TypedDict):
        """No variables for this operation."""
        pass  # Empty TypedDict for operations without variables
    

    @classmethod
    def get_variables_dict(cls, ) -> dict[str, Any]:
        """
        Build variables dictionary for the operation.

        Args:

        Returns:
            Dictionary of variables for GraphQL execution
        """
        return {}


class CreateNodeOperation(BaseGraphQLOperation):
    """
    Mutation operation for Node.
    GraphQL mutation: CreateNode
    """

    query = CREATE_NODE_MUTATION
    operation_type = "mutation"
    operation_name = "CreateNode"

    
    class Variables(TypedDict):
        """Variable types for CreateNode mutation."""
        
        diagram_id: str
        
        input: CreateNodeInput
        
    

    @classmethod
    def get_variables_dict(cls, diagram_id: str, input: CreateNodeInput) -> dict[str, Any]:
        """
        Build variables dictionary for the operation.

        Args:
            diagram_id: String - Required (accepts dict or Strawberry input object)
            input: CreateNodeInput - Required (accepts dict or Strawberry input object)

        Returns:
            Dictionary of variables for GraphQL execution
        """
        return cls._build_variables(
            diagram_id=diagram_id,
            input=input
        )


class UpdateNodeOperation(BaseGraphQLOperation):
    """
    Mutation operation for Node.
    GraphQL mutation: UpdateNode
    """

    query = UPDATE_NODE_MUTATION
    operation_type = "mutation"
    operation_name = "UpdateNode"

    
    class Variables(TypedDict):
        """Variable types for UpdateNode mutation."""
        
        diagram_id: str
        
        node_id: str
        
        input: UpdateNodeInput
        
    

    @classmethod
    def get_variables_dict(cls, diagram_id: str, node_id: str, input: UpdateNodeInput) -> dict[str, Any]:
        """
        Build variables dictionary for the operation.

        Args:
            diagram_id: String - Required (accepts dict or Strawberry input object)
            node_id: String - Required (accepts dict or Strawberry input object)
            input: UpdateNodeInput - Required (accepts dict or Strawberry input object)

        Returns:
            Dictionary of variables for GraphQL execution
        """
        return cls._build_variables(
            diagram_id=diagram_id,
            node_id=node_id,
            input=input
        )


class DeleteNodeOperation(BaseGraphQLOperation):
    """
    Mutation operation for Node.
    GraphQL mutation: DeleteNode
    """

    query = DELETE_NODE_MUTATION
    operation_type = "mutation"
    operation_name = "DeleteNode"

    
    class Variables(TypedDict):
        """Variable types for DeleteNode mutation."""
        
        diagram_id: str
        
        node_id: str
        
    

    @classmethod
    def get_variables_dict(cls, diagram_id: str, node_id: str) -> dict[str, Any]:
        """
        Build variables dictionary for the operation.

        Args:
            diagram_id: String - Required (accepts dict or Strawberry input object)
            node_id: String - Required (accepts dict or Strawberry input object)

        Returns:
            Dictionary of variables for GraphQL execution
        """
        return cls._build_variables(
            diagram_id=diagram_id,
            node_id=node_id
        )


class GetPersonOperation(BaseGraphQLOperation):
    """
    Query operation for Person.
    GraphQL query: GetPerson
    """

    query = GET_PERSON_QUERY
    operation_type = "query"
    operation_name = "GetPerson"

    
    class Variables(TypedDict):
        """Variable types for GetPerson query."""
        
        person_id: str
        
    

    @classmethod
    def get_variables_dict(cls, person_id: str) -> dict[str, Any]:
        """
        Build variables dictionary for the operation.

        Args:
            person_id: String - Required (accepts dict or Strawberry input object)

        Returns:
            Dictionary of variables for GraphQL execution
        """
        return cls._build_variables(
            person_id=person_id
        )


class ListPersonsOperation(BaseGraphQLOperation):
    """
    Query operation for Person.
    GraphQL query: ListPersons
    """

    query = LIST_PERSONS_QUERY
    operation_type = "query"
    operation_name = "ListPersons"

    
    class Variables(TypedDict, total=False):
        """Variable types for ListPersons query."""
        
        limit: Optional[int]
        
    

    @classmethod
    def get_variables_dict(cls, limit: Optional[int] = None) -> dict[str, Any]:
        """
        Build variables dictionary for the operation.

        Args:
            limit: Int - Optional (accepts dict or Strawberry input object)

        Returns:
            Dictionary of variables for GraphQL execution
        """
        return cls._build_variables(
            limit=limit
        )


class CreatePersonOperation(BaseGraphQLOperation):
    """
    Mutation operation for Person.
    GraphQL mutation: CreatePerson
    """

    query = CREATE_PERSON_MUTATION
    operation_type = "mutation"
    operation_name = "CreatePerson"

    
    class Variables(TypedDict):
        """Variable types for CreatePerson mutation."""
        
        input: CreatePersonInput
        
    

    @classmethod
    def get_variables_dict(cls, input: CreatePersonInput) -> dict[str, Any]:
        """
        Build variables dictionary for the operation.

        Args:
            input: CreatePersonInput - Required (accepts dict or Strawberry input object)

        Returns:
            Dictionary of variables for GraphQL execution
        """
        return cls._build_variables(
            input=input
        )


class UpdatePersonOperation(BaseGraphQLOperation):
    """
    Mutation operation for Person.
    GraphQL mutation: UpdatePerson
    """

    query = UPDATE_PERSON_MUTATION
    operation_type = "mutation"
    operation_name = "UpdatePerson"

    
    class Variables(TypedDict):
        """Variable types for UpdatePerson mutation."""
        
        person_id: str
        
        input: UpdatePersonInput
        
    

    @classmethod
    def get_variables_dict(cls, person_id: str, input: UpdatePersonInput) -> dict[str, Any]:
        """
        Build variables dictionary for the operation.

        Args:
            person_id: String - Required (accepts dict or Strawberry input object)
            input: UpdatePersonInput - Required (accepts dict or Strawberry input object)

        Returns:
            Dictionary of variables for GraphQL execution
        """
        return cls._build_variables(
            person_id=person_id,
            input=input
        )


class DeletePersonOperation(BaseGraphQLOperation):
    """
    Mutation operation for Person.
    GraphQL mutation: DeletePerson
    """

    query = DELETE_PERSON_MUTATION
    operation_type = "mutation"
    operation_name = "DeletePerson"

    
    class Variables(TypedDict):
        """Variable types for DeletePerson mutation."""
        
        person_id: str
        
    

    @classmethod
    def get_variables_dict(cls, person_id: str) -> dict[str, Any]:
        """
        Build variables dictionary for the operation.

        Args:
            person_id: String - Required (accepts dict or Strawberry input object)

        Returns:
            Dictionary of variables for GraphQL execution
        """
        return cls._build_variables(
            person_id=person_id
        )


class ListPromptFilesOperation(BaseGraphQLOperation):
    """
    Query operation for Prompt.
    GraphQL query: ListPromptFiles
    """

    query = LIST_PROMPT_FILES_QUERY
    operation_type = "query"
    operation_name = "ListPromptFiles"

    
    class Variables(TypedDict):
        """No variables for this operation."""
        pass  # Empty TypedDict for operations without variables
    

    @classmethod
    def get_variables_dict(cls, ) -> dict[str, Any]:
        """
        Build variables dictionary for the operation.

        Args:

        Returns:
            Dictionary of variables for GraphQL execution
        """
        return {}


class GetPromptFileOperation(BaseGraphQLOperation):
    """
    Query operation for Prompt.
    GraphQL query: GetPromptFile
    """

    query = GET_PROMPT_FILE_QUERY
    operation_type = "query"
    operation_name = "GetPromptFile"

    
    class Variables(TypedDict):
        """Variable types for GetPromptFile query."""
        
        filename: str
        
    

    @classmethod
    def get_variables_dict(cls, filename: str) -> dict[str, Any]:
        """
        Build variables dictionary for the operation.

        Args:
            filename: String - Required (accepts dict or Strawberry input object)

        Returns:
            Dictionary of variables for GraphQL execution
        """
        return cls._build_variables(
            filename=filename
        )


class GetProvidersOperation(BaseGraphQLOperation):
    """
    Query operation for Provider.
    GraphQL query: GetProviders
    """

    query = GET_PROVIDERS_QUERY
    operation_type = "query"
    operation_name = "GetProviders"

    
    class Variables(TypedDict):
        """No variables for this operation."""
        pass  # Empty TypedDict for operations without variables
    

    @classmethod
    def get_variables_dict(cls, ) -> dict[str, Any]:
        """
        Build variables dictionary for the operation.

        Args:

        Returns:
            Dictionary of variables for GraphQL execution
        """
        return {}


class GetProviderOperationsOperation(BaseGraphQLOperation):
    """
    Query operation for Provider.
    GraphQL query: GetProviderOperations
    """

    query = GET_PROVIDER_OPERATIONS_QUERY
    operation_type = "query"
    operation_name = "GetProviderOperations"

    
    class Variables(TypedDict):
        """Variable types for GetProviderOperations query."""
        
        provider: str
        
    

    @classmethod
    def get_variables_dict(cls, provider: str) -> dict[str, Any]:
        """
        Build variables dictionary for the operation.

        Args:
            provider: String - Required (accepts dict or Strawberry input object)

        Returns:
            Dictionary of variables for GraphQL execution
        """
        return cls._build_variables(
            provider=provider
        )


class GetOperationSchemaOperation(BaseGraphQLOperation):
    """
    Query operation for Provider.
    GraphQL query: GetOperationSchema
    """

    query = GET_OPERATION_SCHEMA_QUERY
    operation_type = "query"
    operation_name = "GetOperationSchema"

    
    class Variables(TypedDict):
        """Variable types for GetOperationSchema query."""
        
        provider: str
        
        operation: str
        
    

    @classmethod
    def get_variables_dict(cls, provider: str, operation: str) -> dict[str, Any]:
        """
        Build variables dictionary for the operation.

        Args:
            provider: String - Required (accepts dict or Strawberry input object)
            operation: String - Required (accepts dict or Strawberry input object)

        Returns:
            Dictionary of variables for GraphQL execution
        """
        return cls._build_variables(
            provider=provider,
            operation=operation
        )


class GetSystemInfoOperation(BaseGraphQLOperation):
    """
    Query operation for System.
    GraphQL query: GetSystemInfo
    """

    query = GET_SYSTEM_INFO_QUERY
    operation_type = "query"
    operation_name = "GetSystemInfo"

    
    class Variables(TypedDict):
        """No variables for this operation."""
        pass  # Empty TypedDict for operations without variables
    

    @classmethod
    def get_variables_dict(cls, ) -> dict[str, Any]:
        """
        Build variables dictionary for the operation.

        Args:

        Returns:
            Dictionary of variables for GraphQL execution
        """
        return {}


class GetExecutionCapabilitiesOperation(BaseGraphQLOperation):
    """
    Query operation for System.
    GraphQL query: GetExecutionCapabilities
    """

    query = GET_EXECUTION_CAPABILITIES_QUERY
    operation_type = "query"
    operation_name = "GetExecutionCapabilities"

    
    class Variables(TypedDict):
        """No variables for this operation."""
        pass  # Empty TypedDict for operations without variables
    

    @classmethod
    def get_variables_dict(cls, ) -> dict[str, Any]:
        """
        Build variables dictionary for the operation.

        Args:

        Returns:
            Dictionary of variables for GraphQL execution
        """
        return {}


class HealthCheckOperation(BaseGraphQLOperation):
    """
    Query operation for System.
    GraphQL query: HealthCheck
    """

    query = HEALTH_CHECK_QUERY
    operation_type = "query"
    operation_name = "HealthCheck"

    
    class Variables(TypedDict):
        """No variables for this operation."""
        pass  # Empty TypedDict for operations without variables
    

    @classmethod
    def get_variables_dict(cls, ) -> dict[str, Any]:
        """
        Build variables dictionary for the operation.

        Args:

        Returns:
            Dictionary of variables for GraphQL execution
        """
        return {}


class GetExecutionOrderOperation(BaseGraphQLOperation):
    """
    Query operation for System.
    GraphQL query: GetExecutionOrder
    """

    query = GET_EXECUTION_ORDER_QUERY
    operation_type = "query"
    operation_name = "GetExecutionOrder"

    
    class Variables(TypedDict):
        """Variable types for GetExecutionOrder query."""
        
        execution_id: str
        
    

    @classmethod
    def get_variables_dict(cls, execution_id: str) -> dict[str, Any]:
        """
        Build variables dictionary for the operation.

        Args:
            execution_id: String - Required (accepts dict or Strawberry input object)

        Returns:
            Dictionary of variables for GraphQL execution
        """
        return cls._build_variables(
            execution_id=execution_id
        )


class GetExecutionMetricsOperation(BaseGraphQLOperation):
    """
    Query operation for System.
    GraphQL query: GetExecutionMetrics
    """

    query = GET_EXECUTION_METRICS_QUERY
    operation_type = "query"
    operation_name = "GetExecutionMetrics"

    
    class Variables(TypedDict):
        """Variable types for GetExecutionMetrics query."""
        
        execution_id: str
        
    

    @classmethod
    def get_variables_dict(cls, execution_id: str) -> dict[str, Any]:
        """
        Build variables dictionary for the operation.

        Args:
            execution_id: String - Required (accepts dict or Strawberry input object)

        Returns:
            Dictionary of variables for GraphQL execution
        """
        return cls._build_variables(
            execution_id=execution_id
        )


class GetExecutionHistoryOperation(BaseGraphQLOperation):
    """
    Query operation for System.
    GraphQL query: GetExecutionHistory
    """

    query = GET_EXECUTION_HISTORY_QUERY
    operation_type = "query"
    operation_name = "GetExecutionHistory"

    
    class Variables(TypedDict, total=False):
        """Variable types for GetExecutionHistory query."""
        
        diagram_id: Optional[str]
        
        limit: Optional[int]
        
        include_metrics: Optional[bool]
        
    

    @classmethod
    def get_variables_dict(cls, diagram_id: Optional[str] = None, limit: Optional[int] = None, include_metrics: Optional[bool] = None) -> dict[str, Any]:
        """
        Build variables dictionary for the operation.

        Args:
            diagram_id: String - Optional (accepts dict or Strawberry input object)
            limit: Int - Optional (accepts dict or Strawberry input object)
            include_metrics: Boolean - Optional (accepts dict or Strawberry input object)

        Returns:
            Dictionary of variables for GraphQL execution
        """
        return cls._build_variables(
            diagram_id=diagram_id,
            limit=limit,
            include_metrics=include_metrics
        )


class GetActiveCliSessionOperation(BaseGraphQLOperation):
    """
    Query operation for System.
    GraphQL query: GetActiveCliSession
    """

    query = GET_ACTIVE_CLI_SESSION_QUERY
    operation_type = "query"
    operation_name = "GetActiveCliSession"

    
    class Variables(TypedDict):
        """No variables for this operation."""
        pass  # Empty TypedDict for operations without variables
    

    @classmethod
    def get_variables_dict(cls, ) -> dict[str, Any]:
        """
        Build variables dictionary for the operation.

        Args:

        Returns:
            Dictionary of variables for GraphQL execution
        """
        return {}


class ToggleTodoSyncOperation(BaseGraphQLOperation):
    """
    Mutation operation for TodoSync.
    GraphQL mutation: ToggleTodoSync
    """

    query = TOGGLE_TODO_SYNC_MUTATION
    operation_type = "mutation"
    operation_name = "ToggleTodoSync"

    
    class Variables(TypedDict):
        """Variable types for ToggleTodoSync mutation."""
        
        input: ToggleTodoSyncInput
        
    

    @classmethod
    def get_variables_dict(cls, input: ToggleTodoSyncInput) -> dict[str, Any]:
        """
        Build variables dictionary for the operation.

        Args:
            input: ToggleTodoSyncInput - Required (accepts dict or Strawberry input object)

        Returns:
            Dictionary of variables for GraphQL execution
        """
        return cls._build_variables(
            input=input
        )


class ConfigureTodoSyncOperation(BaseGraphQLOperation):
    """
    Mutation operation for TodoSync.
    GraphQL mutation: ConfigureTodoSync
    """

    query = CONFIGURE_TODO_SYNC_MUTATION
    operation_type = "mutation"
    operation_name = "ConfigureTodoSync"

    
    class Variables(TypedDict):
        """Variable types for ConfigureTodoSync mutation."""
        
        input: ConfigureTodoSyncInput
        
    

    @classmethod
    def get_variables_dict(cls, input: ConfigureTodoSyncInput) -> dict[str, Any]:
        """
        Build variables dictionary for the operation.

        Args:
            input: ConfigureTodoSyncInput - Required (accepts dict or Strawberry input object)

        Returns:
            Dictionary of variables for GraphQL execution
        """
        return cls._build_variables(
            input=input
        )


class TriggerTodoSyncOperation(BaseGraphQLOperation):
    """
    Mutation operation for TodoSync.
    GraphQL mutation: TriggerTodoSync
    """

    query = TRIGGER_TODO_SYNC_MUTATION
    operation_type = "mutation"
    operation_name = "TriggerTodoSync"

    
    class Variables(TypedDict):
        """Variable types for TriggerTodoSync mutation."""
        
        session_id: str
        
    

    @classmethod
    def get_variables_dict(cls, session_id: str) -> dict[str, Any]:
        """
        Build variables dictionary for the operation.

        Args:
            session_id: String - Required (accepts dict or Strawberry input object)

        Returns:
            Dictionary of variables for GraphQL execution
        """
        return cls._build_variables(
            session_id=session_id
        )


class GetTodoSyncStatusOperation(BaseGraphQLOperation):
    """
    Query operation for TodoSync.
    GraphQL query: GetTodoSyncStatus
    """

    query = GET_TODO_SYNC_STATUS_QUERY
    operation_type = "query"
    operation_name = "GetTodoSyncStatus"

    
    class Variables(TypedDict, total=False):
        """Variable types for GetTodoSyncStatus query."""
        
        session_id: Optional[str]
        
    

    @classmethod
    def get_variables_dict(cls, session_id: Optional[str] = None) -> dict[str, Any]:
        """
        Build variables dictionary for the operation.

        Args:
            session_id: String - Optional (accepts dict or Strawberry input object)

        Returns:
            Dictionary of variables for GraphQL execution
        """
        return cls._build_variables(
            session_id=session_id
        )


class ListTodoDiagramsOperation(BaseGraphQLOperation):
    """
    Query operation for TodoSync.
    GraphQL query: ListTodoDiagrams
    """

    query = LIST_TODO_DIAGRAMS_QUERY
    operation_type = "query"
    operation_name = "ListTodoDiagrams"

    
    class Variables(TypedDict, total=False):
        """Variable types for ListTodoDiagrams query."""
        
        session_id: Optional[str]
        
        originating_document: Optional[str]
        
        is_active: Optional[bool]
        
        limit: Optional[int]
        
        offset: Optional[int]
        
    

    @classmethod
    def get_variables_dict(cls, session_id: Optional[str] = None, originating_document: Optional[str] = None, is_active: Optional[bool] = None, limit: Optional[int] = None, offset: Optional[int] = None) -> dict[str, Any]:
        """
        Build variables dictionary for the operation.

        Args:
            session_id: String - Optional (accepts dict or Strawberry input object)
            originating_document: String - Optional (accepts dict or Strawberry input object)
            is_active: Boolean - Optional (accepts dict or Strawberry input object)
            limit: Int - Optional (accepts dict or Strawberry input object)
            offset: Int - Optional (accepts dict or Strawberry input object)

        Returns:
            Dictionary of variables for GraphQL execution
        """
        return cls._build_variables(
            session_id=session_id,
            originating_document=originating_document,
            is_active=is_active,
            limit=limit,
            offset=offset
        )


class GetTodoDiagramOperation(BaseGraphQLOperation):
    """
    Query operation for TodoSync.
    GraphQL query: GetTodoDiagram
    """

    query = GET_TODO_DIAGRAM_QUERY
    operation_type = "query"
    operation_name = "GetTodoDiagram"

    
    class Variables(TypedDict):
        """Variable types for GetTodoDiagram query."""
        
        id: str
        
    

    @classmethod
    def get_variables_dict(cls, id: str) -> dict[str, Any]:
        """
        Build variables dictionary for the operation.

        Args:
            id: String - Required (accepts dict or Strawberry input object)

        Returns:
            Dictionary of variables for GraphQL execution
        """
        return cls._build_variables(
            id=id
        )


class SubscribeTodoUpdatesOperation(BaseGraphQLOperation):
    """
    Subscription operation for TodoSync.
    GraphQL subscription: SubscribeTodoUpdates
    """

    query = SUBSCRIBE_TODO_UPDATES_SUBSCRIPTION
    operation_type = "subscription"
    operation_name = "SubscribeTodoUpdates"

    
    class Variables(TypedDict):
        """Variable types for SubscribeTodoUpdates subscription."""
        
        session_id: str
        
    

    @classmethod
    def get_variables_dict(cls, session_id: str) -> dict[str, Any]:
        """
        Build variables dictionary for the operation.

        Args:
            session_id: String - Required (accepts dict or Strawberry input object)

        Returns:
            Dictionary of variables for GraphQL execution
        """
        return cls._build_variables(
            session_id=session_id
        )


# Operation registries for runtime lookup
QUERIES = {
    "GetApiKeys": GetApiKeysOperation,
    "GetApiKey": GetApiKeyOperation,
    "GetAvailableModels": GetAvailableModelsOperation,
    "ListConversations": ListConversationsOperation,
    "GetDiagram": GetDiagramOperation,
    "ListDiagrams": ListDiagramsOperation,
    "GetExecution": GetExecutionOperation,
    "ListExecutions": ListExecutionsOperation,
    "GetSupportedFormats": GetSupportedFormatsOperation,
    "GetPerson": GetPersonOperation,
    "ListPersons": ListPersonsOperation,
    "ListPromptFiles": ListPromptFilesOperation,
    "GetPromptFile": GetPromptFileOperation,
    "GetProviders": GetProvidersOperation,
    "GetProviderOperations": GetProviderOperationsOperation,
    "GetOperationSchema": GetOperationSchemaOperation,
    "GetSystemInfo": GetSystemInfoOperation,
    "GetExecutionCapabilities": GetExecutionCapabilitiesOperation,
    "HealthCheck": HealthCheckOperation,
    "GetExecutionOrder": GetExecutionOrderOperation,
    "GetExecutionMetrics": GetExecutionMetricsOperation,
    "GetExecutionHistory": GetExecutionHistoryOperation,
    "GetActiveCliSession": GetActiveCliSessionOperation,
    "GetTodoSyncStatus": GetTodoSyncStatusOperation,
    "ListTodoDiagrams": ListTodoDiagramsOperation,
    "GetTodoDiagram": GetTodoDiagramOperation,
}

MUTATIONS = {
    "CreateApiKey": CreateApiKeyOperation,
    "TestApiKey": TestApiKeyOperation,
    "DeleteApiKey": DeleteApiKeyOperation,
    "RegisterCliSession": RegisterCliSessionOperation,
    "UnregisterCliSession": UnregisterCliSessionOperation,
    "CreateDiagram": CreateDiagramOperation,
    "ExecuteDiagram": ExecuteDiagramOperation,
    "DeleteDiagram": DeleteDiagramOperation,
    "ControlExecution": ControlExecutionOperation,
    "SendInteractiveResponse": SendInteractiveResponseOperation,
    "UpdateNodeState": UpdateNodeStateOperation,
    "UploadFile": UploadFileOperation,
    "UploadDiagram": UploadDiagramOperation,
    "ValidateDiagram": ValidateDiagramOperation,
    "ConvertDiagramFormat": ConvertDiagramFormatOperation,
    "CreateNode": CreateNodeOperation,
    "UpdateNode": UpdateNodeOperation,
    "DeleteNode": DeleteNodeOperation,
    "CreatePerson": CreatePersonOperation,
    "UpdatePerson": UpdatePersonOperation,
    "DeletePerson": DeletePersonOperation,
    "ToggleTodoSync": ToggleTodoSyncOperation,
    "ConfigureTodoSync": ConfigureTodoSyncOperation,
    "TriggerTodoSync": TriggerTodoSyncOperation,
}

SUBSCRIPTIONS = {
    "ExecutionUpdates": ExecutionUpdatesOperation,
    "SubscribeTodoUpdates": SubscribeTodoUpdatesOperation,
}

ALL_OPERATIONS = {
    **QUERIES,
    **MUTATIONS,
    **SUBSCRIPTIONS,
}

# Helper functions
def get_operation_by_name(name: str) -> Optional[type]:
    """Get an operation class by its name."""
    return ALL_OPERATIONS.get(name)

def get_query_string(operation_name: str) -> Optional[str]:
    """Get the GraphQL query string for an operation."""
    operation_class = get_operation_by_name(operation_name)
    if operation_class:
        return operation_class.get_query()
    return None

# Export all operation classes
__all__ = [
    # Base classes and helpers
    "BaseGraphQLOperation",
    "_to_dict_if_strawberry",
    # Query strings
    
    "GET_API_KEYS_QUERY",
    
    "GET_API_KEY_QUERY",
    
    "GET_AVAILABLE_MODELS_QUERY",
    
    "CREATE_API_KEY_MUTATION",
    
    "TEST_API_KEY_MUTATION",
    
    "DELETE_API_KEY_MUTATION",
    
    "REGISTER_CLI_SESSION_MUTATION",
    
    "UNREGISTER_CLI_SESSION_MUTATION",
    
    "LIST_CONVERSATIONS_QUERY",
    
    "GET_DIAGRAM_QUERY",
    
    "LIST_DIAGRAMS_QUERY",
    
    "CREATE_DIAGRAM_MUTATION",
    
    "EXECUTE_DIAGRAM_MUTATION",
    
    "DELETE_DIAGRAM_MUTATION",
    
    "GET_EXECUTION_QUERY",
    
    "LIST_EXECUTIONS_QUERY",
    
    "EXECUTION_UPDATES_SUBSCRIPTION",
    
    "CONTROL_EXECUTION_MUTATION",
    
    "SEND_INTERACTIVE_RESPONSE_MUTATION",
    
    "UPDATE_NODE_STATE_MUTATION",
    
    "UPLOAD_FILE_MUTATION",
    
    "UPLOAD_DIAGRAM_MUTATION",
    
    "VALIDATE_DIAGRAM_MUTATION",
    
    "CONVERT_DIAGRAM_FORMAT_MUTATION",
    
    "GET_SUPPORTED_FORMATS_QUERY",
    
    "CREATE_NODE_MUTATION",
    
    "UPDATE_NODE_MUTATION",
    
    "DELETE_NODE_MUTATION",
    
    "GET_PERSON_QUERY",
    
    "LIST_PERSONS_QUERY",
    
    "CREATE_PERSON_MUTATION",
    
    "UPDATE_PERSON_MUTATION",
    
    "DELETE_PERSON_MUTATION",
    
    "LIST_PROMPT_FILES_QUERY",
    
    "GET_PROMPT_FILE_QUERY",
    
    "GET_PROVIDERS_QUERY",
    
    "GET_PROVIDER_OPERATIONS_QUERY",
    
    "GET_OPERATION_SCHEMA_QUERY",
    
    "GET_SYSTEM_INFO_QUERY",
    
    "GET_EXECUTION_CAPABILITIES_QUERY",
    
    "HEALTH_CHECK_QUERY",
    
    "GET_EXECUTION_ORDER_QUERY",
    
    "GET_EXECUTION_METRICS_QUERY",
    
    "GET_EXECUTION_HISTORY_QUERY",
    
    "GET_ACTIVE_CLI_SESSION_QUERY",
    
    "TOGGLE_TODO_SYNC_MUTATION",
    
    "CONFIGURE_TODO_SYNC_MUTATION",
    
    "TRIGGER_TODO_SYNC_MUTATION",
    
    "GET_TODO_SYNC_STATUS_QUERY",
    
    "LIST_TODO_DIAGRAMS_QUERY",
    
    "GET_TODO_DIAGRAM_QUERY",
    
    "SUBSCRIBE_TODO_UPDATES_SUBSCRIPTION",
    
    # Operation classes
    
    "GetApiKeysOperation",
    
    "GetApiKeyOperation",
    
    "GetAvailableModelsOperation",
    
    "CreateApiKeyOperation",
    
    "TestApiKeyOperation",
    
    "DeleteApiKeyOperation",
    
    "RegisterCliSessionOperation",
    
    "UnregisterCliSessionOperation",
    
    "ListConversationsOperation",
    
    "GetDiagramOperation",
    
    "ListDiagramsOperation",
    
    "CreateDiagramOperation",
    
    "ExecuteDiagramOperation",
    
    "DeleteDiagramOperation",
    
    "GetExecutionOperation",
    
    "ListExecutionsOperation",
    
    "ExecutionUpdatesOperation",
    
    "ControlExecutionOperation",
    
    "SendInteractiveResponseOperation",
    
    "UpdateNodeStateOperation",
    
    "UploadFileOperation",
    
    "UploadDiagramOperation",
    
    "ValidateDiagramOperation",
    
    "ConvertDiagramFormatOperation",
    
    "GetSupportedFormatsOperation",
    
    "CreateNodeOperation",
    
    "UpdateNodeOperation",
    
    "DeleteNodeOperation",
    
    "GetPersonOperation",
    
    "ListPersonsOperation",
    
    "CreatePersonOperation",
    
    "UpdatePersonOperation",
    
    "DeletePersonOperation",
    
    "ListPromptFilesOperation",
    
    "GetPromptFileOperation",
    
    "GetProvidersOperation",
    
    "GetProviderOperationsOperation",
    
    "GetOperationSchemaOperation",
    
    "GetSystemInfoOperation",
    
    "GetExecutionCapabilitiesOperation",
    
    "HealthCheckOperation",
    
    "GetExecutionOrderOperation",
    
    "GetExecutionMetricsOperation",
    
    "GetExecutionHistoryOperation",
    
    "GetActiveCliSessionOperation",
    
    "ToggleTodoSyncOperation",
    
    "ConfigureTodoSyncOperation",
    
    "TriggerTodoSyncOperation",
    
    "GetTodoSyncStatusOperation",
    
    "ListTodoDiagramsOperation",
    
    "GetTodoDiagramOperation",
    
    "SubscribeTodoUpdatesOperation",
    
    # Registries
    "QUERIES",
    "MUTATIONS",
    "SUBSCRIPTIONS",
    "ALL_OPERATIONS",
    # Helper functions
    "get_operation_by_name",
    "get_query_string",
]
