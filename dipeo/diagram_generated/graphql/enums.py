"""
Generated Strawberry GraphQL enum definitions for DiPeO.
DO NOT EDIT - This file is automatically generated.

Generated at: 2025-09-07T11:25:23.432044
"""

from enum import Enum
import strawberry


@strawberry.enum
class DataTypeGraphQL(Enum):
    """Data type and structure enumerations - GraphQL enum"""
    
    ANY = "any"
    
    STRING = "string"
    
    NUMBER = "number"
    
    BOOLEAN = "boolean"
    
    OBJECT = "object"
    
    ARRAY = "array"
    


@strawberry.enum
class ContentTypeGraphQL(Enum):
    """Content type enumerations for data handling - GraphQL enum"""
    
    RAW_TEXT = "raw_text"
    
    CONVERSATION_STATE = "conversation_state"
    
    OBJECT = "object"
    
    EMPTY = "empty"
    
    GENERIC = "generic"
    
    VARIABLE = "variable"
    
    BINARY = "binary"
    


@strawberry.enum
class HandleDirectionGraphQL(Enum):
    """Direction of connection handles - GraphQL enum"""
    
    INPUT = "input"
    
    OUTPUT = "output"
    


@strawberry.enum
class HandleLabelGraphQL(Enum):
    """Label types for connection handles - GraphQL enum"""
    
    DEFAULT = "default"
    
    FIRST = "first"
    
    CONDTRUE = "condtrue"
    
    CONDFALSE = "condfalse"
    
    SUCCESS = "success"
    
    ERROR = "error"
    
    RESULTS = "results"
    


@strawberry.enum
class DiagramFormatGraphQL(Enum):
    """Diagram format enumeration - GraphQL enum"""
    
    NATIVE = "native"
    
    LIGHT = "light"
    
    READABLE = "readable"
    


@strawberry.enum
class StatusGraphQL(Enum):
    """Execution and event-related status enumerations - GraphQL enum"""
    
    PENDING = "pending"
    
    RUNNING = "running"
    
    PAUSED = "paused"
    
    COMPLETED = "completed"
    
    FAILED = "failed"
    
    ABORTED = "aborted"
    
    SKIPPED = "skipped"
    
    MAXITER_REACHED = "maxiter_reached"
    


@strawberry.enum
class FlowStatusGraphQL(Enum):
    """FlowStatus enum values - GraphQL enum"""
    
    WAITING = "waiting"
    
    READY = "ready"
    
    RUNNING = "running"
    
    BLOCKED = "blocked"
    


@strawberry.enum
class CompletionStatusGraphQL(Enum):
    """CompletionStatus enum values - GraphQL enum"""
    
    SUCCESS = "success"
    
    FAILED = "failed"
    
    SKIPPED = "skipped"
    
    MAX_ITER = "max_iter"
    


@strawberry.enum
class ExecutionPhaseGraphQL(Enum):
    """ExecutionPhase enum values - GraphQL enum"""
    
    MEMORY_SELECTION = "memory_selection"
    
    DIRECT_EXECUTION = "direct_execution"
    
    DECISION_EVALUATION = "decision_evaluation"
    
    DEFAULT = "default"
    


@strawberry.enum
class EventTypeGraphQL(Enum):
    """EventType enum values - GraphQL enum"""
    
    EXECUTION_STARTED = "execution_started"
    
    EXECUTION_COMPLETED = "execution_completed"
    
    EXECUTION_ERROR = "execution_error"
    
    EXECUTION_STATUS_CHANGED = "execution_status_changed"
    
    NODE_STARTED = "node_started"
    
    NODE_COMPLETED = "node_completed"
    
    NODE_ERROR = "node_error"
    
    NODE_OUTPUT = "node_output"
    
    NODE_STATUS_CHANGED = "node_status_changed"
    
    NODE_PROGRESS = "node_progress"
    
    METRICS_COLLECTED = "metrics_collected"
    
    OPTIMIZATION_SUGGESTED = "optimization_suggested"
    
    WEBHOOK_RECEIVED = "webhook_received"
    
    INTERACTIVE_PROMPT = "interactive_prompt"
    
    INTERACTIVE_RESPONSE = "interactive_response"
    
    EXECUTION_UPDATE = "execution_update"
    
    EXECUTION_LOG = "execution_log"
    
    KEEPALIVE = "keepalive"
    


@strawberry.enum
class LLMServiceGraphQL(Enum):
    """Available LLM service providers - GraphQL enum"""
    
    OPENAI = "openai"
    
    ANTHROPIC = "anthropic"
    
    CLAUDE_CODE = "claude-code"
    
    GOOGLE = "google"
    
    GEMINI = "gemini"
    
    BEDROCK = "bedrock"
    
    VERTEX = "vertex"
    
    DEEPSEEK = "deepseek"
    
    OLLAMA = "ollama"
    


@strawberry.enum
class APIServiceTypeGraphQL(Enum):
    """API service types for external integrations - GraphQL enum"""
    
    OPENAI = "openai"
    
    ANTHROPIC = "anthropic"
    
    GOOGLE = "google"
    
    GEMINI = "gemini"
    
    BEDROCK = "bedrock"
    
    VERTEX = "vertex"
    
    DEEPSEEK = "deepseek"
    
    OLLAMA = "ollama"
    
    CLAUDE_CODE = "claude-code"
    


@strawberry.enum
class ToolTypeGraphQL(Enum):
    """ToolType enum values - GraphQL enum"""
    
    WEB_SEARCH = "web_search"
    
    WEB_SEARCH_PREVIEW = "web_search_preview"
    
    IMAGE_GENERATION = "image_generation"
    


@strawberry.enum
class ToolSelectionGraphQL(Enum):
    """ToolSelection enum values - GraphQL enum"""
    
    NONE = "none"
    
    IMAGE = "image"
    
    WEBSEARCH = "websearch"
    


@strawberry.enum
class AuthTypeGraphQL(Enum):
    """AuthType enum values - GraphQL enum"""
    
    NONE = "none"
    
    BEARER = "bearer"
    
    BASIC = "basic"
    
    API_KEY = "api_key"
    


@strawberry.enum
class RetryStrategyGraphQL(Enum):
    """RetryStrategy enum values - GraphQL enum"""
    
    NONE = "none"
    
    LINEAR = "linear"
    
    EXPONENTIAL = "exponential"
    
    FIBONACCI = "fibonacci"
    
    CONSTANT = "constant"
    
    EXPONENTIAL_BACKOFF = "exponential_backoff"
    
    LINEAR_BACKOFF = "linear_backoff"
    
    FIXED_DELAY = "fixed_delay"
    


@strawberry.enum
class DBBlockSubTypeGraphQL(Enum):
    """DBBlockSubType enum values - GraphQL enum"""
    
    FIXED_PROMPT = "fixed_prompt"
    
    FILE = "file"
    
    CODE = "code"
    
    API_TOOL = "api_tool"
    


@strawberry.enum
class SupportedLanguageGraphQL(Enum):
    """SupportedLanguage enum values - GraphQL enum"""
    
    PYTHON = "python"
    
    TYPESCRIPT = "typescript"
    
    BASH = "bash"
    
    SHELL = "shell"
    


@strawberry.enum
class HttpMethodGraphQL(Enum):
    """HttpMethod enum values - GraphQL enum"""
    
    GET = "get"
    
    POST = "post"
    
    PUT = "put"
    
    DELETE = "delete"
    
    PATCH = "patch"
    


@strawberry.enum
class HookTypeGraphQL(Enum):
    """HookType enum values - GraphQL enum"""
    
    SHELL = "shell"
    
    WEBHOOK = "webhook"
    
    PYTHON = "python"
    
    FILE = "file"
    


@strawberry.enum
class HookTriggerModeGraphQL(Enum):
    """HookTriggerMode enum values - GraphQL enum"""
    
    NONE = "none"
    
    MANUAL = "manual"
    
    HOOK = "hook"
    


@strawberry.enum
class ConditionTypeGraphQL(Enum):
    """ConditionType enum values - GraphQL enum"""
    
    DETECT_MAX_ITERATIONS = "detect_max_iterations"
    
    CHECK_NODES_EXECUTED = "check_nodes_executed"
    
    CUSTOM = "custom"
    
    LLM_DECISION = "llm_decision"
    


@strawberry.enum
class TemplateEngineGraphQL(Enum):
    """TemplateEngine enum values - GraphQL enum"""
    
    INTERNAL = "internal"
    
    JINJA2 = "jinja2"
    


@strawberry.enum
class NodeTypeGraphQL(Enum):
    """All available node types in DiPeO diagrams - GraphQL enum"""
    
    START = "start"
    
    PERSON_JOB = "person_job"
    
    CONDITION = "condition"
    
    CODE_JOB = "code_job"
    
    API_JOB = "api_job"
    
    ENDPOINT = "endpoint"
    
    DB = "db"
    
    USER_RESPONSE = "user_response"
    
    PERSON_BATCH_JOB = "person_batch_job"
    
    HOOK = "hook"
    
    TEMPLATE_JOB = "template_job"
    
    JSON_SCHEMA_VALIDATOR = "json_schema_validator"
    
    TYPESCRIPT_AST = "typescript_ast"
    
    SUB_DIAGRAM = "sub_diagram"
    
    INTEGRATED_API = "integrated_api"
    


@strawberry.enum
class SeverityGraphQL(Enum):
    """Severity enum values - GraphQL enum"""
    
    ERROR = "error"
    
    WARNING = "warning"
    
    INFO = "info"
    


@strawberry.enum
class EventPriorityGraphQL(Enum):
    """EventPriority enum values - GraphQL enum"""
    
    LOW = "low"
    
    NORMAL = "normal"
    
    HIGH = "high"
    
    CRITICAL = "critical"
    



# Export all GraphQL enums
__all__ = [
    
    "DataTypeGraphQL",
    
    "ContentTypeGraphQL",
    
    "HandleDirectionGraphQL",
    
    "HandleLabelGraphQL",
    
    "DiagramFormatGraphQL",
    
    "StatusGraphQL",
    
    "FlowStatusGraphQL",
    
    "CompletionStatusGraphQL",
    
    "ExecutionPhaseGraphQL",
    
    "EventTypeGraphQL",
    
    "LLMServiceGraphQL",
    
    "APIServiceTypeGraphQL",
    
    "ToolTypeGraphQL",
    
    "ToolSelectionGraphQL",
    
    "AuthTypeGraphQL",
    
    "RetryStrategyGraphQL",
    
    "DBBlockSubTypeGraphQL",
    
    "SupportedLanguageGraphQL",
    
    "HttpMethodGraphQL",
    
    "HookTypeGraphQL",
    
    "HookTriggerModeGraphQL",
    
    "ConditionTypeGraphQL",
    
    "TemplateEngineGraphQL",
    
    "NodeTypeGraphQL",
    
    "SeverityGraphQL",
    
    "EventPriorityGraphQL",
    
]

# Mapping functions for conversion between Python and GraphQL enums

def convert_datatype_to_graphql(python_enum):
    """Convert Python DataType enum to GraphQL enum."""
    from dipeo.diagram_generated.enums import DataType
    mapping = {
        
        DataType.ANY: DataTypeGraphQL.ANY,
        
        DataType.STRING: DataTypeGraphQL.STRING,
        
        DataType.NUMBER: DataTypeGraphQL.NUMBER,
        
        DataType.BOOLEAN: DataTypeGraphQL.BOOLEAN,
        
        DataType.OBJECT: DataTypeGraphQL.OBJECT,
        
        DataType.ARRAY: DataTypeGraphQL.ARRAY,
        
    }
    return mapping.get(python_enum)

def convert_datatype_from_graphql(graphql_enum):
    """Convert GraphQL DataType enum to Python enum."""
    from dipeo.diagram_generated.enums import DataType
    mapping = {
        
        DataTypeGraphQL.ANY: DataType.ANY,
        
        DataTypeGraphQL.STRING: DataType.STRING,
        
        DataTypeGraphQL.NUMBER: DataType.NUMBER,
        
        DataTypeGraphQL.BOOLEAN: DataType.BOOLEAN,
        
        DataTypeGraphQL.OBJECT: DataType.OBJECT,
        
        DataTypeGraphQL.ARRAY: DataType.ARRAY,
        
    }
    return mapping.get(graphql_enum)


def convert_contenttype_to_graphql(python_enum):
    """Convert Python ContentType enum to GraphQL enum."""
    from dipeo.diagram_generated.enums import ContentType
    mapping = {
        
        ContentType.RAW_TEXT: ContentTypeGraphQL.RAW_TEXT,
        
        ContentType.CONVERSATION_STATE: ContentTypeGraphQL.CONVERSATION_STATE,
        
        ContentType.OBJECT: ContentTypeGraphQL.OBJECT,
        
        ContentType.EMPTY: ContentTypeGraphQL.EMPTY,
        
        ContentType.GENERIC: ContentTypeGraphQL.GENERIC,
        
        ContentType.VARIABLE: ContentTypeGraphQL.VARIABLE,
        
        ContentType.BINARY: ContentTypeGraphQL.BINARY,
        
    }
    return mapping.get(python_enum)

def convert_contenttype_from_graphql(graphql_enum):
    """Convert GraphQL ContentType enum to Python enum."""
    from dipeo.diagram_generated.enums import ContentType
    mapping = {
        
        ContentTypeGraphQL.RAW_TEXT: ContentType.RAW_TEXT,
        
        ContentTypeGraphQL.CONVERSATION_STATE: ContentType.CONVERSATION_STATE,
        
        ContentTypeGraphQL.OBJECT: ContentType.OBJECT,
        
        ContentTypeGraphQL.EMPTY: ContentType.EMPTY,
        
        ContentTypeGraphQL.GENERIC: ContentType.GENERIC,
        
        ContentTypeGraphQL.VARIABLE: ContentType.VARIABLE,
        
        ContentTypeGraphQL.BINARY: ContentType.BINARY,
        
    }
    return mapping.get(graphql_enum)


def convert_handledirection_to_graphql(python_enum):
    """Convert Python HandleDirection enum to GraphQL enum."""
    from dipeo.diagram_generated.enums import HandleDirection
    mapping = {
        
        HandleDirection.INPUT: HandleDirectionGraphQL.INPUT,
        
        HandleDirection.OUTPUT: HandleDirectionGraphQL.OUTPUT,
        
    }
    return mapping.get(python_enum)

def convert_handledirection_from_graphql(graphql_enum):
    """Convert GraphQL HandleDirection enum to Python enum."""
    from dipeo.diagram_generated.enums import HandleDirection
    mapping = {
        
        HandleDirectionGraphQL.INPUT: HandleDirection.INPUT,
        
        HandleDirectionGraphQL.OUTPUT: HandleDirection.OUTPUT,
        
    }
    return mapping.get(graphql_enum)


def convert_handlelabel_to_graphql(python_enum):
    """Convert Python HandleLabel enum to GraphQL enum."""
    from dipeo.diagram_generated.enums import HandleLabel
    mapping = {
        
        HandleLabel.DEFAULT: HandleLabelGraphQL.DEFAULT,
        
        HandleLabel.FIRST: HandleLabelGraphQL.FIRST,
        
        HandleLabel.CONDTRUE: HandleLabelGraphQL.CONDTRUE,
        
        HandleLabel.CONDFALSE: HandleLabelGraphQL.CONDFALSE,
        
        HandleLabel.SUCCESS: HandleLabelGraphQL.SUCCESS,
        
        HandleLabel.ERROR: HandleLabelGraphQL.ERROR,
        
        HandleLabel.RESULTS: HandleLabelGraphQL.RESULTS,
        
    }
    return mapping.get(python_enum)

def convert_handlelabel_from_graphql(graphql_enum):
    """Convert GraphQL HandleLabel enum to Python enum."""
    from dipeo.diagram_generated.enums import HandleLabel
    mapping = {
        
        HandleLabelGraphQL.DEFAULT: HandleLabel.DEFAULT,
        
        HandleLabelGraphQL.FIRST: HandleLabel.FIRST,
        
        HandleLabelGraphQL.CONDTRUE: HandleLabel.CONDTRUE,
        
        HandleLabelGraphQL.CONDFALSE: HandleLabel.CONDFALSE,
        
        HandleLabelGraphQL.SUCCESS: HandleLabel.SUCCESS,
        
        HandleLabelGraphQL.ERROR: HandleLabel.ERROR,
        
        HandleLabelGraphQL.RESULTS: HandleLabel.RESULTS,
        
    }
    return mapping.get(graphql_enum)


def convert_diagramformat_to_graphql(python_enum):
    """Convert Python DiagramFormat enum to GraphQL enum."""
    from dipeo.diagram_generated.enums import DiagramFormat
    mapping = {
        
        DiagramFormat.NATIVE: DiagramFormatGraphQL.NATIVE,
        
        DiagramFormat.LIGHT: DiagramFormatGraphQL.LIGHT,
        
        DiagramFormat.READABLE: DiagramFormatGraphQL.READABLE,
        
    }
    return mapping.get(python_enum)

def convert_diagramformat_from_graphql(graphql_enum):
    """Convert GraphQL DiagramFormat enum to Python enum."""
    from dipeo.diagram_generated.enums import DiagramFormat
    mapping = {
        
        DiagramFormatGraphQL.NATIVE: DiagramFormat.NATIVE,
        
        DiagramFormatGraphQL.LIGHT: DiagramFormat.LIGHT,
        
        DiagramFormatGraphQL.READABLE: DiagramFormat.READABLE,
        
    }
    return mapping.get(graphql_enum)


def convert_status_to_graphql(python_enum):
    """Convert Python Status enum to GraphQL enum."""
    from dipeo.diagram_generated.enums import Status
    mapping = {
        
        Status.PENDING: StatusGraphQL.PENDING,
        
        Status.RUNNING: StatusGraphQL.RUNNING,
        
        Status.PAUSED: StatusGraphQL.PAUSED,
        
        Status.COMPLETED: StatusGraphQL.COMPLETED,
        
        Status.FAILED: StatusGraphQL.FAILED,
        
        Status.ABORTED: StatusGraphQL.ABORTED,
        
        Status.SKIPPED: StatusGraphQL.SKIPPED,
        
        Status.MAXITER_REACHED: StatusGraphQL.MAXITER_REACHED,
        
    }
    return mapping.get(python_enum)

def convert_status_from_graphql(graphql_enum):
    """Convert GraphQL Status enum to Python enum."""
    from dipeo.diagram_generated.enums import Status
    mapping = {
        
        StatusGraphQL.PENDING: Status.PENDING,
        
        StatusGraphQL.RUNNING: Status.RUNNING,
        
        StatusGraphQL.PAUSED: Status.PAUSED,
        
        StatusGraphQL.COMPLETED: Status.COMPLETED,
        
        StatusGraphQL.FAILED: Status.FAILED,
        
        StatusGraphQL.ABORTED: Status.ABORTED,
        
        StatusGraphQL.SKIPPED: Status.SKIPPED,
        
        StatusGraphQL.MAXITER_REACHED: Status.MAXITER_REACHED,
        
    }
    return mapping.get(graphql_enum)


def convert_flowstatus_to_graphql(python_enum):
    """Convert Python FlowStatus enum to GraphQL enum."""
    from dipeo.diagram_generated.enums import FlowStatus
    mapping = {
        
        FlowStatus.WAITING: FlowStatusGraphQL.WAITING,
        
        FlowStatus.READY: FlowStatusGraphQL.READY,
        
        FlowStatus.RUNNING: FlowStatusGraphQL.RUNNING,
        
        FlowStatus.BLOCKED: FlowStatusGraphQL.BLOCKED,
        
    }
    return mapping.get(python_enum)

def convert_flowstatus_from_graphql(graphql_enum):
    """Convert GraphQL FlowStatus enum to Python enum."""
    from dipeo.diagram_generated.enums import FlowStatus
    mapping = {
        
        FlowStatusGraphQL.WAITING: FlowStatus.WAITING,
        
        FlowStatusGraphQL.READY: FlowStatus.READY,
        
        FlowStatusGraphQL.RUNNING: FlowStatus.RUNNING,
        
        FlowStatusGraphQL.BLOCKED: FlowStatus.BLOCKED,
        
    }
    return mapping.get(graphql_enum)


def convert_completionstatus_to_graphql(python_enum):
    """Convert Python CompletionStatus enum to GraphQL enum."""
    from dipeo.diagram_generated.enums import CompletionStatus
    mapping = {
        
        CompletionStatus.SUCCESS: CompletionStatusGraphQL.SUCCESS,
        
        CompletionStatus.FAILED: CompletionStatusGraphQL.FAILED,
        
        CompletionStatus.SKIPPED: CompletionStatusGraphQL.SKIPPED,
        
        CompletionStatus.MAX_ITER: CompletionStatusGraphQL.MAX_ITER,
        
    }
    return mapping.get(python_enum)

def convert_completionstatus_from_graphql(graphql_enum):
    """Convert GraphQL CompletionStatus enum to Python enum."""
    from dipeo.diagram_generated.enums import CompletionStatus
    mapping = {
        
        CompletionStatusGraphQL.SUCCESS: CompletionStatus.SUCCESS,
        
        CompletionStatusGraphQL.FAILED: CompletionStatus.FAILED,
        
        CompletionStatusGraphQL.SKIPPED: CompletionStatus.SKIPPED,
        
        CompletionStatusGraphQL.MAX_ITER: CompletionStatus.MAX_ITER,
        
    }
    return mapping.get(graphql_enum)


def convert_executionphase_to_graphql(python_enum):
    """Convert Python ExecutionPhase enum to GraphQL enum."""
    from dipeo.diagram_generated.enums import ExecutionPhase
    mapping = {
        
        ExecutionPhase.MEMORY_SELECTION: ExecutionPhaseGraphQL.MEMORY_SELECTION,
        
        ExecutionPhase.DIRECT_EXECUTION: ExecutionPhaseGraphQL.DIRECT_EXECUTION,
        
        ExecutionPhase.DECISION_EVALUATION: ExecutionPhaseGraphQL.DECISION_EVALUATION,
        
        ExecutionPhase.DEFAULT: ExecutionPhaseGraphQL.DEFAULT,
        
    }
    return mapping.get(python_enum)

def convert_executionphase_from_graphql(graphql_enum):
    """Convert GraphQL ExecutionPhase enum to Python enum."""
    from dipeo.diagram_generated.enums import ExecutionPhase
    mapping = {
        
        ExecutionPhaseGraphQL.MEMORY_SELECTION: ExecutionPhase.MEMORY_SELECTION,
        
        ExecutionPhaseGraphQL.DIRECT_EXECUTION: ExecutionPhase.DIRECT_EXECUTION,
        
        ExecutionPhaseGraphQL.DECISION_EVALUATION: ExecutionPhase.DECISION_EVALUATION,
        
        ExecutionPhaseGraphQL.DEFAULT: ExecutionPhase.DEFAULT,
        
    }
    return mapping.get(graphql_enum)


def convert_eventtype_to_graphql(python_enum):
    """Convert Python EventType enum to GraphQL enum."""
    from dipeo.diagram_generated.enums import EventType
    mapping = {
        
        EventType.EXECUTION_STARTED: EventTypeGraphQL.EXECUTION_STARTED,
        
        EventType.EXECUTION_COMPLETED: EventTypeGraphQL.EXECUTION_COMPLETED,
        
        EventType.EXECUTION_ERROR: EventTypeGraphQL.EXECUTION_ERROR,
        
        EventType.EXECUTION_STATUS_CHANGED: EventTypeGraphQL.EXECUTION_STATUS_CHANGED,
        
        EventType.NODE_STARTED: EventTypeGraphQL.NODE_STARTED,
        
        EventType.NODE_COMPLETED: EventTypeGraphQL.NODE_COMPLETED,
        
        EventType.NODE_ERROR: EventTypeGraphQL.NODE_ERROR,
        
        EventType.NODE_OUTPUT: EventTypeGraphQL.NODE_OUTPUT,
        
        EventType.NODE_STATUS_CHANGED: EventTypeGraphQL.NODE_STATUS_CHANGED,
        
        EventType.NODE_PROGRESS: EventTypeGraphQL.NODE_PROGRESS,
        
        EventType.METRICS_COLLECTED: EventTypeGraphQL.METRICS_COLLECTED,
        
        EventType.OPTIMIZATION_SUGGESTED: EventTypeGraphQL.OPTIMIZATION_SUGGESTED,
        
        EventType.WEBHOOK_RECEIVED: EventTypeGraphQL.WEBHOOK_RECEIVED,
        
        EventType.INTERACTIVE_PROMPT: EventTypeGraphQL.INTERACTIVE_PROMPT,
        
        EventType.INTERACTIVE_RESPONSE: EventTypeGraphQL.INTERACTIVE_RESPONSE,
        
        EventType.EXECUTION_UPDATE: EventTypeGraphQL.EXECUTION_UPDATE,
        
        EventType.EXECUTION_LOG: EventTypeGraphQL.EXECUTION_LOG,
        
        EventType.KEEPALIVE: EventTypeGraphQL.KEEPALIVE,
        
    }
    return mapping.get(python_enum)

def convert_eventtype_from_graphql(graphql_enum):
    """Convert GraphQL EventType enum to Python enum."""
    from dipeo.diagram_generated.enums import EventType
    mapping = {
        
        EventTypeGraphQL.EXECUTION_STARTED: EventType.EXECUTION_STARTED,
        
        EventTypeGraphQL.EXECUTION_COMPLETED: EventType.EXECUTION_COMPLETED,
        
        EventTypeGraphQL.EXECUTION_ERROR: EventType.EXECUTION_ERROR,
        
        EventTypeGraphQL.EXECUTION_STATUS_CHANGED: EventType.EXECUTION_STATUS_CHANGED,
        
        EventTypeGraphQL.NODE_STARTED: EventType.NODE_STARTED,
        
        EventTypeGraphQL.NODE_COMPLETED: EventType.NODE_COMPLETED,
        
        EventTypeGraphQL.NODE_ERROR: EventType.NODE_ERROR,
        
        EventTypeGraphQL.NODE_OUTPUT: EventType.NODE_OUTPUT,
        
        EventTypeGraphQL.NODE_STATUS_CHANGED: EventType.NODE_STATUS_CHANGED,
        
        EventTypeGraphQL.NODE_PROGRESS: EventType.NODE_PROGRESS,
        
        EventTypeGraphQL.METRICS_COLLECTED: EventType.METRICS_COLLECTED,
        
        EventTypeGraphQL.OPTIMIZATION_SUGGESTED: EventType.OPTIMIZATION_SUGGESTED,
        
        EventTypeGraphQL.WEBHOOK_RECEIVED: EventType.WEBHOOK_RECEIVED,
        
        EventTypeGraphQL.INTERACTIVE_PROMPT: EventType.INTERACTIVE_PROMPT,
        
        EventTypeGraphQL.INTERACTIVE_RESPONSE: EventType.INTERACTIVE_RESPONSE,
        
        EventTypeGraphQL.EXECUTION_UPDATE: EventType.EXECUTION_UPDATE,
        
        EventTypeGraphQL.EXECUTION_LOG: EventType.EXECUTION_LOG,
        
        EventTypeGraphQL.KEEPALIVE: EventType.KEEPALIVE,
        
    }
    return mapping.get(graphql_enum)


def convert_llmservice_to_graphql(python_enum):
    """Convert Python LLMService enum to GraphQL enum."""
    from dipeo.diagram_generated.enums import LLMService
    mapping = {
        
        LLMService.OPENAI: LLMServiceGraphQL.OPENAI,
        
        LLMService.ANTHROPIC: LLMServiceGraphQL.ANTHROPIC,
        
        LLMService.CLAUDE_CODE: LLMServiceGraphQL.CLAUDE_CODE,
        
        LLMService.GOOGLE: LLMServiceGraphQL.GOOGLE,
        
        LLMService.GEMINI: LLMServiceGraphQL.GEMINI,
        
        LLMService.BEDROCK: LLMServiceGraphQL.BEDROCK,
        
        LLMService.VERTEX: LLMServiceGraphQL.VERTEX,
        
        LLMService.DEEPSEEK: LLMServiceGraphQL.DEEPSEEK,
        
        LLMService.OLLAMA: LLMServiceGraphQL.OLLAMA,
        
    }
    return mapping.get(python_enum)

def convert_llmservice_from_graphql(graphql_enum):
    """Convert GraphQL LLMService enum to Python enum."""
    from dipeo.diagram_generated.enums import LLMService
    mapping = {
        
        LLMServiceGraphQL.OPENAI: LLMService.OPENAI,
        
        LLMServiceGraphQL.ANTHROPIC: LLMService.ANTHROPIC,
        
        LLMServiceGraphQL.CLAUDE_CODE: LLMService.CLAUDE_CODE,
        
        LLMServiceGraphQL.GOOGLE: LLMService.GOOGLE,
        
        LLMServiceGraphQL.GEMINI: LLMService.GEMINI,
        
        LLMServiceGraphQL.BEDROCK: LLMService.BEDROCK,
        
        LLMServiceGraphQL.VERTEX: LLMService.VERTEX,
        
        LLMServiceGraphQL.DEEPSEEK: LLMService.DEEPSEEK,
        
        LLMServiceGraphQL.OLLAMA: LLMService.OLLAMA,
        
    }
    return mapping.get(graphql_enum)


def convert_apiservicetype_to_graphql(python_enum):
    """Convert Python APIServiceType enum to GraphQL enum."""
    from dipeo.diagram_generated.enums import APIServiceType
    mapping = {
        
        APIServiceType.OPENAI: APIServiceTypeGraphQL.OPENAI,
        
        APIServiceType.ANTHROPIC: APIServiceTypeGraphQL.ANTHROPIC,
        
        APIServiceType.GOOGLE: APIServiceTypeGraphQL.GOOGLE,
        
        APIServiceType.GEMINI: APIServiceTypeGraphQL.GEMINI,
        
        APIServiceType.BEDROCK: APIServiceTypeGraphQL.BEDROCK,
        
        APIServiceType.VERTEX: APIServiceTypeGraphQL.VERTEX,
        
        APIServiceType.DEEPSEEK: APIServiceTypeGraphQL.DEEPSEEK,
        
        APIServiceType.OLLAMA: APIServiceTypeGraphQL.OLLAMA,
        
        APIServiceType.CLAUDE_CODE: APIServiceTypeGraphQL.CLAUDE_CODE,
        
    }
    return mapping.get(python_enum)

def convert_apiservicetype_from_graphql(graphql_enum):
    """Convert GraphQL APIServiceType enum to Python enum."""
    from dipeo.diagram_generated.enums import APIServiceType
    mapping = {
        
        APIServiceTypeGraphQL.OPENAI: APIServiceType.OPENAI,
        
        APIServiceTypeGraphQL.ANTHROPIC: APIServiceType.ANTHROPIC,
        
        APIServiceTypeGraphQL.GOOGLE: APIServiceType.GOOGLE,
        
        APIServiceTypeGraphQL.GEMINI: APIServiceType.GEMINI,
        
        APIServiceTypeGraphQL.BEDROCK: APIServiceType.BEDROCK,
        
        APIServiceTypeGraphQL.VERTEX: APIServiceType.VERTEX,
        
        APIServiceTypeGraphQL.DEEPSEEK: APIServiceType.DEEPSEEK,
        
        APIServiceTypeGraphQL.OLLAMA: APIServiceType.OLLAMA,
        
        APIServiceTypeGraphQL.CLAUDE_CODE: APIServiceType.CLAUDE_CODE,
        
    }
    return mapping.get(graphql_enum)


def convert_tooltype_to_graphql(python_enum):
    """Convert Python ToolType enum to GraphQL enum."""
    from dipeo.diagram_generated.enums import ToolType
    mapping = {
        
        ToolType.WEB_SEARCH: ToolTypeGraphQL.WEB_SEARCH,
        
        ToolType.WEB_SEARCH_PREVIEW: ToolTypeGraphQL.WEB_SEARCH_PREVIEW,
        
        ToolType.IMAGE_GENERATION: ToolTypeGraphQL.IMAGE_GENERATION,
        
    }
    return mapping.get(python_enum)

def convert_tooltype_from_graphql(graphql_enum):
    """Convert GraphQL ToolType enum to Python enum."""
    from dipeo.diagram_generated.enums import ToolType
    mapping = {
        
        ToolTypeGraphQL.WEB_SEARCH: ToolType.WEB_SEARCH,
        
        ToolTypeGraphQL.WEB_SEARCH_PREVIEW: ToolType.WEB_SEARCH_PREVIEW,
        
        ToolTypeGraphQL.IMAGE_GENERATION: ToolType.IMAGE_GENERATION,
        
    }
    return mapping.get(graphql_enum)


def convert_toolselection_to_graphql(python_enum):
    """Convert Python ToolSelection enum to GraphQL enum."""
    from dipeo.diagram_generated.enums import ToolSelection
    mapping = {
        
        ToolSelection.NONE: ToolSelectionGraphQL.NONE,
        
        ToolSelection.IMAGE: ToolSelectionGraphQL.IMAGE,
        
        ToolSelection.WEBSEARCH: ToolSelectionGraphQL.WEBSEARCH,
        
    }
    return mapping.get(python_enum)

def convert_toolselection_from_graphql(graphql_enum):
    """Convert GraphQL ToolSelection enum to Python enum."""
    from dipeo.diagram_generated.enums import ToolSelection
    mapping = {
        
        ToolSelectionGraphQL.NONE: ToolSelection.NONE,
        
        ToolSelectionGraphQL.IMAGE: ToolSelection.IMAGE,
        
        ToolSelectionGraphQL.WEBSEARCH: ToolSelection.WEBSEARCH,
        
    }
    return mapping.get(graphql_enum)


def convert_authtype_to_graphql(python_enum):
    """Convert Python AuthType enum to GraphQL enum."""
    from dipeo.diagram_generated.enums import AuthType
    mapping = {
        
        AuthType.NONE: AuthTypeGraphQL.NONE,
        
        AuthType.BEARER: AuthTypeGraphQL.BEARER,
        
        AuthType.BASIC: AuthTypeGraphQL.BASIC,
        
        AuthType.API_KEY: AuthTypeGraphQL.API_KEY,
        
    }
    return mapping.get(python_enum)

def convert_authtype_from_graphql(graphql_enum):
    """Convert GraphQL AuthType enum to Python enum."""
    from dipeo.diagram_generated.enums import AuthType
    mapping = {
        
        AuthTypeGraphQL.NONE: AuthType.NONE,
        
        AuthTypeGraphQL.BEARER: AuthType.BEARER,
        
        AuthTypeGraphQL.BASIC: AuthType.BASIC,
        
        AuthTypeGraphQL.API_KEY: AuthType.API_KEY,
        
    }
    return mapping.get(graphql_enum)


def convert_retrystrategy_to_graphql(python_enum):
    """Convert Python RetryStrategy enum to GraphQL enum."""
    from dipeo.diagram_generated.enums import RetryStrategy
    mapping = {
        
        RetryStrategy.NONE: RetryStrategyGraphQL.NONE,
        
        RetryStrategy.LINEAR: RetryStrategyGraphQL.LINEAR,
        
        RetryStrategy.EXPONENTIAL: RetryStrategyGraphQL.EXPONENTIAL,
        
        RetryStrategy.FIBONACCI: RetryStrategyGraphQL.FIBONACCI,
        
        RetryStrategy.CONSTANT: RetryStrategyGraphQL.CONSTANT,
        
        RetryStrategy.EXPONENTIAL_BACKOFF: RetryStrategyGraphQL.EXPONENTIAL_BACKOFF,
        
        RetryStrategy.LINEAR_BACKOFF: RetryStrategyGraphQL.LINEAR_BACKOFF,
        
        RetryStrategy.FIXED_DELAY: RetryStrategyGraphQL.FIXED_DELAY,
        
    }
    return mapping.get(python_enum)

def convert_retrystrategy_from_graphql(graphql_enum):
    """Convert GraphQL RetryStrategy enum to Python enum."""
    from dipeo.diagram_generated.enums import RetryStrategy
    mapping = {
        
        RetryStrategyGraphQL.NONE: RetryStrategy.NONE,
        
        RetryStrategyGraphQL.LINEAR: RetryStrategy.LINEAR,
        
        RetryStrategyGraphQL.EXPONENTIAL: RetryStrategy.EXPONENTIAL,
        
        RetryStrategyGraphQL.FIBONACCI: RetryStrategy.FIBONACCI,
        
        RetryStrategyGraphQL.CONSTANT: RetryStrategy.CONSTANT,
        
        RetryStrategyGraphQL.EXPONENTIAL_BACKOFF: RetryStrategy.EXPONENTIAL_BACKOFF,
        
        RetryStrategyGraphQL.LINEAR_BACKOFF: RetryStrategy.LINEAR_BACKOFF,
        
        RetryStrategyGraphQL.FIXED_DELAY: RetryStrategy.FIXED_DELAY,
        
    }
    return mapping.get(graphql_enum)


def convert_dbblocksubtype_to_graphql(python_enum):
    """Convert Python DBBlockSubType enum to GraphQL enum."""
    from dipeo.diagram_generated.enums import DBBlockSubType
    mapping = {
        
        DBBlockSubType.FIXED_PROMPT: DBBlockSubTypeGraphQL.FIXED_PROMPT,
        
        DBBlockSubType.FILE: DBBlockSubTypeGraphQL.FILE,
        
        DBBlockSubType.CODE: DBBlockSubTypeGraphQL.CODE,
        
        DBBlockSubType.API_TOOL: DBBlockSubTypeGraphQL.API_TOOL,
        
    }
    return mapping.get(python_enum)

def convert_dbblocksubtype_from_graphql(graphql_enum):
    """Convert GraphQL DBBlockSubType enum to Python enum."""
    from dipeo.diagram_generated.enums import DBBlockSubType
    mapping = {
        
        DBBlockSubTypeGraphQL.FIXED_PROMPT: DBBlockSubType.FIXED_PROMPT,
        
        DBBlockSubTypeGraphQL.FILE: DBBlockSubType.FILE,
        
        DBBlockSubTypeGraphQL.CODE: DBBlockSubType.CODE,
        
        DBBlockSubTypeGraphQL.API_TOOL: DBBlockSubType.API_TOOL,
        
    }
    return mapping.get(graphql_enum)


def convert_supportedlanguage_to_graphql(python_enum):
    """Convert Python SupportedLanguage enum to GraphQL enum."""
    from dipeo.diagram_generated.enums import SupportedLanguage
    mapping = {
        
        SupportedLanguage.PYTHON: SupportedLanguageGraphQL.PYTHON,
        
        SupportedLanguage.TYPESCRIPT: SupportedLanguageGraphQL.TYPESCRIPT,
        
        SupportedLanguage.BASH: SupportedLanguageGraphQL.BASH,
        
        SupportedLanguage.SHELL: SupportedLanguageGraphQL.SHELL,
        
    }
    return mapping.get(python_enum)

def convert_supportedlanguage_from_graphql(graphql_enum):
    """Convert GraphQL SupportedLanguage enum to Python enum."""
    from dipeo.diagram_generated.enums import SupportedLanguage
    mapping = {
        
        SupportedLanguageGraphQL.PYTHON: SupportedLanguage.PYTHON,
        
        SupportedLanguageGraphQL.TYPESCRIPT: SupportedLanguage.TYPESCRIPT,
        
        SupportedLanguageGraphQL.BASH: SupportedLanguage.BASH,
        
        SupportedLanguageGraphQL.SHELL: SupportedLanguage.SHELL,
        
    }
    return mapping.get(graphql_enum)


def convert_httpmethod_to_graphql(python_enum):
    """Convert Python HttpMethod enum to GraphQL enum."""
    from dipeo.diagram_generated.enums import HttpMethod
    mapping = {
        
        HttpMethod.GET: HttpMethodGraphQL.GET,
        
        HttpMethod.POST: HttpMethodGraphQL.POST,
        
        HttpMethod.PUT: HttpMethodGraphQL.PUT,
        
        HttpMethod.DELETE: HttpMethodGraphQL.DELETE,
        
        HttpMethod.PATCH: HttpMethodGraphQL.PATCH,
        
    }
    return mapping.get(python_enum)

def convert_httpmethod_from_graphql(graphql_enum):
    """Convert GraphQL HttpMethod enum to Python enum."""
    from dipeo.diagram_generated.enums import HttpMethod
    mapping = {
        
        HttpMethodGraphQL.GET: HttpMethod.GET,
        
        HttpMethodGraphQL.POST: HttpMethod.POST,
        
        HttpMethodGraphQL.PUT: HttpMethod.PUT,
        
        HttpMethodGraphQL.DELETE: HttpMethod.DELETE,
        
        HttpMethodGraphQL.PATCH: HttpMethod.PATCH,
        
    }
    return mapping.get(graphql_enum)


def convert_hooktype_to_graphql(python_enum):
    """Convert Python HookType enum to GraphQL enum."""
    from dipeo.diagram_generated.enums import HookType
    mapping = {
        
        HookType.SHELL: HookTypeGraphQL.SHELL,
        
        HookType.WEBHOOK: HookTypeGraphQL.WEBHOOK,
        
        HookType.PYTHON: HookTypeGraphQL.PYTHON,
        
        HookType.FILE: HookTypeGraphQL.FILE,
        
    }
    return mapping.get(python_enum)

def convert_hooktype_from_graphql(graphql_enum):
    """Convert GraphQL HookType enum to Python enum."""
    from dipeo.diagram_generated.enums import HookType
    mapping = {
        
        HookTypeGraphQL.SHELL: HookType.SHELL,
        
        HookTypeGraphQL.WEBHOOK: HookType.WEBHOOK,
        
        HookTypeGraphQL.PYTHON: HookType.PYTHON,
        
        HookTypeGraphQL.FILE: HookType.FILE,
        
    }
    return mapping.get(graphql_enum)


def convert_hooktriggermode_to_graphql(python_enum):
    """Convert Python HookTriggerMode enum to GraphQL enum."""
    from dipeo.diagram_generated.enums import HookTriggerMode
    mapping = {
        
        HookTriggerMode.NONE: HookTriggerModeGraphQL.NONE,
        
        HookTriggerMode.MANUAL: HookTriggerModeGraphQL.MANUAL,
        
        HookTriggerMode.HOOK: HookTriggerModeGraphQL.HOOK,
        
    }
    return mapping.get(python_enum)

def convert_hooktriggermode_from_graphql(graphql_enum):
    """Convert GraphQL HookTriggerMode enum to Python enum."""
    from dipeo.diagram_generated.enums import HookTriggerMode
    mapping = {
        
        HookTriggerModeGraphQL.NONE: HookTriggerMode.NONE,
        
        HookTriggerModeGraphQL.MANUAL: HookTriggerMode.MANUAL,
        
        HookTriggerModeGraphQL.HOOK: HookTriggerMode.HOOK,
        
    }
    return mapping.get(graphql_enum)


def convert_conditiontype_to_graphql(python_enum):
    """Convert Python ConditionType enum to GraphQL enum."""
    from dipeo.diagram_generated.enums import ConditionType
    mapping = {
        
        ConditionType.DETECT_MAX_ITERATIONS: ConditionTypeGraphQL.DETECT_MAX_ITERATIONS,
        
        ConditionType.CHECK_NODES_EXECUTED: ConditionTypeGraphQL.CHECK_NODES_EXECUTED,
        
        ConditionType.CUSTOM: ConditionTypeGraphQL.CUSTOM,
        
        ConditionType.LLM_DECISION: ConditionTypeGraphQL.LLM_DECISION,
        
    }
    return mapping.get(python_enum)

def convert_conditiontype_from_graphql(graphql_enum):
    """Convert GraphQL ConditionType enum to Python enum."""
    from dipeo.diagram_generated.enums import ConditionType
    mapping = {
        
        ConditionTypeGraphQL.DETECT_MAX_ITERATIONS: ConditionType.DETECT_MAX_ITERATIONS,
        
        ConditionTypeGraphQL.CHECK_NODES_EXECUTED: ConditionType.CHECK_NODES_EXECUTED,
        
        ConditionTypeGraphQL.CUSTOM: ConditionType.CUSTOM,
        
        ConditionTypeGraphQL.LLM_DECISION: ConditionType.LLM_DECISION,
        
    }
    return mapping.get(graphql_enum)


def convert_templateengine_to_graphql(python_enum):
    """Convert Python TemplateEngine enum to GraphQL enum."""
    from dipeo.diagram_generated.enums import TemplateEngine
    mapping = {
        
        TemplateEngine.INTERNAL: TemplateEngineGraphQL.INTERNAL,
        
        TemplateEngine.JINJA2: TemplateEngineGraphQL.JINJA2,
        
    }
    return mapping.get(python_enum)

def convert_templateengine_from_graphql(graphql_enum):
    """Convert GraphQL TemplateEngine enum to Python enum."""
    from dipeo.diagram_generated.enums import TemplateEngine
    mapping = {
        
        TemplateEngineGraphQL.INTERNAL: TemplateEngine.INTERNAL,
        
        TemplateEngineGraphQL.JINJA2: TemplateEngine.JINJA2,
        
    }
    return mapping.get(graphql_enum)


def convert_nodetype_to_graphql(python_enum):
    """Convert Python NodeType enum to GraphQL enum."""
    from dipeo.diagram_generated.enums import NodeType
    mapping = {
        
        NodeType.START: NodeTypeGraphQL.START,
        
        NodeType.PERSON_JOB: NodeTypeGraphQL.PERSON_JOB,
        
        NodeType.CONDITION: NodeTypeGraphQL.CONDITION,
        
        NodeType.CODE_JOB: NodeTypeGraphQL.CODE_JOB,
        
        NodeType.API_JOB: NodeTypeGraphQL.API_JOB,
        
        NodeType.ENDPOINT: NodeTypeGraphQL.ENDPOINT,
        
        NodeType.DB: NodeTypeGraphQL.DB,
        
        NodeType.USER_RESPONSE: NodeTypeGraphQL.USER_RESPONSE,
        
        NodeType.PERSON_BATCH_JOB: NodeTypeGraphQL.PERSON_BATCH_JOB,
        
        NodeType.HOOK: NodeTypeGraphQL.HOOK,
        
        NodeType.TEMPLATE_JOB: NodeTypeGraphQL.TEMPLATE_JOB,
        
        NodeType.JSON_SCHEMA_VALIDATOR: NodeTypeGraphQL.JSON_SCHEMA_VALIDATOR,
        
        NodeType.TYPESCRIPT_AST: NodeTypeGraphQL.TYPESCRIPT_AST,
        
        NodeType.SUB_DIAGRAM: NodeTypeGraphQL.SUB_DIAGRAM,
        
        NodeType.INTEGRATED_API: NodeTypeGraphQL.INTEGRATED_API,
        
    }
    return mapping.get(python_enum)

def convert_nodetype_from_graphql(graphql_enum):
    """Convert GraphQL NodeType enum to Python enum."""
    from dipeo.diagram_generated.enums import NodeType
    mapping = {
        
        NodeTypeGraphQL.START: NodeType.START,
        
        NodeTypeGraphQL.PERSON_JOB: NodeType.PERSON_JOB,
        
        NodeTypeGraphQL.CONDITION: NodeType.CONDITION,
        
        NodeTypeGraphQL.CODE_JOB: NodeType.CODE_JOB,
        
        NodeTypeGraphQL.API_JOB: NodeType.API_JOB,
        
        NodeTypeGraphQL.ENDPOINT: NodeType.ENDPOINT,
        
        NodeTypeGraphQL.DB: NodeType.DB,
        
        NodeTypeGraphQL.USER_RESPONSE: NodeType.USER_RESPONSE,
        
        NodeTypeGraphQL.PERSON_BATCH_JOB: NodeType.PERSON_BATCH_JOB,
        
        NodeTypeGraphQL.HOOK: NodeType.HOOK,
        
        NodeTypeGraphQL.TEMPLATE_JOB: NodeType.TEMPLATE_JOB,
        
        NodeTypeGraphQL.JSON_SCHEMA_VALIDATOR: NodeType.JSON_SCHEMA_VALIDATOR,
        
        NodeTypeGraphQL.TYPESCRIPT_AST: NodeType.TYPESCRIPT_AST,
        
        NodeTypeGraphQL.SUB_DIAGRAM: NodeType.SUB_DIAGRAM,
        
        NodeTypeGraphQL.INTEGRATED_API: NodeType.INTEGRATED_API,
        
    }
    return mapping.get(graphql_enum)


def convert_severity_to_graphql(python_enum):
    """Convert Python Severity enum to GraphQL enum."""
    from dipeo.diagram_generated.enums import Severity
    mapping = {
        
        Severity.ERROR: SeverityGraphQL.ERROR,
        
        Severity.WARNING: SeverityGraphQL.WARNING,
        
        Severity.INFO: SeverityGraphQL.INFO,
        
    }
    return mapping.get(python_enum)

def convert_severity_from_graphql(graphql_enum):
    """Convert GraphQL Severity enum to Python enum."""
    from dipeo.diagram_generated.enums import Severity
    mapping = {
        
        SeverityGraphQL.ERROR: Severity.ERROR,
        
        SeverityGraphQL.WARNING: Severity.WARNING,
        
        SeverityGraphQL.INFO: Severity.INFO,
        
    }
    return mapping.get(graphql_enum)


def convert_eventpriority_to_graphql(python_enum):
    """Convert Python EventPriority enum to GraphQL enum."""
    from dipeo.diagram_generated.enums import EventPriority
    mapping = {
        
        EventPriority.LOW: EventPriorityGraphQL.LOW,
        
        EventPriority.NORMAL: EventPriorityGraphQL.NORMAL,
        
        EventPriority.HIGH: EventPriorityGraphQL.HIGH,
        
        EventPriority.CRITICAL: EventPriorityGraphQL.CRITICAL,
        
    }
    return mapping.get(python_enum)

def convert_eventpriority_from_graphql(graphql_enum):
    """Convert GraphQL EventPriority enum to Python enum."""
    from dipeo.diagram_generated.enums import EventPriority
    mapping = {
        
        EventPriorityGraphQL.LOW: EventPriority.LOW,
        
        EventPriorityGraphQL.NORMAL: EventPriority.NORMAL,
        
        EventPriorityGraphQL.HIGH: EventPriority.HIGH,
        
        EventPriorityGraphQL.CRITICAL: EventPriority.CRITICAL,
        
    }
    return mapping.get(graphql_enum)


