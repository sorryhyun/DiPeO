"""
Generated enum definitions for DiPeO.
DO NOT EDIT - This file is automatically generated.
"""

from enum import Enum


class NodeType(str, Enum):
    """Shared enum definitions for diagram-related types
These enums are used by both frontend and backend via code generation"""
    
    START = "start"
    
    PERSON_JOB = "person_job"
    
    CONDITION = "condition"
    
    CODE_JOB = "code_job"
    
    API_JOB = "api_job"
    
    ENDPOINT = "endpoint"
    
    DB = "db"
    
    USER_RESPONSE = "user_response"
    
    NOTION = "notion"
    
    PERSON_BATCH_JOB = "person_batch_job"
    
    HOOK = "hook"
    
    TEMPLATE_JOB = "template_job"
    
    JSON_SCHEMA_VALIDATOR = "json_schema_validator"
    
    TYPESCRIPT_AST = "typescript_ast"
    
    SUB_DIAGRAM = "sub_diagram"
    


class HandleDirection(str, Enum):
    """HandleDirection enum values"""
    
    INPUT = "input"
    
    OUTPUT = "output"
    


class HandleLabel(str, Enum):
    """HandleLabel enum values"""
    
    DEFAULT = "default"
    
    FIRST = "first"
    
    CONDITION_TRUE = "condtrue"
    
    CONDITION_FALSE = "condfalse"
    
    SUCCESS = "success"
    
    ERROR = "error"
    
    RESULTS = "results"
    


class DataType(str, Enum):
    """DataType enum values"""
    
    ANY = "any"
    
    STRING = "string"
    
    NUMBER = "number"
    
    BOOLEAN = "boolean"
    
    OBJECT = "object"
    
    ARRAY = "array"
    


class MemoryView(str, Enum):
    """MemoryView enum values"""
    
    ALL_INVOLVED = "all_involved"
    
    SENT_BY_ME = "sent_by_me"
    
    SENT_TO_ME = "sent_to_me"
    
    SYSTEM_AND_ME = "system_and_me"
    
    CONVERSATION_PAIRS = "conversation_pairs"
    
    ALL_MESSAGES = "all_messages"
    


class DiagramFormat(str, Enum):
    """DiagramFormat enum values"""
    
    NATIVE = "native"
    
    LIGHT = "light"
    
    READABLE = "readable"
    


class DBBlockSubType(str, Enum):
    """DBBlockSubType enum values"""
    
    FIXED_PROMPT = "fixed_prompt"
    
    FILE = "file"
    
    CODE = "code"
    
    API_TOOL = "api_tool"
    


class ContentType(str, Enum):
    """ContentType enum values"""
    
    RAW_TEXT = "raw_text"
    
    CONVERSATION_STATE = "conversation_state"
    
    OBJECT = "object"
    


class SupportedLanguage(str, Enum):
    """SupportedLanguage enum values"""
    
    PYTHON = "python"
    
    TYPESCRIPT = "typescript"
    
    BASH = "bash"
    
    SHELL = "shell"
    


class HttpMethod(str, Enum):
    """HttpMethod enum values"""
    
    GET = "GET"
    
    POST = "POST"
    
    PUT = "PUT"
    
    DELETE = "DELETE"
    
    PATCH = "PATCH"
    


class HookType(str, Enum):
    """HookType enum values"""
    
    SHELL = "shell"
    
    WEBHOOK = "webhook"
    
    PYTHON = "python"
    
    FILE = "file"
    


class HookTriggerMode(str, Enum):
    """HookTriggerMode enum values"""
    
    MANUAL = "manual"
    
    HOOK = "hook"
    


class ExecutionStatus(str, Enum):
    """ExecutionStatus enum values"""
    
    PENDING = "PENDING"
    
    RUNNING = "RUNNING"
    
    PAUSED = "PAUSED"
    
    COMPLETED = "COMPLETED"
    
    FAILED = "FAILED"
    
    ABORTED = "ABORTED"
    
    SKIPPED = "SKIPPED"
    


class NodeExecutionStatus(str, Enum):
    """NodeExecutionStatus enum values"""
    
    PENDING = "PENDING"
    
    RUNNING = "RUNNING"
    
    PAUSED = "PAUSED"
    
    COMPLETED = "COMPLETED"
    
    FAILED = "FAILED"
    
    ABORTED = "ABORTED"
    
    SKIPPED = "SKIPPED"
    
    MAXITER_REACHED = "MAXITER_REACHED"
    


class EventType(str, Enum):
    """EventType enum values"""
    
    EXECUTION_STATUS_CHANGED = "EXECUTION_STATUS_CHANGED"
    
    NODE_STATUS_CHANGED = "NODE_STATUS_CHANGED"
    
    NODE_PROGRESS = "NODE_PROGRESS"
    
    INTERACTIVE_PROMPT = "INTERACTIVE_PROMPT"
    
    INTERACTIVE_RESPONSE = "INTERACTIVE_RESPONSE"
    
    EXECUTION_ERROR = "EXECUTION_ERROR"
    
    EXECUTION_UPDATE = "EXECUTION_UPDATE"
    


class LLMService(str, Enum):
    """LLMService enum values"""
    
    OPENAI = "openai"
    
    ANTHROPIC = "anthropic"
    
    GOOGLE = "google"
    
    BEDROCK = "bedrock"
    
    VERTEX = "vertex"
    
    DEEPSEEK = "deepseek"
    


class APIServiceType(str, Enum):
    """APIServiceType enum values"""
    
    OPENAI = "openai"
    
    ANTHROPIC = "anthropic"
    
    GOOGLE = "google"
    
    GEMINI = "gemini"
    
    BEDROCK = "bedrock"
    
    VERTEX = "vertex"
    
    DEEPSEEK = "deepseek"
    
    NOTION = "notion"
    
    GOOGLE_SEARCH = "google_search"
    
    SLACK = "slack"
    
    GITHUB = "github"
    
    JIRA = "jira"
    


class NotionOperation(str, Enum):
    """NotionOperation enum values"""
    
    CREATE_PAGE = "create_page"
    
    UPDATE_PAGE = "update_page"
    
    READ_PAGE = "read_page"
    
    DELETE_PAGE = "delete_page"
    
    CREATE_DATABASE = "create_database"
    
    QUERY_DATABASE = "query_database"
    
    UPDATE_DATABASE = "update_database"
    


class ToolType(str, Enum):
    """ToolType enum values"""
    
    WEB_SEARCH = "web_search"
    
    WEB_SEARCH_PREVIEW = "web_search_preview"
    
    IMAGE_GENERATION = "image_generation"
    



# Export all enums
__all__ = [
    
    "NodeType",
    
    "HandleDirection",
    
    "HandleLabel",
    
    "DataType",
    
    "MemoryView",
    
    "DiagramFormat",
    
    "DBBlockSubType",
    
    "ContentType",
    
    "SupportedLanguage",
    
    "HttpMethod",
    
    "HookType",
    
    "HookTriggerMode",
    
    "ExecutionStatus",
    
    "NodeExecutionStatus",
    
    "EventType",
    
    "LLMService",
    
    "APIServiceType",
    
    "NotionOperation",
    
    "ToolType",
    
]