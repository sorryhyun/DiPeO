"""
Generated enum definitions for DiPeO.
DO NOT EDIT - This file is automatically generated.
"""

from enum import Enum


class NodeType(str, Enum):
    """Types of nodes available in DiPeO diagrams"""
    
    start = "start"
    
    person_job = "person_job"
    
    condition = "condition"
    
    code_job = "code_job"
    
    api_job = "api_job"
    
    endpoint = "endpoint"
    
    db = "db"
    
    user_response = "user_response"
    
    notion = "notion"
    
    person_batch_job = "person_batch_job"
    
    hook = "hook"
    
    template_job = "template_job"
    
    json_schema_validator = "json_schema_validator"
    
    typescript_ast = "typescript_ast"
    
    sub_diagram = "sub_diagram"
    


class HandleDirection(str, Enum):
    """Direction of node handles"""
    
    input = "input"
    
    output = "output"
    


class HandleLabel(str, Enum):
    """Labels for node handles"""
    
    default = "default"
    
    first = "first"
    
    condtrue = "condtrue"
    
    condfalse = "condfalse"
    
    success = "success"
    
    error = "error"
    
    results = "results"
    


class DataType(str, Enum):
    """Data types for node inputs/outputs"""
    
    any = "any"
    
    string = "string"
    
    number = "number"
    
    boolean = "boolean"
    
    object = "object"
    
    array = "array"
    


class ForgettingMode(str, Enum):
    """Memory forgetting modes"""
    
    no_forget = "no_forget"
    
    on_every_turn = "on_every_turn"
    
    upon_request = "upon_request"
    


class MemoryView(str, Enum):
    """Different views of conversation memory"""
    
    all_involved = "all_involved"
    
    sent_by_me = "sent_by_me"
    
    sent_to_me = "sent_to_me"
    
    system_and_me = "system_and_me"
    
    conversation_pairs = "conversation_pairs"
    
    all_messages = "all_messages"
    


class DiagramFormat(str, Enum):
    """Diagram file formats"""
    
    native = "native"
    
    light = "light"
    
    readable = "readable"
    


class DBBlockSubType(str, Enum):
    """Sub-types for DB blocks"""
    
    fixed_prompt = "fixed_prompt"
    
    file = "file"
    
    code = "code"
    
    api_tool = "api_tool"
    


class ContentType(str, Enum):
    """Types of content"""
    
    raw_text = "raw_text"
    
    conversation_state = "conversation_state"
    
    object = "object"
    


class SupportedLanguage(str, Enum):
    """Supported programming languages"""
    
    python = "python"
    
    typescript = "typescript"
    
    bash = "bash"
    
    shell = "shell"
    


class HttpMethod(str, Enum):
    """HTTP request methods"""
    
    GET = "GET"
    
    POST = "POST"
    
    PUT = "PUT"
    
    DELETE = "DELETE"
    
    PATCH = "PATCH"
    


class HookType(str, Enum):
    """Types of hooks"""
    
    shell = "shell"
    
    webhook = "webhook"
    
    python = "python"
    
    file = "file"
    


class HookTriggerMode(str, Enum):
    """Hook trigger modes"""
    
    manual = "manual"
    
    hook = "hook"
    


class ExecutionStatus(str, Enum):
    """Execution status values"""
    
    PENDING = "PENDING"
    
    RUNNING = "RUNNING"
    
    PAUSED = "PAUSED"
    
    COMPLETED = "COMPLETED"
    
    FAILED = "FAILED"
    
    ABORTED = "ABORTED"
    
    SKIPPED = "SKIPPED"
    


class NodeExecutionStatus(str, Enum):
    """Node execution status values"""
    
    PENDING = "PENDING"
    
    RUNNING = "RUNNING"
    
    PAUSED = "PAUSED"
    
    COMPLETED = "COMPLETED"
    
    FAILED = "FAILED"
    
    ABORTED = "ABORTED"
    
    SKIPPED = "SKIPPED"
    
    MAXITER_REACHED = "MAXITER_REACHED"
    


class EventType(str, Enum):
    """Execution event types"""
    
    EXECUTION_STATUS_CHANGED = "EXECUTION_STATUS_CHANGED"
    
    NODE_STATUS_CHANGED = "NODE_STATUS_CHANGED"
    
    NODE_PROGRESS = "NODE_PROGRESS"
    
    INTERACTIVE_PROMPT = "INTERACTIVE_PROMPT"
    
    INTERACTIVE_RESPONSE = "INTERACTIVE_RESPONSE"
    
    EXECUTION_ERROR = "EXECUTION_ERROR"
    
    EXECUTION_UPDATE = "EXECUTION_UPDATE"
    


class LLMService(str, Enum):
    """LLM service providers"""
    
    openai = "openai"
    
    anthropic = "anthropic"
    
    google = "google"
    
    bedrock = "bedrock"
    
    vertex = "vertex"
    
    deepseek = "deepseek"
    


class APIServiceType(str, Enum):
    """All API service types including LLMs"""
    
    openai = "openai"
    
    anthropic = "anthropic"
    
    google = "google"
    
    gemini = "gemini"
    
    bedrock = "bedrock"
    
    vertex = "vertex"
    
    deepseek = "deepseek"
    
    notion = "notion"
    
    google_search = "google_search"
    
    slack = "slack"
    
    github = "github"
    
    jira = "jira"
    


class NotionOperation(str, Enum):
    """Notion API operations"""
    
    create_page = "create_page"
    
    update_page = "update_page"
    
    read_page = "read_page"
    
    delete_page = "delete_page"
    
    create_database = "create_database"
    
    query_database = "query_database"
    
    update_database = "update_database"
    


class ToolType(str, Enum):
    """Tool types for LLM agents"""
    
    web_search = "web_search"
    
    web_search_preview = "web_search_preview"
    
    image_generation = "image_generation"
    



# Export all enums
__all__ = [
    
    "NodeType",
    
    "HandleDirection",
    
    "HandleLabel",
    
    "DataType",
    
    "ForgettingMode",
    
    "MemoryView",
    
    "DiagramFormat",
    
    "DBBlockSubType",
    
    "ContentType",
    
    "SupportedLanguage",
    
    "HttpMethod",
    
    "HookType",
    
    "HookTriggerMode",
    
    "ExecutionStatus",
    
    "NodeExecutionStatus",
    
    "EventType",
    
    "LLMService",
    
    "APIServiceType",
    
    "NotionOperation",
    
    "ToolType",
    
]