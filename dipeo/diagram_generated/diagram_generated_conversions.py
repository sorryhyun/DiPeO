"""
Generated conversion functions for TypeScript <-> Python transformations.
DO NOT EDIT - This file is automatically generated.
"""

from typing import Any, Dict, List, Optional, Union, Type, TypeVar
from enum import Enum
import json

# Import generated models
from .__generated_models__ import *

T = TypeVar('T')


# Enum conversion helpers
def llm_service_to_string(value: LLMService) -> str:
    """Convert LLMService enum to string."""
    return value.value if isinstance(value, LLMService) else str(value)


def string_to_llm_service(value: str) -> LLMService:
    """Convert string to LLMService enum."""
    try:
        return LLMService(value)
    except ValueError:
        raise ValueError(f"Invalid LLMService value: {value}")

def api_service_type_to_string(value: APIServiceType) -> str:
    """Convert APIServiceType enum to string."""
    return value.value if isinstance(value, APIServiceType) else str(value)


def string_to_api_service_type(value: str) -> APIServiceType:
    """Convert string to APIServiceType enum."""
    try:
        return APIServiceType(value)
    except ValueError:
        raise ValueError(f"Invalid APIServiceType value: {value}")

def notion_operation_to_string(value: NotionOperation) -> str:
    """Convert NotionOperation enum to string."""
    return value.value if isinstance(value, NotionOperation) else str(value)


def string_to_notion_operation(value: str) -> NotionOperation:
    """Convert string to NotionOperation enum."""
    try:
        return NotionOperation(value)
    except ValueError:
        raise ValueError(f"Invalid NotionOperation value: {value}")

def tool_type_to_string(value: ToolType) -> str:
    """Convert ToolType enum to string."""
    return value.value if isinstance(value, ToolType) else str(value)


def string_to_tool_type(value: str) -> ToolType:
    """Convert string to ToolType enum."""
    try:
        return ToolType(value)
    except ValueError:
        raise ValueError(f"Invalid ToolType value: {value}")

def execution_status_to_string(value: ExecutionStatus) -> str:
    """Convert ExecutionStatus enum to string."""
    return value.value if isinstance(value, ExecutionStatus) else str(value)


def string_to_execution_status(value: str) -> ExecutionStatus:
    """Convert string to ExecutionStatus enum."""
    try:
        return ExecutionStatus(value)
    except ValueError:
        raise ValueError(f"Invalid ExecutionStatus value: {value}")

def node_execution_status_to_string(value: NodeExecutionStatus) -> str:
    """Convert NodeExecutionStatus enum to string."""
    return value.value if isinstance(value, NodeExecutionStatus) else str(value)


def string_to_node_execution_status(value: str) -> NodeExecutionStatus:
    """Convert string to NodeExecutionStatus enum."""
    try:
        return NodeExecutionStatus(value)
    except ValueError:
        raise ValueError(f"Invalid NodeExecutionStatus value: {value}")

def event_type_to_string(value: EventType) -> str:
    """Convert EventType enum to string."""
    return value.value if isinstance(value, EventType) else str(value)


def string_to_event_type(value: str) -> EventType:
    """Convert string to EventType enum."""
    try:
        return EventType(value)
    except ValueError:
        raise ValueError(f"Invalid EventType value: {value}")

def node_type_to_string(value: NodeType) -> str:
    """Convert NodeType enum to string."""
    return value.value if isinstance(value, NodeType) else str(value)


def string_to_node_type(value: str) -> NodeType:
    """Convert string to NodeType enum."""
    try:
        return NodeType(value)
    except ValueError:
        raise ValueError(f"Invalid NodeType value: {value}")

def handle_direction_to_string(value: HandleDirection) -> str:
    """Convert HandleDirection enum to string."""
    return value.value if isinstance(value, HandleDirection) else str(value)


def string_to_handle_direction(value: str) -> HandleDirection:
    """Convert string to HandleDirection enum."""
    try:
        return HandleDirection(value)
    except ValueError:
        raise ValueError(f"Invalid HandleDirection value: {value}")

def handle_label_to_string(value: HandleLabel) -> str:
    """Convert HandleLabel enum to string."""
    return value.value if isinstance(value, HandleLabel) else str(value)


def string_to_handle_label(value: str) -> HandleLabel:
    """Convert string to HandleLabel enum."""
    try:
        return HandleLabel(value)
    except ValueError:
        raise ValueError(f"Invalid HandleLabel value: {value}")

def data_type_to_string(value: DataType) -> str:
    """Convert DataType enum to string."""
    return value.value if isinstance(value, DataType) else str(value)


def string_to_data_type(value: str) -> DataType:
    """Convert string to DataType enum."""
    try:
        return DataType(value)
    except ValueError:
        raise ValueError(f"Invalid DataType value: {value}")

def forgetting_mode_to_string(value: ForgettingMode) -> str:
    """Convert ForgettingMode enum to string."""
    return value.value if isinstance(value, ForgettingMode) else str(value)


def string_to_forgetting_mode(value: str) -> ForgettingMode:
    """Convert string to ForgettingMode enum."""
    try:
        return ForgettingMode(value)
    except ValueError:
        raise ValueError(f"Invalid ForgettingMode value: {value}")

def memory_view_to_string(value: MemoryView) -> str:
    """Convert MemoryView enum to string."""
    return value.value if isinstance(value, MemoryView) else str(value)


def string_to_memory_view(value: str) -> MemoryView:
    """Convert string to MemoryView enum."""
    try:
        return MemoryView(value)
    except ValueError:
        raise ValueError(f"Invalid MemoryView value: {value}")

def diagram_format_to_string(value: DiagramFormat) -> str:
    """Convert DiagramFormat enum to string."""
    return value.value if isinstance(value, DiagramFormat) else str(value)


def string_to_diagram_format(value: str) -> DiagramFormat:
    """Convert string to DiagramFormat enum."""
    try:
        return DiagramFormat(value)
    except ValueError:
        raise ValueError(f"Invalid DiagramFormat value: {value}")

def db_block_sub_type_to_string(value: DBBlockSubType) -> str:
    """Convert DBBlockSubType enum to string."""
    return value.value if isinstance(value, DBBlockSubType) else str(value)


def string_to_db_block_sub_type(value: str) -> DBBlockSubType:
    """Convert string to DBBlockSubType enum."""
    try:
        return DBBlockSubType(value)
    except ValueError:
        raise ValueError(f"Invalid DBBlockSubType value: {value}")

def content_type_to_string(value: ContentType) -> str:
    """Convert ContentType enum to string."""
    return value.value if isinstance(value, ContentType) else str(value)


def string_to_content_type(value: str) -> ContentType:
    """Convert string to ContentType enum."""
    try:
        return ContentType(value)
    except ValueError:
        raise ValueError(f"Invalid ContentType value: {value}")

def supported_language_to_string(value: SupportedLanguage) -> str:
    """Convert SupportedLanguage enum to string."""
    return value.value if isinstance(value, SupportedLanguage) else str(value)


def string_to_supported_language(value: str) -> SupportedLanguage:
    """Convert string to SupportedLanguage enum."""
    try:
        return SupportedLanguage(value)
    except ValueError:
        raise ValueError(f"Invalid SupportedLanguage value: {value}")

def http_method_to_string(value: HttpMethod) -> str:
    """Convert HttpMethod enum to string."""
    return value.value if isinstance(value, HttpMethod) else str(value)


def string_to_http_method(value: str) -> HttpMethod:
    """Convert string to HttpMethod enum."""
    try:
        return HttpMethod(value)
    except ValueError:
        raise ValueError(f"Invalid HttpMethod value: {value}")

def hook_type_to_string(value: HookType) -> str:
    """Convert HookType enum to string."""
    return value.value if isinstance(value, HookType) else str(value)


def string_to_hook_type(value: str) -> HookType:
    """Convert string to HookType enum."""
    try:
        return HookType(value)
    except ValueError:
        raise ValueError(f"Invalid HookType value: {value}")

def hook_trigger_mode_to_string(value: HookTriggerMode) -> str:
    """Convert HookTriggerMode enum to string."""
    return value.value if isinstance(value, HookTriggerMode) else str(value)


def string_to_hook_trigger_mode(value: str) -> HookTriggerMode:
    """Convert string to HookTriggerMode enum."""
    try:
        return HookTriggerMode(value)
    except ValueError:
        raise ValueError(f"Invalid HookTriggerMode value: {value}")


# Model conversion functions




















def graph_ql_domain_person_type_to_dict(model: GraphQLDomainPersonType) -> Dict[str, Any]:
    """Convert GraphQLDomainPersonType to dictionary."""
    if not isinstance(model, GraphQLDomainPersonType):
        raise TypeError(f"Expected GraphQLDomainPersonType, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    
    return data


def dict_to_graph_ql_domain_person_type(data: Dict[str, Any]) -> GraphQLDomainPersonType:
    """Convert dictionary to GraphQLDomainPersonType."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    
    return GraphQLDomainPersonType(**data_copy)

def store_diagram_to_dict(model: StoreDiagram) -> Dict[str, Any]:
    """Convert StoreDiagram to dictionary."""
    if not isinstance(model, StoreDiagram):
        raise TypeError(f"Expected StoreDiagram, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    
    return data


def dict_to_store_diagram(data: Dict[str, Any]) -> StoreDiagram:
    """Convert dictionary to StoreDiagram."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    
    return StoreDiagram(**data_copy)

def tool_config_to_dict(model: ToolConfig) -> Dict[str, Any]:
    """Convert ToolConfig to dictionary."""
    if not isinstance(model, ToolConfig):
        raise TypeError(f"Expected ToolConfig, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    if "type" in data and data["type"] is not None:
        data["type"] = tool_type_to_string(data["type"])
    
    return data


def dict_to_tool_config(data: Dict[str, Any]) -> ToolConfig:
    """Convert dictionary to ToolConfig."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    if "type" in data_copy and data_copy["type"] is not None:
        data_copy["type"] = string_to_tool_type(data_copy["type"])
    
    return ToolConfig(**data_copy)

def web_search_result_to_dict(model: WebSearchResult) -> Dict[str, Any]:
    """Convert WebSearchResult to dictionary."""
    if not isinstance(model, WebSearchResult):
        raise TypeError(f"Expected WebSearchResult, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    
    return data


def dict_to_web_search_result(data: Dict[str, Any]) -> WebSearchResult:
    """Convert dictionary to WebSearchResult."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    
    return WebSearchResult(**data_copy)

def image_generation_result_to_dict(model: ImageGenerationResult) -> Dict[str, Any]:
    """Convert ImageGenerationResult to dictionary."""
    if not isinstance(model, ImageGenerationResult):
        raise TypeError(f"Expected ImageGenerationResult, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    
    return data


def dict_to_image_generation_result(data: Dict[str, Any]) -> ImageGenerationResult:
    """Convert dictionary to ImageGenerationResult."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    
    return ImageGenerationResult(**data_copy)

def tool_output_to_dict(model: ToolOutput) -> Dict[str, Any]:
    """Convert ToolOutput to dictionary."""
    if not isinstance(model, ToolOutput):
        raise TypeError(f"Expected ToolOutput, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    if "type" in data and data["type"] is not None:
        data["type"] = tool_type_to_string(data["type"])
    
    return data


def dict_to_tool_output(data: Dict[str, Any]) -> ToolOutput:
    """Convert dictionary to ToolOutput."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    if "type" in data_copy and data_copy["type"] is not None:
        data_copy["type"] = string_to_tool_type(data_copy["type"])
    
    return ToolOutput(**data_copy)

def chat_result_to_dict(model: ChatResult) -> Dict[str, Any]:
    """Convert ChatResult to dictionary."""
    if not isinstance(model, ChatResult):
        raise TypeError(f"Expected ChatResult, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    
    return data


def dict_to_chat_result(data: Dict[str, Any]) -> ChatResult:
    """Convert dictionary to ChatResult."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    
    return ChatResult(**data_copy)

def llm_request_options_to_dict(model: LLMRequestOptions) -> Dict[str, Any]:
    """Convert LLMRequestOptions to dictionary."""
    if not isinstance(model, LLMRequestOptions):
        raise TypeError(f"Expected LLMRequestOptions, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    
    return data


def dict_to_llm_request_options(data: Dict[str, Any]) -> LLMRequestOptions:
    """Convert dictionary to LLMRequestOptions."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    
    return LLMRequestOptions(**data_copy)

def token_usage_to_dict(model: TokenUsage) -> Dict[str, Any]:
    """Convert TokenUsage to dictionary."""
    if not isinstance(model, TokenUsage):
        raise TypeError(f"Expected TokenUsage, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    
    return data


def dict_to_token_usage(data: Dict[str, Any]) -> TokenUsage:
    """Convert dictionary to TokenUsage."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    
    return TokenUsage(**data_copy)

def node_state_to_dict(model: NodeState) -> Dict[str, Any]:
    """Convert NodeState to dictionary."""
    if not isinstance(model, NodeState):
        raise TypeError(f"Expected NodeState, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    if "status" in data and data["status"] is not None:
        data["status"] = node_execution_status_to_string(data["status"])
    
    return data


def dict_to_node_state(data: Dict[str, Any]) -> NodeState:
    """Convert dictionary to NodeState."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    if "status" in data_copy and data_copy["status"] is not None:
        data_copy["status"] = string_to_node_execution_status(data_copy["status"])
    
    return NodeState(**data_copy)

def execution_state_to_dict(model: ExecutionState) -> Dict[str, Any]:
    """Convert ExecutionState to dictionary."""
    if not isinstance(model, ExecutionState):
        raise TypeError(f"Expected ExecutionState, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    if "status" in data and data["status"] is not None:
        data["status"] = execution_status_to_string(data["status"])
    
    return data


def dict_to_execution_state(data: Dict[str, Any]) -> ExecutionState:
    """Convert dictionary to ExecutionState."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    if "status" in data_copy and data_copy["status"] is not None:
        data_copy["status"] = string_to_execution_status(data_copy["status"])
    
    return ExecutionState(**data_copy)

def execution_options_to_dict(model: ExecutionOptions) -> Dict[str, Any]:
    """Convert ExecutionOptions to dictionary."""
    if not isinstance(model, ExecutionOptions):
        raise TypeError(f"Expected ExecutionOptions, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    
    return data


def dict_to_execution_options(data: Dict[str, Any]) -> ExecutionOptions:
    """Convert dictionary to ExecutionOptions."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    
    return ExecutionOptions(**data_copy)

def interactive_prompt_data_to_dict(model: InteractivePromptData) -> Dict[str, Any]:
    """Convert InteractivePromptData to dictionary."""
    if not isinstance(model, InteractivePromptData):
        raise TypeError(f"Expected InteractivePromptData, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    
    return data


def dict_to_interactive_prompt_data(data: Dict[str, Any]) -> InteractivePromptData:
    """Convert dictionary to InteractivePromptData."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    
    return InteractivePromptData(**data_copy)

def interactive_response_to_dict(model: InteractiveResponse) -> Dict[str, Any]:
    """Convert InteractiveResponse to dictionary."""
    if not isinstance(model, InteractiveResponse):
        raise TypeError(f"Expected InteractiveResponse, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    
    return data


def dict_to_interactive_response(data: Dict[str, Any]) -> InteractiveResponse:
    """Convert dictionary to InteractiveResponse."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    
    return InteractiveResponse(**data_copy)

def execution_update_to_dict(model: ExecutionUpdate) -> Dict[str, Any]:
    """Convert ExecutionUpdate to dictionary."""
    if not isinstance(model, ExecutionUpdate):
        raise TypeError(f"Expected ExecutionUpdate, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    if "type" in data and data["type"] is not None:
        data["type"] = event_type_to_string(data["type"])
    
    return data


def dict_to_execution_update(data: Dict[str, Any]) -> ExecutionUpdate:
    """Convert dictionary to ExecutionUpdate."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    if "type" in data_copy and data_copy["type"] is not None:
        data_copy["type"] = string_to_event_type(data_copy["type"])
    
    return ExecutionUpdate(**data_copy)

def node_definition_to_dict(model: NodeDefinition) -> Dict[str, Any]:
    """Convert NodeDefinition to dictionary."""
    if not isinstance(model, NodeDefinition):
        raise TypeError(f"Expected NodeDefinition, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    
    return data


def dict_to_node_definition(data: Dict[str, Any]) -> NodeDefinition:
    """Convert dictionary to NodeDefinition."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    
    return NodeDefinition(**data_copy)

def vec2_to_dict(model: Vec2) -> Dict[str, Any]:
    """Convert Vec2 to dictionary."""
    if not isinstance(model, Vec2):
        raise TypeError(f"Expected Vec2, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    
    return data


def dict_to_vec2(data: Dict[str, Any]) -> Vec2:
    """Convert dictionary to Vec2."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    
    return Vec2(**data_copy)

def domain_handle_to_dict(model: DomainHandle) -> Dict[str, Any]:
    """Convert DomainHandle to dictionary."""
    if not isinstance(model, DomainHandle):
        raise TypeError(f"Expected DomainHandle, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    if "label" in data and data["label"] is not None:
        data["label"] = handle_label_to_string(data["label"])
    if "direction" in data and data["direction"] is not None:
        data["direction"] = handle_direction_to_string(data["direction"])
    if "data_type" in data and data["data_type"] is not None:
        data["data_type"] = data_type_to_string(data["data_type"])
    
    return data


def dict_to_domain_handle(data: Dict[str, Any]) -> DomainHandle:
    """Convert dictionary to DomainHandle."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    if "label" in data_copy and data_copy["label"] is not None:
        data_copy["label"] = string_to_handle_label(data_copy["label"])
    if "direction" in data_copy and data_copy["direction"] is not None:
        data_copy["direction"] = string_to_handle_direction(data_copy["direction"])
    if "data_type" in data_copy and data_copy["data_type"] is not None:
        data_copy["data_type"] = string_to_data_type(data_copy["data_type"])
    
    return DomainHandle(**data_copy)

def domain_node_to_dict(model: DomainNode) -> Dict[str, Any]:
    """Convert DomainNode to dictionary."""
    if not isinstance(model, DomainNode):
        raise TypeError(f"Expected DomainNode, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    if "type" in data and data["type"] is not None:
        data["type"] = node_type_to_string(data["type"])
    
    return data


def dict_to_domain_node(data: Dict[str, Any]) -> DomainNode:
    """Convert dictionary to DomainNode."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    if "type" in data_copy and data_copy["type"] is not None:
        data_copy["type"] = string_to_node_type(data_copy["type"])
    
    return DomainNode(**data_copy)

def domain_arrow_to_dict(model: DomainArrow) -> Dict[str, Any]:
    """Convert DomainArrow to dictionary."""
    if not isinstance(model, DomainArrow):
        raise TypeError(f"Expected DomainArrow, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    
    return data


def dict_to_domain_arrow(data: Dict[str, Any]) -> DomainArrow:
    """Convert dictionary to DomainArrow."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    
    return DomainArrow(**data_copy)

def memory_config_to_dict(model: MemoryConfig) -> Dict[str, Any]:
    """Convert MemoryConfig to dictionary."""
    if not isinstance(model, MemoryConfig):
        raise TypeError(f"Expected MemoryConfig, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    
    return data


def dict_to_memory_config(data: Dict[str, Any]) -> MemoryConfig:
    """Convert dictionary to MemoryConfig."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    
    return MemoryConfig(**data_copy)

def memory_settings_to_dict(model: MemorySettings) -> Dict[str, Any]:
    """Convert MemorySettings to dictionary."""
    if not isinstance(model, MemorySettings):
        raise TypeError(f"Expected MemorySettings, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    if "view" in data and data["view"] is not None:
        data["view"] = memory_view_to_string(data["view"])
    
    return data


def dict_to_memory_settings(data: Dict[str, Any]) -> MemorySettings:
    """Convert dictionary to MemorySettings."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    if "view" in data_copy and data_copy["view"] is not None:
        data_copy["view"] = string_to_memory_view(data_copy["view"])
    
    return MemorySettings(**data_copy)

def person_llm_config_to_dict(model: PersonLLMConfig) -> Dict[str, Any]:
    """Convert PersonLLMConfig to dictionary."""
    if not isinstance(model, PersonLLMConfig):
        raise TypeError(f"Expected PersonLLMConfig, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    if "service" in data and data["service"] is not None:
        data["service"] = llm_service_to_string(data["service"])
    
    return data


def dict_to_person_llm_config(data: Dict[str, Any]) -> PersonLLMConfig:
    """Convert dictionary to PersonLLMConfig."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    if "service" in data_copy and data_copy["service"] is not None:
        data_copy["service"] = string_to_llm_service(data_copy["service"])
    
    return PersonLLMConfig(**data_copy)

def domain_person_to_dict(model: DomainPerson) -> Dict[str, Any]:
    """Convert DomainPerson to dictionary."""
    if not isinstance(model, DomainPerson):
        raise TypeError(f"Expected DomainPerson, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    
    return data


def dict_to_domain_person(data: Dict[str, Any]) -> DomainPerson:
    """Convert dictionary to DomainPerson."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    
    return DomainPerson(**data_copy)

def domain_api_key_to_dict(model: DomainApiKey) -> Dict[str, Any]:
    """Convert DomainApiKey to dictionary."""
    if not isinstance(model, DomainApiKey):
        raise TypeError(f"Expected DomainApiKey, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    if "service" in data and data["service"] is not None:
        data["service"] = api_service_type_to_string(data["service"])
    
    return data


def dict_to_domain_api_key(data: Dict[str, Any]) -> DomainApiKey:
    """Convert dictionary to DomainApiKey."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    if "service" in data_copy and data_copy["service"] is not None:
        data_copy["service"] = string_to_api_service_type(data_copy["service"])
    
    return DomainApiKey(**data_copy)

def diagram_metadata_to_dict(model: DiagramMetadata) -> Dict[str, Any]:
    """Convert DiagramMetadata to dictionary."""
    if not isinstance(model, DiagramMetadata):
        raise TypeError(f"Expected DiagramMetadata, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    
    return data


def dict_to_diagram_metadata(data: Dict[str, Any]) -> DiagramMetadata:
    """Convert dictionary to DiagramMetadata."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    
    return DiagramMetadata(**data_copy)

def domain_diagram_to_dict(model: DomainDiagram) -> Dict[str, Any]:
    """Convert DomainDiagram to dictionary."""
    if not isinstance(model, DomainDiagram):
        raise TypeError(f"Expected DomainDiagram, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    
    return data


def dict_to_domain_diagram(data: Dict[str, Any]) -> DomainDiagram:
    """Convert dictionary to DomainDiagram."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    
    return DomainDiagram(**data_copy)

def base_node_data_to_dict(model: BaseNodeData) -> Dict[str, Any]:
    """Convert BaseNodeData to dictionary."""
    if not isinstance(model, BaseNodeData):
        raise TypeError(f"Expected BaseNodeData, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    
    return data


def dict_to_base_node_data(data: Dict[str, Any]) -> BaseNodeData:
    """Convert dictionary to BaseNodeData."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    
    return BaseNodeData(**data_copy)

def start_node_data_to_dict(model: StartNodeData) -> Dict[str, Any]:
    """Convert StartNodeData to dictionary."""
    if not isinstance(model, StartNodeData):
        raise TypeError(f"Expected StartNodeData, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    
    return data


def dict_to_start_node_data(data: Dict[str, Any]) -> StartNodeData:
    """Convert dictionary to StartNodeData."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    
    return StartNodeData(**data_copy)

def condition_node_data_to_dict(model: ConditionNodeData) -> Dict[str, Any]:
    """Convert ConditionNodeData to dictionary."""
    if not isinstance(model, ConditionNodeData):
        raise TypeError(f"Expected ConditionNodeData, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    
    return data


def dict_to_condition_node_data(data: Dict[str, Any]) -> ConditionNodeData:
    """Convert dictionary to ConditionNodeData."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    
    return ConditionNodeData(**data_copy)

def person_job_node_data_to_dict(model: PersonJobNodeData) -> Dict[str, Any]:
    """Convert PersonJobNodeData to dictionary."""
    if not isinstance(model, PersonJobNodeData):
        raise TypeError(f"Expected PersonJobNodeData, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    
    return data


def dict_to_person_job_node_data(data: Dict[str, Any]) -> PersonJobNodeData:
    """Convert dictionary to PersonJobNodeData."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    
    return PersonJobNodeData(**data_copy)

def endpoint_node_data_to_dict(model: EndpointNodeData) -> Dict[str, Any]:
    """Convert EndpointNodeData to dictionary."""
    if not isinstance(model, EndpointNodeData):
        raise TypeError(f"Expected EndpointNodeData, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    
    return data


def dict_to_endpoint_node_data(data: Dict[str, Any]) -> EndpointNodeData:
    """Convert dictionary to EndpointNodeData."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    
    return EndpointNodeData(**data_copy)

def db_node_data_to_dict(model: DBNodeData) -> Dict[str, Any]:
    """Convert DBNodeData to dictionary."""
    if not isinstance(model, DBNodeData):
        raise TypeError(f"Expected DBNodeData, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    if "sub_type" in data and data["sub_type"] is not None:
        data["sub_type"] = db_block_sub_type_to_string(data["sub_type"])
    
    return data


def dict_to_db_node_data(data: Dict[str, Any]) -> DBNodeData:
    """Convert dictionary to DBNodeData."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    if "sub_type" in data_copy and data_copy["sub_type"] is not None:
        data_copy["sub_type"] = string_to_db_block_sub_type(data_copy["sub_type"])
    
    return DBNodeData(**data_copy)

def job_node_data_to_dict(model: JobNodeData) -> Dict[str, Any]:
    """Convert JobNodeData to dictionary."""
    if not isinstance(model, JobNodeData):
        raise TypeError(f"Expected JobNodeData, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    if "code_type" in data and data["code_type"] is not None:
        data["code_type"] = supported_language_to_string(data["code_type"])
    
    return data


def dict_to_job_node_data(data: Dict[str, Any]) -> JobNodeData:
    """Convert dictionary to JobNodeData."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    if "code_type" in data_copy and data_copy["code_type"] is not None:
        data_copy["code_type"] = string_to_supported_language(data_copy["code_type"])
    
    return JobNodeData(**data_copy)

def code_job_node_data_to_dict(model: CodeJobNodeData) -> Dict[str, Any]:
    """Convert CodeJobNodeData to dictionary."""
    if not isinstance(model, CodeJobNodeData):
        raise TypeError(f"Expected CodeJobNodeData, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    if "language" in data and data["language"] is not None:
        data["language"] = supported_language_to_string(data["language"])
    
    return data


def dict_to_code_job_node_data(data: Dict[str, Any]) -> CodeJobNodeData:
    """Convert dictionary to CodeJobNodeData."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    if "language" in data_copy and data_copy["language"] is not None:
        data_copy["language"] = string_to_supported_language(data_copy["language"])
    
    return CodeJobNodeData(**data_copy)

def api_job_node_data_to_dict(model: ApiJobNodeData) -> Dict[str, Any]:
    """Convert ApiJobNodeData to dictionary."""
    if not isinstance(model, ApiJobNodeData):
        raise TypeError(f"Expected ApiJobNodeData, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    if "method" in data and data["method"] is not None:
        data["method"] = http_method_to_string(data["method"])
    
    return data


def dict_to_api_job_node_data(data: Dict[str, Any]) -> ApiJobNodeData:
    """Convert dictionary to ApiJobNodeData."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    if "method" in data_copy and data_copy["method"] is not None:
        data_copy["method"] = string_to_http_method(data_copy["method"])
    
    return ApiJobNodeData(**data_copy)

def user_response_node_data_to_dict(model: UserResponseNodeData) -> Dict[str, Any]:
    """Convert UserResponseNodeData to dictionary."""
    if not isinstance(model, UserResponseNodeData):
        raise TypeError(f"Expected UserResponseNodeData, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    
    return data


def dict_to_user_response_node_data(data: Dict[str, Any]) -> UserResponseNodeData:
    """Convert dictionary to UserResponseNodeData."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    
    return UserResponseNodeData(**data_copy)

def notion_node_data_to_dict(model: NotionNodeData) -> Dict[str, Any]:
    """Convert NotionNodeData to dictionary."""
    if not isinstance(model, NotionNodeData):
        raise TypeError(f"Expected NotionNodeData, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    if "operation" in data and data["operation"] is not None:
        data["operation"] = notion_operation_to_string(data["operation"])
    
    return data


def dict_to_notion_node_data(data: Dict[str, Any]) -> NotionNodeData:
    """Convert dictionary to NotionNodeData."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    if "operation" in data_copy and data_copy["operation"] is not None:
        data_copy["operation"] = string_to_notion_operation(data_copy["operation"])
    
    return NotionNodeData(**data_copy)

def hook_node_data_to_dict(model: HookNodeData) -> Dict[str, Any]:
    """Convert HookNodeData to dictionary."""
    if not isinstance(model, HookNodeData):
        raise TypeError(f"Expected HookNodeData, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    if "hook_type" in data and data["hook_type"] is not None:
        data["hook_type"] = hook_type_to_string(data["hook_type"])
    
    return data


def dict_to_hook_node_data(data: Dict[str, Any]) -> HookNodeData:
    """Convert dictionary to HookNodeData."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    if "hook_type" in data_copy and data_copy["hook_type"] is not None:
        data_copy["hook_type"] = string_to_hook_type(data_copy["hook_type"])
    
    return HookNodeData(**data_copy)

def template_job_node_data_to_dict(model: TemplateJobNodeData) -> Dict[str, Any]:
    """Convert TemplateJobNodeData to dictionary."""
    if not isinstance(model, TemplateJobNodeData):
        raise TypeError(f"Expected TemplateJobNodeData, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    
    return data


def dict_to_template_job_node_data(data: Dict[str, Any]) -> TemplateJobNodeData:
    """Convert dictionary to TemplateJobNodeData."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    
    return TemplateJobNodeData(**data_copy)

def shell_job_node_data_to_dict(model: ShellJobNodeData) -> Dict[str, Any]:
    """Convert ShellJobNodeData to dictionary."""
    if not isinstance(model, ShellJobNodeData):
        raise TypeError(f"Expected ShellJobNodeData, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    
    return data


def dict_to_shell_job_node_data(data: Dict[str, Any]) -> ShellJobNodeData:
    """Convert dictionary to ShellJobNodeData."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    
    return ShellJobNodeData(**data_copy)

def json_schema_validator_node_data_to_dict(model: JsonSchemaValidatorNodeData) -> Dict[str, Any]:
    """Convert JsonSchemaValidatorNodeData to dictionary."""
    if not isinstance(model, JsonSchemaValidatorNodeData):
        raise TypeError(f"Expected JsonSchemaValidatorNodeData, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    
    return data


def dict_to_json_schema_validator_node_data(data: Dict[str, Any]) -> JsonSchemaValidatorNodeData:
    """Convert dictionary to JsonSchemaValidatorNodeData."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    
    return JsonSchemaValidatorNodeData(**data_copy)

def typescript_ast_node_data_to_dict(model: TypescriptAstNodeData) -> Dict[str, Any]:
    """Convert TypescriptAstNodeData to dictionary."""
    if not isinstance(model, TypescriptAstNodeData):
        raise TypeError(f"Expected TypescriptAstNodeData, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    
    return data


def dict_to_typescript_ast_node_data(data: Dict[str, Any]) -> TypescriptAstNodeData:
    """Convert dictionary to TypescriptAstNodeData."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    
    return TypescriptAstNodeData(**data_copy)

def sub_diagram_node_data_to_dict(model: SubDiagramNodeData) -> Dict[str, Any]:
    """Convert SubDiagramNodeData to dictionary."""
    if not isinstance(model, SubDiagramNodeData):
        raise TypeError(f"Expected SubDiagramNodeData, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    
    return data


def dict_to_sub_diagram_node_data(data: Dict[str, Any]) -> SubDiagramNodeData:
    """Convert dictionary to SubDiagramNodeData."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    
    return SubDiagramNodeData(**data_copy)

def message_to_dict(model: Message) -> Dict[str, Any]:
    """Convert Message to dictionary."""
    if not isinstance(model, Message):
        raise TypeError(f"Expected Message, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    
    return data


def dict_to_message(data: Dict[str, Any]) -> Message:
    """Convert dictionary to Message."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    
    return Message(**data_copy)

def conversation_metadata_to_dict(model: ConversationMetadata) -> Dict[str, Any]:
    """Convert ConversationMetadata to dictionary."""
    if not isinstance(model, ConversationMetadata):
        raise TypeError(f"Expected ConversationMetadata, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    
    return data


def dict_to_conversation_metadata(data: Dict[str, Any]) -> ConversationMetadata:
    """Convert dictionary to ConversationMetadata."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    
    return ConversationMetadata(**data_copy)

def conversation_to_dict(model: Conversation) -> Dict[str, Any]:
    """Convert Conversation to dictionary."""
    if not isinstance(model, Conversation):
        raise TypeError(f"Expected Conversation, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    
    return data


def dict_to_conversation(data: Dict[str, Any]) -> Conversation:
    """Convert dictionary to Conversation."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    
    return Conversation(**data_copy)

def memory_state_to_dict(model: MemoryState) -> Dict[str, Any]:
    """Convert MemoryState to dictionary."""
    if not isinstance(model, MemoryState):
        raise TypeError(f"Expected MemoryState, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    
    return data


def dict_to_memory_state(data: Dict[str, Any]) -> MemoryState:
    """Convert dictionary to MemoryState."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    
    return MemoryState(**data_copy)

def sub_diagram_node_data_to_dict(model: Sub_diagramNodeData) -> Dict[str, Any]:
    """Convert Sub_diagramNodeData to dictionary."""
    if not isinstance(model, Sub_diagramNodeData):
        raise TypeError(f"Expected Sub_diagramNodeData, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    
    return data


def dict_to_sub_diagram_node_data(data: Dict[str, Any]) -> Sub_diagramNodeData:
    """Convert dictionary to Sub_diagramNodeData."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    
    return Sub_diagramNodeData(**data_copy)

def sub_diagram_node_to_dict(model: Sub_diagramNode) -> Dict[str, Any]:
    """Convert Sub_diagramNode to dictionary."""
    if not isinstance(model, Sub_diagramNode):
        raise TypeError(f"Expected Sub_diagramNode, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    
    return data


def dict_to_sub_diagram_node(data: Dict[str, Any]) -> Sub_diagramNode:
    """Convert dictionary to Sub_diagramNode."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    
    return Sub_diagramNode(**data_copy)

def endpoint_node_data_to_dict(model: EndpointNodeData) -> Dict[str, Any]:
    """Convert EndpointNodeData to dictionary."""
    if not isinstance(model, EndpointNodeData):
        raise TypeError(f"Expected EndpointNodeData, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    
    return data


def dict_to_endpoint_node_data(data: Dict[str, Any]) -> EndpointNodeData:
    """Convert dictionary to EndpointNodeData."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    
    return EndpointNodeData(**data_copy)

def endpoint_node_to_dict(model: EndpointNode) -> Dict[str, Any]:
    """Convert EndpointNode to dictionary."""
    if not isinstance(model, EndpointNode):
        raise TypeError(f"Expected EndpointNode, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    
    return data


def dict_to_endpoint_node(data: Dict[str, Any]) -> EndpointNode:
    """Convert dictionary to EndpointNode."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    
    return EndpointNode(**data_copy)

def hook_node_data_to_dict(model: HookNodeData) -> Dict[str, Any]:
    """Convert HookNodeData to dictionary."""
    if not isinstance(model, HookNodeData):
        raise TypeError(f"Expected HookNodeData, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    if "hook_type" in data and data["hook_type"] is not None:
        data["hook_type"] = hook_type_to_string(data["hook_type"])
    
    return data


def dict_to_hook_node_data(data: Dict[str, Any]) -> HookNodeData:
    """Convert dictionary to HookNodeData."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    if "hook_type" in data_copy and data_copy["hook_type"] is not None:
        data_copy["hook_type"] = string_to_hook_type(data_copy["hook_type"])
    
    return HookNodeData(**data_copy)

def hook_node_to_dict(model: HookNode) -> Dict[str, Any]:
    """Convert HookNode to dictionary."""
    if not isinstance(model, HookNode):
        raise TypeError(f"Expected HookNode, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    
    return data


def dict_to_hook_node(data: Dict[str, Any]) -> HookNode:
    """Convert dictionary to HookNode."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    
    return HookNode(**data_copy)

def person_job_node_data_to_dict(model: Person_jobNodeData) -> Dict[str, Any]:
    """Convert Person_jobNodeData to dictionary."""
    if not isinstance(model, Person_jobNodeData):
        raise TypeError(f"Expected Person_jobNodeData, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    
    return data


def dict_to_person_job_node_data(data: Dict[str, Any]) -> Person_jobNodeData:
    """Convert dictionary to Person_jobNodeData."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    
    return Person_jobNodeData(**data_copy)

def person_job_node_to_dict(model: Person_jobNode) -> Dict[str, Any]:
    """Convert Person_jobNode to dictionary."""
    if not isinstance(model, Person_jobNode):
        raise TypeError(f"Expected Person_jobNode, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    
    return data


def dict_to_person_job_node(data: Dict[str, Any]) -> Person_jobNode:
    """Convert dictionary to Person_jobNode."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    
    return Person_jobNode(**data_copy)

def db_node_data_to_dict(model: DbNodeData) -> Dict[str, Any]:
    """Convert DbNodeData to dictionary."""
    if not isinstance(model, DbNodeData):
        raise TypeError(f"Expected DbNodeData, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    
    return data


def dict_to_db_node_data(data: Dict[str, Any]) -> DbNodeData:
    """Convert dictionary to DbNodeData."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    
    return DbNodeData(**data_copy)

def db_node_to_dict(model: DbNode) -> Dict[str, Any]:
    """Convert DbNode to dictionary."""
    if not isinstance(model, DbNode):
        raise TypeError(f"Expected DbNode, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    
    return data


def dict_to_db_node(data: Dict[str, Any]) -> DbNode:
    """Convert dictionary to DbNode."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    
    return DbNode(**data_copy)

def typescript_ast_node_data_to_dict(model: Typescript_astNodeData) -> Dict[str, Any]:
    """Convert Typescript_astNodeData to dictionary."""
    if not isinstance(model, Typescript_astNodeData):
        raise TypeError(f"Expected Typescript_astNodeData, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    
    return data


def dict_to_typescript_ast_node_data(data: Dict[str, Any]) -> Typescript_astNodeData:
    """Convert dictionary to Typescript_astNodeData."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    
    return Typescript_astNodeData(**data_copy)

def typescript_ast_node_to_dict(model: Typescript_astNode) -> Dict[str, Any]:
    """Convert Typescript_astNode to dictionary."""
    if not isinstance(model, Typescript_astNode):
        raise TypeError(f"Expected Typescript_astNode, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    
    return data


def dict_to_typescript_ast_node(data: Dict[str, Any]) -> Typescript_astNode:
    """Convert dictionary to Typescript_astNode."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    
    return Typescript_astNode(**data_copy)

def shell_job_node_data_to_dict(model: Shell_jobNodeData) -> Dict[str, Any]:
    """Convert Shell_jobNodeData to dictionary."""
    if not isinstance(model, Shell_jobNodeData):
        raise TypeError(f"Expected Shell_jobNodeData, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    
    return data


def dict_to_shell_job_node_data(data: Dict[str, Any]) -> Shell_jobNodeData:
    """Convert dictionary to Shell_jobNodeData."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    
    return Shell_jobNodeData(**data_copy)

def shell_job_node_to_dict(model: Shell_jobNode) -> Dict[str, Any]:
    """Convert Shell_jobNode to dictionary."""
    if not isinstance(model, Shell_jobNode):
        raise TypeError(f"Expected Shell_jobNode, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    
    return data


def dict_to_shell_job_node(data: Dict[str, Any]) -> Shell_jobNode:
    """Convert dictionary to Shell_jobNode."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    
    return Shell_jobNode(**data_copy)

def condition_node_data_to_dict(model: ConditionNodeData) -> Dict[str, Any]:
    """Convert ConditionNodeData to dictionary."""
    if not isinstance(model, ConditionNodeData):
        raise TypeError(f"Expected ConditionNodeData, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    
    return data


def dict_to_condition_node_data(data: Dict[str, Any]) -> ConditionNodeData:
    """Convert dictionary to ConditionNodeData."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    
    return ConditionNodeData(**data_copy)

def condition_node_to_dict(model: ConditionNode) -> Dict[str, Any]:
    """Convert ConditionNode to dictionary."""
    if not isinstance(model, ConditionNode):
        raise TypeError(f"Expected ConditionNode, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    
    return data


def dict_to_condition_node(data: Dict[str, Any]) -> ConditionNode:
    """Convert dictionary to ConditionNode."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    
    return ConditionNode(**data_copy)

def code_job_node_data_to_dict(model: Code_jobNodeData) -> Dict[str, Any]:
    """Convert Code_jobNodeData to dictionary."""
    if not isinstance(model, Code_jobNodeData):
        raise TypeError(f"Expected Code_jobNodeData, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    
    return data


def dict_to_code_job_node_data(data: Dict[str, Any]) -> Code_jobNodeData:
    """Convert dictionary to Code_jobNodeData."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    
    return Code_jobNodeData(**data_copy)

def code_job_node_to_dict(model: Code_jobNode) -> Dict[str, Any]:
    """Convert Code_jobNode to dictionary."""
    if not isinstance(model, Code_jobNode):
        raise TypeError(f"Expected Code_jobNode, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    
    return data


def dict_to_code_job_node(data: Dict[str, Any]) -> Code_jobNode:
    """Convert dictionary to Code_jobNode."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    
    return Code_jobNode(**data_copy)

def api_job_node_data_to_dict(model: Api_jobNodeData) -> Dict[str, Any]:
    """Convert Api_jobNodeData to dictionary."""
    if not isinstance(model, Api_jobNodeData):
        raise TypeError(f"Expected Api_jobNodeData, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    
    return data


def dict_to_api_job_node_data(data: Dict[str, Any]) -> Api_jobNodeData:
    """Convert dictionary to Api_jobNodeData."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    
    return Api_jobNodeData(**data_copy)

def api_job_node_to_dict(model: Api_jobNode) -> Dict[str, Any]:
    """Convert Api_jobNode to dictionary."""
    if not isinstance(model, Api_jobNode):
        raise TypeError(f"Expected Api_jobNode, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    
    return data


def dict_to_api_job_node(data: Dict[str, Any]) -> Api_jobNode:
    """Convert dictionary to Api_jobNode."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    
    return Api_jobNode(**data_copy)

def template_job_node_data_to_dict(model: Template_jobNodeData) -> Dict[str, Any]:
    """Convert Template_jobNodeData to dictionary."""
    if not isinstance(model, Template_jobNodeData):
        raise TypeError(f"Expected Template_jobNodeData, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    
    return data


def dict_to_template_job_node_data(data: Dict[str, Any]) -> Template_jobNodeData:
    """Convert dictionary to Template_jobNodeData."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    
    return Template_jobNodeData(**data_copy)

def template_job_node_to_dict(model: Template_jobNode) -> Dict[str, Any]:
    """Convert Template_jobNode to dictionary."""
    if not isinstance(model, Template_jobNode):
        raise TypeError(f"Expected Template_jobNode, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    
    return data


def dict_to_template_job_node(data: Dict[str, Any]) -> Template_jobNode:
    """Convert dictionary to Template_jobNode."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    
    return Template_jobNode(**data_copy)

def json_schema_validator_node_data_to_dict(model: Json_schema_validatorNodeData) -> Dict[str, Any]:
    """Convert Json_schema_validatorNodeData to dictionary."""
    if not isinstance(model, Json_schema_validatorNodeData):
        raise TypeError(f"Expected Json_schema_validatorNodeData, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    
    return data


def dict_to_json_schema_validator_node_data(data: Dict[str, Any]) -> Json_schema_validatorNodeData:
    """Convert dictionary to Json_schema_validatorNodeData."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    
    return Json_schema_validatorNodeData(**data_copy)

def json_schema_validator_node_to_dict(model: Json_schema_validatorNode) -> Dict[str, Any]:
    """Convert Json_schema_validatorNode to dictionary."""
    if not isinstance(model, Json_schema_validatorNode):
        raise TypeError(f"Expected Json_schema_validatorNode, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    
    return data


def dict_to_json_schema_validator_node(data: Dict[str, Any]) -> Json_schema_validatorNode:
    """Convert dictionary to Json_schema_validatorNode."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    
    return Json_schema_validatorNode(**data_copy)

def user_response_node_data_to_dict(model: User_responseNodeData) -> Dict[str, Any]:
    """Convert User_responseNodeData to dictionary."""
    if not isinstance(model, User_responseNodeData):
        raise TypeError(f"Expected User_responseNodeData, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    
    return data


def dict_to_user_response_node_data(data: Dict[str, Any]) -> User_responseNodeData:
    """Convert dictionary to User_responseNodeData."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    
    return User_responseNodeData(**data_copy)

def user_response_node_to_dict(model: User_responseNode) -> Dict[str, Any]:
    """Convert User_responseNode to dictionary."""
    if not isinstance(model, User_responseNode):
        raise TypeError(f"Expected User_responseNode, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    
    return data


def dict_to_user_response_node(data: Dict[str, Any]) -> User_responseNode:
    """Convert dictionary to User_responseNode."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    
    return User_responseNode(**data_copy)

def start_node_data_to_dict(model: StartNodeData) -> Dict[str, Any]:
    """Convert StartNodeData to dictionary."""
    if not isinstance(model, StartNodeData):
        raise TypeError(f"Expected StartNodeData, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    
    return data


def dict_to_start_node_data(data: Dict[str, Any]) -> StartNodeData:
    """Convert dictionary to StartNodeData."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    
    return StartNodeData(**data_copy)

def start_node_to_dict(model: StartNode) -> Dict[str, Any]:
    """Convert StartNode to dictionary."""
    if not isinstance(model, StartNode):
        raise TypeError(f"Expected StartNode, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    
    return data


def dict_to_start_node(data: Dict[str, Any]) -> StartNode:
    """Convert dictionary to StartNode."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    
    return StartNode(**data_copy)


# Generic conversion helpers
def model_to_dict(model: BaseModel) -> Dict[str, Any]:
    """Convert any Pydantic model to dictionary."""
    model_type = type(model).__name__
    converter_name = f"{model_type[0].lower()}{model_type[1:]}_to_dict"
    
    # Try to find specific converter
    converter = globals().get(converter_name)
    if converter:
        return converter(model)
    
    # Fallback to generic conversion
    return model.dict(exclude_none=True)


def dict_to_model(data: Dict[str, Any], model_type: Type[T]) -> T:
    """Convert dictionary to specified model type."""
    type_name = model_type.__name__
    converter_name = f"dict_to_{type_name[0].lower()}{type_name[1:]}"
    
    # Try to find specific converter
    converter = globals().get(converter_name)
    if converter:
        return converter(data)
    
    # Fallback to direct instantiation
    return model_type(**data)


# JSON conversion helpers
def model_to_json(model: BaseModel, **kwargs) -> str:
    """Convert model to JSON string."""
    return json.dumps(model_to_dict(model), **kwargs)


def json_to_model(json_str: str, model_type: Type[T]) -> T:
    """Convert JSON string to model."""
    data = json.loads(json_str)
    return dict_to_model(data, model_type)


# Batch conversion helpers
def models_to_dicts(models: List[BaseModel]) -> List[Dict[str, Any]]:
    """Convert list of models to list of dictionaries."""
    return [model_to_dict(model) for model in models]


def dicts_to_models(data_list: List[Dict[str, Any]], model_type: Type[T]) -> List[T]:
    """Convert list of dictionaries to list of models."""
    return [dict_to_model(data, model_type) for data in data_list]


# Node-specific conversion helpers
NODE_TYPE_MAP = {
    "base": BaseNodeData,
    "start": StartNodeData,
    "condition": ConditionNodeData,
    "person_job": PersonJobNodeData,
    "endpoint": EndpointNodeData,
    "db": DBNodeData,
    "job": JobNodeData,
    "code_job": CodeJobNodeData,
    "api_job": ApiJobNodeData,
    "user_response": UserResponseNodeData,
    "notion": NotionNodeData,
    "hook": HookNodeData,
    "template_job": TemplateJobNodeData,
    "shell_job": ShellJobNodeData,
    "json_schema_validator": JsonSchemaValidatorNodeData,
    "typescript_ast": TypescriptAstNodeData,
    "sub_diagram": SubDiagramNodeData,
    "sub_diagram": Sub_diagramNodeData,
    "endpoint": EndpointNodeData,
    "hook": HookNodeData,
    "person_job": Person_jobNodeData,
    "db": DbNodeData,
    "typescript_ast": Typescript_astNodeData,
    "shell_job": Shell_jobNodeData,
    "condition": ConditionNodeData,
    "code_job": Code_jobNodeData,
    "api_job": Api_jobNodeData,
    "template_job": Template_jobNodeData,
    "json_schema_validator": Json_schema_validatorNodeData,
    "user_response": User_responseNodeData,
    "start": StartNodeData,
}


def create_node_from_dict(node_type: str, data: Dict[str, Any]) -> BaseModel:
    """Create a node model from node type and data."""
    model_class = NODE_TYPE_MAP.get(node_type)
    if not model_class:
        raise ValueError(f"Unknown node type: {node_type}")
    
    return dict_to_model(data, model_class)


def node_to_dict(node: BaseModel) -> Dict[str, Any]:
    """Convert any node model to dictionary with type information."""
    data = model_to_dict(node)
    
    # Add node type if not present
    if "type" not in data:
        # Infer node type from class name
        class_name = type(node).__name__
        if class_name.endswith("NodeData"):
            node_type = class_name[:-8].lower()  # Remove 'NodeData'
            # Convert camelCase to snake_case
            import re
            node_type = re.sub(r'(?<!^)(?=[A-Z])', '_', node_type).lower()
            data["type"] = node_type
        elif class_name.endswith("Node"):
            node_type = class_name[:-4].lower()  # Remove 'Node'
            # Convert camelCase to snake_case
            import re
            node_type = re.sub(r'(?<!^)(?=[A-Z])', '_', node_type).lower()
            data["type"] = node_type
    
    return data


# Export all conversion functions
__all__ = [
    # Enum converters
    "llm_service_to_string",
    "string_to_llm_service",
    "api_service_type_to_string",
    "string_to_api_service_type",
    "notion_operation_to_string",
    "string_to_notion_operation",
    "tool_type_to_string",
    "string_to_tool_type",
    "execution_status_to_string",
    "string_to_execution_status",
    "node_execution_status_to_string",
    "string_to_node_execution_status",
    "event_type_to_string",
    "string_to_event_type",
    "node_type_to_string",
    "string_to_node_type",
    "handle_direction_to_string",
    "string_to_handle_direction",
    "handle_label_to_string",
    "string_to_handle_label",
    "data_type_to_string",
    "string_to_data_type",
    "forgetting_mode_to_string",
    "string_to_forgetting_mode",
    "memory_view_to_string",
    "string_to_memory_view",
    "diagram_format_to_string",
    "string_to_diagram_format",
    "db_block_sub_type_to_string",
    "string_to_db_block_sub_type",
    "content_type_to_string",
    "string_to_content_type",
    "supported_language_to_string",
    "string_to_supported_language",
    "http_method_to_string",
    "string_to_http_method",
    "hook_type_to_string",
    "string_to_hook_type",
    "hook_trigger_mode_to_string",
    "string_to_hook_trigger_mode",
    # Model converters
    "llm_service_to_dict",
    "dict_to_llm_service",
    "api_service_type_to_dict",
    "dict_to_api_service_type",
    "notion_operation_to_dict",
    "dict_to_notion_operation",
    "tool_type_to_dict",
    "dict_to_tool_type",
    "execution_status_to_dict",
    "dict_to_execution_status",
    "node_execution_status_to_dict",
    "dict_to_node_execution_status",
    "event_type_to_dict",
    "dict_to_event_type",
    "node_type_to_dict",
    "dict_to_node_type",
    "handle_direction_to_dict",
    "dict_to_handle_direction",
    "handle_label_to_dict",
    "dict_to_handle_label",
    "data_type_to_dict",
    "dict_to_data_type",
    "forgetting_mode_to_dict",
    "dict_to_forgetting_mode",
    "memory_view_to_dict",
    "dict_to_memory_view",
    "diagram_format_to_dict",
    "dict_to_diagram_format",
    "db_block_sub_type_to_dict",
    "dict_to_db_block_sub_type",
    "content_type_to_dict",
    "dict_to_content_type",
    "supported_language_to_dict",
    "dict_to_supported_language",
    "http_method_to_dict",
    "dict_to_http_method",
    "hook_type_to_dict",
    "dict_to_hook_type",
    "hook_trigger_mode_to_dict",
    "dict_to_hook_trigger_mode",
    "graph_ql_domain_person_type_to_dict",
    "dict_to_graph_ql_domain_person_type",
    "store_diagram_to_dict",
    "dict_to_store_diagram",
    "tool_config_to_dict",
    "dict_to_tool_config",
    "web_search_result_to_dict",
    "dict_to_web_search_result",
    "image_generation_result_to_dict",
    "dict_to_image_generation_result",
    "tool_output_to_dict",
    "dict_to_tool_output",
    "chat_result_to_dict",
    "dict_to_chat_result",
    "llm_request_options_to_dict",
    "dict_to_llm_request_options",
    "token_usage_to_dict",
    "dict_to_token_usage",
    "node_state_to_dict",
    "dict_to_node_state",
    "execution_state_to_dict",
    "dict_to_execution_state",
    "execution_options_to_dict",
    "dict_to_execution_options",
    "interactive_prompt_data_to_dict",
    "dict_to_interactive_prompt_data",
    "interactive_response_to_dict",
    "dict_to_interactive_response",
    "execution_update_to_dict",
    "dict_to_execution_update",
    "node_definition_to_dict",
    "dict_to_node_definition",
    "vec2_to_dict",
    "dict_to_vec2",
    "domain_handle_to_dict",
    "dict_to_domain_handle",
    "domain_node_to_dict",
    "dict_to_domain_node",
    "domain_arrow_to_dict",
    "dict_to_domain_arrow",
    "memory_config_to_dict",
    "dict_to_memory_config",
    "memory_settings_to_dict",
    "dict_to_memory_settings",
    "person_llm_config_to_dict",
    "dict_to_person_llm_config",
    "domain_person_to_dict",
    "dict_to_domain_person",
    "domain_api_key_to_dict",
    "dict_to_domain_api_key",
    "diagram_metadata_to_dict",
    "dict_to_diagram_metadata",
    "domain_diagram_to_dict",
    "dict_to_domain_diagram",
    "base_node_data_to_dict",
    "dict_to_base_node_data",
    "start_node_data_to_dict",
    "dict_to_start_node_data",
    "condition_node_data_to_dict",
    "dict_to_condition_node_data",
    "person_job_node_data_to_dict",
    "dict_to_person_job_node_data",
    "endpoint_node_data_to_dict",
    "dict_to_endpoint_node_data",
    "db_node_data_to_dict",
    "dict_to_db_node_data",
    "job_node_data_to_dict",
    "dict_to_job_node_data",
    "code_job_node_data_to_dict",
    "dict_to_code_job_node_data",
    "api_job_node_data_to_dict",
    "dict_to_api_job_node_data",
    "user_response_node_data_to_dict",
    "dict_to_user_response_node_data",
    "notion_node_data_to_dict",
    "dict_to_notion_node_data",
    "hook_node_data_to_dict",
    "dict_to_hook_node_data",
    "template_job_node_data_to_dict",
    "dict_to_template_job_node_data",
    "shell_job_node_data_to_dict",
    "dict_to_shell_job_node_data",
    "json_schema_validator_node_data_to_dict",
    "dict_to_json_schema_validator_node_data",
    "typescript_ast_node_data_to_dict",
    "dict_to_typescript_ast_node_data",
    "sub_diagram_node_data_to_dict",
    "dict_to_sub_diagram_node_data",
    "message_to_dict",
    "dict_to_message",
    "conversation_metadata_to_dict",
    "dict_to_conversation_metadata",
    "conversation_to_dict",
    "dict_to_conversation",
    "memory_state_to_dict",
    "dict_to_memory_state",
    "sub_diagram_node_data_to_dict",
    "dict_to_sub_diagram_node_data",
    "sub_diagram_node_to_dict",
    "dict_to_sub_diagram_node",
    "endpoint_node_data_to_dict",
    "dict_to_endpoint_node_data",
    "endpoint_node_to_dict",
    "dict_to_endpoint_node",
    "hook_node_data_to_dict",
    "dict_to_hook_node_data",
    "hook_node_to_dict",
    "dict_to_hook_node",
    "person_job_node_data_to_dict",
    "dict_to_person_job_node_data",
    "person_job_node_to_dict",
    "dict_to_person_job_node",
    "db_node_data_to_dict",
    "dict_to_db_node_data",
    "db_node_to_dict",
    "dict_to_db_node",
    "typescript_ast_node_data_to_dict",
    "dict_to_typescript_ast_node_data",
    "typescript_ast_node_to_dict",
    "dict_to_typescript_ast_node",
    "shell_job_node_data_to_dict",
    "dict_to_shell_job_node_data",
    "shell_job_node_to_dict",
    "dict_to_shell_job_node",
    "condition_node_data_to_dict",
    "dict_to_condition_node_data",
    "condition_node_to_dict",
    "dict_to_condition_node",
    "code_job_node_data_to_dict",
    "dict_to_code_job_node_data",
    "code_job_node_to_dict",
    "dict_to_code_job_node",
    "api_job_node_data_to_dict",
    "dict_to_api_job_node_data",
    "api_job_node_to_dict",
    "dict_to_api_job_node",
    "template_job_node_data_to_dict",
    "dict_to_template_job_node_data",
    "template_job_node_to_dict",
    "dict_to_template_job_node",
    "json_schema_validator_node_data_to_dict",
    "dict_to_json_schema_validator_node_data",
    "json_schema_validator_node_to_dict",
    "dict_to_json_schema_validator_node",
    "user_response_node_data_to_dict",
    "dict_to_user_response_node_data",
    "user_response_node_to_dict",
    "dict_to_user_response_node",
    "start_node_data_to_dict",
    "dict_to_start_node_data",
    "start_node_to_dict",
    "dict_to_start_node",
    # Generic helpers
    "model_to_dict",
    "dict_to_model",
    "model_to_json",
    "json_to_model",
    "models_to_dicts",
    "dicts_to_models",
    # Node helpers
    "create_node_from_dict",
    "node_to_dict",
    "NODE_TYPE_MAP",
]