# Generated GraphQL Schema from Domain Models
# Generated at: 2025-09-08T17:35:49.454163
# DO NOT EDIT - Generated by DiPeO

# ============================================================================
# Scalars
# ============================================================================

"""Unique identifier for node"""
scalar NodeID

"""Unique identifier for arrow"""
scalar ArrowID

"""Unique identifier for handle"""
scalar HandleID

"""Unique identifier for person"""
scalar PersonID

"""Unique identifier for apikey"""
scalar ApiKeyID

"""Unique identifier for diagram"""
scalar DiagramID

"""Unique identifier for execution"""
scalar ExecutionID

"""Unique identifier for serializednodeoutput"""
scalar SerializedNodeOutput

"""Unique identifier for personmemorymessage"""
scalar PersonMemoryMessage

"""The `JSON` scalar type represents JSON values"""
scalar JSON

"""JSON object type"""
scalar JsonDict

"""Any JSON value"""
scalar JsonValue

"""Array type"""
scalar Array

"""The `ID` scalar type represents a unique identifier"""
scalar ID

# ============================================================================
# Enums
# ============================================================================

enum DataType {
  ANY
  STRING
  NUMBER
  BOOLEAN
  OBJECT
  ARRAY
}

enum ContentType {
  RAW_TEXT
  CONVERSATION_STATE
  OBJECT
  EMPTY
  GENERIC
  VARIABLE
  BINARY
}

enum HandleDirection {
  INPUT
  OUTPUT
}

enum HandleLabel {
  DEFAULT
  FIRST
  CONDTRUE
  CONDFALSE
  SUCCESS
  ERROR
  RESULTS
}

enum DiagramFormat {
  NATIVE
  LIGHT
  READABLE
}

enum Status {
  PENDING
  RUNNING
  PAUSED
  COMPLETED
  FAILED
  ABORTED
  SKIPPED
  MAXITER_REACHED
}

enum FlowStatus {
  WAITING
  READY
  RUNNING
  BLOCKED
}

enum CompletionStatus {
  SUCCESS
  FAILED
  SKIPPED
  MAX_ITER
}

enum ExecutionPhase {
  MEMORY_SELECTION
  DIRECT_EXECUTION
  DECISION_EVALUATION
  DEFAULT
}

enum EventType {
  EXECUTION_STARTED
  EXECUTION_COMPLETED
  EXECUTION_ERROR
  EXECUTION_STATUS_CHANGED
  NODE_STARTED
  NODE_COMPLETED
  NODE_ERROR
  NODE_OUTPUT
  NODE_STATUS_CHANGED
  NODE_PROGRESS
  METRICS_COLLECTED
  OPTIMIZATION_SUGGESTED
  WEBHOOK_RECEIVED
  INTERACTIVE_PROMPT
  INTERACTIVE_RESPONSE
  EXECUTION_UPDATE
  EXECUTION_LOG
  KEEPALIVE
}

enum LLMService {
  OPENAI
  ANTHROPIC
  CLAUDE_CODE
  GOOGLE
  GEMINI
  BEDROCK
  VERTEX
  DEEPSEEK
  OLLAMA
}

enum APIServiceType {
  OPENAI
  ANTHROPIC
  GOOGLE
  GEMINI
  BEDROCK
  VERTEX
  DEEPSEEK
  OLLAMA
  CLAUDE_CODE
}

enum ToolType {
  WEB_SEARCH
  WEB_SEARCH_PREVIEW
  IMAGE_GENERATION
}

enum ToolSelection {
  NONE
  IMAGE
  WEBSEARCH
}

enum AuthType {
  NONE
  BEARER
  BASIC
  API_KEY
}

enum RetryStrategy {
  NONE
  LINEAR
  EXPONENTIAL
  FIBONACCI
  CONSTANT
  EXPONENTIAL_BACKOFF
  LINEAR_BACKOFF
  FIXED_DELAY
}

enum DBBlockSubType {
  FIXED_PROMPT
  FILE
  CODE
  API_TOOL
}

enum SupportedLanguage {
  PYTHON
  TYPESCRIPT
  BASH
  SHELL
}

enum HttpMethod {
  GET
  POST
  PUT
  DELETE
  PATCH
}

enum HookType {
  SHELL
  WEBHOOK
  PYTHON
  FILE
}

enum HookTriggerMode {
  NONE
  MANUAL
  HOOK
}

enum ConditionType {
  DETECT_MAX_ITERATIONS
  CHECK_NODES_EXECUTED
  CUSTOM
  LLM_DECISION
}

enum TemplateEngine {
  INTERNAL
  JINJA2
}

enum NodeType {
  START
  PERSON_JOB
  CONDITION
  CODE_JOB
  API_JOB
  ENDPOINT
  DB
  USER_RESPONSE
  HOOK
  TEMPLATE_JOB
  JSON_SCHEMA_VALIDATOR
  TYPESCRIPT_AST
  SUB_DIAGRAM
  INTEGRATED_API
}

enum Severity {
  ERROR
  WARNING
  INFO
}

enum EventPriority {
  LOW
  NORMAL
  HIGH
  CRITICAL
}

# ============================================================================
# Types
# ============================================================================
type IntegrationProvider {
}
type Vec2 {
  x: Int
  y: Int
}
type DomainHandle {
  id: ID
  node_id: ID
  label: HandleLabel
  direction: HandleDirection
  data_type: DataType
  position: JSON
}
type DomainNode {
  id: ID
  type: NodeType
  position: Vec2
  data: JsonDict
}
type DomainArrow {
  id: ID
  source: ID
  target: ID
  content_type: JSON
  label: JSON
  packing: JSON
  execution_priority: JSON
  data: JSON
}
type PersonLLMConfig {
  service: LLMService
  model: String
  api_key_id: ID
  system_prompt: JSON
  prompt_file: JSON
}
type DomainPerson {
  id: ID
  label: String
  llm_config: PersonLLMConfig
  type: 'person'
}
type DomainApiKey {
  id: ID
  label: String
  service: APIServiceType
  key: String
}
type DiagramMetadata {
  id: JSON
  name: JSON
  description: JSON
  version: String
  created: String
  modified: String
  author: JSON
  tags: JSON
  format: JSON
}
type DomainDiagram {
  nodes: [DomainNode]
  handles: [DomainHandle]
  arrows: [DomainArrow]
  persons: [DomainPerson]
  metadata: JSON
}
type LLMUsage {
  input: Int
  output: Int
  cached: JSON
  total: Int
}
type NodeState {
  status: Status
  started_at: JSON
  ended_at: JSON
  error: JSON
  llm_usage: JSON
  output: JSON
}
type NodeMetrics {
  node_id: String
  node_type: String
  start_time: Float
  end_time: JSON
  duration_ms: JSON
  memory_usage: JSON
  llm_usage: JSON
  error: JSON
  dependencies: [String]
}
type Bottleneck {
  node_id: String
  node_type: String
  duration_ms: Float
  percentage: Float
}
type ExecutionMetrics {
  execution_id: ID
  start_time: Float
  end_time: JSON
  total_duration_ms: JSON
  node_metrics: JSON
  critical_path: [String]
  parallelizable_groups: [[String]]
  bottlenecks: [Bottleneck]
}
type EnvelopeMeta {
  node_id: String
  llm_usage: LLMUsage
  execution_time: Float
  retry_count: Float
  error: String
  error_type: String
  timestamp: JSON
}
type SerializedEnvelope {
  envelope_format: true
  id: String
  trace_id: String
  produced_by: String
  content_type: String
  schema_id: String
  serialization_format: String
  body: JSON
  meta: EnvelopeMeta
  representations: JSON
}
type ExecutionState {
  id: ID
  status: Status
  diagram_id: JSON
  started_at: String
  ended_at: JSON
  node_states: JSON
  node_outputs: JSON
  llm_usage: LLMUsage
  error: JSON
  variables: JsonDict
  metadata: JsonDict
  duration_seconds: JSON
  is_active: Boolean
  exec_counts: JSON
  executed_nodes: [String]
  metrics: JSON
}
type ExecutionOptions {
  mode: JSON
  timeout: Int
  variables: JsonDict
  debug: Boolean
}
type InteractiveResponse {
  node_id: ID
  response: String
  timestamp: String
}
type ExecutionUpdate {
  type: EventType
  execution_id: ID
  node_id: ID
  status: Status
  result: JsonValue
  error: String
  timestamp: String
  total_tokens: Float
  node_type: String
  tokens: Float
  data: JSON
}
type NodeDefinition {
  type: String
  node_schema: JSON
  handler: JSON
  requires_services: [String]
  description: String
}
type Message {
  id: String
  from_person_id: JSON
  to_person_id: ID
  content: String
  timestamp: String
  token_count: Float
  message_type: JSON
  metadata: JsonDict
}
type ConversationMetadata {
  started_at: String
  last_message_at: String
  total_tokens: Float
  message_count: Float
  context_resets: Float
}
type Conversation {
  messages: [Message]
  metadata: ConversationMetadata
}
type ToolConfig {
  type: ToolType
  enabled: Boolean
  config: JSON
}
type WebSearchResult {
  url: String
  title: String
  snippet: String
  score: Float
}
type ImageGenerationResult {
  image_data: String
  format: String
  width: Int
  height: Int
}
type ToolOutput {
  type: ToolType
  result: JSON
  raw_response: JSON
}
type ChatResult {
  text: String
  llm_usage: JSON
  raw_response: JSON
  tool_outputs: JSON
}
type LLMRequestOptions {
  temperature: Float
  max_tokens: Float
  top_p: Float
  n: Float
  tools: [ToolConfig]
  response_format: JSON
}

# ============================================================================
# Input Types
# ============================================================================

# ============================================================================
# Node Data Union (for generic node data field)
# ============================================================================