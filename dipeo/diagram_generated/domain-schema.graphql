







# Generated GraphQL Schema from Domain Models
# Generated at: 2025-08-03T21:10:44.111045
# DO NOT EDIT - Generated by DiPeO

# ============================================================================
# Scalars
# ============================================================================

"""Unique identifier for node"""
scalar NodeID

"""Unique identifier for arrow"""
scalar ArrowID

"""Unique identifier for handle"""
scalar HandleID

"""Unique identifier for person"""
scalar PersonID

"""Unique identifier for apikey"""
scalar ApiKeyID

"""Unique identifier for diagram"""
scalar DiagramID

"""Unique identifier for execution"""
scalar ExecutionID

"""Arbitrary JSON value"""
scalar JSONScalar

# ============================================================================
# Enums
# ============================================================================

enum NodeType {
  START
  PERSON_JOB
  CONDITION
  CODE_JOB
  API_JOB
  ENDPOINT
  DB
  USER_RESPONSE
  NOTION
  PERSON_BATCH_JOB
  HOOK
  TEMPLATE_JOB
  JSON_SCHEMA_VALIDATOR
  TYPESCRIPT_AST
  SUB_DIAGRAM
  INTEGRATED_API
}

enum HandleDirection {
  INPUT
  OUTPUT
}

enum HandleLabel {
  DEFAULT
  FIRST
  CONDTRUE
  CONDFALSE
  SUCCESS
  ERROR
  RESULTS
}

enum DataType {
  ANY
  STRING
  NUMBER
  BOOLEAN
  OBJECT
  ARRAY
}

enum MemoryView {
  ALL_INVOLVED
  SENT_BY_ME
  SENT_TO_ME
  SYSTEM_AND_ME
  CONVERSATION_PAIRS
  ALL_MESSAGES
}

enum MemoryProfile {
  FULL
  FOCUSED
  MINIMAL
  GOLDFISH
  CUSTOM
}

enum DiagramFormat {
  NATIVE
  LIGHT
  READABLE
}

enum DBBlockSubType {
  FIXED_PROMPT
  FILE
  CODE
  API_TOOL
}

enum ContentType {
  RAW_TEXT
  CONVERSATION_STATE
  OBJECT
  EMPTY
  GENERIC
  VARIABLE
}

enum SupportedLanguage {
  PYTHON
  TYPESCRIPT
  BASH
  SHELL
}

enum HttpMethod {
  GET
  POST
  PUT
  DELETE
  PATCH
}

enum HookType {
  SHELL
  WEBHOOK
  PYTHON
  FILE
}

enum HookTriggerMode {
  NONE
  MANUAL
  HOOK
}

enum ExecutionStatus {
  PENDING
  RUNNING
  PAUSED
  COMPLETED
  FAILED
  ABORTED
  SKIPPED
}

enum NodeExecutionStatus {
  PENDING
  RUNNING
  PAUSED
  COMPLETED
  FAILED
  ABORTED
  SKIPPED
  MAXITER_REACHED
}

enum EventType {
  EXECUTION_STATUS_CHANGED
  NODE_STATUS_CHANGED
  NODE_PROGRESS
  INTERACTIVE_PROMPT
  INTERACTIVE_RESPONSE
  EXECUTION_ERROR
  EXECUTION_UPDATE
}

enum LLMService {
  OPENAI
  ANTHROPIC
  GOOGLE
  GEMINI
  BEDROCK
  VERTEX
  DEEPSEEK
}

enum APIServiceType {
  OPENAI
  ANTHROPIC
  GOOGLE
  GEMINI
  BEDROCK
  VERTEX
  DEEPSEEK
  NOTION
  GOOGLE_SEARCH
  SLACK
  GITHUB
  JIRA
}

enum ToolType {
  WEB_SEARCH
  WEB_SEARCH_PREVIEW
  IMAGE_GENERATION
}

enum ToolSelection {
  NONE
  IMAGE
  WEBSEARCH
}

enum ConditionType {
  DETECT_MAX_ITERATIONS
  CHECK_NODES_EXECUTED
  CUSTOM
}

enum TemplateEngine {
  INTERNAL
  JINJA2
  HANDLEBARS
}

enum AuthType {
  NONE
  BEARER
  BASIC
  API_KEY
}

enum NotionOperation {
  CREATE_PAGE
  UPDATE_PAGE
  READ_PAGE
  DELETE_PAGE
  CREATE_DATABASE
  QUERY_DATABASE
  UPDATE_DATABASE
}

# ============================================================================
# Types
# ============================================================================
type Vec2 {
  x: Int!
  y: Int!
}
type DomainHandle {
  id: ID!
  node_id: ID!
  label: HandleLabel!
  direction: HandleDirection!
  data_type: DataType!
  position: String
}
type DomainNode {
  id: ID!
  type: NodeType!
  position: Vec2!
  data: JSONScalar!
}
type DomainArrow {
  id: ID!
  source: ID!
  target: ID!
  content_type: ContentType
  label: String
  data: JSONScalar
}
type MemorySettings {
  view: MemoryView!
  max_messages: Float
  preserve_system: Boolean
}
type PersonLLMConfig {
  service: LLMService!
  model: String!
  api_key_id: ID!
  system_prompt: String
}
type DomainPerson {
  id: ID!
  label: String!
  llm_config: PersonLLMConfig!
  type: String!
}
type DomainApiKey {
  id: ID!
  label: String!
  service: APIServiceType!
  key: String
}
type DiagramMetadata {
  id: ID
  name: String
  description: String
  version: String!
  created: String!
  modified: String!
  author: String
  tags: [String]
  format: String
}
type DomainDiagram {
  nodes: [DomainNode]!
  handles: [DomainHandle]!
  arrows: [DomainArrow]!
  persons: [DomainPerson]!
  metadata: DiagramMetadata
}
type BaseNodeData {
  label: String!
  flipped: Boolean
}
type TokenUsage {
  input: Int!
  output: Int!
  cached: Int
  total: Int
}
type NodeState {
  status: NodeExecutionStatus!
  started_at: String
  ended_at: String
  error: String
  token_usage: TokenUsage
  output: JSONScalar
}
type ExecutionState {
  id: ID!
  status: ExecutionStatus!
  diagram_id: ID
  started_at: String!
  ended_at: String
  node_states: JSONScalar!
  node_outputs: JSONScalar!
  token_usage: TokenUsage!
  error: String
  variables: JSONScalar
  duration_seconds: Float
  is_active: Boolean
  exec_counts: JSONScalar!
  executed_nodes: [String]!
}
type ExecutionOptions {
  mode: String
  timeout: Int
  variables: JSONScalar
  debug: Boolean
}
type InteractivePromptData {
  node_id: ID!
  prompt: String!
  timeout: Int
  default_value: String
}
type InteractiveResponse {
  node_id: ID!
  response: String!
  timestamp: String!
}
type NodeDefinition {
  type: String!
  node_schema: JSONScalar!
  handler: JSONScalar!
  requires_services: [String]
  description: String
}

"""Base message interface for conversations
Used by both execution (PersonMemory) and person domains"""
type Message {
  id: String
  from_person_id: String!
  to_person_id: ID!
  content: String!
  timestamp: String
  token_count: Float
  message_type: String!
  metadata: JSONScalar
}
type ConversationMetadata {
  started_at: String!
  last_message_at: String!
  total_tokens: Float!
  message_count: Float!
  context_resets: Float!
}
type Conversation {
  messages: [Message]!
  metadata: ConversationMetadata
}
type StartNodeData {
  trigger_mode: HookTriggerMode!
  custom_data: JSONScalar
  output_data_structure: JSONScalar
  hook_event: String
  hook_filters: JSONScalar
}
type ConditionNodeData {
  condition_type: ConditionType
  expression: String
  node_indices: [String]
}
type PersonJobNodeData {
  person: ID
  first_only_prompt: String!
  default_prompt: String
  max_iteration: Float!
  memory_profile: MemoryProfile
  memory_settings: MemorySettings
  tools: ToolSelection
}
type CodeJobNodeData {
  language: SupportedLanguage!
  filePath: String
  code: String
  functionName: String
  timeout: Int
}
type ApiJobNodeData {
  url: String!
  method: HttpMethod!
  headers: JSONScalar
  params: JSONScalar
  body: JSONScalar
  timeout: Int
  auth_type: AuthType
  auth_config: JSONScalar
}
type EndpointNodeData {
  save_to_file: Boolean!
  file_name: String
}
type DBNodeData {
  file: [String]
  collection: String
  sub_type: DBBlockSubType!
  operation: String!
  query: String
  data: JSONScalar
  serialize_json: Boolean
}
type UserResponseNodeData {
  prompt: String!
  timeout: Int!
}
type NotionNodeData {
  api_key: String!
  database_id: String!
  operation: NotionOperation!
  page_id: String
}
type HookNodeData {
  hook_type: HookType!
  command: String
  args: [String]
  env: JSONScalar
  cwd: String
  url: String
  method: HttpMethod
  headers: JSONScalar
  script: String
  function_name: String
  file_path: String
  format: String
  timeout: Int
  retry_count: Float
  retry_delay: Float
}
type TemplateJobNodeData {
  template_path: String
  template_content: String
  output_path: String
  variables: JSONScalar
  engine: TemplateEngine
}
type JsonSchemaValidatorNodeData {
  schema_path: String
  schema: JSONScalar
  data_path: String
  strict_mode: Boolean
  error_on_extra: Boolean
}
type TypescriptAstNodeData {
  source: String
  extractPatterns: [String]
  includeJSDoc: Boolean
  parseMode: String
}
type SubDiagramNodeData {
  diagram_name: String
  diagram_format: DiagramFormat
  diagram_data: JSONScalar
  batch: Boolean
  batch_input_key: String
  batch_parallel: Boolean
  ignoreIfSub: Boolean
}
type IntegratedApiNodeData {
  provider: APIServiceType!
  operation: String!
  config: JSONScalar
  resource_id: String
  timeout: Int
  max_retries: Float
}
type ToolConfig {
  type: ToolType!
  enabled: Boolean
  config: JSONScalar
}
type WebSearchResult {
  url: String!
  title: String!
  snippet: String!
  score: Float
}
type ImageGenerationResult {
  image_data: String!
  format: String!
  width: Int
  height: Int
}
type ToolOutput {
  type: ToolType!
  result: String!
  raw_response: JSONScalar
}
type ChatResult {
  text: String!
  token_usage: TokenUsage
  raw_response: JSONScalar
  tool_outputs: [ToolOutput]
}
type LLMRequestOptions {
  temperature: Float
  max_tokens: Float
  top_p: Float
  n: Float
  tools: [ToolConfig]
  response_format: JSONScalar
}

# ============================================================================
# Input Types
# ============================================================================
input ExecutionUpdate {
  type: EventType!
  execution_id: ID!
  node_id: ID = null
  status: NodeExecutionStatus = null
  result: JSONScalar = null
  error: String = null
  timestamp: String = null
  total_tokens: Float = null
  node_type: String = null
  tokens: Float = null
  data: JSONScalar = null
}

# ============================================================================
# Node Data Union (for generic node data field)
# ============================================================================

"""
Union type for all possible node data configurations.
In practice, DiPeO uses JSONScalar for the data field, but this union
documents all possible node data types.
"""
union NodeData = BaseNodeData | StartNodeData | ConditionNodeData | PersonJobNodeData | CodeJobNodeData | ApiJobNodeData | EndpointNodeData | DBNodeData | UserResponseNodeData | NotionNodeData | HookNodeData | TemplateJobNodeData | JsonSchemaValidatorNodeData | TypescriptAstNodeData | SubDiagramNodeData | IntegratedApiNodeData