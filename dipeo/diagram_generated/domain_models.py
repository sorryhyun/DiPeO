







#!/usr/bin/env python3
# __generated__ by DiPeO
"""
Auto-generated Python models from TypeScript domain models.
DO NOT EDIT THIS FILE DIRECTLY - Modify TypeScript sources and regenerate.
"""
from __future__ import annotations

from enum import *
from typing import *
from pydantic import *

from .enums import *
from .integrations import *


ApiKeyID = NewType('ApiKeyID', str)
ArrowID = NewType('ArrowID', str)
DiagramID = NewType('DiagramID', str)
ExecutionID = NewType('ExecutionID', str)
HandleID = NewType('HandleID', str)
HookID = NewType('HookID', str)
NodeID = NewType('NodeID', str)
PersonID = NewType('PersonID', str)
TaskID = NewType('TaskID', str)





class Vec2(BaseModel):
    """Vec2 model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    x: int
    y: int


class DomainHandle(BaseModel):
    """DomainHandle model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    id: HandleID
    node_id: NodeID
    label: HandleLabel
    direction: HandleDirection
    data_type: DataType
    position: Optional[str] = Field(default=None)


class DomainNode(BaseModel):
    """DomainNode model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    id: NodeID
    type: NodeType
    position: Vec2
    data: Dict[str, Any]


class DomainArrow(BaseModel):
    """DomainArrow model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    id: ArrowID
    source: HandleID
    target: HandleID
    content_type: Optional[ContentType] = Field(default=None)
    label: Optional[str] = Field(default=None)
    data: Optional[Dict[str, Any]] = Field(default=None)


class MemorySettings(BaseModel):
    """MemorySettings model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    view: MemoryView
    max_messages: Optional[float] = Field(default=None)
    preserve_system: Optional[bool] = Field(default=None)


class PersonLLMConfig(BaseModel):
    """PersonLLMConfig model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    service: LLMService
    model: str
    api_key_id: ApiKeyID
    system_prompt: Optional[str] = Field(default=None)
    prompt_file: Optional[str] = Field(default=None)


class DomainPerson(BaseModel):
    """DomainPerson model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    id: PersonID
    label: str
    llm_config: PersonLLMConfig
    type: Literal["person"]


class DomainApiKey(BaseModel):
    """DomainApiKey model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    id: ApiKeyID
    label: str
    service: APIServiceType
    key: Optional[str] = Field(default=None)


class DiagramMetadata(BaseModel):
    """DiagramMetadata model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    id: Optional[DiagramID] = Field(default=None)
    name: Optional[str] = Field(default=None)
    description: Optional[str] = Field(default=None)
    version: str
    created: str
    modified: str
    author: Optional[str] = Field(default=None)
    tags: Optional[List[str]] = Field(default=None)
    format: Optional[str] = Field(default=None)


class DomainDiagram(BaseModel):
    """DomainDiagram model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    nodes: List[DomainNode]
    handles: List[DomainHandle]
    arrows: List[DomainArrow]
    persons: List[DomainPerson]
    metadata: Optional[DiagramMetadata] = Field(default=None)


class TokenUsage(BaseModel):
    """TokenUsage model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    input: int
    output: int
    cached: Optional[int] = Field(default=None)
    total: Optional[int] = Field(default=None)


class NodeState(BaseModel):
    """NodeState model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    status: NodeExecutionStatus
    started_at: Optional[str] = Field(default=None)
    ended_at: Optional[str] = Field(default=None)
    error: Optional[str] = Field(default=None)
    token_usage: Optional[TokenUsage] = Field(default=None)
    output: Optional[Dict[str, Any]] = Field(default=None)


class NodeMetrics(BaseModel):
    """NodeMetrics model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    node_id: str
    node_type: str
    start_time: float
    end_time: Optional[float] = Field(default=None)
    duration_ms: Optional[float] = Field(default=None)
    memory_usage: Optional[float] = Field(default=None)
    token_usage: Optional[TokenUsage] = Field(default=None)
    error: Optional[str] = Field(default=None)
    dependencies: Optional[List[str]] = Field(default=None)


class ExecutionMetrics(BaseModel):
    """ExecutionMetrics model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    execution_id: ExecutionID
    start_time: float
    end_time: Optional[float] = Field(default=None)
    total_duration_ms: Optional[float] = Field(default=None)
    node_metrics: Dict[str, NodeMetrics]
    critical_path: Optional[List[str]] = Field(default=None)
    parallelizable_groups: Optional[List[List[str]]] = Field(default=None)
    bottlenecks: Optional[List[Dict[str, Any]]] = Field(default=None)


class ExecutionState(BaseModel):
    """ExecutionState model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    id: ExecutionID
    status: ExecutionStatus
    diagram_id: Optional[DiagramID] = Field(default=None)
    started_at: str
    ended_at: Optional[str] = Field(default=None)
    node_states: Dict[str, NodeState]
    node_outputs: Dict[str, Dict[str, Any]]
    token_usage: TokenUsage
    error: Optional[str] = Field(default=None)
    variables: Optional[Dict[str, Any]] = Field(default=None)
    duration_seconds: Optional[float] = Field(default=None)
    is_active: Optional[bool] = Field(default=None)
    exec_counts: Dict[str, float]
    executed_nodes: List[str]
    metrics: Optional[ExecutionMetrics] = Field(default=None)


class ExecutionOptions(BaseModel):
    """ExecutionOptions model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    mode: Optional[Literal["normal", "debug", "monitor"]] = Field(default=None)
    timeout: Optional[int] = Field(default=None)
    variables: Optional[Dict[str, Any]] = Field(default=None)
    debug: Optional[bool] = Field(default=None)


class InteractivePromptData(BaseModel):
    """InteractivePromptData model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    node_id: NodeID
    prompt: str
    timeout: Optional[int] = Field(default=None)
    default_value: Optional[str] = Field(default=None)


class InteractiveResponse(BaseModel):
    """InteractiveResponse model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    node_id: NodeID
    response: str
    timestamp: str


class ExecutionUpdate(BaseModel):
    """ExecutionUpdate model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    type: EventType
    execution_id: ExecutionID
    node_id: Optional[NodeID] = Field(default=None)
    status: Optional[NodeExecutionStatus] = Field(default=None)
    result: Optional[Any] = Field(default=None)
    error: Optional[str] = Field(default=None)
    timestamp: Optional[str] = Field(default=None)
    total_tokens: Optional[float] = Field(default=None)
    node_type: Optional[str] = Field(default=None)
    tokens: Optional[float] = Field(default=None)
    data: Optional[Dict[str, Any]] = Field(default=None)


class NodeDefinition(BaseModel):
    """NodeDefinition model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    type: str
    node_schema: Any
    handler: Any
    requires_services: Optional[List[str]] = Field(default=None)
    description: Optional[str] = Field(default=None)


class Message(BaseModel):
    """Message model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    id: Optional[str] = Field(default=None)
    from_person_id: Union[PersonID, Literal["system"]]
    to_person_id: PersonID
    content: str
    timestamp: Optional[str] = Field(default=None)
    token_count: Optional[float] = Field(default=None)
    message_type: Literal["person_to_person", "system_to_person", "person_to_system"]
    metadata: Optional[Dict[str, Any]] = Field(default=None)


class ConversationMetadata(BaseModel):
    """ConversationMetadata model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    started_at: str
    last_message_at: str
    total_tokens: float
    message_count: float
    context_resets: float


class Conversation(BaseModel):
    """Conversation model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    messages: List[Message]
    metadata: Optional[ConversationMetadata] = Field(default=None)


class ToolConfig(BaseModel):
    """ToolConfig model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    type: ToolType
    enabled: Optional[bool] = Field(default=None)
    config: Optional[Dict[str, Any]] = Field(default=None)


class WebSearchResult(BaseModel):
    """WebSearchResult model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    url: str
    title: str
    snippet: str
    score: Optional[float] = Field(default=None)


class ImageGenerationResult(BaseModel):
    """ImageGenerationResult model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    image_data: str
    format: str
    width: Optional[int] = Field(default=None)
    height: Optional[int] = Field(default=None)


class ToolOutput(BaseModel):
    """ToolOutput model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    type: ToolType
    result: Union[List[WebSearchResult], ImageGenerationResult, Any]
    raw_response: Optional[Any] = Field(default=None)


class ChatResult(BaseModel):
    """ChatResult model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    text: str
    token_usage: Optional[TokenUsage] = Field(default=None)
    raw_response: Optional[Any] = Field(default=None)
    tool_outputs: Optional[List[ToolOutput]] = Field(default=None)


class LLMRequestOptions(BaseModel):
    """LLMRequestOptions model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    temperature: Optional[float] = Field(default=None)
    max_tokens: Optional[float] = Field(default=None)
    top_p: Optional[float] = Field(default=None)
    n: Optional[float] = Field(default=None)
    tools: Optional[List[ToolConfig]] = Field(default=None)
    response_format: Optional[Any] = Field(default=None)


class BaseNodeData(BaseModel):
    """BaseNodeData model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    label: str
    flipped: Optional[bool] = Field(default=None)


class ApiJobNodeData(BaseNodeData):
    """ApiJobNodeData model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    url: str
    method: HttpMethod
    headers: Optional[Dict[str, str]] = Field(default=None)
    params: Optional[Dict[str, Any]] = Field(default=None)
    body: Optional[Any] = Field(default=None)
    timeout: Optional[int] = Field(default=None)
    auth_type: Optional[AuthType] = Field(default=None)
    auth_config: Optional[Dict[str, str]] = Field(default=None)


class CodeJobNodeData(BaseNodeData):
    """CodeJobNodeData model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    language: SupportedLanguage
    filePath: Optional[str] = Field(default=None)
    code: Optional[str] = Field(default=None)
    functionName: Optional[str] = Field(default=None)
    timeout: Optional[int] = Field(default=None)


class ConditionNodeData(BaseNodeData):
    """ConditionNodeData model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    condition_type: Optional[ConditionType] = Field(default=None)
    expression: Optional[str] = Field(default=None)
    node_indices: Optional[List[str]] = Field(default=None)


class DBNodeData(BaseNodeData):
    """DBNodeData model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    file: Optional[List[Union[str]]] = Field(default=None)
    collection: Optional[str] = Field(default=None)
    sub_type: DBBlockSubType
    operation: str
    query: Optional[str] = Field(default=None)
    data: Optional[Dict[str, Any]] = Field(default=None)
    serialize_json: Optional[bool] = Field(default=None)
    glob: Optional[bool] = Field(default=None)


class EndpointNodeData(BaseNodeData):
    """EndpointNodeData model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    save_to_file: bool
    file_name: Optional[str] = Field(default=None)


class HookNodeData(BaseNodeData):
    """HookNodeData model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    hook_type: HookType
    command: Optional[str] = Field(default=None)
    args: Optional[List[str]] = Field(default=None)
    env: Optional[Dict[str, str]] = Field(default=None)
    cwd: Optional[str] = Field(default=None)
    url: Optional[str] = Field(default=None)
    method: Optional[HttpMethod] = Field(default=None)
    headers: Optional[Dict[str, str]] = Field(default=None)
    script: Optional[str] = Field(default=None)
    function_name: Optional[str] = Field(default=None)
    file_path: Optional[str] = Field(default=None)
    format: Optional[Literal["json", "yaml", "text"]] = Field(default=None)
    timeout: Optional[int] = Field(default=None)
    retry_count: Optional[float] = Field(default=None)
    retry_delay: Optional[float] = Field(default=None)


class IntegratedApiNodeData(BaseNodeData):
    """IntegratedApiNodeData model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    provider: APIServiceType
    operation: str
    config: Optional[Dict[str, Any]] = Field(default=None)
    resource_id: Optional[str] = Field(default=None)
    timeout: Optional[int] = Field(default=None)
    max_retries: Optional[float] = Field(default=None)


class JsonSchemaValidatorNodeData(BaseNodeData):
    """JsonSchemaValidatorNodeData model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    schema_path: Optional[str] = Field(default=None)
    json_schema: Optional[Dict[str, Any]] = Field(default=None)
    data_path: Optional[str] = Field(default=None)
    strict_mode: Optional[bool] = Field(default=None)
    error_on_extra: Optional[bool] = Field(default=None)


class NotionNodeData(BaseNodeData):
    """NotionNodeData model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    api_key: str
    database_id: str
    operation: NotionOperation
    page_id: Optional[str] = Field(default=None)


class PersonJobNodeData(BaseNodeData):
    """PersonJobNodeData model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    person: Optional[PersonID] = Field(default=None)
    first_only_prompt: str
    default_prompt: Optional[str] = Field(default=None)
    prompt_file: Optional[str] = Field(default=None)
    max_iteration: float
    memory_profile: Optional[MemoryProfile] = Field(default=None)
    memory_settings: Optional[MemorySettings] = Field(default=None)
    tools: Optional[ToolSelection] = Field(default=None)
    batch: Optional[bool] = Field(default=None)
    batch_input_key: Optional[str] = Field(default=None)
    batch_parallel: Optional[bool] = Field(default=None)
    max_concurrent: Optional[float] = Field(default=None)


class StartNodeData(BaseNodeData):
    """StartNodeData model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    trigger_mode: HookTriggerMode
    custom_data: Optional[Dict[str, Union[str, float, bool]]] = Field(default=None)
    output_data_structure: Optional[Dict[str, str]] = Field(default=None)
    hook_event: Optional[str] = Field(default=None)
    hook_filters: Optional[Dict[str, Any]] = Field(default=None)


class SubDiagramNodeData(BaseNodeData):
    """SubDiagramNodeData model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    diagram_name: Optional[str] = Field(default=None)
    diagram_format: Optional[DiagramFormat] = Field(default=None)
    diagram_data: Optional[Dict[str, Any]] = Field(default=None)
    batch: Optional[bool] = Field(default=None)
    batch_input_key: Optional[str] = Field(default=None)
    batch_parallel: Optional[bool] = Field(default=None)
    ignoreIfSub: Optional[bool] = Field(default=None)


class TemplateJobNodeData(BaseNodeData):
    """TemplateJobNodeData model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    template_path: Optional[str] = Field(default=None)
    template_content: Optional[str] = Field(default=None)
    output_path: Optional[str] = Field(default=None)
    variables: Optional[Dict[str, Any]] = Field(default=None)
    engine: Optional[TemplateEngine] = Field(default=None)


class TypescriptAstNodeData(BaseNodeData):
    """TypescriptAstNodeData model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    source: Optional[str] = Field(default=None)
    extractPatterns: Optional[List[str]] = Field(default=None)
    includeJSDoc: Optional[bool] = Field(default=None)
    parseMode: Optional[Literal["module", "script"]] = Field(default=None)


class UserResponseNodeData(BaseNodeData):
    """UserResponseNodeData model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    prompt: str
    timeout: int


# Type aliases that reference models
PersonMemoryMessage = Message
PersonBatchJobNodeData = PersonJobNodeData




def parse_handle_id(handle_id: str) -> tuple[NodeID, str, str]:
    """Parse a handle ID into its components."""
    parts = handle_id.split('_')
    if len(parts) < 3:
        raise ValueError(f"Invalid handle ID format: {handle_id}")
    
    node_id = parts[0]
    direction = parts[-1]
    label = '_'.join(parts[1:-1])
    
    return NodeID(node_id), label, direction

def create_handle_id(node_id: NodeID, label: str, direction: str) -> HandleID:
    """Create a handle ID from components."""
    return HandleID(f"{node_id}_{label}_{direction}")


# Type guard functions
def is_vec2(obj: Any) -> bool:
    """Check if object is a Vec2."""
    return isinstance(obj, Vec2)
def is_domain_handle(obj: Any) -> bool:
    """Check if object is a DomainHandle."""
    return isinstance(obj, DomainHandle)
def is_domain_node(obj: Any) -> bool:
    """Check if object is a DomainNode."""
    return isinstance(obj, DomainNode)
def is_domain_arrow(obj: Any) -> bool:
    """Check if object is a DomainArrow."""
    return isinstance(obj, DomainArrow)
def is_memory_settings(obj: Any) -> bool:
    """Check if object is a MemorySettings."""
    return isinstance(obj, MemorySettings)
def is_person_llm_config(obj: Any) -> bool:
    """Check if object is a PersonLLMConfig."""
    return isinstance(obj, PersonLLMConfig)
def is_domain_person(obj: Any) -> bool:
    """Check if object is a DomainPerson."""
    return isinstance(obj, DomainPerson)
def is_domain_api_key(obj: Any) -> bool:
    """Check if object is a DomainApiKey."""
    return isinstance(obj, DomainApiKey)
def is_diagram_metadata(obj: Any) -> bool:
    """Check if object is a DiagramMetadata."""
    return isinstance(obj, DiagramMetadata)
def is_domain_diagram(obj: Any) -> bool:
    """Check if object is a DomainDiagram."""
    return isinstance(obj, DomainDiagram)
def is_token_usage(obj: Any) -> bool:
    """Check if object is a TokenUsage."""
    return isinstance(obj, TokenUsage)
def is_node_state(obj: Any) -> bool:
    """Check if object is a NodeState."""
    return isinstance(obj, NodeState)
def is_node_metrics(obj: Any) -> bool:
    """Check if object is a NodeMetrics."""
    return isinstance(obj, NodeMetrics)
def is_execution_metrics(obj: Any) -> bool:
    """Check if object is a ExecutionMetrics."""
    return isinstance(obj, ExecutionMetrics)
def is_execution_state(obj: Any) -> bool:
    """Check if object is a ExecutionState."""
    return isinstance(obj, ExecutionState)
def is_execution_options(obj: Any) -> bool:
    """Check if object is a ExecutionOptions."""
    return isinstance(obj, ExecutionOptions)
def is_interactive_prompt_data(obj: Any) -> bool:
    """Check if object is a InteractivePromptData."""
    return isinstance(obj, InteractivePromptData)
def is_interactive_response(obj: Any) -> bool:
    """Check if object is a InteractiveResponse."""
    return isinstance(obj, InteractiveResponse)
def is_execution_update(obj: Any) -> bool:
    """Check if object is a ExecutionUpdate."""
    return isinstance(obj, ExecutionUpdate)
def is_node_definition(obj: Any) -> bool:
    """Check if object is a NodeDefinition."""
    return isinstance(obj, NodeDefinition)
def is_message(obj: Any) -> bool:
    """Check if object is a Message."""
    return isinstance(obj, Message)
def is_conversation_metadata(obj: Any) -> bool:
    """Check if object is a ConversationMetadata."""
    return isinstance(obj, ConversationMetadata)
def is_conversation(obj: Any) -> bool:
    """Check if object is a Conversation."""
    return isinstance(obj, Conversation)
def is_tool_config(obj: Any) -> bool:
    """Check if object is a ToolConfig."""
    return isinstance(obj, ToolConfig)
def is_web_search_result(obj: Any) -> bool:
    """Check if object is a WebSearchResult."""
    return isinstance(obj, WebSearchResult)
def is_image_generation_result(obj: Any) -> bool:
    """Check if object is a ImageGenerationResult."""
    return isinstance(obj, ImageGenerationResult)
def is_tool_output(obj: Any) -> bool:
    """Check if object is a ToolOutput."""
    return isinstance(obj, ToolOutput)
def is_chat_result(obj: Any) -> bool:
    """Check if object is a ChatResult."""
    return isinstance(obj, ChatResult)
def is_llm_request_options(obj: Any) -> bool:
    """Check if object is a LLMRequestOptions."""
    return isinstance(obj, LLMRequestOptions)
def is_base_node_data(obj: Any) -> bool:
    """Check if object is a BaseNodeData."""
    return isinstance(obj, BaseNodeData)
def is_api_job_node_data(obj: Any) -> bool:
    """Check if object is a ApiJobNodeData."""
    return isinstance(obj, ApiJobNodeData)
def is_code_job_node_data(obj: Any) -> bool:
    """Check if object is a CodeJobNodeData."""
    return isinstance(obj, CodeJobNodeData)
def is_condition_node_data(obj: Any) -> bool:
    """Check if object is a ConditionNodeData."""
    return isinstance(obj, ConditionNodeData)
def is_db_node_data(obj: Any) -> bool:
    """Check if object is a DBNodeData."""
    return isinstance(obj, DBNodeData)
def is_endpoint_node_data(obj: Any) -> bool:
    """Check if object is a EndpointNodeData."""
    return isinstance(obj, EndpointNodeData)
def is_hook_node_data(obj: Any) -> bool:
    """Check if object is a HookNodeData."""
    return isinstance(obj, HookNodeData)
def is_integrated_api_node_data(obj: Any) -> bool:
    """Check if object is a IntegratedApiNodeData."""
    return isinstance(obj, IntegratedApiNodeData)
def is_json_schema_validator_node_data(obj: Any) -> bool:
    """Check if object is a JsonSchemaValidatorNodeData."""
    return isinstance(obj, JsonSchemaValidatorNodeData)
def is_notion_node_data(obj: Any) -> bool:
    """Check if object is a NotionNodeData."""
    return isinstance(obj, NotionNodeData)
def is_person_job_node_data(obj: Any) -> bool:
    """Check if object is a PersonJobNodeData."""
    return isinstance(obj, PersonJobNodeData)
def is_start_node_data(obj: Any) -> bool:
    """Check if object is a StartNodeData."""
    return isinstance(obj, StartNodeData)
def is_sub_diagram_node_data(obj: Any) -> bool:
    """Check if object is a SubDiagramNodeData."""
    return isinstance(obj, SubDiagramNodeData)
def is_template_job_node_data(obj: Any) -> bool:
    """Check if object is a TemplateJobNodeData."""
    return isinstance(obj, TemplateJobNodeData)
def is_typescript_ast_node_data(obj: Any) -> bool:
    """Check if object is a TypescriptAstNodeData."""
    return isinstance(obj, TypescriptAstNodeData)
def is_user_response_node_data(obj: Any) -> bool:
    """Check if object is a UserResponseNodeData."""
    return isinstance(obj, UserResponseNodeData)


# Constants from TypeScript
PROVIDER_OPERATIONS = {"[APIServiceType.ANTHROPIC]": [], "[APIServiceType.BEDROCK]": [], "[APIServiceType.DEEPSEEK]": [], "[APIServiceType.GEMINI]": [], "[APIServiceType.GITHUB]": ["create_issue", "update_issue", "list_issues", "create_pr", "merge_pr", "get_repo_info"], "[APIServiceType.GOOGLE]": [], "[APIServiceType.GOOGLE_SEARCH]": ["search"], "[APIServiceType.JIRA]": ["create_issue", "update_issue", "search_issues", "transition_issue", "add_comment"], "[APIServiceType.NOTION]": ["create_page", "update_page", "read_page", "delete_page", "create_database", "query_database", "update_database"], "[APIServiceType.OLLAMA]": [], "[APIServiceType.OPENAI]": [], "[APIServiceType.SLACK]": ["send_message", "read_channel", "create_channel", "list_channels", "upload_file"], "[APIServiceType.VERTEX]": []}