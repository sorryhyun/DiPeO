







#!/usr/bin/env python3
# __generated__ by DiPeO
"""
Auto-generated Python models from TypeScript domain models.
DO NOT EDIT THIS FILE DIRECTLY - Modify TypeScript sources and regenerate.
"""
from __future__ import annotations

from enum import Enum, auto
from typing import Any, Dict, List, Literal, Optional, Union, NewType
from pydantic import BaseModel, Field, ConfigDict

from dipeo.domain.type_defs import JsonValue, JsonDict, JsonList, JsonPrimitive
from .enums import *
from .integrations import *


# Basic types
class Vec2(BaseModel):
    """2D vector for positions"""
    x: float
    y: float


ApiKeyID = NewType('ApiKeyID', str)
ArrowID = NewType('ArrowID', str)
DiagramID = NewType('DiagramID', str)
ExecutionID = NewType('ExecutionID', str)
HandleID = NewType('HandleID', str)
HookID = NewType('HookID', str)
NodeID = NewType('NodeID', str)
PersonID = NewType('PersonID', str)
TaskID = NewType('TaskID', str)








def parse_handle_id(handle_id: str) -> tuple[NodeID, str, str]:
    """Parse a handle ID into its components."""
    parts = handle_id.split('_')
    if len(parts) < 3:
        raise ValueError(f"Invalid handle ID format: {handle_id}")
    
    node_id = parts[0]
    direction = parts[-1]
    label = '_'.join(parts[1:-1])
    
    return NodeID(node_id), label, direction

def create_handle_id(node_id: NodeID, label: str, direction: str) -> HandleID:
    """Create a handle ID from components."""
    return HandleID(f"{node_id}_{label}_{direction}")


# Type guard functions

