#!/usr/bin/env python3
# __generated__ by DiPeO
"""
Auto-generated Python models from TypeScript domain models.
DO NOT EDIT THIS FILE DIRECTLY - Modify TypeScript sources and regenerate.
"""
from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Literal, NewType, Optional, Union
from pydantic import BaseModel, ConfigDict, Field

# ============ Type Aliases ============

NodeID = string & { readonly __brand: 'NodeID'; }

ArrowID = string & { readonly __brand: 'ArrowID'; }

HandleID = string & { readonly __brand: 'HandleID'; }

PersonID = string & { readonly __brand: 'PersonID'; }

ApiKeyID = string & { readonly __brand: 'ApiKeyID'; }

DiagramID = string & { readonly __brand: 'DiagramID'; }

PersonBatchJobNodeData = PersonJobNodeData

ExecutionID = string & { readonly __brand: 'ExecutionID'; }

PersonMemoryMessage = Message

PersonMemoryState = MemoryState

PersonMemoryConfig = MemoryConfig

NodeCategory = Literal["control" | "ai" | "compute" | "data" | "integration" | "interaction" | "validation" | "utility"]

FieldType = Literal["string" | "number" | "boolean" | "object" | "array" | "enum" | "any"]

UIInputType = Literal["number" | "text" | "textarea" | "checkbox" | "select" | "code" | "group" | "json" | "personSelect" | "nodeSelect"]


# ============ Branded IDs ============

ApiKeyID = NewType('ApiKeyID', str)

ArrowID = NewType('ArrowID', str)

DiagramID = NewType('DiagramID', str)

ExecutionID = NewType('ExecutionID', str)

HandleID = NewType('HandleID', str)

HookID = NewType('HookID', str)

NodeID = NewType('NodeID', str)

PersonID = NewType('PersonID', str)

TaskID = NewType('TaskID', str)


# ============ Enums ============

class NodeType(str, Enum):
    """NodeType enumeration"""
    
    start = "start"
    
    person_job = "person_job"
    
    condition = "condition"
    
    code_job = "code_job"
    
    api_job = "api_job"
    
    endpoint = "endpoint"
    
    db = "db"
    
    user_response = "user_response"
    
    notion = "notion"
    
    person_batch_job = "person_batch_job"
    
    hook = "hook"
    
    template_job = "template_job"
    
    json_schema_validator = "json_schema_validator"
    
    typescript_ast = "typescript_ast"
    
    sub_diagram = "sub_diagram"
    


class HandleDirection(str, Enum):
    """HandleDirection enumeration"""
    
    input = "input"
    
    output = "output"
    


class HandleLabel(str, Enum):
    """HandleLabel enumeration"""
    
    default = "default"
    
    first = "first"
    
    condition_true = "condtrue"
    
    condition_false = "condfalse"
    
    success = "success"
    
    error = "error"
    
    results = "results"
    


class DataType(str, Enum):
    """DataType enumeration"""
    
    any = "any"
    
    string = "string"
    
    number = "number"
    
    boolean = "boolean"
    
    object = "object"
    
    array = "array"
    


class ForgettingMode(str, Enum):
    """ForgettingMode enumeration"""
    
    no_forget = "no_forget"
    
    on_every_turn = "on_every_turn"
    
    upon_request = "upon_request"
    


class MemoryView(str, Enum):
    """MemoryView enumeration"""
    
    all_involved = "all_involved"
    
    sent_by_me = "sent_by_me"
    
    sent_to_me = "sent_to_me"
    
    system_and_me = "system_and_me"
    
    conversation_pairs = "conversation_pairs"
    
    all_messages = "all_messages"
    


class DiagramFormat(str, Enum):
    """DiagramFormat enumeration"""
    
    native = "native"
    
    light = "light"
    
    readable = "readable"
    


class DBBlockSubType(str, Enum):
    """DBBlockSubType enumeration"""
    
    fixed_prompt = "fixed_prompt"
    
    file = "file"
    
    code = "code"
    
    api_tool = "api_tool"
    


class ContentType(str, Enum):
    """ContentType enumeration"""
    
    raw_text = "raw_text"
    
    conversation_state = "conversation_state"
    
    object = "object"
    


class SupportedLanguage(str, Enum):
    """SupportedLanguage enumeration"""
    
    python = "python"
    
    typescript = "typescript"
    
    bash = "bash"
    
    shell = "shell"
    


class HttpMethod(str, Enum):
    """HttpMethod enumeration"""
    
    get = "GET"
    
    post = "POST"
    
    put = "PUT"
    
    delete = "DELETE"
    
    patch = "PATCH"
    


class HookType(str, Enum):
    """HookType enumeration"""
    
    shell = "shell"
    
    webhook = "webhook"
    
    python = "python"
    
    file = "file"
    


class HookTriggerMode(str, Enum):
    """HookTriggerMode enumeration"""
    
    manual = "manual"
    
    hook = "hook"
    


class ExecutionStatus(str, Enum):
    """ExecutionStatus enumeration"""
    
    pending = "PENDING"
    
    running = "RUNNING"
    
    paused = "PAUSED"
    
    completed = "COMPLETED"
    
    failed = "FAILED"
    
    aborted = "ABORTED"
    
    skipped = "SKIPPED"
    


class NodeExecutionStatus(str, Enum):
    """NodeExecutionStatus enumeration"""
    
    pending = "PENDING"
    
    running = "RUNNING"
    
    paused = "PAUSED"
    
    completed = "COMPLETED"
    
    failed = "FAILED"
    
    aborted = "ABORTED"
    
    skipped = "SKIPPED"
    
    maxiter_reached = "MAXITER_REACHED"
    


class EventType(str, Enum):
    """EventType enumeration"""
    
    execution_status_changed = "EXECUTION_STATUS_CHANGED"
    
    node_status_changed = "NODE_STATUS_CHANGED"
    
    node_progress = "NODE_PROGRESS"
    
    interactive_prompt = "INTERACTIVE_PROMPT"
    
    interactive_response = "INTERACTIVE_RESPONSE"
    
    execution_error = "EXECUTION_ERROR"
    
    execution_update = "EXECUTION_UPDATE"
    



# ============ Models ============

class Vec2(BaseModel):
    """Vec2 model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    
    
    x: int
    
    y: int
    
    


class DomainHandle(BaseModel):
    """DomainHandle model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    
    
    id: HandleID
    
    node_id: NodeID
    
    label: HandleLabel
    
    direction: HandleDirection
    
    data_type: DataType
    
    position: Optional[str] = Field(default=None)
    
    


class DomainNode(BaseModel):
    """DomainNode model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    
    
    id: NodeID
    
    type: NodeType
    
    position: Vec2
    
    data: Dict[str, Any]
    
    


class DomainArrow(BaseModel):
    """DomainArrow model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    
    
    id: ArrowID
    
    source: HandleID
    
    target: HandleID
    
    content_type: Optional[ContentType] = Field(default=None)
    
    label: Optional[str] = Field(default=None)
    
    data: Optional[Any] = Field(default=None)
    
    


class MemoryConfig(BaseModel):
    """MemoryConfig model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    
    
    forget_mode: Optional[ForgettingMode] = Field(default=None)
    
    max_messages: Optional[float] = Field(default=None)
    
    temperature: Optional[float] = Field(default=None)
    
    


class MemorySettings(BaseModel):
    """MemorySettings model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    
    
    view: MemoryView
    
    max_messages: float = Field(default=None)
    
    preserve_system: Optional[bool] = Field(default=None)
    
    


class PersonLLMConfig(BaseModel):
    """PersonLLMConfig model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    
    
    service: LLMService
    
    model: str
    
    api_key_id: ApiKeyID
    
    system_prompt: Optional[str] = Field(default=None)
    
    


class DomainPerson(BaseModel):
    """DomainPerson model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    
    
    id: PersonID
    
    label: str
    
    llm_config: PersonLLMConfig
    
    type: Literal["person"]
    
    


class DomainApiKey(BaseModel):
    """DomainApiKey model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    
    
    id: ApiKeyID
    
    label: str
    
    service: APIServiceType
    
    key: Optional[str] = Field(default=None)
    
    


class DiagramMetadata(BaseModel):
    """DiagramMetadata model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    
    
    id: Optional[DiagramID] = Field(default=None)
    
    name: Optional[str] = Field(default=None)
    
    description: Optional[str] = Field(default=None)
    
    version: str
    
    created: str
    
    modified: str
    
    author: Optional[str] = Field(default=None)
    
    tags: Optional[{}] = Field(default=None)
    
    


class DomainDiagram(BaseModel):
    """DomainDiagram model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    
    
    nodes: {}
    
    handles: {}
    
    arrows: {}
    
    persons: {}
    
    metadata: Optional[DiagramMetadata] = Field(default=None)
    
    


class BaseNodeData(BaseModel):
    """BaseNodeData model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    
    
    label: str
    
    flipped: Optional[bool] = Field(default=None)
    
    


class StartNodeData(BaseNodeData):
    """StartNodeData model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    
    
    custom_data: Dict[str, Union[str, float, bool]]
    
    output_data_structure: Dict[str, str]
    
    trigger_mode: Optional[HookTriggerMode] = Field(default=None)
    
    hook_event: Optional[str] = Field(default=None)
    
    hook_filters: Optional[Any] = Field(default=None)
    
    


class ConditionNodeData(BaseNodeData):
    """ConditionNodeData model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    
    
    condition_type: str
    
    expression: Optional[str] = Field(default=None)
    
    node_indices: Optional[{}] = Field(default=None)
    
    


class PersonJobNodeData(BaseNodeData):
    """PersonJobNodeData model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    
    
    person: Optional[PersonID] = Field(default=None)
    
    first_only_prompt: str
    
    default_prompt: Optional[str] = Field(default=None)
    
    max_iteration: float
    
    memory_config: Optional[MemoryConfig] = Field(default=None)
    
    memory_settings: Optional[MemorySettings] = Field(default=None)
    
    tools: Optional[{}] = Field(default=None)
    
    


class EndpointNodeData(BaseNodeData):
    """EndpointNodeData model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    
    
    save_to_file: bool
    
    file_name: Optional[str] = Field(default=None)
    
    


class DBNodeData(BaseNodeData):
    """DBNodeData model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    
    
    file: Optional[str] = Field(default=None)
    
    collection: Optional[str] = Field(default=None)
    
    sub_type: DBBlockSubType
    
    operation: str
    
    query: Optional[str] = Field(default=None)
    
    data: Any = Field(default=None)
    
    


class CodeJobNodeData(BaseNodeData):
    """CodeJobNodeData model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    
    
    language: SupportedLanguage
    
    filePath: Optional[str] = Field(default=None)
    
    code: Optional[str] = Field(default=None)
    
    functionName: Optional[str] = Field(default=None)
    
    timeout: Optional[int] = Field(default=None)
    
    


class ApiJobNodeData(BaseNodeData):
    """ApiJobNodeData model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    
    
    url: str
    
    method: HttpMethod
    
    headers: Optional[Any] = Field(default=None)
    
    params: Optional[Any] = Field(default=None)
    
    body: Optional[Any] = Field(default=None)
    
    timeout: Optional[int] = Field(default=None)
    
    auth_type: Optional[Literal["none" | "bearer" | "basic" | "api_key"]] = Field(default=None)
    
    auth_config: Optional[Any] = Field(default=None)
    
    


class UserResponseNodeData(BaseNodeData):
    """UserResponseNodeData model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    
    
    prompt: str
    
    timeout: int
    
    


class NotionNodeData(BaseNodeData):
    """NotionNodeData model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    
    
    operation: NotionOperation
    
    page_id: Optional[str] = Field(default=None)
    
    database_id: Optional[str] = Field(default=None)
    
    


class HookNodeData(BaseNodeData):
    """HookNodeData model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    
    
    hook_type: HookType
    
    config: Union[{ command?: string, undefined; args?: {}, undefined; env?: any; cwd?: string, undefined; url?: string, undefined; method?: HttpMethod, undefined; headers?: any; script?: string, undefined; function_name?: string, undefined; file_path?: string, undefined; format?: "json", Literal["yaml"], Literal["text"], undefined; }]
    
    timeout: Optional[int] = Field(default=None)
    
    retry_count: Optional[float] = Field(default=None)
    
    retry_delay: Optional[float] = Field(default=None)
    
    


class TemplateJobNodeData(BaseNodeData):
    """TemplateJobNodeData model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    
    
    template_path: Optional[str] = Field(default=None)
    
    template_content: Optional[str] = Field(default=None)
    
    output_path: Optional[str] = Field(default=None)
    
    variables: Optional[Any] = Field(default=None)
    
    engine: Optional[Literal["internal" | "jinja2" | "handlebars"]] = Field(default=None)
    
    


class ShellJobNodeData(BaseNodeData):
    """ShellJobNodeData model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    
    
    command: str
    
    args: Optional[{}] = Field(default=None)
    
    cwd: Optional[str] = Field(default=None)
    
    env: Optional[Any] = Field(default=None)
    
    timeout: Optional[int] = Field(default=None)
    
    capture_output: Optional[bool] = Field(default=None)
    
    shell: Optional[bool] = Field(default=None)
    
    


class JsonSchemaValidatorNodeData(BaseNodeData):
    """JsonSchemaValidatorNodeData model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    
    
    schema_path: Optional[str] = Field(default=None)
    
    schema: Optional[Any] = Field(default=None)
    
    data_path: Optional[str] = Field(default=None)
    
    strict_mode: Optional[bool] = Field(default=None)
    
    error_on_extra: Optional[bool] = Field(default=None)
    
    


class TypescriptAstNodeData(BaseNodeData):
    """TypescriptAstNodeData model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    
    
    source: Optional[str] = Field(default=None)
    
    extractPatterns: Optional[{}] = Field(default=None)
    
    includeJSDoc: Optional[bool] = Field(default=None)
    
    parseMode: Optional[Literal["module" | "script"]] = Field(default=None)
    
    


class SubDiagramNodeData(BaseNodeData):
    """SubDiagramNodeData model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    
    
    diagram_name: Optional[str] = Field(default=None)
    
    diagram_format: Optional[DiagramFormat] = Field(default=None)
    
    diagram_data: Optional[Any] = Field(default=None)
    
    batch: Optional[bool] = Field(default=None)
    
    batch_input_key: Optional[str] = Field(default=None)
    
    batch_parallel: Optional[bool] = Field(default=None)
    
    


class TokenUsage(BaseModel):
    """TokenUsage model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    
    
    input: int
    
    output: int
    
    cached: Optional[int] = Field(default=None)
    
    total: Optional[int] = Field(default=None)
    
    


class NodeState(BaseModel):
    """NodeState model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    
    
    status: NodeExecutionStatus
    
    started_at: Optional[str] = Field(default=None)
    
    ended_at: Optional[str] = Field(default=None)
    
    error: Optional[str] = Field(default=None)
    
    token_usage: Optional[TokenUsage] = Field(default=None)
    
    output: Optional[Any] = Field(default=None)
    
    


class ExecutionState(BaseModel):
    """ExecutionState model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    
    
    id: ExecutionID
    
    status: ExecutionStatus
    
    diagram_id: Optional[Any] = Field(default=None)
    
    started_at: str
    
    ended_at: Optional[str] = Field(default=None)
    
    node_states: Dict[str, NodeState]
    
    node_outputs: Dict[str, Dict[str, Any]]
    
    token_usage: TokenUsage
    
    error: Optional[str] = Field(default=None)
    
    variables: Any = Field(default=None)
    
    duration_seconds: Optional[float] = Field(default=None)
    
    is_active: Optional[bool] = Field(default=None)
    
    exec_counts: Dict[str, float]
    
    executed_nodes: {}
    
    


class ExecutionOptions(BaseModel):
    """ExecutionOptions model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    
    
    mode: Optional[Literal["normal" | "debug" | "monitor"]] = Field(default=None)
    
    timeout: Optional[int] = Field(default=None)
    
    variables: Any = Field(default=None)
    
    debug: Optional[bool] = Field(default=None)
    
    


class InteractivePromptData(BaseModel):
    """InteractivePromptData model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    
    
    node_id: NodeID
    
    prompt: str
    
    timeout: Optional[int] = Field(default=None)
    
    default_value: Optional[str] = Field(default=None)
    
    


class InteractiveResponse(BaseModel):
    """InteractiveResponse model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    
    
    node_id: NodeID
    
    response: str
    
    timestamp: str
    
    


class ExecutionUpdate(BaseModel):
    """ExecutionUpdate model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    
    
    type: EventType
    
    execution_id: ExecutionID
    
    node_id: Optional[Any] = Field(default=None)
    
    status: Optional[NodeExecutionStatus] = Field(default=None)
    
    result: Optional[Any] = Field(default=None)
    
    error: str = Field(default=None)
    
    timestamp: Optional[str] = Field(default=None)
    
    total_tokens: Optional[float] = Field(default=None)
    
    node_type: Optional[str] = Field(default=None)
    
    tokens: Optional[float] = Field(default=None)
    
    data: Any = Field(default=None)
    
    


class NodeDefinition(BaseModel):
    """NodeDefinition model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    
    
    type: str
    
    node_schema: Any
    
    handler: Any
    
    requires_services: Optional[{}] = Field(default=None)
    
    description: str = Field(default=None)
    
    


class Message(BaseModel):
    """Message model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    
    
    id: Optional[str] = Field(default=None)
    
    from_person_id: Any
    
    to_person_id: PersonID
    
    content: str
    
    timestamp: Optional[str] = Field(default=None)
    
    token_count: Optional[float] = Field(default=None)
    
    message_type: Literal["person_to_person" | "system_to_person" | "person_to_system"]
    
    metadata: Optional[Any] = Field(default=None)
    
    


class ConversationMetadata(BaseModel):
    """ConversationMetadata model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    
    
    started_at: str
    
    last_message_at: str
    
    total_tokens: float
    
    message_count: float
    
    context_resets: float
    
    


class Conversation(BaseModel):
    """Conversation model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    
    
    messages: {}
    
    metadata: Optional[ConversationMetadata] = Field(default=None)
    
    


class MemoryState(Conversation):
    """MemoryState model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    
    
    visible_messages: float
    
    has_more: Optional[bool] = Field(default=None)
    
    config: Optional[Any] = Field(default=None)
    
    


class ValidationRules(BaseModel):
    """ValidationRules model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    
    
    min: Optional[float] = Field(default=None)
    
    max: Optional[float] = Field(default=None)
    
    minLength: Optional[float] = Field(default=None)
    
    maxLength: Optional[float] = Field(default=None)
    
    pattern: Optional[str] = Field(default=None)
    
    message: Optional[str] = Field(default=None)
    
    itemType: Optional[FieldType] = Field(default=None)
    
    allowedValues: Optional[{}] = Field(default=None)
    
    


class UIConfiguration(BaseModel):
    """UIConfiguration model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    
    
    inputType: UIInputType
    
    placeholder: Optional[str] = Field(default=None)
    
    column: Optional[Union[1, 2]] = Field(default=None)
    
    rows: Optional[float] = Field(default=None)
    
    language: Optional[Any] = Field(default=None)
    
    collapsible: Optional[bool] = Field(default=None)
    
    readOnly: Optional[bool] = Field(default=None)
    
    options: Optional[Any] = Field(default=None)
    
    min: Optional[float] = Field(default=None)
    
    max: Optional[float] = Field(default=None)
    
    showPromptFileButton: Optional[bool] = Field(default=None)
    
    


class FieldSpecification(BaseModel):
    """FieldSpecification model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    
    
    name: str
    
    type: FieldType
    
    required: bool
    
    description: str
    
    defaultValue: Optional[Any] = Field(default=None)
    
    validation: Optional[ValidationRules] = Field(default=None)
    
    uiConfig: UIConfiguration
    
    nestedFields: Optional[{}] = Field(default=None)
    
    affects: Optional[{}] = Field(default=None)
    
    


class HandleConfiguration(BaseModel):
    """HandleConfiguration model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    
    
    inputs: {}
    
    outputs: {}
    
    


class OutputSpecification(BaseModel):
    """OutputSpecification model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    
    
    type: Any
    
    description: str
    
    


class ExecutionConfiguration(BaseModel):
    """ExecutionConfiguration model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    
    
    timeout: Optional[int] = Field(default=None)
    
    retryable: Optional[bool] = Field(default=None)
    
    maxRetries: Optional[int] = Field(default=None)
    
    requires: Optional[{}] = Field(default=None)
    
    


class ExampleConfiguration(BaseModel):
    """ExampleConfiguration model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    
    
    name: str
    
    description: str
    
    configuration: Dict[str, Any]
    
    


class NodeSpecification(BaseModel):
    """NodeSpecification model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    
    
    nodeType: NodeType
    
    displayName: str
    
    category: NodeCategory
    
    icon: str
    
    color: str
    
    description: str
    
    fields: {}
    
    handles: HandleConfiguration
    
    outputs: Optional[Any] = Field(default=None)
    
    execution: Optional[ExecutionConfiguration] = Field(default=None)
    
    examples: Optional[{}] = Field(default=None)
    
    


class NodeSpecificationRegistry(BaseModel):
    """NodeSpecificationRegistry model"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)
    
    
    pass
    



# ============ Helper Functions ============
def parse_handle_id(handle_id: str) -> tuple[NodeID, str, str]:
    """Parse a handle ID into its components."""
    parts = handle_id.split('_')
    if len(parts) < 3:
        raise ValueError(f"Invalid handle ID format: {handle_id}")
    
    node_id = parts[0]
    direction = parts[-1]
    label = '_'.join(parts[1:-1])
    
    return NodeID(node_id), label, direction

def create_handle_id(node_id: NodeID, label: str, direction: str) -> HandleID:
    """Create a handle ID from components."""
    return HandleID(f"{node_id}_{label}_{direction}")

# ============ Type Guards ============






def is_domainnode(node: Any) -> bool:
    """Check if a node is a DomainNode."""
    return hasattr(node, 'type') and node.type == NodeType.domain






























































































# ============ Constants ============
VALID_NODE_TYPES = ["start", "person_job", "condition", "code_job", "api_job", "endpoint", "db", "user_response", "notion", "person_batch_job", "hook", "template_job", "json_schema_validator", "typescript_ast", "sub_diagram"]
VALID_HANDLE_DIRECTIONS = ['input', 'output']