"""DiPeO diagram-generated models package.

This package contains models generated by DiPeO's self-hosted code generation system.
All files in this package are auto-generated - do not edit directly.
"""

# Re-export all models and conversions
from .conversions import *
from .domain_models import *
from .enums import *
from .generated_nodes import *
from .handle_utils import *

# Re-export specific node models for backward compatibility
from .models.api_job_model import ApiJobNodeData
from .models.code_job_model import CodeJobNodeData
from .models.condition_model import ConditionNodeData
from .models.db_model import DbNodeData
from .models.endpoint_model import EndpointNodeData
from .models.hook_model import HookNodeData
from .models.json_schema_validator_model import JsonSchemaValidatorNodeData
from .models.notion_model import NotionNodeData
from .models.person_batch_job_model import PersonBatchJobNodeData
from .models.person_job_model import PersonJobNodeData
from .models.start_model import StartNodeData
from .models.sub_diagram_model import SubDiagramNodeData
from .models.template_job_model import TemplateJobNodeData
from .models.typescript_ast_model import TypescriptAstNodeData
from .models.user_response_model import UserResponseNodeData

# Create aliases for backward compatibility
DBNodeData = DbNodeData

# Import all node types from generated_nodes
from .generated_nodes import (
    ApiJobNode, CodeJobNode, ConditionNode, DBNode, EndpointNode,
    HookNode, JsonSchemaValidatorNode, NotionNode, PersonBatchJobNode,
    PersonJobNode, StartNode, SubDiagramNode, TemplateJobNode,
    TypescriptAstNode, UserResponseNode
)

# Combine all exports
__all__ = [
    # From domain_models.py
    "APIServiceType", "ApiKeyID", "ArrowID",
    "BaseNodeData", "ChatResult", "ConfigDict", "ContentType", "Conversation", "ConversationMetadata",
    "DBBlockSubType", "DataType", "DiagramFormat",
    "DiagramID", "DiagramMetadata", "DomainApiKey", "DomainArrow",
    "DomainDiagram", "DomainHandle", "DomainNode", "DomainPerson",
    "EventType", "ExecutionID", "ExecutionOptions",
    "ExecutionState", "ExecutionStatus", "ExecutionUpdate", "ForgettingMode",
    "HandleDirection", "HandleID", "HandleLabel",
    "HookTriggerMode", "HookType", "HttpMethod",
    "ImageGenerationResult", "InteractivePromptData", "InteractiveResponse",
    "LLMRequestOptions", "LLMService", "MemorySettings",
    "Message", "NewType", "NodeDefinition", "NodeExecutionStatus",
    "NodeID", "NodeState", "NodeType",
    "NotionOperation", "PersonID",
    "PersonLLMConfig", "PersonMemoryMessage",
    "SupportedLanguage",
    "TokenUsage", "ToolConfig", "ToolOutput", "ToolType",
    "Vec2", "WebSearchResult",
    # Node data models
    "ApiJobNodeData", "CodeJobNodeData", "ConditionNodeData",
    "DbNodeData", "DBNodeData",  # Both original and alias
    "EndpointNodeData", "HookNodeData", "JsonSchemaValidatorNodeData",
    "NotionNodeData", "PersonBatchJobNodeData", "PersonJobNodeData",
    "StartNodeData", "SubDiagramNodeData", "TemplateJobNodeData",
    "TypescriptAstNodeData", "UserResponseNodeData",
    # From conversions.py
    "NODE_TYPE_MAP", "NODE_TYPE_REVERSE_MAP", "node_kind_to_domain_type",
    "domain_type_to_node_kind", "normalize_node_id", "create_handle_id",
    "parse_handle_id", "diagram_arrays_to_maps", "diagram_maps_to_arrays",
    # From handle_utils.py
    "ParsedHandle", "HandleReference", "parse_handle_id_safe",
    "extract_node_id_from_handle", "is_valid_handle_id",
    # From generated_nodes.py
    "BaseExecutableNode",
    # Node types
    "ApiJobNode", "CodeJobNode", "ConditionNode", "DBNode", "EndpointNode",
    "HookNode", "JsonSchemaValidatorNode", "NotionNode", "PersonBatchJobNode",
    "PersonJobNode", "StartNode", "SubDiagramNode", "TemplateJobNode",
    "TypescriptAstNode", "UserResponseNode",
]