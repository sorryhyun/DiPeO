"""
GENERATED FILE - DO NOT EDIT
Generated by backend conversions generation
Generated at: 2025-09-15T11:20:50.477607

Type conversion utilities between frontend and backend
"""

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union
from datetime import datetime
from .enums import NodeType

# Node type mappings (snake_case to CONSTANT_CASE)
NODE_TYPE_MAP = {
    'code_job': 'CODE_JOB',
    'api_job': 'API_JOB',
    'person_job': 'PERSON_JOB',
    'condition': 'CONDITION',
    'user_response': 'USER_RESPONSE',
    'start': 'START',
    'endpoint': 'ENDPOINT',
    'db': 'DB',
    'hook': 'HOOK',
    'template_job': 'TEMPLATE_JOB',
    'json_schema_validator': 'JSON_SCHEMA_VALIDATOR',
    'typescript_ast': 'TYPESCRIPT_AST',
    'sub_diagram': 'SUB_DIAGRAM',
    'integrated_api': 'INTEGRATED_API',
}
NODE_TYPE_REVERSE_MAP: Dict[NodeType, str] = {v: k for k, v in NODE_TYPE_MAP.items()}

# TypeScript to Python type conversions
TYPE_CONVERSIONS = {
    'string': 'str',
    'number': 'int',
    'boolean': 'bool',
    'any': 'JsonValue',
    'JsonValue': 'JsonValue',
    'JsonDict': 'JsonDict',
    'PersonID': 'Optional[PersonID]',
    'NodeID': 'NodeID',
    'HandleID': 'HandleID',
    'ArrowID': 'ArrowID',
    'MemoryConfig': 'Optional[MemoryConfig]',
    'ToolConfig[]': 'Optional[List[ToolConfig]]',
    'string[]': 'Optional[List[str]]',
    'Record<string, any>': 'JsonDict',
    'Record<string, JsonValue>': 'JsonDict',
    'Record<string, string>': 'Dict[str, str]',
    'HookTriggerMode': 'Optional[HookTriggerMode]',
    'SupportedLanguage': 'SupportedLanguage',
    'HttpMethod': 'HttpMethod',
    'DBBlockSubType': 'DBBlockSubType',
    'HookType': 'HookType',
    'DiagramFormat': 'DiagramFormat',
    'ContentType': 'ContentType',
    'ToolSelection': 'ToolSelection',
    'APIServiceType': 'APIServiceType',
}

# Field type mappings (for UI components)
FIELD_MAPPINGS = {
    'string': 'text',
    'number': 'number',
    'boolean': 'checkbox',
    'PersonID': 'personSelect',
    'SupportedLanguage': 'select',
    'HttpMethod': 'select',
    'DBBlockSubType': 'select',
    'HookType': 'select',
    'HookTriggerMode': 'select',
    'ContentType': 'select',
    'DiagramFormat': 'select',
    'ToolSelection': 'select',
    'APIServiceType': 'select',
}

def ts_to_python_type(ts_type: str) -> str:
    """Convert TypeScript type to Python type."""
    return TYPE_CONVERSIONS.get(ts_type, ts_type)

def python_to_ts_type(py_type: str) -> str:
    """Convert Python type to TypeScript type."""
    reverse_map = {v: k for k, v in TYPE_CONVERSIONS.items()}
    return reverse_map.get(py_type, py_type)

def get_node_type_constant(snake_case: str) -> str:
    """Get the constant case node type from snake case."""
    return NODE_TYPE_MAP.get(snake_case, snake_case.upper())

def get_field_ui_type(field_type: str) -> str:
    """Get the UI component type for a field type."""
    return FIELD_MAPPINGS.get(field_type, 'text')

def node_kind_to_domain_type(kind: str) -> NodeType:
    try:
        return NODE_TYPE_MAP[kind]
    except KeyError as exc:
        raise ValueError(f"Unknown node kind: {kind}") from exc


def domain_type_to_node_kind(node_type: NodeType) -> str:
    try:
        return NODE_TYPE_REVERSE_MAP[node_type]
    except KeyError as exc:
        raise ValueError(f"Unknown node type: {node_type}") from exc

# Export utilities
__all__ = [
    'NODE_TYPE_MAP',
    'TYPE_CONVERSIONS',
    'FIELD_MAPPINGS',
    'ts_to_python_type',
    'python_to_ts_type',
    'get_node_type_constant',
    'get_field_ui_type',
]
