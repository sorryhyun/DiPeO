"""
Generated conversion functions for TypeScript <-> Python transformations.
DO NOT EDIT - This file is automatically generated.
"""

from typing import Any, Dict, List, Optional, Union, Type, TypeVar
from enum import Enum
import json
from pydantic import BaseModel

# Import enums from core models
from dipeo.models.models import (
    NodeType, DiagramFormat, HookType, HookTriggerMode,
    HttpMethod, DBBlockSubType, SupportedLanguage,
    NotionOperation, ExecutionStatus, LLMService, APIServiceType
)

# Import generated models
from dipeo.diagram_generated.models import *

T = TypeVar('T')


# Enum conversion helpers

def node_type_to_string(value: NodeType) -> str:
    """Convert NodeType enum to string."""
    return value.value if isinstance(value, NodeType) else str(value)


def string_to_node_type(value: str) -> NodeType:
    """Convert string to NodeType enum."""
    try:
        return NodeType(value)
    except ValueError:
        raise ValueError(f"Invalid NodeType value: {value}")


def diagram_format_to_string(value: DiagramFormat) -> str:
    """Convert DiagramFormat enum to string."""
    return value.value if isinstance(value, DiagramFormat) else str(value)


def string_to_diagram_format(value: str) -> DiagramFormat:
    """Convert string to DiagramFormat enum."""
    try:
        return DiagramFormat(value)
    except ValueError:
        raise ValueError(f"Invalid DiagramFormat value: {value}")


def hook_type_to_string(value: HookType) -> str:
    """Convert HookType enum to string."""
    return value.value if isinstance(value, HookType) else str(value)


def string_to_hook_type(value: str) -> HookType:
    """Convert string to HookType enum."""
    try:
        return HookType(value)
    except ValueError:
        raise ValueError(f"Invalid HookType value: {value}")


def hook_trigger_mode_to_string(value: HookTriggerMode) -> str:
    """Convert HookTriggerMode enum to string."""
    return value.value if isinstance(value, HookTriggerMode) else str(value)


def string_to_hook_trigger_mode(value: str) -> HookTriggerMode:
    """Convert string to HookTriggerMode enum."""
    try:
        return HookTriggerMode(value)
    except ValueError:
        raise ValueError(f"Invalid HookTriggerMode value: {value}")


def http_method_to_string(value: HttpMethod) -> str:
    """Convert HttpMethod enum to string."""
    return value.value if isinstance(value, HttpMethod) else str(value)


def string_to_http_method(value: str) -> HttpMethod:
    """Convert string to HttpMethod enum."""
    try:
        return HttpMethod(value)
    except ValueError:
        raise ValueError(f"Invalid HttpMethod value: {value}")


def llm_service_to_string(value: LLMService) -> str:
    """Convert LLMService enum to string."""
    return value.value if isinstance(value, LLMService) else str(value)


def string_to_llm_service(value: str) -> LLMService:
    """Convert string to LLMService enum."""
    try:
        return LLMService(value)
    except ValueError:
        raise ValueError(f"Invalid LLMService value: {value}")


def api_service_type_to_string(value: APIServiceType) -> str:
    """Convert APIServiceType enum to string."""
    return value.value if isinstance(value, APIServiceType) else str(value)


def string_to_api_service_type(value: str) -> APIServiceType:
    """Convert string to APIServiceType enum."""
    try:
        return APIServiceType(value)
    except ValueError:
        raise ValueError(f"Invalid APIServiceType value: {value}")


def notion_operation_to_string(value: NotionOperation) -> str:
    """Convert NotionOperation enum to string."""
    return value.value if isinstance(value, NotionOperation) else str(value)


def string_to_notion_operation(value: str) -> NotionOperation:
    """Convert string to NotionOperation enum."""
    try:
        return NotionOperation(value)
    except ValueError:
        raise ValueError(f"Invalid NotionOperation value: {value}")


def db_block_sub_type_to_string(value: DBBlockSubType) -> str:
    """Convert DBBlockSubType enum to string."""
    return value.value if isinstance(value, DBBlockSubType) else str(value)


def string_to_db_block_sub_type(value: str) -> DBBlockSubType:
    """Convert string to DBBlockSubType enum."""
    try:
        return DBBlockSubType(value)
    except ValueError:
        raise ValueError(f"Invalid DBBlockSubType value: {value}")


def supported_language_to_string(value: SupportedLanguage) -> str:
    """Convert SupportedLanguage enum to string."""
    return value.value if isinstance(value, SupportedLanguage) else str(value)


def string_to_supported_language(value: str) -> SupportedLanguage:
    """Convert string to SupportedLanguage enum."""
    try:
        return SupportedLanguage(value)
    except ValueError:
        raise ValueError(f"Invalid SupportedLanguage value: {value}")



# Model conversion functions


# Generic conversion helpers
def model_to_dict(model: BaseModel) -> Dict[str, Any]:
    """Convert any Pydantic model to dictionary."""
    model_type = type(model).__name__
    converter_name = f"{model_type[0].lower()}{model_type[1:]}_to_dict"
    
    # Try to find specific converter
    converter = globals().get(converter_name)
    if converter:
        return converter(model)
    
    # Fallback to generic conversion
    return model.dict(exclude_none=True)


def dict_to_model(data: Dict[str, Any], model_type: Type[T]) -> T:
    """Convert dictionary to specified model type."""
    type_name = model_type.__name__
    converter_name = f"dict_to_{type_name[0].lower()}{type_name[1:]}"
    
    # Try to find specific converter
    converter = globals().get(converter_name)
    if converter:
        return converter(data)
    
    # Fallback to direct instantiation
    return model_type(**data)


# JSON conversion helpers
def model_to_json(model: BaseModel, **kwargs) -> str:
    """Convert model to JSON string."""
    return json.dumps(model_to_dict(model), **kwargs)


def json_to_model(json_str: str, model_type: Type[T]) -> T:
    """Convert JSON string to model."""
    data = json.loads(json_str)
    return dict_to_model(data, model_type)


# Batch conversion helpers
def models_to_dicts(models: List[BaseModel]) -> List[Dict[str, Any]]:
    """Convert list of models to list of dictionaries."""
    return [model_to_dict(model) for model in models]


def dicts_to_models(data_list: List[Dict[str, Any]], model_type: Type[T]) -> List[T]:
    """Convert list of dictionaries to list of models."""
    return [dict_to_model(data, model_type) for data in data_list]


# Node-specific conversion helpers
NODE_TYPE_MAP = {
    
}


def create_node_from_dict(node_type: str, data: Dict[str, Any]) -> BaseModel:
    """Create a node model from node type and data."""
    model_class = NODE_TYPE_MAP.get(node_type)
    if not model_class:
        raise ValueError(f"Unknown node type: {node_type}")
    
    return dict_to_model(data, model_class)


def node_to_dict(node: BaseModel) -> Dict[str, Any]:
    """Convert any node model to dictionary with type information."""
    data = model_to_dict(node)
    
    # Add node type if not present
    if "type" not in data:
        # Infer node type from class name
        class_name = type(node).__name__
        if class_name.endswith("NodeData"):
            node_type = class_name[:-8].lower()  # Remove 'NodeData'
            # Convert camelCase to snake_case
            import re
            node_type = re.sub(r'(?<!^)(?=[A-Z])', '_', node_type).lower()
            data["type"] = node_type
        elif class_name.endswith("Node"):
            node_type = class_name[:-4].lower()  # Remove 'Node'
            # Convert camelCase to snake_case
            import re
            node_type = re.sub(r'(?<!^)(?=[A-Z])', '_', node_type).lower()
            data["type"] = node_type
    
    return data


# Export all conversion functions
__all__ = [
    # Enum converters
    
    "node_type_to_string",
    "string_to_node_type",
    
    "diagram_format_to_string",
    "string_to_diagram_format",
    
    "hook_type_to_string",
    "string_to_hook_type",
    
    "hook_trigger_mode_to_string",
    "string_to_hook_trigger_mode",
    
    "http_method_to_string",
    "string_to_http_method",
    
    "llm_service_to_string",
    "string_to_llm_service",
    
    "api_service_type_to_string",
    "string_to_api_service_type",
    
    "notion_operation_to_string",
    "string_to_notion_operation",
    
    "db_block_sub_type_to_string",
    "string_to_db_block_sub_type",
    
    "supported_language_to_string",
    "string_to_supported_language",
    
    # Model converters
    
    # Generic helpers
    "model_to_dict",
    "dict_to_model",
    "model_to_json",
    "json_to_model",
    "models_to_dicts",
    "dicts_to_models",
    # Node helpers
    "create_node_from_dict",
    "node_to_dict",
    "NODE_TYPE_MAP",
]