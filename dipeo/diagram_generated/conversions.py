"""
Avoid editing THIS FILE DIRECTLY.
Generated by backend conversions generation
Generated at: 2025-10-04T12:21:28.885211

Type conversion utilities between frontend and backend
"""

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union
from datetime import datetime
from .enums import NodeType

# Default node type mappings (fallback when no conversions provided)
NODE_TYPE_MAP = {}
NODE_TYPE_REVERSE_MAP: Dict[NodeType, str] = {}

# Default type conversions
TYPE_CONVERSIONS = {
    'string': 'str',
    'number': 'float',
    'boolean': 'bool',
    'any': 'Any',
    'unknown': 'Any',
    'null': 'None',
    'undefined': 'None',
    'void': 'None',
    'Date': 'datetime',
    'object': 'Dict[str, Any]',
}

# Default field mappings
FIELD_MAPPINGS = {}

def ts_to_python_type(ts_type: str) -> str:
    """Convert TypeScript type to Python type."""
    # Handle array types
    if ts_type.startswith('Array<') and ts_type.endswith('>'):
        inner_type = ts_type[6:-1]
        return f'List[{ts_to_python_type(inner_type)}]'

    if ts_type.endswith('[]'):
        inner_type = ts_type[:-2]
        return f'List[{ts_to_python_type(inner_type)}]'

    return TYPE_CONVERSIONS.get(ts_type, ts_type)

def python_to_ts_type(py_type: str) -> str:
    """Convert Python type to TypeScript type."""
    reverse_map = {v: k for k, v in TYPE_CONVERSIONS.items()}

    # Handle List types
    if py_type.startswith('List[') and py_type.endswith(']'):
        inner_type = py_type[5:-1]
        return f'{python_to_ts_type(inner_type)}[]'

    return reverse_map.get(py_type, py_type)

def get_node_type_constant(snake_case: str) -> str:
    """Get the constant case node type from snake case."""
    return NODE_TYPE_MAP.get(snake_case, snake_case.upper())

def get_field_ui_type(field_type: str) -> str:
    """Get the UI component type for a field type."""
    return FIELD_MAPPINGS.get(field_type, 'text')

def node_kind_to_domain_type(kind: str) -> NodeType:
    """Convert node kind to domain type. Fallback implementation."""
    # When no mapping, try to find the NodeType enum value
    try:
        # Try to convert snake_case to CONSTANT_CASE and match enum
        constant_case = kind.upper()
        return getattr(NodeType, constant_case)
    except (KeyError, AttributeError) as exc:
        raise ValueError(f"Unknown node kind: {kind}") from exc

def domain_type_to_node_kind(node_type: NodeType) -> str:
    """Convert domain type to node kind. Fallback implementation."""
    # When no reverse mapping, convert enum value to snake_case
    if NODE_TYPE_REVERSE_MAP:
        return NODE_TYPE_REVERSE_MAP.get(node_type, str(node_type).lower())
    # Convert CONSTANT_CASE to snake_case
    return str(node_type).lower()

# Export utilities
__all__ = [
    'NODE_TYPE_MAP',
    'NODE_TYPE_REVERSE_MAP',
    'TYPE_CONVERSIONS',
    'FIELD_MAPPINGS',
    'ts_to_python_type',
    'python_to_ts_type',
    'get_node_type_constant',
    'get_field_ui_type',
    'node_kind_to_domain_type',
    'domain_type_to_node_kind',
]
