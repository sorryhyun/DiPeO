# Auto-generated from JSON Schema
# DO NOT EDIT MANUALLY

# generated by datamodel-codegen:
#   filename:  db.schema.json
#   timestamp: 2025-09-06T03:56:11+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field, RootModel


class JsonDict(BaseModel):
    pass
    model_config = ConfigDict(
        extra='forbid',
    )


class DBBlockSubType(Enum):
    """
    Node-specific enumerations
    """

    fixed_prompt = 'fixed_prompt'
    file = 'file'
    code = 'code'
    api_tool = 'api_tool'


class DBNodeData(BaseModel):
    """
    Configuration data for DB nodes that handle file system operations
    """

    model_config = ConfigDict(
        extra='forbid',
    )
    collection: str | None = Field(
        None, description='Database collection name (for database operations)'
    )
    data: JsonDict | None = Field(
        None, description='Data to write (for write operations)'
    )
    file: list[str] | str | None = Field(
        None, description='File path(s) - single string or list for multiple files'
    )
    flipped: bool | None = None
    format: str | None = Field(
        None, description='Data format: json, yaml, csv, text, etc.'
    )
    glob: bool | None = Field(
        None, description='Enable glob pattern expansion for paths (default: false)'
    )
    label: str
    operation: str = Field(..., description='Operation type: read or write')
    query: str | None = Field(
        None, description='Database query (for database operations)'
    )
    serialize_json: bool | None = Field(
        None, description='Auto-parse JSON files when reading (default: false)'
    )
    sub_type: DBBlockSubType = Field(..., description='Storage type: file or database')


class Model(RootModel[DBNodeData]):
    root: DBNodeData
