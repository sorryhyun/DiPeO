# Auto-generated from JSON Schema
# DO NOT EDIT MANUALLY

# generated by datamodel-codegen:
#   filename:  personbatchjob.schema.json
#   timestamp: 2025-08-08T03:44:25+00:00

from __future__ import annotations

from enum import Enum
from typing import Literal, Optional

from pydantic import BaseModel, ConfigDict, Field, RootModel


class MemoryView(Enum):
    """
    Memory management enumerations
    """

    all_involved = 'all_involved'
    sent_by_me = 'sent_by_me'
    sent_to_me = 'sent_to_me'
    system_and_me = 'system_and_me'
    conversation_pairs = 'conversation_pairs'
    all_messages = 'all_messages'


class PersonID(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field__brand: Literal['PersonID'] = Field(..., alias='__brand')


class MemoryProfile(Enum):
    CUSTOM = 'CUSTOM'
    FOCUSED = 'FOCUSED'
    FULL = 'FULL'
    GOLDFISH = 'GOLDFISH'
    MINIMAL = 'MINIMAL'


class Tools(Enum):
    image = 'image'
    none = 'none'
    websearch = 'websearch'


class MemorySettings(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    max_messages: Optional[float] = None
    preserve_system: Optional[bool] = None
    view: MemoryView


class PersonBatchJobNodeData(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    batch: Optional[bool] = None
    batch_input_key: Optional[str] = None
    batch_parallel: Optional[bool] = None
    default_prompt: Optional[str] = None
    first_only_prompt: str
    flipped: Optional[bool] = None
    label: str
    max_concurrent: Optional[float] = None
    max_iteration: float
    memory_profile: Optional[MemoryProfile] = None
    memory_settings: Optional[MemorySettings] = None
    person: Optional[PersonID] = None
    prompt_file: Optional[str] = None
    tools: Optional[Tools] = None


class Model(RootModel[PersonBatchJobNodeData]):
    root: PersonBatchJobNodeData
