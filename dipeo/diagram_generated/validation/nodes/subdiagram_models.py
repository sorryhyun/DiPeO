# Auto-generated from JSON Schema
# DO NOT EDIT MANUALLY

# generated by datamodel-codegen:
#   filename:  subdiagram.schema.json
#   timestamp: 2025-09-07T02:25:27+00:00

from __future__ import annotations

from enum import Enum
from typing import Optional

from pydantic import BaseModel, ConfigDict, Field, RootModel


class JsonDict(BaseModel):
    pass
    model_config = ConfigDict(
        extra='forbid',
    )


class DiagramFormat(Enum):
    """
    Diagram format: light or native (default: light)
    """

    light = 'light'
    native = 'native'
    readable = 'readable'


class SubDiagramNodeData(BaseModel):
    """
    Configuration data for SubDiagram nodes that execute other diagrams
    """

    model_config = ConfigDict(
        extra='forbid',
    )
    batch: Optional[bool] = Field(
        None, description='Enable batch processing for arrays'
    )
    batch_input_key: Optional[str] = Field(
        None, description='Array variable name for batch processing'
    )
    batch_parallel: Optional[bool] = Field(
        None, description='Execute batch items in parallel'
    )
    diagram_data: Optional[JsonDict] = Field(
        None, description='Pass all current variables to sub-diagram'
    )
    diagram_format: Optional[DiagramFormat] = Field(
        None, description='Diagram format: light or native (default: light)'
    )
    diagram_name: Optional[str] = Field(None, description='Path to sub-diagram file')
    flipped: Optional[bool] = None
    ignoreIfSub: Optional[bool] = Field(
        None, description='Skip if already running as sub-diagram'
    )
    label: str
    passInputData: Optional[bool] = Field(
        None,
        description='Whether to pass input data from parent to sub-diagram (default: false)',
    )


class Model(RootModel[SubDiagramNodeData]):
    root: SubDiagramNodeData
