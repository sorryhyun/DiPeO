# Auto-generated from JSON Schema
# DO NOT EDIT MANUALLY

# generated by datamodel-codegen:
#   filename:  templatejob.schema.json
#   timestamp: 2025-09-03T05:28:58+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field, RootModel


class JsonDict(BaseModel):
    pass
    model_config = ConfigDict(
        extra='forbid',
    )


class Engine(Enum):
    internal = 'internal'
    jinja2 = 'jinja2'


class Foreach(BaseModel):
    """
    Render a template for each item and write many files
    """

    model_config = ConfigDict(
        extra='forbid',
    )
    as_: Optional[str] = Field(
        None,
        alias='as',
        description='Variable name to expose each item under in the template (default: "item")',
    )
    items: Union[List, str] = Field(
        ..., description='Array or dotted-path string to an array in inputs'
    )
    limit: Optional[float] = Field(
        None, description='Optional: limit, parallel write hint (ignored in v1)'
    )
    output_path: str = Field(
        ...,
        description='File path template, e.g. "dipeo/diagram_generated_staged/models/{{ item.nodeTypeSnake }}.py"',
    )


class TemplatePreprocessor(BaseModel):
    """
    Configuration for template preprocessor
    """

    model_config = ConfigDict(
        extra='forbid',
    )
    args: Optional[JsonDict] = Field(
        None, description='Optional arguments passed as kwargs to the function'
    )
    function: str = Field(
        ..., description='Function name to call, e.g. "build_context_from_ast"'
    )
    module: str = Field(
        ...,
        description='Python module path, e.g. "projects.codegen.code.shared.context_builders"',
    )


class TemplateJobNodeData(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    engine: Optional[Engine] = None
    flipped: Optional[bool] = None
    foreach: Optional[Foreach] = Field(
        None, description='Render a template for each item and write many files'
    )
    label: str
    output_path: Optional[str] = Field(
        None, description='Single-file path; can contain template expressions'
    )
    preprocessor: Optional[TemplatePreprocessor] = Field(
        None,
        description='Optional Python preprocessor that returns extra context for the template',
    )
    template_content: Optional[str] = None
    template_path: Optional[str] = None
    variables: Optional[JsonDict] = Field(
        None,
        description='Simple keyâ†’value map passed to template; string values are resolved',
    )


class Model(RootModel[TemplateJobNodeData]):
    root: TemplateJobNodeData
