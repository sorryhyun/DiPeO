# Auto-generated from JSON Schema
# DO NOT EDIT MANUALLY

# generated by datamodel-codegen:
#   filename:  apijob.schema.json
#   timestamp: 2025-09-03T05:28:58+00:00

from __future__ import annotations

from enum import Enum
from typing import Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, RootModel


class RecordStringString(BaseModel):
    pass
    model_config = ConfigDict(
        extra='forbid',
    )


class AuthType(Enum):
    api_key = 'api_key'
    basic = 'basic'
    bearer = 'bearer'
    none = 'none'


class JsonDict(BaseModel):
    pass
    model_config = ConfigDict(
        extra='forbid',
    )


class HttpMethod(Enum):
    GET = 'GET'
    POST = 'POST'
    PUT = 'PUT'
    DELETE = 'DELETE'
    PATCH = 'PATCH'


class Model(RootModel[ApiJobNodeData]):
    root: ApiJobNodeData


class ApiJobNodeData(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    auth_config: Optional[RecordStringString] = None
    auth_type: Optional[AuthType] = None
    body: Optional[
        Union[JsonObject, List[JsonValue], Optional[Union[str, float, bool]]]
    ] = None
    flipped: Optional[bool] = None
    headers: Optional[RecordStringString] = None
    label: str
    method: HttpMethod
    params: Optional[JsonDict] = None
    timeout: Optional[float] = None
    url: str


class JsonValue(
    RootModel[Union[JsonObject, List[JsonValue], Optional[Union[str, float, bool]]]]
):
    root: Union[JsonObject, List[JsonValue], Optional[Union[str, float, bool]]]


class JsonObject(RootModel[Optional[Dict[str, JsonValue]]]):
    root: Optional[Dict[str, JsonValue]] = None


Model.model_rebuild()
ApiJobNodeData.model_rebuild()
JsonValue.model_rebuild()
