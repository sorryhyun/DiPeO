"""
GENERATED FILE - DO NOT EDIT
Generated by backend integrations generation
Generated at: 2025-09-18T15:21:44.216743
Integration models for external services
"""

from __future__ import annotations

from pydantic import BaseModel, Field
from typing import Optional, Dict, Any, List, Union, TYPE_CHECKING
from .enums import ToolType

if TYPE_CHECKING:
    from .domain_models import LLMUsage

class ToolConfig(BaseModel):
    """Integration model"""
    type: ToolType
    enabled: bool = None
    config: Dict[str, Any] = None

class WebSearchResult(BaseModel):
    """Integration model"""
    url: str
    title: str
    snippet: str
    score: float = None

class ImageGenerationResult(BaseModel):
    """Integration model"""
    image_data: str
    format: str
    width: float = None
    height: float = None

class ToolOutput(BaseModel):
    """Integration model"""
    type: ToolType
    result: Union[List[WebSearchResult], ImageGenerationResult, Any]
    raw_response: Any = None

class ChatResult(BaseModel):
    """Integration model"""
    text: str
    llm_usage: Optional[LLMUsage] = None
    raw_response: Optional[Any] = None
    tool_outputs: Optional[List[ToolOutput]] = None

class LLMRequestOptions(BaseModel):
    """Integration model"""
    temperature: float = None
    max_tokens: float = None
    top_p: float = None
    n: float = None
    tools: List[ToolConfig] = None
    response_format: Any = None

# Export all integrations
__all__ = [
    'ToolConfig',
    'WebSearchResult',
    'ImageGenerationResult',
    'ToolOutput',
    'ChatResult',
    'LLMRequestOptions',
]
