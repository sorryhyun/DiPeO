"""
Auto-generated static node types from domain models.
DO NOT EDIT THIS FILE DIRECTLY.
Generated at: 2025-07-27T18:05:33.752899
Generated by: domain model static nodes generation
"""

from dataclasses import dataclass, field
from typing import Dict, Any, Optional, List, Union, Literal

from dipeo.models.models import (
    NodeType, Vec2, NodeID, PersonID, MemorySettings, ToolConfig,
    HookTriggerMode, SupportedLanguage, HttpMethod, DBBlockSubType,
    NotionOperation, HookType, DiagramFormat
)


@dataclass(frozen=True)
class BaseExecutableNode:
    """Base class for all executable node types."""
    # Required fields only - no defaults in base class
    id: NodeID
    position: Vec2
    
    def to_dict(self) -> Dict[str, Any]:
        """Convert node to dictionary representation."""
        result = {
            "id": self.id,
            "position": {"x": self.position.x, "y": self.position.y}
        }
        # Subclasses should extend this
        return result


@dataclass(frozen=True)
class ApiJobNode(BaseExecutableNode):
    url: str = field()
    method: HttpMethod = field()
    type: NodeType = field(default=NodeType.api_job, init=False)
    label: str = ""
    flipped: bool = False
    metadata: Optional[Dict[str, Any]] = None
    headers: Optional[Dict[str, Any]] = None
    params: Optional[Dict[str, Any]] = None
    body: Optional[Any] = None
    timeout: Optional[int] = None
    auth_type: Optional[Literal["none", "bearer", "basic", "api_key"]] = None
    auth_config: Optional[Dict[str, Any]] = None

    def to_dict(self) -> Dict[str, Any]:
        """Convert node to dictionary representation."""
        data = super().to_dict()
        data["type"] = self.type.value
        data["label"] = self.label
        data["flipped"] = self.flipped
        if self.metadata:
            data["metadata"] = self.metadata
        data["url"] = self.url
        data["method"] = self.method.value if self.method else None
        data["headers"] = self.headers
        data["params"] = self.params
        data["body"] = self.body
        data["timeout"] = self.timeout
        data["auth_type"] = self.auth_type
        data["auth_config"] = self.auth_config
        return data


@dataclass(frozen=True)
class CodeJobNode(BaseExecutableNode):
    language: SupportedLanguage = field()
    type: NodeType = field(default=NodeType.code_job, init=False)
    label: str = ""
    flipped: bool = False
    metadata: Optional[Dict[str, Any]] = None
    filePath: Optional[str] = None
    code: Optional[str] = None
    functionName: Optional[str] = None
    timeout: Optional[int] = None

    def to_dict(self) -> Dict[str, Any]:
        """Convert node to dictionary representation."""
        data = super().to_dict()
        data["type"] = self.type.value
        data["label"] = self.label
        data["flipped"] = self.flipped
        if self.metadata:
            data["metadata"] = self.metadata
        data["language"] = self.language.value if self.language else None
        data["filePath"] = self.filePath
        data["code"] = self.code
        data["functionName"] = self.functionName
        data["timeout"] = self.timeout
        return data


@dataclass(frozen=True)
class ConditionNode(BaseExecutableNode):
    condition_type: str = field()
    type: NodeType = field(default=NodeType.condition, init=False)
    label: str = ""
    flipped: bool = False
    metadata: Optional[Dict[str, Any]] = None
    expression: Optional[str] = None
    node_indices: Optional[List[str]] = None

    def to_dict(self) -> Dict[str, Any]:
        """Convert node to dictionary representation."""
        data = super().to_dict()
        data["type"] = self.type.value
        data["label"] = self.label
        data["flipped"] = self.flipped
        if self.metadata:
            data["metadata"] = self.metadata
        data["condition_type"] = self.condition_type
        data["expression"] = self.expression
        data["node_indices"] = self.node_indices
        return data


@dataclass(frozen=True)
class DBNode(BaseExecutableNode):
    sub_type: DBBlockSubType = field()
    operation: str = field()
    type: NodeType = field(default=NodeType.db, init=False)
    label: str = ""
    flipped: bool = False
    metadata: Optional[Dict[str, Any]] = None
    file: Optional[str] = None
    collection: Optional[str] = None
    query: Optional[str] = None
    data: Optional[Dict[str, Any]] = None

    def to_dict(self) -> Dict[str, Any]:
        """Convert node to dictionary representation."""
        data = super().to_dict()
        data["type"] = self.type.value
        data["label"] = self.label
        data["flipped"] = self.flipped
        if self.metadata:
            data["metadata"] = self.metadata
        data["file"] = self.file
        data["collection"] = self.collection
        data["sub_type"] = self.sub_type.value if self.sub_type else None
        data["operation"] = self.operation.value if self.operation else None
        data["query"] = self.query
        data["data"] = self.data
        return data


@dataclass(frozen=True)
class EndpointNode(BaseExecutableNode):
    save_to_file: bool = field()
    type: NodeType = field(default=NodeType.endpoint, init=False)
    label: str = ""
    flipped: bool = False
    metadata: Optional[Dict[str, Any]] = None
    file_name: Optional[str] = None

    def to_dict(self) -> Dict[str, Any]:
        """Convert node to dictionary representation."""
        data = super().to_dict()
        data["type"] = self.type.value
        data["label"] = self.label
        data["flipped"] = self.flipped
        if self.metadata:
            data["metadata"] = self.metadata
        data["save_to_file"] = self.save_to_file
        data["file_name"] = self.file_name
        return data


@dataclass(frozen=True)
class HookNode(BaseExecutableNode):
    hook_type: HookType = field()
    type: NodeType = field(default=NodeType.hook, init=False)
    label: str = ""
    flipped: bool = False
    metadata: Optional[Dict[str, Any]] = None
    command: Optional[str] = None
    args: Optional[List[str]] = None
    env: Optional[Dict[str, Any]] = None
    cwd: Optional[str] = None
    url: Optional[str] = None
    method: Optional[HttpMethod] = None
    headers: Optional[Dict[str, Any]] = None
    script: Optional[str] = None
    function_name: Optional[str] = None
    file_path: Optional[str] = None
    format: Optional[Literal["json", "yaml", "text"]] = None
    timeout: Optional[int] = None
    retry_count: Optional[int] = None
    retry_delay: Optional[int] = None

    def to_dict(self) -> Dict[str, Any]:
        """Convert node to dictionary representation."""
        data = super().to_dict()
        data["type"] = self.type.value
        data["label"] = self.label
        data["flipped"] = self.flipped
        if self.metadata:
            data["metadata"] = self.metadata
        data["hook_type"] = self.hook_type.value if self.hook_type else None
        data["command"] = self.command
        data["args"] = self.args
        data["env"] = self.env
        data["cwd"] = self.cwd
        data["url"] = self.url
        data["method"] = self.method.value if self.method else None
        data["headers"] = self.headers
        data["script"] = self.script
        data["function_name"] = self.function_name
        data["file_path"] = self.file_path
        data["format"] = self.format
        data["timeout"] = self.timeout
        data["retry_count"] = self.retry_count
        data["retry_delay"] = self.retry_delay
        return data


@dataclass(frozen=True)
class JsonSchemaValidatorNode(BaseExecutableNode):
    type: NodeType = field(default=NodeType.json_schema_validator, init=False)
    label: str = ""
    flipped: bool = False
    metadata: Optional[Dict[str, Any]] = None
    schema_path: Optional[str] = None
    schema: Optional[Dict[str, Any]] = None
    data_path: Optional[str] = None
    strict_mode: Optional[bool] = None
    error_on_extra: Optional[bool] = None

    def to_dict(self) -> Dict[str, Any]:
        """Convert node to dictionary representation."""
        data = super().to_dict()
        data["type"] = self.type.value
        data["label"] = self.label
        data["flipped"] = self.flipped
        if self.metadata:
            data["metadata"] = self.metadata
        data["schema_path"] = self.schema_path
        data["schema"] = self.schema
        data["data_path"] = self.data_path
        data["strict_mode"] = self.strict_mode
        data["error_on_extra"] = self.error_on_extra
        return data


@dataclass(frozen=True)
class NotionNode(BaseExecutableNode):
    operation: NotionOperation = field()
    type: NodeType = field(default=NodeType.notion, init=False)
    label: str = ""
    flipped: bool = False
    metadata: Optional[Dict[str, Any]] = None
    page_id: Optional[str] = None
    database_id: Optional[str] = None

    def to_dict(self) -> Dict[str, Any]:
        """Convert node to dictionary representation."""
        data = super().to_dict()
        data["type"] = self.type.value
        data["label"] = self.label
        data["flipped"] = self.flipped
        if self.metadata:
            data["metadata"] = self.metadata
        data["operation"] = self.operation.value if self.operation else None
        data["page_id"] = self.page_id
        data["database_id"] = self.database_id
        return data


@dataclass(frozen=True)
class PersonJobNode(BaseExecutableNode):
    first_only_prompt: str = field()
    max_iteration: int = field()
    type: NodeType = field(default=NodeType.person_job, init=False)
    label: str = ""
    flipped: bool = False
    metadata: Optional[Dict[str, Any]] = None
    person: Optional[PersonID] = None
    default_prompt: Optional[str] = None
    memory_settings: Optional[MemorySettings] = None
    tools: Optional[List[ToolConfig]] = None

    def to_dict(self) -> Dict[str, Any]:
        """Convert node to dictionary representation."""
        data = super().to_dict()
        data["type"] = self.type.value
        data["label"] = self.label
        data["flipped"] = self.flipped
        if self.metadata:
            data["metadata"] = self.metadata
        data["person"] = self.person
        data["first_only_prompt"] = self.first_only_prompt
        data["default_prompt"] = self.default_prompt
        data["max_iteration"] = self.max_iteration
        data["memory_settings"] = self.memory_settings
        data["tools"] = self.tools
        return data


@dataclass(frozen=True)
class StartNode(BaseExecutableNode):
    type: NodeType = field(default=NodeType.start, init=False)
    label: str = ""
    flipped: bool = False
    metadata: Optional[Dict[str, Any]] = None
    custom_data: Dict[str, Any] = field(default_factory=dict)
    output_data_structure: Dict[str, Any] = field(default_factory=dict)
    trigger_mode: Optional[HookTriggerMode] = None
    hook_event: Optional[str] = None
    hook_filters: Optional[Dict[str, Any]] = None

    def to_dict(self) -> Dict[str, Any]:
        """Convert node to dictionary representation."""
        data = super().to_dict()
        data["type"] = self.type.value
        data["label"] = self.label
        data["flipped"] = self.flipped
        if self.metadata:
            data["metadata"] = self.metadata
        data["custom_data"] = self.custom_data
        data["output_data_structure"] = self.output_data_structure
        data["trigger_mode"] = self.trigger_mode.value if self.trigger_mode else None
        data["hook_event"] = self.hook_event
        data["hook_filters"] = self.hook_filters
        return data


@dataclass(frozen=True)
class SubDiagramNode(BaseExecutableNode):
    type: NodeType = field(default=NodeType.sub_diagram, init=False)
    label: str = ""
    flipped: bool = False
    metadata: Optional[Dict[str, Any]] = None
    diagram_name: Optional[str] = None
    diagram_format: Optional[DiagramFormat] = None
    diagram_data: Optional[Dict[str, Any]] = None
    batch: Optional[bool] = None
    batch_input_key: Optional[str] = None
    batch_parallel: Optional[bool] = None

    def to_dict(self) -> Dict[str, Any]:
        """Convert node to dictionary representation."""
        data = super().to_dict()
        data["type"] = self.type.value
        data["label"] = self.label
        data["flipped"] = self.flipped
        if self.metadata:
            data["metadata"] = self.metadata
        data["diagram_name"] = self.diagram_name
        data["diagram_format"] = self.diagram_format.value if self.diagram_format else None
        data["diagram_data"] = self.diagram_data
        data["batch"] = self.batch
        data["batch_input_key"] = self.batch_input_key
        data["batch_parallel"] = self.batch_parallel
        return data


@dataclass(frozen=True)
class TemplateJobNode(BaseExecutableNode):
    type: NodeType = field(default=NodeType.template_job, init=False)
    label: str = ""
    flipped: bool = False
    metadata: Optional[Dict[str, Any]] = None
    template_path: Optional[str] = None
    template_content: Optional[str] = None
    output_path: Optional[str] = None
    variables: Optional[Dict[str, Any]] = None
    engine: Optional[Literal["internal", "jinja2", "handlebars"]] = None

    def to_dict(self) -> Dict[str, Any]:
        """Convert node to dictionary representation."""
        data = super().to_dict()
        data["type"] = self.type.value
        data["label"] = self.label
        data["flipped"] = self.flipped
        if self.metadata:
            data["metadata"] = self.metadata
        data["template_path"] = self.template_path
        data["template_content"] = self.template_content
        data["output_path"] = self.output_path
        data["variables"] = self.variables
        data["engine"] = self.engine
        return data


@dataclass(frozen=True)
class TypescriptAstNode(BaseExecutableNode):
    type: NodeType = field(default=NodeType.typescript_ast, init=False)
    label: str = ""
    flipped: bool = False
    metadata: Optional[Dict[str, Any]] = None
    source: Optional[str] = None
    extractPatterns: Optional[List[str]] = None
    includeJSDoc: Optional[bool] = None
    parseMode: Optional[Literal["module", "script"]] = None

    def to_dict(self) -> Dict[str, Any]:
        """Convert node to dictionary representation."""
        data = super().to_dict()
        data["type"] = self.type.value
        data["label"] = self.label
        data["flipped"] = self.flipped
        if self.metadata:
            data["metadata"] = self.metadata
        data["source"] = self.source
        data["extractPatterns"] = self.extractPatterns
        data["includeJSDoc"] = self.includeJSDoc
        data["parseMode"] = self.parseMode
        return data


@dataclass(frozen=True)
class UserResponseNode(BaseExecutableNode):
    prompt: str = field()
    timeout: int = field()
    type: NodeType = field(default=NodeType.user_response, init=False)
    label: str = ""
    flipped: bool = False
    metadata: Optional[Dict[str, Any]] = None

    def to_dict(self) -> Dict[str, Any]:
        """Convert node to dictionary representation."""
        data = super().to_dict()
        data["type"] = self.type.value
        data["label"] = self.label
        data["flipped"] = self.flipped
        if self.metadata:
            data["metadata"] = self.metadata
        data["prompt"] = self.prompt
        data["timeout"] = self.timeout
        return data


@dataclass(frozen=True)
class PersonBatchJobNode(PersonJobNode):
    """Person batch job node - same as PersonJobNode but with different type."""
    type: NodeType = field(default=NodeType.person_batch_job, init=False)


ExecutableNode = Union[
    ApiJobNode,
    CodeJobNode,
    ConditionNode,
    DBNode,
    EndpointNode,
    HookNode,
    JsonSchemaValidatorNode,
    NotionNode,
    PersonJobNode,
    StartNode,
    SubDiagramNode,
    TemplateJobNode,
    TypescriptAstNode,
    UserResponseNode,
    PersonBatchJobNode
]


def create_executable_node(
    node_type: NodeType,
    node_id: NodeID,
    position: Vec2,
    label: str = "",
    data: Optional[Dict[str, Any]] = None,
    flipped: bool = False,
    metadata: Optional[Dict[str, Any]] = None
) -> ExecutableNode:
    """Factory function to create typed executable nodes from diagram data."""
    data = data or {}
    
    if node_type == NodeType.api_job:
        return ApiJobNode(
            id=node_id,
            position=position,
            label=label,
            flipped=flipped,
            metadata=metadata,
            url=data.get("url"),
            method=data.get("method"),
            headers=data.get("headers", None),
            params=data.get("params", None),
            body=data.get("body", None),
            timeout=data.get("timeout", None),
            auth_type=data.get("auth_type", None),
            auth_config=data.get("auth_config", None),
        )
    
    if node_type == NodeType.code_job:
        return CodeJobNode(
            id=node_id,
            position=position,
            label=label,
            flipped=flipped,
            metadata=metadata,
            language=data.get("language"),
            filePath=data.get("filePath", None),
            code=data.get("code", None),
            functionName=data.get("functionName", None),
            timeout=data.get("timeout", None),
        )
    
    if node_type == NodeType.condition:
        return ConditionNode(
            id=node_id,
            position=position,
            label=label,
            flipped=flipped,
            metadata=metadata,
            condition_type=data.get("condition_type"),
            expression=data.get("expression", None),
            node_indices=data.get("node_indices", None),
        )
    
    if node_type == NodeType.db:
        return DBNode(
            id=node_id,
            position=position,
            label=label,
            flipped=flipped,
            metadata=metadata,
            file=data.get("file", None),
            collection=data.get("collection", None),
            sub_type=data.get("sub_type"),
            operation=data.get("operation"),
            query=data.get("query", None),
            data=data.get("data", None),
        )
    
    if node_type == NodeType.endpoint:
        return EndpointNode(
            id=node_id,
            position=position,
            label=label,
            flipped=flipped,
            metadata=metadata,
            save_to_file=data.get("save_to_file"),
            file_name=data.get("file_name", None),
        )
    
    if node_type == NodeType.hook:
        return HookNode(
            id=node_id,
            position=position,
            label=label,
            flipped=flipped,
            metadata=metadata,
            hook_type=data.get("hook_type"),
            command=data.get("command", None),
            args=data.get("args", None),
            env=data.get("env", None),
            cwd=data.get("cwd", None),
            url=data.get("url", None),
            method=data.get("method", None),
            headers=data.get("headers", None),
            script=data.get("script", None),
            function_name=data.get("function_name", None),
            file_path=data.get("file_path", None),
            format=data.get("format", None),
            timeout=data.get("timeout", None),
            retry_count=data.get("retry_count", None),
            retry_delay=data.get("retry_delay", None),
        )
    
    if node_type == NodeType.json_schema_validator:
        return JsonSchemaValidatorNode(
            id=node_id,
            position=position,
            label=label,
            flipped=flipped,
            metadata=metadata,
            schema_path=data.get("schema_path", None),
            schema=data.get("schema", None),
            data_path=data.get("data_path", None),
            strict_mode=data.get("strict_mode", None),
            error_on_extra=data.get("error_on_extra", None),
        )
    
    if node_type == NodeType.notion:
        return NotionNode(
            id=node_id,
            position=position,
            label=label,
            flipped=flipped,
            metadata=metadata,
            operation=data.get("operation"),
            page_id=data.get("page_id", None),
            database_id=data.get("database_id", None),
        )
    
    if node_type == NodeType.person_job:
        return PersonJobNode(
            id=node_id,
            position=position,
            label=label,
            flipped=flipped,
            metadata=metadata,
            person=data.get("person", None),
            first_only_prompt=data.get("first_only_prompt"),
            default_prompt=data.get("default_prompt", None),
            max_iteration=data.get("max_iteration"),
            memory_settings=data.get("memory_settings", None),
            tools=data.get("tools", None),
        )
    
    if node_type == NodeType.start:
        return StartNode(
            id=node_id,
            position=position,
            label=label,
            flipped=flipped,
            metadata=metadata,
            custom_data=data.get("custom_data"),
            output_data_structure=data.get("output_data_structure"),
            trigger_mode=data.get("trigger_mode", None),
            hook_event=data.get("hook_event", None),
            hook_filters=data.get("hook_filters", None),
        )
    
    if node_type == NodeType.sub_diagram:
        return SubDiagramNode(
            id=node_id,
            position=position,
            label=label,
            flipped=flipped,
            metadata=metadata,
            diagram_name=data.get("diagram_name", None),
            diagram_format=data.get("diagram_format", None),
            diagram_data=data.get("diagram_data", None),
            batch=data.get("batch", None),
            batch_input_key=data.get("batch_input_key", None),
            batch_parallel=data.get("batch_parallel", None),
        )
    
    if node_type == NodeType.template_job:
        return TemplateJobNode(
            id=node_id,
            position=position,
            label=label,
            flipped=flipped,
            metadata=metadata,
            template_path=data.get("template_path", None),
            template_content=data.get("template_content", None),
            output_path=data.get("output_path", None),
            variables=data.get("variables", None),
            engine=data.get("engine", None),
        )
    
    if node_type == NodeType.typescript_ast:
        return TypescriptAstNode(
            id=node_id,
            position=position,
            label=label,
            flipped=flipped,
            metadata=metadata,
            source=data.get("source", None),
            extractPatterns=data.get("extractPatterns", None),
            includeJSDoc=data.get("includeJSDoc", None),
            parseMode=data.get("parseMode", None),
        )
    
    if node_type == NodeType.user_response:
        return UserResponseNode(
            id=node_id,
            position=position,
            label=label,
            flipped=flipped,
            metadata=metadata,
            prompt=data.get("prompt"),
            timeout=data.get("timeout"),
        )
    
    if node_type == NodeType.person_batch_job:
        return PersonBatchJobNode(
            id=node_id,
            position=position,
            label=label,
            flipped=flipped,
            metadata=metadata,
            person=data.get("person", None),
            first_only_prompt=data.get("first_only_prompt"),
            default_prompt=data.get("default_prompt", None),
            max_iteration=data.get("max_iteration"),
            memory_settings=data.get("memory_settings", None),
            tools=data.get("tools", None),
        )
    
    raise ValueError(f"Unknown node type: {node_type}")