/**
 * Generated Zod schemas from TypeScript definitions.
 * DO NOT EDIT - This file is automatically generated.
 */

import { z } from 'zod';

// Type aliases as Zod schemas

{{#if (eq this.type "type_alias")}}
export const GraphQLDomainPersonTypeSchema = {{toZodSchema this.definition}};
export type GraphQLDomainPersonType = z.infer<typeof GraphQLDomainPersonTypeSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const StoreDiagramSchema = {{toZodSchema this.definition}};
export type StoreDiagram = z.infer<typeof StoreDiagramSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const ToolConfigSchema = {{toZodSchema this.definition}};
export type ToolConfig = z.infer<typeof ToolConfigSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const WebSearchResultSchema = {{toZodSchema this.definition}};
export type WebSearchResult = z.infer<typeof WebSearchResultSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const ImageGenerationResultSchema = {{toZodSchema this.definition}};
export type ImageGenerationResult = z.infer<typeof ImageGenerationResultSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const ToolOutputSchema = {{toZodSchema this.definition}};
export type ToolOutput = z.infer<typeof ToolOutputSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const ChatResultSchema = {{toZodSchema this.definition}};
export type ChatResult = z.infer<typeof ChatResultSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const LLMRequestOptionsSchema = {{toZodSchema this.definition}};
export type LLMRequestOptions = z.infer<typeof LLMRequestOptionsSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const TokenUsageSchema = {{toZodSchema this.definition}};
export type TokenUsage = z.infer<typeof TokenUsageSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const NodeStateSchema = {{toZodSchema this.definition}};
export type NodeState = z.infer<typeof NodeStateSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const ExecutionStateSchema = {{toZodSchema this.definition}};
export type ExecutionState = z.infer<typeof ExecutionStateSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const ExecutionOptionsSchema = {{toZodSchema this.definition}};
export type ExecutionOptions = z.infer<typeof ExecutionOptionsSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const InteractivePromptDataSchema = {{toZodSchema this.definition}};
export type InteractivePromptData = z.infer<typeof InteractivePromptDataSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const InteractiveResponseSchema = {{toZodSchema this.definition}};
export type InteractiveResponse = z.infer<typeof InteractiveResponseSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const ExecutionUpdateSchema = {{toZodSchema this.definition}};
export type ExecutionUpdate = z.infer<typeof ExecutionUpdateSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const NodeDefinitionSchema = {{toZodSchema this.definition}};
export type NodeDefinition = z.infer<typeof NodeDefinitionSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const Vec2Schema = {{toZodSchema this.definition}};
export type Vec2 = z.infer<typeof Vec2Schema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const DomainHandleSchema = {{toZodSchema this.definition}};
export type DomainHandle = z.infer<typeof DomainHandleSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const DomainNodeSchema = {{toZodSchema this.definition}};
export type DomainNode = z.infer<typeof DomainNodeSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const DomainArrowSchema = {{toZodSchema this.definition}};
export type DomainArrow = z.infer<typeof DomainArrowSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const MemoryConfigSchema = {{toZodSchema this.definition}};
export type MemoryConfig = z.infer<typeof MemoryConfigSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const MemorySettingsSchema = {{toZodSchema this.definition}};
export type MemorySettings = z.infer<typeof MemorySettingsSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const PersonLLMConfigSchema = {{toZodSchema this.definition}};
export type PersonLLMConfig = z.infer<typeof PersonLLMConfigSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const DomainPersonSchema = {{toZodSchema this.definition}};
export type DomainPerson = z.infer<typeof DomainPersonSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const DomainApiKeySchema = {{toZodSchema this.definition}};
export type DomainApiKey = z.infer<typeof DomainApiKeySchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const DiagramMetadataSchema = {{toZodSchema this.definition}};
export type DiagramMetadata = z.infer<typeof DiagramMetadataSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const DomainDiagramSchema = {{toZodSchema this.definition}};
export type DomainDiagram = z.infer<typeof DomainDiagramSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const BaseNodeDataSchema = {{toZodSchema this.definition}};
export type BaseNodeData = z.infer<typeof BaseNodeDataSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const StartNodeDataSchema = {{toZodSchema this.definition}};
export type StartNodeData = z.infer<typeof StartNodeDataSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const ConditionNodeDataSchema = {{toZodSchema this.definition}};
export type ConditionNodeData = z.infer<typeof ConditionNodeDataSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const PersonJobNodeDataSchema = {{toZodSchema this.definition}};
export type PersonJobNodeData = z.infer<typeof PersonJobNodeDataSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const EndpointNodeDataSchema = {{toZodSchema this.definition}};
export type EndpointNodeData = z.infer<typeof EndpointNodeDataSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const DBNodeDataSchema = {{toZodSchema this.definition}};
export type DBNodeData = z.infer<typeof DBNodeDataSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const JobNodeDataSchema = {{toZodSchema this.definition}};
export type JobNodeData = z.infer<typeof JobNodeDataSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const CodeJobNodeDataSchema = {{toZodSchema this.definition}};
export type CodeJobNodeData = z.infer<typeof CodeJobNodeDataSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const ApiJobNodeDataSchema = {{toZodSchema this.definition}};
export type ApiJobNodeData = z.infer<typeof ApiJobNodeDataSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const UserResponseNodeDataSchema = {{toZodSchema this.definition}};
export type UserResponseNodeData = z.infer<typeof UserResponseNodeDataSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const NotionNodeDataSchema = {{toZodSchema this.definition}};
export type NotionNodeData = z.infer<typeof NotionNodeDataSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const HookNodeDataSchema = {{toZodSchema this.definition}};
export type HookNodeData = z.infer<typeof HookNodeDataSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const TemplateJobNodeDataSchema = {{toZodSchema this.definition}};
export type TemplateJobNodeData = z.infer<typeof TemplateJobNodeDataSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const ShellJobNodeDataSchema = {{toZodSchema this.definition}};
export type ShellJobNodeData = z.infer<typeof ShellJobNodeDataSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const JsonSchemaValidatorNodeDataSchema = {{toZodSchema this.definition}};
export type JsonSchemaValidatorNodeData = z.infer<typeof JsonSchemaValidatorNodeDataSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const TypescriptAstNodeDataSchema = {{toZodSchema this.definition}};
export type TypescriptAstNodeData = z.infer<typeof TypescriptAstNodeDataSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const SubDiagramNodeDataSchema = {{toZodSchema this.definition}};
export type SubDiagramNodeData = z.infer<typeof SubDiagramNodeDataSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const MessageSchema = {{toZodSchema this.definition}};
export type Message = z.infer<typeof MessageSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const ConversationMetadataSchema = {{toZodSchema this.definition}};
export type ConversationMetadata = z.infer<typeof ConversationMetadataSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const ConversationSchema = {{toZodSchema this.definition}};
export type Conversation = z.infer<typeof ConversationSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const MemoryStateSchema = {{toZodSchema this.definition}};
export type MemoryState = z.infer<typeof MemoryStateSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const LLMServiceSchema = {{toZodSchema this.definition}};
export type LLMService = z.infer<typeof LLMServiceSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const APIServiceTypeSchema = {{toZodSchema this.definition}};
export type APIServiceType = z.infer<typeof APIServiceTypeSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const NotionOperationSchema = {{toZodSchema this.definition}};
export type NotionOperation = z.infer<typeof NotionOperationSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const ToolTypeSchema = {{toZodSchema this.definition}};
export type ToolType = z.infer<typeof ToolTypeSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const ExecutionStatusSchema = {{toZodSchema this.definition}};
export type ExecutionStatus = z.infer<typeof ExecutionStatusSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const NodeExecutionStatusSchema = {{toZodSchema this.definition}};
export type NodeExecutionStatus = z.infer<typeof NodeExecutionStatusSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const EventTypeSchema = {{toZodSchema this.definition}};
export type EventType = z.infer<typeof EventTypeSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const NodeTypeSchema = {{toZodSchema this.definition}};
export type NodeType = z.infer<typeof NodeTypeSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const HandleDirectionSchema = {{toZodSchema this.definition}};
export type HandleDirection = z.infer<typeof HandleDirectionSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const HandleLabelSchema = {{toZodSchema this.definition}};
export type HandleLabel = z.infer<typeof HandleLabelSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const DataTypeSchema = {{toZodSchema this.definition}};
export type DataType = z.infer<typeof DataTypeSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const ForgettingModeSchema = {{toZodSchema this.definition}};
export type ForgettingMode = z.infer<typeof ForgettingModeSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const MemoryViewSchema = {{toZodSchema this.definition}};
export type MemoryView = z.infer<typeof MemoryViewSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const DiagramFormatSchema = {{toZodSchema this.definition}};
export type DiagramFormat = z.infer<typeof DiagramFormatSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const DBBlockSubTypeSchema = {{toZodSchema this.definition}};
export type DBBlockSubType = z.infer<typeof DBBlockSubTypeSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const ContentTypeSchema = {{toZodSchema this.definition}};
export type ContentType = z.infer<typeof ContentTypeSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const SupportedLanguageSchema = {{toZodSchema this.definition}};
export type SupportedLanguage = z.infer<typeof SupportedLanguageSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const HttpMethodSchema = {{toZodSchema this.definition}};
export type HttpMethod = z.infer<typeof HttpMethodSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const HookTypeSchema = {{toZodSchema this.definition}};
export type HookType = z.infer<typeof HookTypeSchema>;
{{/if}}

{{#if (eq this.type "type_alias")}}
export const HookTriggerModeSchema = {{toZodSchema this.definition}};
export type HookTriggerMode = z.infer<typeof HookTriggerModeSchema>;
{{/if}}


// Enum schemas

{{#if (eq this.type "enum")}}
export const GraphQLDomainPersonTypeSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const StoreDiagramSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const ToolConfigSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const WebSearchResultSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const ImageGenerationResultSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const ToolOutputSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const ChatResultSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const LLMRequestOptionsSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const TokenUsageSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const NodeStateSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const ExecutionStateSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const ExecutionOptionsSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const InteractivePromptDataSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const InteractiveResponseSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const ExecutionUpdateSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const NodeDefinitionSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const Vec2Schema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const DomainHandleSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const DomainNodeSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const DomainArrowSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const MemoryConfigSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const MemorySettingsSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const PersonLLMConfigSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const DomainPersonSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const DomainApiKeySchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const DiagramMetadataSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const DomainDiagramSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const BaseNodeDataSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const StartNodeDataSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const ConditionNodeDataSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const PersonJobNodeDataSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const EndpointNodeDataSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const DBNodeDataSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const JobNodeDataSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const CodeJobNodeDataSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const ApiJobNodeDataSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const UserResponseNodeDataSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const NotionNodeDataSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const HookNodeDataSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const TemplateJobNodeDataSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const ShellJobNodeDataSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const JsonSchemaValidatorNodeDataSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const TypescriptAstNodeDataSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const SubDiagramNodeDataSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const MessageSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const ConversationMetadataSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const ConversationSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const MemoryStateSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const LLMServiceSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const APIServiceTypeSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const NotionOperationSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const ToolTypeSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const ExecutionStatusSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const NodeExecutionStatusSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const EventTypeSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const NodeTypeSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const HandleDirectionSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const HandleLabelSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const DataTypeSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const ForgettingModeSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const MemoryViewSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const DiagramFormatSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const DBBlockSubTypeSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const ContentTypeSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const SupportedLanguageSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const HttpMethodSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const HookTypeSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
{{#if (eq this.type "enum")}}
export const HookTriggerModeSchema = z.enum([
  {{#each this.enum_values}}
  "{{this.[1]}}",
  
]);
export type {{this.name}} = z.infer<typeof {{this.name}}Schema>;

{{/if}}
{{/each}}

// Interface/Class schemas

{{#if (eq this.type "class")}}
export const GraphQLDomainPersonTypeSchema = z.object({
  {{#each this.fields}}
  GraphQLDomainPersonType: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const StoreDiagramSchema = z.object({
  {{#each this.fields}}
  StoreDiagram: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const ToolConfigSchema = z.object({
  {{#each this.fields}}
  ToolConfig: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const WebSearchResultSchema = z.object({
  {{#each this.fields}}
  WebSearchResult: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const ImageGenerationResultSchema = z.object({
  {{#each this.fields}}
  ImageGenerationResult: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const ToolOutputSchema = z.object({
  {{#each this.fields}}
  ToolOutput: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const ChatResultSchema = z.object({
  {{#each this.fields}}
  ChatResult: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const LLMRequestOptionsSchema = z.object({
  {{#each this.fields}}
  LLMRequestOptions: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const TokenUsageSchema = z.object({
  {{#each this.fields}}
  TokenUsage: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const NodeStateSchema = z.object({
  {{#each this.fields}}
  NodeState: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const ExecutionStateSchema = z.object({
  {{#each this.fields}}
  ExecutionState: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const ExecutionOptionsSchema = z.object({
  {{#each this.fields}}
  ExecutionOptions: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const InteractivePromptDataSchema = z.object({
  {{#each this.fields}}
  InteractivePromptData: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const InteractiveResponseSchema = z.object({
  {{#each this.fields}}
  InteractiveResponse: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const ExecutionUpdateSchema = z.object({
  {{#each this.fields}}
  ExecutionUpdate: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const NodeDefinitionSchema = z.object({
  {{#each this.fields}}
  NodeDefinition: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const Vec2Schema = z.object({
  {{#each this.fields}}
  Vec2: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const DomainHandleSchema = z.object({
  {{#each this.fields}}
  DomainHandle: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const DomainNodeSchema = z.object({
  {{#each this.fields}}
  DomainNode: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const DomainArrowSchema = z.object({
  {{#each this.fields}}
  DomainArrow: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const MemoryConfigSchema = z.object({
  {{#each this.fields}}
  MemoryConfig: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const MemorySettingsSchema = z.object({
  {{#each this.fields}}
  MemorySettings: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const PersonLLMConfigSchema = z.object({
  {{#each this.fields}}
  PersonLLMConfig: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const DomainPersonSchema = z.object({
  {{#each this.fields}}
  DomainPerson: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const DomainApiKeySchema = z.object({
  {{#each this.fields}}
  DomainApiKey: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const DiagramMetadataSchema = z.object({
  {{#each this.fields}}
  DiagramMetadata: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const DomainDiagramSchema = z.object({
  {{#each this.fields}}
  DomainDiagram: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const BaseNodeDataSchema = z.object({
  {{#each this.fields}}
  BaseNodeData: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const StartNodeDataSchema = z.object({
  {{#each this.fields}}
  StartNodeData: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const ConditionNodeDataSchema = z.object({
  {{#each this.fields}}
  ConditionNodeData: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const PersonJobNodeDataSchema = z.object({
  {{#each this.fields}}
  PersonJobNodeData: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const EndpointNodeDataSchema = z.object({
  {{#each this.fields}}
  EndpointNodeData: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const DBNodeDataSchema = z.object({
  {{#each this.fields}}
  DBNodeData: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const JobNodeDataSchema = z.object({
  {{#each this.fields}}
  JobNodeData: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const CodeJobNodeDataSchema = z.object({
  {{#each this.fields}}
  CodeJobNodeData: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const ApiJobNodeDataSchema = z.object({
  {{#each this.fields}}
  ApiJobNodeData: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const UserResponseNodeDataSchema = z.object({
  {{#each this.fields}}
  UserResponseNodeData: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const NotionNodeDataSchema = z.object({
  {{#each this.fields}}
  NotionNodeData: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const HookNodeDataSchema = z.object({
  {{#each this.fields}}
  HookNodeData: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const TemplateJobNodeDataSchema = z.object({
  {{#each this.fields}}
  TemplateJobNodeData: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const ShellJobNodeDataSchema = z.object({
  {{#each this.fields}}
  ShellJobNodeData: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const JsonSchemaValidatorNodeDataSchema = z.object({
  {{#each this.fields}}
  JsonSchemaValidatorNodeData: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const TypescriptAstNodeDataSchema = z.object({
  {{#each this.fields}}
  TypescriptAstNodeData: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const SubDiagramNodeDataSchema = z.object({
  {{#each this.fields}}
  SubDiagramNodeData: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const MessageSchema = z.object({
  {{#each this.fields}}
  Message: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const ConversationMetadataSchema = z.object({
  {{#each this.fields}}
  ConversationMetadata: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const ConversationSchema = z.object({
  {{#each this.fields}}
  Conversation: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const MemoryStateSchema = z.object({
  {{#each this.fields}}
  MemoryState: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const LLMServiceSchema = z.object({
  {{#each this.fields}}
  LLMService: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const APIServiceTypeSchema = z.object({
  {{#each this.fields}}
  APIServiceType: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const NotionOperationSchema = z.object({
  {{#each this.fields}}
  NotionOperation: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const ToolTypeSchema = z.object({
  {{#each this.fields}}
  ToolType: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const ExecutionStatusSchema = z.object({
  {{#each this.fields}}
  ExecutionStatus: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const NodeExecutionStatusSchema = z.object({
  {{#each this.fields}}
  NodeExecutionStatus: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const EventTypeSchema = z.object({
  {{#each this.fields}}
  EventType: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const NodeTypeSchema = z.object({
  {{#each this.fields}}
  NodeType: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const HandleDirectionSchema = z.object({
  {{#each this.fields}}
  HandleDirection: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const HandleLabelSchema = z.object({
  {{#each this.fields}}
  HandleLabel: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const DataTypeSchema = z.object({
  {{#each this.fields}}
  DataType: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const ForgettingModeSchema = z.object({
  {{#each this.fields}}
  ForgettingMode: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const MemoryViewSchema = z.object({
  {{#each this.fields}}
  MemoryView: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const DiagramFormatSchema = z.object({
  {{#each this.fields}}
  DiagramFormat: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const DBBlockSubTypeSchema = z.object({
  {{#each this.fields}}
  DBBlockSubType: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const ContentTypeSchema = z.object({
  {{#each this.fields}}
  ContentType: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const SupportedLanguageSchema = z.object({
  {{#each this.fields}}
  SupportedLanguage: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const HttpMethodSchema = z.object({
  {{#each this.fields}}
  HttpMethod: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const HookTypeSchema = z.object({
  {{#each this.fields}}
  HookType: {{toZodType this.type this.required}},
  
{{#if (eq this.type "class")}}
export const HookTriggerModeSchema = z.object({
  {{#each this.fields}}
  HookTriggerMode: {{toZodType this.type this.required}},
  
});

export type {{this.name}} = z.infer<typeof {{this.name}}Schema>;

{{/if}}
{{/each}}

// Union schemas for node types
export const NodeDataSchema = z.discriminatedUnion('type', [
  
  {{#if (endsWith this.name "NodeData")}}
  GraphQLDomainPersonTypeSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  StoreDiagramSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  ToolConfigSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  WebSearchResultSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  ImageGenerationResultSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  ToolOutputSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  ChatResultSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  LLMRequestOptionsSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  TokenUsageSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  NodeStateSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  ExecutionStateSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  ExecutionOptionsSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  InteractivePromptDataSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  InteractiveResponseSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  ExecutionUpdateSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  NodeDefinitionSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  Vec2Schema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  DomainHandleSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  DomainNodeSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  DomainArrowSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  MemoryConfigSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  MemorySettingsSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  PersonLLMConfigSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  DomainPersonSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  DomainApiKeySchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  DiagramMetadataSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  DomainDiagramSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  BaseNodeDataSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  StartNodeDataSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  ConditionNodeDataSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  PersonJobNodeDataSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  EndpointNodeDataSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  DBNodeDataSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  JobNodeDataSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  CodeJobNodeDataSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  ApiJobNodeDataSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  UserResponseNodeDataSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  NotionNodeDataSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  HookNodeDataSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  TemplateJobNodeDataSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  ShellJobNodeDataSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  JsonSchemaValidatorNodeDataSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  TypescriptAstNodeDataSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  SubDiagramNodeDataSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  MessageSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  ConversationMetadataSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  ConversationSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  MemoryStateSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  LLMServiceSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  APIServiceTypeSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  NotionOperationSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  ToolTypeSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  ExecutionStatusSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  NodeExecutionStatusSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  EventTypeSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  NodeTypeSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  HandleDirectionSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  HandleLabelSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  DataTypeSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  ForgettingModeSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  MemoryViewSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  DiagramFormatSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  DBBlockSubTypeSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  ContentTypeSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  SupportedLanguageSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  HttpMethodSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  HookTypeSchema,
  {{/if}}
  
  {{#if (endsWith this.name "NodeData")}}
  HookTriggerModeSchema,
  {{/if}}
  
]);

export type NodeData = z.infer<typeof NodeDataSchema>;

// Helper functions
export function validateNodeData(data: unknown): NodeData {
  return NodeDataSchema.parse(data);
}

export function isValidNodeData(data: unknown): data is NodeData {
  return NodeDataSchema.safeParse(data).success;
}

// Schema registry for dynamic validation
export const SchemaRegistry = {
  
  GraphQLDomainPersonType: GraphQLDomainPersonTypeSchema,
  
  StoreDiagram: StoreDiagramSchema,
  
  ToolConfig: ToolConfigSchema,
  
  WebSearchResult: WebSearchResultSchema,
  
  ImageGenerationResult: ImageGenerationResultSchema,
  
  ToolOutput: ToolOutputSchema,
  
  ChatResult: ChatResultSchema,
  
  LLMRequestOptions: LLMRequestOptionsSchema,
  
  TokenUsage: TokenUsageSchema,
  
  NodeState: NodeStateSchema,
  
  ExecutionState: ExecutionStateSchema,
  
  ExecutionOptions: ExecutionOptionsSchema,
  
  InteractivePromptData: InteractivePromptDataSchema,
  
  InteractiveResponse: InteractiveResponseSchema,
  
  ExecutionUpdate: ExecutionUpdateSchema,
  
  NodeDefinition: NodeDefinitionSchema,
  
  Vec2: Vec2Schema,
  
  DomainHandle: DomainHandleSchema,
  
  DomainNode: DomainNodeSchema,
  
  DomainArrow: DomainArrowSchema,
  
  MemoryConfig: MemoryConfigSchema,
  
  MemorySettings: MemorySettingsSchema,
  
  PersonLLMConfig: PersonLLMConfigSchema,
  
  DomainPerson: DomainPersonSchema,
  
  DomainApiKey: DomainApiKeySchema,
  
  DiagramMetadata: DiagramMetadataSchema,
  
  DomainDiagram: DomainDiagramSchema,
  
  BaseNodeData: BaseNodeDataSchema,
  
  StartNodeData: StartNodeDataSchema,
  
  ConditionNodeData: ConditionNodeDataSchema,
  
  PersonJobNodeData: PersonJobNodeDataSchema,
  
  EndpointNodeData: EndpointNodeDataSchema,
  
  DBNodeData: DBNodeDataSchema,
  
  JobNodeData: JobNodeDataSchema,
  
  CodeJobNodeData: CodeJobNodeDataSchema,
  
  ApiJobNodeData: ApiJobNodeDataSchema,
  
  UserResponseNodeData: UserResponseNodeDataSchema,
  
  NotionNodeData: NotionNodeDataSchema,
  
  HookNodeData: HookNodeDataSchema,
  
  TemplateJobNodeData: TemplateJobNodeDataSchema,
  
  ShellJobNodeData: ShellJobNodeDataSchema,
  
  JsonSchemaValidatorNodeData: JsonSchemaValidatorNodeDataSchema,
  
  TypescriptAstNodeData: TypescriptAstNodeDataSchema,
  
  SubDiagramNodeData: SubDiagramNodeDataSchema,
  
  Message: MessageSchema,
  
  ConversationMetadata: ConversationMetadataSchema,
  
  Conversation: ConversationSchema,
  
  MemoryState: MemoryStateSchema,
  
  LLMService: LLMServiceSchema,
  
  APIServiceType: APIServiceTypeSchema,
  
  NotionOperation: NotionOperationSchema,
  
  ToolType: ToolTypeSchema,
  
  ExecutionStatus: ExecutionStatusSchema,
  
  NodeExecutionStatus: NodeExecutionStatusSchema,
  
  EventType: EventTypeSchema,
  
  NodeType: NodeTypeSchema,
  
  HandleDirection: HandleDirectionSchema,
  
  HandleLabel: HandleLabelSchema,
  
  DataType: DataTypeSchema,
  
  ForgettingMode: ForgettingModeSchema,
  
  MemoryView: MemoryViewSchema,
  
  DiagramFormat: DiagramFormatSchema,
  
  DBBlockSubType: DBBlockSubTypeSchema,
  
  ContentType: ContentTypeSchema,
  
  SupportedLanguage: SupportedLanguageSchema,
  
  HttpMethod: HttpMethodSchema,
  
  HookType: HookTypeSchema,
  
  HookTriggerMode: HookTriggerModeSchema,
  
} as const;

// Export all schemas
export {
  
  GraphQLDomainPersonTypeSchema,
  
  StoreDiagramSchema,
  
  ToolConfigSchema,
  
  WebSearchResultSchema,
  
  ImageGenerationResultSchema,
  
  ToolOutputSchema,
  
  ChatResultSchema,
  
  LLMRequestOptionsSchema,
  
  TokenUsageSchema,
  
  NodeStateSchema,
  
  ExecutionStateSchema,
  
  ExecutionOptionsSchema,
  
  InteractivePromptDataSchema,
  
  InteractiveResponseSchema,
  
  ExecutionUpdateSchema,
  
  NodeDefinitionSchema,
  
  Vec2Schema,
  
  DomainHandleSchema,
  
  DomainNodeSchema,
  
  DomainArrowSchema,
  
  MemoryConfigSchema,
  
  MemorySettingsSchema,
  
  PersonLLMConfigSchema,
  
  DomainPersonSchema,
  
  DomainApiKeySchema,
  
  DiagramMetadataSchema,
  
  DomainDiagramSchema,
  
  BaseNodeDataSchema,
  
  StartNodeDataSchema,
  
  ConditionNodeDataSchema,
  
  PersonJobNodeDataSchema,
  
  EndpointNodeDataSchema,
  
  DBNodeDataSchema,
  
  JobNodeDataSchema,
  
  CodeJobNodeDataSchema,
  
  ApiJobNodeDataSchema,
  
  UserResponseNodeDataSchema,
  
  NotionNodeDataSchema,
  
  HookNodeDataSchema,
  
  TemplateJobNodeDataSchema,
  
  ShellJobNodeDataSchema,
  
  JsonSchemaValidatorNodeDataSchema,
  
  TypescriptAstNodeDataSchema,
  
  SubDiagramNodeDataSchema,
  
  MessageSchema,
  
  ConversationMetadataSchema,
  
  ConversationSchema,
  
  MemoryStateSchema,
  
  LLMServiceSchema,
  
  APIServiceTypeSchema,
  
  NotionOperationSchema,
  
  ToolTypeSchema,
  
  ExecutionStatusSchema,
  
  NodeExecutionStatusSchema,
  
  EventTypeSchema,
  
  NodeTypeSchema,
  
  HandleDirectionSchema,
  
  HandleLabelSchema,
  
  DataTypeSchema,
  
  ForgettingModeSchema,
  
  MemoryViewSchema,
  
  DiagramFormatSchema,
  
  DBBlockSubTypeSchema,
  
  ContentTypeSchema,
  
  SupportedLanguageSchema,
  
  HttpMethodSchema,
  
  HookTypeSchema,
  
  HookTriggerModeSchema,
  
};