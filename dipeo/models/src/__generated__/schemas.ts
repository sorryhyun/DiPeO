/**
 * GENERATED FILE - DO NOT EDIT
 * Generated by DiPeO code generation
 * Generated at: 2025-10-09T15:31:59.877644
 *
 * Zod validation schemas for all node types.
 * These schemas are exported from @dipeo/models for use across the codebase.
 */

import { z } from 'zod';

// Node validation schemas
export const ApiJobSchema = z.object({
});

export type ApiJobData = z.infer<typeof ApiJobSchema>;
export const CodeJobSchema = z.object({
});

export type CodeJobData = z.infer<typeof CodeJobSchema>;
export const ConditionSchema = z.object({
});

export type ConditionData = z.infer<typeof ConditionSchema>;
export const DbSchema = z.object({
  file: z.any().optional().describe("File path or array of file paths"),
  keys: z.any().optional().describe("Single key or list of dot-separated keys to target within the JSON payload"),
  lines: z.any().optional().describe("Line selection or ranges to read (e.g., 1:120 or ['10:20'])")
});

export type DbData = z.infer<typeof DbSchema>;
export const DiffPatchSchema = z.object({
});

export type DiffPatchData = z.infer<typeof DiffPatchSchema>;
export const EndpointSchema = z.object({
});

export type EndpointData = z.infer<typeof EndpointSchema>;
export const HookSchema = z.object({
});

export type HookData = z.infer<typeof HookSchema>;
export const IntegratedApiSchema = z.object({
  provider: z.string().describe("API provider to connect to"),
  operation: z.string().describe("Operation to perform (provider-specific)")
});

export type IntegratedApiData = z.infer<typeof IntegratedApiSchema>;
export const IrBuilderSchema = z.object({
});

export type IrBuilderData = z.infer<typeof IrBuilderSchema>;
export const JsonSchemaValidatorSchema = z.object({
});

export type JsonSchemaValidatorData = z.infer<typeof JsonSchemaValidatorSchema>;
export const PersonJobSchema = z.object({
  tools: z.string().optional().describe("Tools available to the AI agent")
});

export type PersonJobData = z.infer<typeof PersonJobSchema>;
export const StartSchema = z.object({
  custom_data: z.any().optional().describe("Custom data to pass when manually triggered")
});

export type StartData = z.infer<typeof StartSchema>;
export const SubDiagramSchema = z.object({
  diagram_name: z.string().optional().describe("Name of the diagram to execute (e.g., 'workflow/process')")
});

export type SubDiagramData = z.infer<typeof SubDiagramSchema>;
export const TemplateJobSchema = z.object({
});

export type TemplateJobData = z.infer<typeof TemplateJobSchema>;
export const TypescriptAstSchema = z.object({
  extract_patterns: z.any().optional().describe("Patterns to extract from the AST")
});

export type TypescriptAstData = z.infer<typeof TypescriptAstSchema>;
export const UserResponseSchema = z.object({
});

export type UserResponseData = z.infer<typeof UserResponseSchema>;

// Export all schemas as a registry
export const nodeSchemas = {
  api_job: ApiJobSchema,
  code_job: CodeJobSchema,
  condition: ConditionSchema,
  db: DbSchema,
  diff_patch: DiffPatchSchema,
  endpoint: EndpointSchema,
  hook: HookSchema,
  integrated_api: IntegratedApiSchema,
  ir_builder: IrBuilderSchema,
  json_schema_validator: JsonSchemaValidatorSchema,
  person_job: PersonJobSchema,
  start: StartSchema,
  sub_diagram: SubDiagramSchema,
  template_job: TemplateJobSchema,
  typescript_ast: TypescriptAstSchema,
  user_response: UserResponseSchema
} as const;

// Type for node type keys
export type NodeSchemaKey = keyof typeof nodeSchemas;

// Export validation helper
export function validateNodeData<T extends NodeSchemaKey>(
  nodeType: T,
  data: unknown
): z.infer<typeof nodeSchemas[T]> {
  return nodeSchemas[nodeType].parse(data);
}

// Safe validation that returns result instead of throwing
export function safeValidateNodeData<T extends NodeSchemaKey>(
  nodeType: T,
  data: unknown
): z.SafeParseReturnType<unknown, z.infer<typeof nodeSchemas[T]>> {
  return nodeSchemas[nodeType].safeParse(data);
}

// Get schema for a node type
export function getNodeSchema(nodeType: NodeSchemaKey) {
  return nodeSchemas[nodeType];
}
