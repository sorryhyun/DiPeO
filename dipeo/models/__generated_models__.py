"""
Generated Pydantic models from TypeScript definitions.
DO NOT EDIT - This file is automatically generated.
"""

# Standard library imports

{{#if (eq this.module "typing")}}from typing import {{#each this.items}}{
  "module": "enum",
  "items": [
    "Enum"
  ],
  "is_type_import": false
}{{#unless @last}}, {{/unless}}
{{#if (eq this.module "typing")}}from typing import {{#each this.items}}{
  "module": "typing",
  "items": [
    "Any",
    "Dict",
    "Union"
  ],
  "is_type_import": true
}{{#unless @last}}, {{/unless}}
{{#if (eq this.module "typing")}}from typing import {{#each this.items}}{
  "module": "pydantic",
  "items": [
    "Field"
  ],
  "is_type_import": false
}{{#unless @last}}, {{/unless}}
{{#if (eq this.module "typing")}}from typing import {{#each this.items}}{
  "module": "dipeo.models",
  "items": [
    "ArrowID",
    "ExecutionStatus",
    "NodeID",
    "NodeType",
    "PersonID"
  ],
  "is_type_import": true
}{{#unless @last}}, {{/unless}}
{{/if}}
{{#if (eq this.module "enum")}}from enum import 
{{/if}}
{{#if (eq this.module "datetime")}}from datetime import 
{{/if}}
{{#if (eq this.module "re")}}from re import 
{{/if}}
{{/each}}

# Third-party imports
from pydantic import BaseModel, Field, field_validator, model_validator

{{#unless (or (eq this.module "typing") (eq this.module "enum") (eq this.module "datetime") (eq this.module "re") (startsWith this.module "dipeo"))}}
from enum import {{#each this.items}}{
  "module": "enum",
  "items": [
    "Enum"
  ],
  "is_type_import": false
}{{#unless @last}}, {{/unless}}
{{#unless (or (eq this.module "typing") (eq this.module "enum") (eq this.module "datetime") (eq this.module "re") (startsWith this.module "dipeo"))}}
from typing import {{#each this.items}}{
  "module": "typing",
  "items": [
    "Any",
    "Dict",
    "Union"
  ],
  "is_type_import": true
}{{#unless @last}}, {{/unless}}
{{#unless (or (eq this.module "typing") (eq this.module "enum") (eq this.module "datetime") (eq this.module "re") (startsWith this.module "dipeo"))}}
from pydantic import {{#each this.items}}{
  "module": "pydantic",
  "items": [
    "Field"
  ],
  "is_type_import": false
}{{#unless @last}}, {{/unless}}
{{#unless (or (eq this.module "typing") (eq this.module "enum") (eq this.module "datetime") (eq this.module "re") (startsWith this.module "dipeo"))}}
from dipeo.models import {{#each this.items}}{
  "module": "dipeo.models",
  "items": [
    "ArrowID",
    "ExecutionStatus",
    "NodeID",
    "NodeType",
    "PersonID"
  ],
  "is_type_import": true
}{{#unless @last}}, {{/unless}}
{{/unless}}
{{/each}}

# Local imports

{{#if (startsWith this.module "dipeo")}}
from enum import {{#each this.items}}{
  "module": "enum",
  "items": [
    "Enum"
  ],
  "is_type_import": false
}{{#unless @last}}, {{/unless}}
{{#if (startsWith this.module "dipeo")}}
from typing import {{#each this.items}}{
  "module": "typing",
  "items": [
    "Any",
    "Dict",
    "Union"
  ],
  "is_type_import": true
}{{#unless @last}}, {{/unless}}
{{#if (startsWith this.module "dipeo")}}
from pydantic import {{#each this.items}}{
  "module": "pydantic",
  "items": [
    "Field"
  ],
  "is_type_import": false
}{{#unless @last}}, {{/unless}}
{{#if (startsWith this.module "dipeo")}}
from dipeo.models import {{#each this.items}}{
  "module": "dipeo.models",
  "items": [
    "ArrowID",
    "ExecutionStatus",
    "NodeID",
    "NodeType",
    "PersonID"
  ],
  "is_type_import": true
}{{#unless @last}}, {{/unless}}
{{/if}}
{{/each}}

# Type aliases
{{#each model_data.type_aliases as |value key|}}
{{key}} = {{value}}
{{/each}}


# Enums

{{#if (eq this.type "enum")}}
class GraphQLDomainPersonType({{#each this.bases}}{
  "name": "GraphQLDomainPersonType",
  "type": "class",
  "fields": {
    "id": {
      "name": "id",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "label": {
      "name": "label",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "llm_config": {
      "name": "llm_config",
      "type": "PersonLLMConfig",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "type": {
      "name": "type",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class StoreDiagram({{#each this.bases}}{
  "name": "StoreDiagram",
  "type": "class",
  "fields": {
    "nodes": {
      "name": "nodes",
      "type": "Map[NodeID, DomainNode]",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "handles": {
      "name": "handles",
      "type": "Map[HandleID, DomainHandle]",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "arrows": {
      "name": "arrows",
      "type": "Map[ArrowID, DomainArrow]",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "persons": {
      "name": "persons",
      "type": "Map[PersonID, DomainPerson]",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "metadata": {
      "name": "metadata",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class ToolConfig({{#each this.bases}}{
  "name": "ToolConfig",
  "type": "class",
  "fields": {
    "type": {
      "name": "type",
      "type": "ToolType",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "enabled": {
      "name": "enabled",
      "type": "bool",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "config": {
      "name": "config",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class WebSearchResult({{#each this.bases}}{
  "name": "WebSearchResult",
  "type": "class",
  "fields": {
    "url": {
      "name": "url",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "title": {
      "name": "title",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "snippet": {
      "name": "snippet",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "score": {
      "name": "score",
      "type": "float",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class ImageGenerationResult({{#each this.bases}}{
  "name": "ImageGenerationResult",
  "type": "class",
  "fields": {
    "image_data": {
      "name": "image_data",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "format": {
      "name": "format",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "width": {
      "name": "width",
      "type": "float",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "height": {
      "name": "height",
      "type": "float",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class ToolOutput({{#each this.bases}}{
  "name": "ToolOutput",
  "type": "class",
  "fields": {
    "type": {
      "name": "type",
      "type": "ToolType",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "result": {
      "name": "result",
      "type": "Any",
      "required": true,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ]
    },
    "raw_response": {
      "name": "raw_response",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class ChatResult({{#each this.bases}}{
  "name": "ChatResult",
  "type": "class",
  "fields": {
    "text": {
      "name": "text",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "token_usage": {
      "name": "token_usage",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    },
    "raw_response": {
      "name": "raw_response",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    },
    "tool_outputs": {
      "name": "tool_outputs",
      "type": "{}",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class LLMRequestOptions({{#each this.bases}}{
  "name": "LLMRequestOptions",
  "type": "class",
  "fields": {
    "temperature": {
      "name": "temperature",
      "type": "float",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "max_tokens": {
      "name": "max_tokens",
      "type": "float",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "top_p": {
      "name": "top_p",
      "type": "float",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "n": {
      "name": "n",
      "type": "float",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "tools": {
      "name": "tools",
      "type": "{}",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "response_format": {
      "name": "response_format",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class TokenUsage({{#each this.bases}}{
  "name": "TokenUsage",
  "type": "class",
  "fields": {
    "input": {
      "name": "input",
      "type": "float",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "output": {
      "name": "output",
      "type": "float",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "cached": {
      "name": "cached",
      "type": "float",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "total": {
      "name": "total",
      "type": "float",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class NodeState({{#each this.bases}}{
  "name": "NodeState",
  "type": "class",
  "fields": {
    "status": {
      "name": "status",
      "type": "NodeExecutionStatus",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "started_at": {
      "name": "started_at",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "ended_at": {
      "name": "ended_at",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "error": {
      "name": "error",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "token_usage": {
      "name": "token_usage",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    },
    "output": {
      "name": "output",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class ExecutionState({{#each this.bases}}{
  "name": "ExecutionState",
  "type": "class",
  "fields": {
    "id": {
      "name": "id",
      "type": "ExecutionID",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "status": {
      "name": "status",
      "type": "ExecutionStatus",
      "required": true,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "dipeo.models",
          "items": [
            "ExecutionStatus"
          ],
          "is_type_import": true
        }
      ]
    },
    "diagram_id": {
      "name": "diagram_id",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    },
    "started_at": {
      "name": "started_at",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "ended_at": {
      "name": "ended_at",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "node_states": {
      "name": "node_states",
      "type": "Dict[str, NodeState]",
      "required": true,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Dict"
          ],
          "is_type_import": true
        }
      ]
    },
    "node_outputs": {
      "name": "node_outputs",
      "type": "Dict[str, Dict[str, Any]]",
      "required": true,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Dict"
          ],
          "is_type_import": true
        }
      ]
    },
    "token_usage": {
      "name": "token_usage",
      "type": "TokenUsage",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "error": {
      "name": "error",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "variables": {
      "name": "variables",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    },
    "duration_seconds": {
      "name": "duration_seconds",
      "type": "float",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "is_active": {
      "name": "is_active",
      "type": "bool",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "exec_counts": {
      "name": "exec_counts",
      "type": "Dict[str, float]",
      "required": true,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Dict"
          ],
          "is_type_import": true
        }
      ]
    },
    "executed_nodes": {
      "name": "executed_nodes",
      "type": "{}",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class ExecutionOptions({{#each this.bases}}{
  "name": "ExecutionOptions",
  "type": "class",
  "fields": {
    "mode": {
      "name": "mode",
      "type": "Union[\"normal\", \"debug\", \"monitor\"]",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Union"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    },
    "timeout": {
      "name": "timeout",
      "type": "float",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "variables": {
      "name": "variables",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    },
    "debug": {
      "name": "debug",
      "type": "bool",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class InteractivePromptData({{#each this.bases}}{
  "name": "InteractivePromptData",
  "type": "class",
  "fields": {
    "node_id": {
      "name": "node_id",
      "type": "NodeID",
      "required": true,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "dipeo.models",
          "items": [
            "NodeID"
          ],
          "is_type_import": true
        }
      ]
    },
    "prompt": {
      "name": "prompt",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "timeout": {
      "name": "timeout",
      "type": "float",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "default_value": {
      "name": "default_value",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [
    {
      "name": "validate_node_id",
      "decorator": "@field_validator(\"node_id\")",
      "body": [
        "def validate_node_id(cls, v):",
        "    if v and not isinstance(v, str):",
        "        raise ValueError(f\"{field_name} must be a string\")",
        "    return v"
      ]
    }
  ],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class InteractiveResponse({{#each this.bases}}{
  "name": "InteractiveResponse",
  "type": "class",
  "fields": {
    "node_id": {
      "name": "node_id",
      "type": "NodeID",
      "required": true,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "dipeo.models",
          "items": [
            "NodeID"
          ],
          "is_type_import": true
        }
      ]
    },
    "response": {
      "name": "response",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "timestamp": {
      "name": "timestamp",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [
    {
      "name": "validate_node_id",
      "decorator": "@field_validator(\"node_id\")",
      "body": [
        "def validate_node_id(cls, v):",
        "    if v and not isinstance(v, str):",
        "        raise ValueError(f\"{field_name} must be a string\")",
        "    return v"
      ]
    }
  ],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class ExecutionUpdate({{#each this.bases}}{
  "name": "ExecutionUpdate",
  "type": "class",
  "fields": {
    "type": {
      "name": "type",
      "type": "EventType",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "execution_id": {
      "name": "execution_id",
      "type": "ExecutionID",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "node_id": {
      "name": "node_id",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    },
    "status": {
      "name": "status",
      "type": "NodeExecutionStatus",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "result": {
      "name": "result",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    },
    "error": {
      "name": "error",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "timestamp": {
      "name": "timestamp",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "total_tokens": {
      "name": "total_tokens",
      "type": "float",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "node_type": {
      "name": "node_type",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "tokens": {
      "name": "tokens",
      "type": "float",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "data": {
      "name": "data",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class NodeDefinition({{#each this.bases}}{
  "name": "NodeDefinition",
  "type": "class",
  "fields": {
    "type": {
      "name": "type",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "node_schema": {
      "name": "node_schema",
      "type": "Any",
      "required": true,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ]
    },
    "handler": {
      "name": "handler",
      "type": "Any",
      "required": true,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ]
    },
    "requires_services": {
      "name": "requires_services",
      "type": "{}",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "description": {
      "name": "description",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class Vec2({{#each this.bases}}{
  "name": "Vec2",
  "type": "class",
  "fields": {
    "x": {
      "name": "x",
      "type": "float",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "y": {
      "name": "y",
      "type": "float",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class DomainHandle({{#each this.bases}}{
  "name": "DomainHandle",
  "type": "class",
  "fields": {
    "id": {
      "name": "id",
      "type": "HandleID",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "node_id": {
      "name": "node_id",
      "type": "NodeID",
      "required": true,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "dipeo.models",
          "items": [
            "NodeID"
          ],
          "is_type_import": true
        }
      ]
    },
    "label": {
      "name": "label",
      "type": "HandleLabel",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "direction": {
      "name": "direction",
      "type": "HandleDirection",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "data_type": {
      "name": "data_type",
      "type": "DataType",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "position": {
      "name": "position",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [
    {
      "name": "validate_node_id",
      "decorator": "@field_validator(\"node_id\")",
      "body": [
        "def validate_node_id(cls, v):",
        "    if v and not isinstance(v, str):",
        "        raise ValueError(f\"{field_name} must be a string\")",
        "    return v"
      ]
    }
  ],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class DomainNode({{#each this.bases}}{
  "name": "DomainNode",
  "type": "class",
  "fields": {
    "id": {
      "name": "id",
      "type": "NodeID",
      "required": true,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "dipeo.models",
          "items": [
            "NodeID"
          ],
          "is_type_import": true
        }
      ]
    },
    "type": {
      "name": "type",
      "type": "NodeType",
      "required": true,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "dipeo.models",
          "items": [
            "NodeType"
          ],
          "is_type_import": true
        }
      ]
    },
    "position": {
      "name": "position",
      "type": "Vec2",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "data": {
      "name": "data",
      "type": "Dict[str, Any]",
      "required": true,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Dict"
          ],
          "is_type_import": true
        }
      ]
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [
    {
      "name": "validate_id",
      "decorator": "@field_validator(\"id\")",
      "body": [
        "def validate_id(cls, v):",
        "    if v and not isinstance(v, str):",
        "        raise ValueError(f\"{field_name} must be a string\")",
        "    return v"
      ]
    }
  ],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class DomainArrow({{#each this.bases}}{
  "name": "DomainArrow",
  "type": "class",
  "fields": {
    "id": {
      "name": "id",
      "type": "ArrowID",
      "required": true,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "dipeo.models",
          "items": [
            "ArrowID"
          ],
          "is_type_import": true
        }
      ]
    },
    "source": {
      "name": "source",
      "type": "HandleID",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "target": {
      "name": "target",
      "type": "HandleID",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "content_type": {
      "name": "content_type",
      "type": "ContentType",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "label": {
      "name": "label",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "data": {
      "name": "data",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class MemoryConfig({{#each this.bases}}{
  "name": "MemoryConfig",
  "type": "class",
  "fields": {
    "forget_mode": {
      "name": "forget_mode",
      "type": "ForgettingMode",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "max_messages": {
      "name": "max_messages",
      "type": "float",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "temperature": {
      "name": "temperature",
      "type": "float",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class MemorySettings({{#each this.bases}}{
  "name": "MemorySettings",
  "type": "class",
  "fields": {
    "view": {
      "name": "view",
      "type": "MemoryView",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "max_messages": {
      "name": "max_messages",
      "type": "float",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "preserve_system": {
      "name": "preserve_system",
      "type": "bool",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class PersonLLMConfig({{#each this.bases}}{
  "name": "PersonLLMConfig",
  "type": "class",
  "fields": {
    "service": {
      "name": "service",
      "type": "LLMService",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "model": {
      "name": "model",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "api_key_id": {
      "name": "api_key_id",
      "type": "ApiKeyID",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "system_prompt": {
      "name": "system_prompt",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class DomainPerson({{#each this.bases}}{
  "name": "DomainPerson",
  "type": "class",
  "fields": {
    "id": {
      "name": "id",
      "type": "PersonID",
      "required": true,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "dipeo.models",
          "items": [
            "PersonID"
          ],
          "is_type_import": true
        }
      ]
    },
    "label": {
      "name": "label",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "llm_config": {
      "name": "llm_config",
      "type": "PersonLLMConfig",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "type": {
      "name": "type",
      "type": "\"person\"",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class DomainApiKey({{#each this.bases}}{
  "name": "DomainApiKey",
  "type": "class",
  "fields": {
    "id": {
      "name": "id",
      "type": "ApiKeyID",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "label": {
      "name": "label",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "service": {
      "name": "service",
      "type": "APIServiceType",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "key": {
      "name": "key",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class DiagramMetadata({{#each this.bases}}{
  "name": "DiagramMetadata",
  "type": "class",
  "fields": {
    "id": {
      "name": "id",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    },
    "name": {
      "name": "name",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "description": {
      "name": "description",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "version": {
      "name": "version",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "created": {
      "name": "created",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "modified": {
      "name": "modified",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "author": {
      "name": "author",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "tags": {
      "name": "tags",
      "type": "{}",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class DomainDiagram({{#each this.bases}}{
  "name": "DomainDiagram",
  "type": "class",
  "fields": {
    "nodes": {
      "name": "nodes",
      "type": "{}",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "handles": {
      "name": "handles",
      "type": "{}",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "arrows": {
      "name": "arrows",
      "type": "{}",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "persons": {
      "name": "persons",
      "type": "{}",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "metadata": {
      "name": "metadata",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class BaseNodeData({{#each this.bases}}{
  "name": "BaseNodeData",
  "type": "class",
  "fields": {
    "label": {
      "name": "label",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "flipped": {
      "name": "flipped",
      "type": "bool",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class StartNodeData({{#each this.bases}}{
  "name": "StartNodeData",
  "type": "class",
  "fields": {
    "custom_data": {
      "name": "custom_data",
      "type": "Dict[str, Union[str, float, bool]]",
      "required": true,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Dict"
          ],
          "is_type_import": true
        }
      ]
    },
    "output_data_structure": {
      "name": "output_data_structure",
      "type": "Dict[str, str]",
      "required": true,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Dict"
          ],
          "is_type_import": true
        }
      ]
    },
    "trigger_mode": {
      "name": "trigger_mode",
      "type": "HookTriggerMode",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "hook_event": {
      "name": "hook_event",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "hook_filters": {
      "name": "hook_filters",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class ConditionNodeData({{#each this.bases}}{
  "name": "ConditionNodeData",
  "type": "class",
  "fields": {
    "condition_type": {
      "name": "condition_type",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "expression": {
      "name": "expression",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "node_indices": {
      "name": "node_indices",
      "type": "{}",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class PersonJobNodeData({{#each this.bases}}{
  "name": "PersonJobNodeData",
  "type": "class",
  "fields": {
    "person": {
      "name": "person",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    },
    "first_only_prompt": {
      "name": "first_only_prompt",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "default_prompt": {
      "name": "default_prompt",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "max_iteration": {
      "name": "max_iteration",
      "type": "float",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "memory_config": {
      "name": "memory_config",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    },
    "memory_settings": {
      "name": "memory_settings",
      "type": "MemorySettings",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "tools": {
      "name": "tools",
      "type": "{}",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class EndpointNodeData({{#each this.bases}}{
  "name": "EndpointNodeData",
  "type": "class",
  "fields": {
    "save_to_file": {
      "name": "save_to_file",
      "type": "bool",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "file_name": {
      "name": "file_name",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class DBNodeData({{#each this.bases}}{
  "name": "DBNodeData",
  "type": "class",
  "fields": {
    "file": {
      "name": "file",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "collection": {
      "name": "collection",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "sub_type": {
      "name": "sub_type",
      "type": "DBBlockSubType",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "operation": {
      "name": "operation",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "query": {
      "name": "query",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "data": {
      "name": "data",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class JobNodeData({{#each this.bases}}{
  "name": "JobNodeData",
  "type": "class",
  "fields": {
    "code_type": {
      "name": "code_type",
      "type": "SupportedLanguage",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "code": {
      "name": "code",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class CodeJobNodeData({{#each this.bases}}{
  "name": "CodeJobNodeData",
  "type": "class",
  "fields": {
    "language": {
      "name": "language",
      "type": "SupportedLanguage",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "filePath": {
      "name": "filePath",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "functionName": {
      "name": "functionName",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "timeout": {
      "name": "timeout",
      "type": "float",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class ApiJobNodeData({{#each this.bases}}{
  "name": "ApiJobNodeData",
  "type": "class",
  "fields": {
    "url": {
      "name": "url",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "method": {
      "name": "method",
      "type": "HttpMethod",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "headers": {
      "name": "headers",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    },
    "params": {
      "name": "params",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    },
    "body": {
      "name": "body",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    },
    "timeout": {
      "name": "timeout",
      "type": "float",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "auth_type": {
      "name": "auth_type",
      "type": "Union[\"none\", \"bearer\", \"basic\", \"api_key\"]",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Union"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    },
    "auth_config": {
      "name": "auth_config",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class UserResponseNodeData({{#each this.bases}}{
  "name": "UserResponseNodeData",
  "type": "class",
  "fields": {
    "prompt": {
      "name": "prompt",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "timeout": {
      "name": "timeout",
      "type": "float",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class NotionNodeData({{#each this.bases}}{
  "name": "NotionNodeData",
  "type": "class",
  "fields": {
    "operation": {
      "name": "operation",
      "type": "NotionOperation",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "page_id": {
      "name": "page_id",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "database_id": {
      "name": "database_id",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class HookNodeData({{#each this.bases}}{
  "name": "HookNodeData",
  "type": "class",
  "fields": {
    "hook_type": {
      "name": "hook_type",
      "type": "HookType",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "config": {
      "name": "config",
      "type": "Union[{ command?: string ; args?: {} ; env?: any; cwd?: string ; url?: string ; method?: HttpMethod ; headers?: any; script?: string ; function_name?: string ; file_path?: string ; format?: \"json\", \"yaml\", \"text\" ; }]",
      "required": true,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Union"
          ],
          "is_type_import": true
        }
      ]
    },
    "timeout": {
      "name": "timeout",
      "type": "float",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "retry_count": {
      "name": "retry_count",
      "type": "float",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "retry_delay": {
      "name": "retry_delay",
      "type": "float",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class TemplateJobNodeData({{#each this.bases}}{
  "name": "TemplateJobNodeData",
  "type": "class",
  "fields": {
    "template_path": {
      "name": "template_path",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "template_content": {
      "name": "template_content",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "output_path": {
      "name": "output_path",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "variables": {
      "name": "variables",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    },
    "engine": {
      "name": "engine",
      "type": "Union[\"internal\", \"jinja2\", \"handlebars\"]",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Union"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class ShellJobNodeData({{#each this.bases}}{
  "name": "ShellJobNodeData",
  "type": "class",
  "fields": {
    "command": {
      "name": "command",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "args": {
      "name": "args",
      "type": "{}",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "cwd": {
      "name": "cwd",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "env": {
      "name": "env",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    },
    "timeout": {
      "name": "timeout",
      "type": "float",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "capture_output": {
      "name": "capture_output",
      "type": "bool",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "shell": {
      "name": "shell",
      "type": "bool",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class JsonSchemaValidatorNodeData({{#each this.bases}}{
  "name": "JsonSchemaValidatorNodeData",
  "type": "class",
  "fields": {
    "schema_path": {
      "name": "schema_path",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "schema": {
      "name": "schema",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    },
    "data_path": {
      "name": "data_path",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "strict_mode": {
      "name": "strict_mode",
      "type": "bool",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "error_on_extra": {
      "name": "error_on_extra",
      "type": "bool",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class TypescriptAstNodeData({{#each this.bases}}{
  "name": "TypescriptAstNodeData",
  "type": "class",
  "fields": {
    "source": {
      "name": "source",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "extractPatterns": {
      "name": "extractPatterns",
      "type": "{}",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "includeJSDoc": {
      "name": "includeJSDoc",
      "type": "bool",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "parseMode": {
      "name": "parseMode",
      "type": "Union[\"module\", \"script\"]",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Union"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class SubDiagramNodeData({{#each this.bases}}{
  "name": "SubDiagramNodeData",
  "type": "class",
  "fields": {
    "diagram_name": {
      "name": "diagram_name",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "diagram_data": {
      "name": "diagram_data",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    },
    "input_mapping": {
      "name": "input_mapping",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    },
    "output_mapping": {
      "name": "output_mapping",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    },
    "timeout": {
      "name": "timeout",
      "type": "float",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "wait_for_completion": {
      "name": "wait_for_completion",
      "type": "bool",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "isolate_conversation": {
      "name": "isolate_conversation",
      "type": "bool",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class Message({{#each this.bases}}{
  "name": "Message",
  "type": "class",
  "fields": {
    "id": {
      "name": "id",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "from_person_id": {
      "name": "from_person_id",
      "type": "Any",
      "required": true,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ]
    },
    "to_person_id": {
      "name": "to_person_id",
      "type": "PersonID",
      "required": true,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "dipeo.models",
          "items": [
            "PersonID"
          ],
          "is_type_import": true
        }
      ]
    },
    "content": {
      "name": "content",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "timestamp": {
      "name": "timestamp",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "token_count": {
      "name": "token_count",
      "type": "float",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "message_type": {
      "name": "message_type",
      "type": "Union[\"person_to_person\", \"system_to_person\", \"person_to_system\"]",
      "required": true,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Union"
          ],
          "is_type_import": true
        }
      ]
    },
    "metadata": {
      "name": "metadata",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class ConversationMetadata({{#each this.bases}}{
  "name": "ConversationMetadata",
  "type": "class",
  "fields": {
    "started_at": {
      "name": "started_at",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "last_message_at": {
      "name": "last_message_at",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "total_tokens": {
      "name": "total_tokens",
      "type": "float",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "message_count": {
      "name": "message_count",
      "type": "float",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "context_resets": {
      "name": "context_resets",
      "type": "float",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class Conversation({{#each this.bases}}{
  "name": "Conversation",
  "type": "class",
  "fields": {
    "messages": {
      "name": "messages",
      "type": "{}",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "metadata": {
      "name": "metadata",
      "type": "ConversationMetadata",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class MemoryState({{#each this.bases}}{
  "name": "MemoryState",
  "type": "class",
  "fields": {
    "visible_messages": {
      "name": "visible_messages",
      "type": "float",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "has_more": {
      "name": "has_more",
      "type": "bool",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "config": {
      "name": "config",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class LLMService({{#each this.bases}}{
  "name": "LLMService",
  "type": "enum",
  "fields": {},
  "bases": [
    "str",
    "Enum"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": [
    [
      "OPENAI",
      "openai"
    ],
    [
      "ANTHROPIC",
      "anthropic"
    ],
    [
      "GOOGLE",
      "google"
    ],
    [
      "BEDROCK",
      "bedrock"
    ],
    [
      "VERTEX",
      "vertex"
    ],
    [
      "DEEPSEEK",
      "deepseek"
    ]
  ]
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class APIServiceType({{#each this.bases}}{
  "name": "APIServiceType",
  "type": "enum",
  "fields": {},
  "bases": [
    "str",
    "Enum"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": [
    [
      "OPENAI",
      "openai"
    ],
    [
      "ANTHROPIC",
      "anthropic"
    ],
    [
      "GOOGLE",
      "google"
    ],
    [
      "GEMINI",
      "gemini"
    ],
    [
      "BEDROCK",
      "bedrock"
    ],
    [
      "VERTEX",
      "vertex"
    ],
    [
      "DEEPSEEK",
      "deepseek"
    ],
    [
      "NOTION",
      "notion"
    ],
    [
      "GOOGLE_SEARCH",
      "google_search"
    ],
    [
      "SLACK",
      "slack"
    ],
    [
      "GITHUB",
      "github"
    ],
    [
      "JIRA",
      "jira"
    ]
  ]
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class NotionOperation({{#each this.bases}}{
  "name": "NotionOperation",
  "type": "enum",
  "fields": {},
  "bases": [
    "str",
    "Enum"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": [
    [
      "CREATE_PAGE",
      "create_page"
    ],
    [
      "UPDATE_PAGE",
      "update_page"
    ],
    [
      "READ_PAGE",
      "read_page"
    ],
    [
      "DELETE_PAGE",
      "delete_page"
    ],
    [
      "CREATE_DATABASE",
      "create_database"
    ],
    [
      "QUERY_DATABASE",
      "query_database"
    ],
    [
      "UPDATE_DATABASE",
      "update_database"
    ]
  ]
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class ToolType({{#each this.bases}}{
  "name": "ToolType",
  "type": "enum",
  "fields": {},
  "bases": [
    "str",
    "Enum"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": [
    [
      "WEB_SEARCH",
      "web_search"
    ],
    [
      "WEB_SEARCH_PREVIEW",
      "web_search_preview"
    ],
    [
      "IMAGE_GENERATION",
      "image_generation"
    ]
  ]
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class ExecutionStatus({{#each this.bases}}{
  "name": "ExecutionStatus",
  "type": "enum",
  "fields": {},
  "bases": [
    "str",
    "Enum"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": [
    [
      "PENDING",
      "PENDING"
    ],
    [
      "RUNNING",
      "RUNNING"
    ],
    [
      "PAUSED",
      "PAUSED"
    ],
    [
      "COMPLETED",
      "COMPLETED"
    ],
    [
      "FAILED",
      "FAILED"
    ],
    [
      "ABORTED",
      "ABORTED"
    ],
    [
      "SKIPPED",
      "SKIPPED"
    ]
  ]
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class NodeExecutionStatus({{#each this.bases}}{
  "name": "NodeExecutionStatus",
  "type": "enum",
  "fields": {},
  "bases": [
    "str",
    "Enum"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": [
    [
      "PENDING",
      "PENDING"
    ],
    [
      "RUNNING",
      "RUNNING"
    ],
    [
      "PAUSED",
      "PAUSED"
    ],
    [
      "COMPLETED",
      "COMPLETED"
    ],
    [
      "FAILED",
      "FAILED"
    ],
    [
      "ABORTED",
      "ABORTED"
    ],
    [
      "SKIPPED",
      "SKIPPED"
    ],
    [
      "MAXITER_REACHED",
      "MAXITER_REACHED"
    ]
  ]
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class EventType({{#each this.bases}}{
  "name": "EventType",
  "type": "enum",
  "fields": {},
  "bases": [
    "str",
    "Enum"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": [
    [
      "EXECUTION_STATUS_CHANGED",
      "EXECUTION_STATUS_CHANGED"
    ],
    [
      "NODE_STATUS_CHANGED",
      "NODE_STATUS_CHANGED"
    ],
    [
      "NODE_PROGRESS",
      "NODE_PROGRESS"
    ],
    [
      "INTERACTIVE_PROMPT",
      "INTERACTIVE_PROMPT"
    ],
    [
      "INTERACTIVE_RESPONSE",
      "INTERACTIVE_RESPONSE"
    ],
    [
      "EXECUTION_ERROR",
      "EXECUTION_ERROR"
    ],
    [
      "EXECUTION_UPDATE",
      "EXECUTION_UPDATE"
    ]
  ]
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class NodeType({{#each this.bases}}{
  "name": "NodeType",
  "type": "enum",
  "fields": {},
  "bases": [
    "str",
    "Enum"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": [
    [
      "START",
      "start"
    ],
    [
      "PERSON_JOB",
      "person_job"
    ],
    [
      "CONDITION",
      "condition"
    ],
    [
      "JOB",
      "job"
    ],
    [
      "CODE_JOB",
      "code_job"
    ],
    [
      "API_JOB",
      "api_job"
    ],
    [
      "ENDPOINT",
      "endpoint"
    ],
    [
      "DB",
      "db"
    ],
    [
      "USER_RESPONSE",
      "user_response"
    ],
    [
      "NOTION",
      "notion"
    ],
    [
      "PERSON_BATCH_JOB",
      "person_batch_job"
    ],
    [
      "HOOK",
      "hook"
    ],
    [
      "TEMPLATE_JOB",
      "template_job"
    ],
    [
      "JSON_SCHEMA_VALIDATOR",
      "json_schema_validator"
    ],
    [
      "TYPESCRIPT_AST",
      "typescript_ast"
    ],
    [
      "SUB_DIAGRAM",
      "sub_diagram"
    ]
  ]
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class HandleDirection({{#each this.bases}}{
  "name": "HandleDirection",
  "type": "enum",
  "fields": {},
  "bases": [
    "str",
    "Enum"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": [
    [
      "INPUT",
      "input"
    ],
    [
      "OUTPUT",
      "output"
    ]
  ]
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class HandleLabel({{#each this.bases}}{
  "name": "HandleLabel",
  "type": "enum",
  "fields": {},
  "bases": [
    "str",
    "Enum"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": [
    [
      "DEFAULT",
      "default"
    ],
    [
      "FIRST",
      "first"
    ],
    [
      "CONDITION_TRUE",
      "condtrue"
    ],
    [
      "CONDITION_FALSE",
      "condfalse"
    ],
    [
      "SUCCESS",
      "success"
    ],
    [
      "ERROR",
      "error"
    ]
  ]
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class DataType({{#each this.bases}}{
  "name": "DataType",
  "type": "enum",
  "fields": {},
  "bases": [
    "str",
    "Enum"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": [
    [
      "ANY",
      "any"
    ],
    [
      "STRING",
      "string"
    ],
    [
      "NUMBER",
      "number"
    ],
    [
      "BOOLEAN",
      "boolean"
    ],
    [
      "OBJECT",
      "object"
    ],
    [
      "ARRAY",
      "array"
    ]
  ]
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class ForgettingMode({{#each this.bases}}{
  "name": "ForgettingMode",
  "type": "enum",
  "fields": {},
  "bases": [
    "str",
    "Enum"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": [
    [
      "NO_FORGET",
      "no_forget"
    ],
    [
      "ON_EVERY_TURN",
      "on_every_turn"
    ],
    [
      "UPON_REQUEST",
      "upon_request"
    ]
  ]
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class MemoryView({{#each this.bases}}{
  "name": "MemoryView",
  "type": "enum",
  "fields": {},
  "bases": [
    "str",
    "Enum"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": [
    [
      "ALL_INVOLVED",
      "all_involved"
    ],
    [
      "SENT_BY_ME",
      "sent_by_me"
    ],
    [
      "SENT_TO_ME",
      "sent_to_me"
    ],
    [
      "SYSTEM_AND_ME",
      "system_and_me"
    ],
    [
      "CONVERSATION_PAIRS",
      "conversation_pairs"
    ],
    [
      "ALL_MESSAGES",
      "all_messages"
    ]
  ]
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class DiagramFormat({{#each this.bases}}{
  "name": "DiagramFormat",
  "type": "enum",
  "fields": {},
  "bases": [
    "str",
    "Enum"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": [
    [
      "NATIVE",
      "native"
    ],
    [
      "LIGHT",
      "light"
    ],
    [
      "READABLE",
      "readable"
    ]
  ]
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class DBBlockSubType({{#each this.bases}}{
  "name": "DBBlockSubType",
  "type": "enum",
  "fields": {},
  "bases": [
    "str",
    "Enum"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": [
    [
      "FIXED_PROMPT",
      "fixed_prompt"
    ],
    [
      "FILE",
      "file"
    ],
    [
      "CODE",
      "code"
    ],
    [
      "API_TOOL",
      "api_tool"
    ]
  ]
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class ContentType({{#each this.bases}}{
  "name": "ContentType",
  "type": "enum",
  "fields": {},
  "bases": [
    "str",
    "Enum"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": [
    [
      "RAW_TEXT",
      "raw_text"
    ],
    [
      "CONVERSATION_STATE",
      "conversation_state"
    ],
    [
      "OBJECT",
      "object"
    ]
  ]
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class SupportedLanguage({{#each this.bases}}{
  "name": "SupportedLanguage",
  "type": "enum",
  "fields": {},
  "bases": [
    "str",
    "Enum"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": [
    [
      "PYTHON",
      "python"
    ],
    [
      "TYPESCRIPT",
      "typescript"
    ],
    [
      "BASH",
      "bash"
    ],
    [
      "SHELL",
      "shell"
    ]
  ]
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class HttpMethod({{#each this.bases}}{
  "name": "HttpMethod",
  "type": "enum",
  "fields": {},
  "bases": [
    "str",
    "Enum"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": [
    [
      "GET",
      "GET"
    ],
    [
      "POST",
      "POST"
    ],
    [
      "PUT",
      "PUT"
    ],
    [
      "DELETE",
      "DELETE"
    ],
    [
      "PATCH",
      "PATCH"
    ]
  ]
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class HookType({{#each this.bases}}{
  "name": "HookType",
  "type": "enum",
  "fields": {},
  "bases": [
    "str",
    "Enum"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": [
    [
      "SHELL",
      "shell"
    ],
    [
      "WEBHOOK",
      "webhook"
    ],
    [
      "PYTHON",
      "python"
    ],
    [
      "FILE",
      "file"
    ]
  ]
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "enum")}}
class HookTriggerMode({{#each this.bases}}{
  "name": "HookTriggerMode",
  "type": "enum",
  "fields": {},
  "bases": [
    "str",
    "Enum"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": [
    [
      "MANUAL",
      "manual"
    ],
    [
      "HOOK",
      "hook"
    ]
  ]
}{{#unless @last}}, {{/unless}}):
    """"""
    

{{/if}}
{{/each}}

# Models

{{#if (eq this.type "class")}}
class GraphQLDomainPersonType({{#each this.bases}}{
  "name": "GraphQLDomainPersonType",
  "type": "class",
  "fields": {
    "id": {
      "name": "id",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "label": {
      "name": "label",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "llm_config": {
      "name": "llm_config",
      "type": "PersonLLMConfig",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "type": {
      "name": "type",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class StoreDiagram({{#each this.bases}}{
  "name": "StoreDiagram",
  "type": "class",
  "fields": {
    "nodes": {
      "name": "nodes",
      "type": "Map[NodeID, DomainNode]",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "handles": {
      "name": "handles",
      "type": "Map[HandleID, DomainHandle]",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "arrows": {
      "name": "arrows",
      "type": "Map[ArrowID, DomainArrow]",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "persons": {
      "name": "persons",
      "type": "Map[PersonID, DomainPerson]",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "metadata": {
      "name": "metadata",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class ToolConfig({{#each this.bases}}{
  "name": "ToolConfig",
  "type": "class",
  "fields": {
    "type": {
      "name": "type",
      "type": "ToolType",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "enabled": {
      "name": "enabled",
      "type": "bool",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "config": {
      "name": "config",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class WebSearchResult({{#each this.bases}}{
  "name": "WebSearchResult",
  "type": "class",
  "fields": {
    "url": {
      "name": "url",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "title": {
      "name": "title",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "snippet": {
      "name": "snippet",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "score": {
      "name": "score",
      "type": "float",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class ImageGenerationResult({{#each this.bases}}{
  "name": "ImageGenerationResult",
  "type": "class",
  "fields": {
    "image_data": {
      "name": "image_data",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "format": {
      "name": "format",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "width": {
      "name": "width",
      "type": "float",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "height": {
      "name": "height",
      "type": "float",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class ToolOutput({{#each this.bases}}{
  "name": "ToolOutput",
  "type": "class",
  "fields": {
    "type": {
      "name": "type",
      "type": "ToolType",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "result": {
      "name": "result",
      "type": "Any",
      "required": true,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ]
    },
    "raw_response": {
      "name": "raw_response",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class ChatResult({{#each this.bases}}{
  "name": "ChatResult",
  "type": "class",
  "fields": {
    "text": {
      "name": "text",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "token_usage": {
      "name": "token_usage",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    },
    "raw_response": {
      "name": "raw_response",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    },
    "tool_outputs": {
      "name": "tool_outputs",
      "type": "{}",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class LLMRequestOptions({{#each this.bases}}{
  "name": "LLMRequestOptions",
  "type": "class",
  "fields": {
    "temperature": {
      "name": "temperature",
      "type": "float",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "max_tokens": {
      "name": "max_tokens",
      "type": "float",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "top_p": {
      "name": "top_p",
      "type": "float",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "n": {
      "name": "n",
      "type": "float",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "tools": {
      "name": "tools",
      "type": "{}",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "response_format": {
      "name": "response_format",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class TokenUsage({{#each this.bases}}{
  "name": "TokenUsage",
  "type": "class",
  "fields": {
    "input": {
      "name": "input",
      "type": "float",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "output": {
      "name": "output",
      "type": "float",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "cached": {
      "name": "cached",
      "type": "float",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "total": {
      "name": "total",
      "type": "float",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class NodeState({{#each this.bases}}{
  "name": "NodeState",
  "type": "class",
  "fields": {
    "status": {
      "name": "status",
      "type": "NodeExecutionStatus",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "started_at": {
      "name": "started_at",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "ended_at": {
      "name": "ended_at",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "error": {
      "name": "error",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "token_usage": {
      "name": "token_usage",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    },
    "output": {
      "name": "output",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class ExecutionState({{#each this.bases}}{
  "name": "ExecutionState",
  "type": "class",
  "fields": {
    "id": {
      "name": "id",
      "type": "ExecutionID",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "status": {
      "name": "status",
      "type": "ExecutionStatus",
      "required": true,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "dipeo.models",
          "items": [
            "ExecutionStatus"
          ],
          "is_type_import": true
        }
      ]
    },
    "diagram_id": {
      "name": "diagram_id",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    },
    "started_at": {
      "name": "started_at",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "ended_at": {
      "name": "ended_at",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "node_states": {
      "name": "node_states",
      "type": "Dict[str, NodeState]",
      "required": true,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Dict"
          ],
          "is_type_import": true
        }
      ]
    },
    "node_outputs": {
      "name": "node_outputs",
      "type": "Dict[str, Dict[str, Any]]",
      "required": true,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Dict"
          ],
          "is_type_import": true
        }
      ]
    },
    "token_usage": {
      "name": "token_usage",
      "type": "TokenUsage",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "error": {
      "name": "error",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "variables": {
      "name": "variables",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    },
    "duration_seconds": {
      "name": "duration_seconds",
      "type": "float",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "is_active": {
      "name": "is_active",
      "type": "bool",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "exec_counts": {
      "name": "exec_counts",
      "type": "Dict[str, float]",
      "required": true,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Dict"
          ],
          "is_type_import": true
        }
      ]
    },
    "executed_nodes": {
      "name": "executed_nodes",
      "type": "{}",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class ExecutionOptions({{#each this.bases}}{
  "name": "ExecutionOptions",
  "type": "class",
  "fields": {
    "mode": {
      "name": "mode",
      "type": "Union[\"normal\", \"debug\", \"monitor\"]",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Union"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    },
    "timeout": {
      "name": "timeout",
      "type": "float",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "variables": {
      "name": "variables",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    },
    "debug": {
      "name": "debug",
      "type": "bool",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class InteractivePromptData({{#each this.bases}}{
  "name": "InteractivePromptData",
  "type": "class",
  "fields": {
    "node_id": {
      "name": "node_id",
      "type": "NodeID",
      "required": true,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "dipeo.models",
          "items": [
            "NodeID"
          ],
          "is_type_import": true
        }
      ]
    },
    "prompt": {
      "name": "prompt",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "timeout": {
      "name": "timeout",
      "type": "float",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "default_value": {
      "name": "default_value",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [
    {
      "name": "validate_node_id",
      "decorator": "@field_validator(\"node_id\")",
      "body": [
        "def validate_node_id(cls, v):",
        "    if v and not isinstance(v, str):",
        "        raise ValueError(f\"{field_name} must be a string\")",
        "    return v"
      ]
    }
  ],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class InteractiveResponse({{#each this.bases}}{
  "name": "InteractiveResponse",
  "type": "class",
  "fields": {
    "node_id": {
      "name": "node_id",
      "type": "NodeID",
      "required": true,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "dipeo.models",
          "items": [
            "NodeID"
          ],
          "is_type_import": true
        }
      ]
    },
    "response": {
      "name": "response",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "timestamp": {
      "name": "timestamp",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [
    {
      "name": "validate_node_id",
      "decorator": "@field_validator(\"node_id\")",
      "body": [
        "def validate_node_id(cls, v):",
        "    if v and not isinstance(v, str):",
        "        raise ValueError(f\"{field_name} must be a string\")",
        "    return v"
      ]
    }
  ],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class ExecutionUpdate({{#each this.bases}}{
  "name": "ExecutionUpdate",
  "type": "class",
  "fields": {
    "type": {
      "name": "type",
      "type": "EventType",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "execution_id": {
      "name": "execution_id",
      "type": "ExecutionID",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "node_id": {
      "name": "node_id",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    },
    "status": {
      "name": "status",
      "type": "NodeExecutionStatus",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "result": {
      "name": "result",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    },
    "error": {
      "name": "error",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "timestamp": {
      "name": "timestamp",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "total_tokens": {
      "name": "total_tokens",
      "type": "float",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "node_type": {
      "name": "node_type",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "tokens": {
      "name": "tokens",
      "type": "float",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "data": {
      "name": "data",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class NodeDefinition({{#each this.bases}}{
  "name": "NodeDefinition",
  "type": "class",
  "fields": {
    "type": {
      "name": "type",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "node_schema": {
      "name": "node_schema",
      "type": "Any",
      "required": true,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ]
    },
    "handler": {
      "name": "handler",
      "type": "Any",
      "required": true,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ]
    },
    "requires_services": {
      "name": "requires_services",
      "type": "{}",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "description": {
      "name": "description",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class Vec2({{#each this.bases}}{
  "name": "Vec2",
  "type": "class",
  "fields": {
    "x": {
      "name": "x",
      "type": "float",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "y": {
      "name": "y",
      "type": "float",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class DomainHandle({{#each this.bases}}{
  "name": "DomainHandle",
  "type": "class",
  "fields": {
    "id": {
      "name": "id",
      "type": "HandleID",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "node_id": {
      "name": "node_id",
      "type": "NodeID",
      "required": true,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "dipeo.models",
          "items": [
            "NodeID"
          ],
          "is_type_import": true
        }
      ]
    },
    "label": {
      "name": "label",
      "type": "HandleLabel",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "direction": {
      "name": "direction",
      "type": "HandleDirection",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "data_type": {
      "name": "data_type",
      "type": "DataType",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "position": {
      "name": "position",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [
    {
      "name": "validate_node_id",
      "decorator": "@field_validator(\"node_id\")",
      "body": [
        "def validate_node_id(cls, v):",
        "    if v and not isinstance(v, str):",
        "        raise ValueError(f\"{field_name} must be a string\")",
        "    return v"
      ]
    }
  ],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class DomainNode({{#each this.bases}}{
  "name": "DomainNode",
  "type": "class",
  "fields": {
    "id": {
      "name": "id",
      "type": "NodeID",
      "required": true,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "dipeo.models",
          "items": [
            "NodeID"
          ],
          "is_type_import": true
        }
      ]
    },
    "type": {
      "name": "type",
      "type": "NodeType",
      "required": true,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "dipeo.models",
          "items": [
            "NodeType"
          ],
          "is_type_import": true
        }
      ]
    },
    "position": {
      "name": "position",
      "type": "Vec2",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "data": {
      "name": "data",
      "type": "Dict[str, Any]",
      "required": true,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Dict"
          ],
          "is_type_import": true
        }
      ]
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [
    {
      "name": "validate_id",
      "decorator": "@field_validator(\"id\")",
      "body": [
        "def validate_id(cls, v):",
        "    if v and not isinstance(v, str):",
        "        raise ValueError(f\"{field_name} must be a string\")",
        "    return v"
      ]
    }
  ],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class DomainArrow({{#each this.bases}}{
  "name": "DomainArrow",
  "type": "class",
  "fields": {
    "id": {
      "name": "id",
      "type": "ArrowID",
      "required": true,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "dipeo.models",
          "items": [
            "ArrowID"
          ],
          "is_type_import": true
        }
      ]
    },
    "source": {
      "name": "source",
      "type": "HandleID",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "target": {
      "name": "target",
      "type": "HandleID",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "content_type": {
      "name": "content_type",
      "type": "ContentType",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "label": {
      "name": "label",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "data": {
      "name": "data",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class MemoryConfig({{#each this.bases}}{
  "name": "MemoryConfig",
  "type": "class",
  "fields": {
    "forget_mode": {
      "name": "forget_mode",
      "type": "ForgettingMode",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "max_messages": {
      "name": "max_messages",
      "type": "float",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "temperature": {
      "name": "temperature",
      "type": "float",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class MemorySettings({{#each this.bases}}{
  "name": "MemorySettings",
  "type": "class",
  "fields": {
    "view": {
      "name": "view",
      "type": "MemoryView",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "max_messages": {
      "name": "max_messages",
      "type": "float",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "preserve_system": {
      "name": "preserve_system",
      "type": "bool",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class PersonLLMConfig({{#each this.bases}}{
  "name": "PersonLLMConfig",
  "type": "class",
  "fields": {
    "service": {
      "name": "service",
      "type": "LLMService",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "model": {
      "name": "model",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "api_key_id": {
      "name": "api_key_id",
      "type": "ApiKeyID",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "system_prompt": {
      "name": "system_prompt",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class DomainPerson({{#each this.bases}}{
  "name": "DomainPerson",
  "type": "class",
  "fields": {
    "id": {
      "name": "id",
      "type": "PersonID",
      "required": true,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "dipeo.models",
          "items": [
            "PersonID"
          ],
          "is_type_import": true
        }
      ]
    },
    "label": {
      "name": "label",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "llm_config": {
      "name": "llm_config",
      "type": "PersonLLMConfig",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "type": {
      "name": "type",
      "type": "\"person\"",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class DomainApiKey({{#each this.bases}}{
  "name": "DomainApiKey",
  "type": "class",
  "fields": {
    "id": {
      "name": "id",
      "type": "ApiKeyID",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "label": {
      "name": "label",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "service": {
      "name": "service",
      "type": "APIServiceType",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "key": {
      "name": "key",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class DiagramMetadata({{#each this.bases}}{
  "name": "DiagramMetadata",
  "type": "class",
  "fields": {
    "id": {
      "name": "id",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    },
    "name": {
      "name": "name",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "description": {
      "name": "description",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "version": {
      "name": "version",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "created": {
      "name": "created",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "modified": {
      "name": "modified",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "author": {
      "name": "author",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "tags": {
      "name": "tags",
      "type": "{}",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class DomainDiagram({{#each this.bases}}{
  "name": "DomainDiagram",
  "type": "class",
  "fields": {
    "nodes": {
      "name": "nodes",
      "type": "{}",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "handles": {
      "name": "handles",
      "type": "{}",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "arrows": {
      "name": "arrows",
      "type": "{}",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "persons": {
      "name": "persons",
      "type": "{}",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "metadata": {
      "name": "metadata",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class BaseNodeData({{#each this.bases}}{
  "name": "BaseNodeData",
  "type": "class",
  "fields": {
    "label": {
      "name": "label",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "flipped": {
      "name": "flipped",
      "type": "bool",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class StartNodeData({{#each this.bases}}{
  "name": "StartNodeData",
  "type": "class",
  "fields": {
    "custom_data": {
      "name": "custom_data",
      "type": "Dict[str, Union[str, float, bool]]",
      "required": true,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Dict"
          ],
          "is_type_import": true
        }
      ]
    },
    "output_data_structure": {
      "name": "output_data_structure",
      "type": "Dict[str, str]",
      "required": true,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Dict"
          ],
          "is_type_import": true
        }
      ]
    },
    "trigger_mode": {
      "name": "trigger_mode",
      "type": "HookTriggerMode",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "hook_event": {
      "name": "hook_event",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "hook_filters": {
      "name": "hook_filters",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class ConditionNodeData({{#each this.bases}}{
  "name": "ConditionNodeData",
  "type": "class",
  "fields": {
    "condition_type": {
      "name": "condition_type",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "expression": {
      "name": "expression",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "node_indices": {
      "name": "node_indices",
      "type": "{}",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class PersonJobNodeData({{#each this.bases}}{
  "name": "PersonJobNodeData",
  "type": "class",
  "fields": {
    "person": {
      "name": "person",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    },
    "first_only_prompt": {
      "name": "first_only_prompt",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "default_prompt": {
      "name": "default_prompt",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "max_iteration": {
      "name": "max_iteration",
      "type": "float",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "memory_config": {
      "name": "memory_config",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    },
    "memory_settings": {
      "name": "memory_settings",
      "type": "MemorySettings",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "tools": {
      "name": "tools",
      "type": "{}",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class EndpointNodeData({{#each this.bases}}{
  "name": "EndpointNodeData",
  "type": "class",
  "fields": {
    "save_to_file": {
      "name": "save_to_file",
      "type": "bool",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "file_name": {
      "name": "file_name",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class DBNodeData({{#each this.bases}}{
  "name": "DBNodeData",
  "type": "class",
  "fields": {
    "file": {
      "name": "file",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "collection": {
      "name": "collection",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "sub_type": {
      "name": "sub_type",
      "type": "DBBlockSubType",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "operation": {
      "name": "operation",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "query": {
      "name": "query",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "data": {
      "name": "data",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class JobNodeData({{#each this.bases}}{
  "name": "JobNodeData",
  "type": "class",
  "fields": {
    "code_type": {
      "name": "code_type",
      "type": "SupportedLanguage",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "code": {
      "name": "code",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class CodeJobNodeData({{#each this.bases}}{
  "name": "CodeJobNodeData",
  "type": "class",
  "fields": {
    "language": {
      "name": "language",
      "type": "SupportedLanguage",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "filePath": {
      "name": "filePath",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "functionName": {
      "name": "functionName",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "timeout": {
      "name": "timeout",
      "type": "float",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class ApiJobNodeData({{#each this.bases}}{
  "name": "ApiJobNodeData",
  "type": "class",
  "fields": {
    "url": {
      "name": "url",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "method": {
      "name": "method",
      "type": "HttpMethod",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "headers": {
      "name": "headers",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    },
    "params": {
      "name": "params",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    },
    "body": {
      "name": "body",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    },
    "timeout": {
      "name": "timeout",
      "type": "float",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "auth_type": {
      "name": "auth_type",
      "type": "Union[\"none\", \"bearer\", \"basic\", \"api_key\"]",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Union"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    },
    "auth_config": {
      "name": "auth_config",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class UserResponseNodeData({{#each this.bases}}{
  "name": "UserResponseNodeData",
  "type": "class",
  "fields": {
    "prompt": {
      "name": "prompt",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "timeout": {
      "name": "timeout",
      "type": "float",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class NotionNodeData({{#each this.bases}}{
  "name": "NotionNodeData",
  "type": "class",
  "fields": {
    "operation": {
      "name": "operation",
      "type": "NotionOperation",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "page_id": {
      "name": "page_id",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "database_id": {
      "name": "database_id",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class HookNodeData({{#each this.bases}}{
  "name": "HookNodeData",
  "type": "class",
  "fields": {
    "hook_type": {
      "name": "hook_type",
      "type": "HookType",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "config": {
      "name": "config",
      "type": "Union[{ command?: string ; args?: {} ; env?: any; cwd?: string ; url?: string ; method?: HttpMethod ; headers?: any; script?: string ; function_name?: string ; file_path?: string ; format?: \"json\", \"yaml\", \"text\" ; }]",
      "required": true,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Union"
          ],
          "is_type_import": true
        }
      ]
    },
    "timeout": {
      "name": "timeout",
      "type": "float",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "retry_count": {
      "name": "retry_count",
      "type": "float",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "retry_delay": {
      "name": "retry_delay",
      "type": "float",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class TemplateJobNodeData({{#each this.bases}}{
  "name": "TemplateJobNodeData",
  "type": "class",
  "fields": {
    "template_path": {
      "name": "template_path",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "template_content": {
      "name": "template_content",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "output_path": {
      "name": "output_path",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "variables": {
      "name": "variables",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    },
    "engine": {
      "name": "engine",
      "type": "Union[\"internal\", \"jinja2\", \"handlebars\"]",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Union"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class ShellJobNodeData({{#each this.bases}}{
  "name": "ShellJobNodeData",
  "type": "class",
  "fields": {
    "command": {
      "name": "command",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "args": {
      "name": "args",
      "type": "{}",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "cwd": {
      "name": "cwd",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "env": {
      "name": "env",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    },
    "timeout": {
      "name": "timeout",
      "type": "float",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "capture_output": {
      "name": "capture_output",
      "type": "bool",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "shell": {
      "name": "shell",
      "type": "bool",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class JsonSchemaValidatorNodeData({{#each this.bases}}{
  "name": "JsonSchemaValidatorNodeData",
  "type": "class",
  "fields": {
    "schema_path": {
      "name": "schema_path",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "schema": {
      "name": "schema",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    },
    "data_path": {
      "name": "data_path",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "strict_mode": {
      "name": "strict_mode",
      "type": "bool",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "error_on_extra": {
      "name": "error_on_extra",
      "type": "bool",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class TypescriptAstNodeData({{#each this.bases}}{
  "name": "TypescriptAstNodeData",
  "type": "class",
  "fields": {
    "source": {
      "name": "source",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "extractPatterns": {
      "name": "extractPatterns",
      "type": "{}",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "includeJSDoc": {
      "name": "includeJSDoc",
      "type": "bool",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "parseMode": {
      "name": "parseMode",
      "type": "Union[\"module\", \"script\"]",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Union"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class SubDiagramNodeData({{#each this.bases}}{
  "name": "SubDiagramNodeData",
  "type": "class",
  "fields": {
    "diagram_name": {
      "name": "diagram_name",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "diagram_data": {
      "name": "diagram_data",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    },
    "input_mapping": {
      "name": "input_mapping",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    },
    "output_mapping": {
      "name": "output_mapping",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    },
    "timeout": {
      "name": "timeout",
      "type": "float",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "wait_for_completion": {
      "name": "wait_for_completion",
      "type": "bool",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "isolate_conversation": {
      "name": "isolate_conversation",
      "type": "bool",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class Message({{#each this.bases}}{
  "name": "Message",
  "type": "class",
  "fields": {
    "id": {
      "name": "id",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "from_person_id": {
      "name": "from_person_id",
      "type": "Any",
      "required": true,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ]
    },
    "to_person_id": {
      "name": "to_person_id",
      "type": "PersonID",
      "required": true,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "dipeo.models",
          "items": [
            "PersonID"
          ],
          "is_type_import": true
        }
      ]
    },
    "content": {
      "name": "content",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "timestamp": {
      "name": "timestamp",
      "type": "str",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "token_count": {
      "name": "token_count",
      "type": "float",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "message_type": {
      "name": "message_type",
      "type": "Union[\"person_to_person\", \"system_to_person\", \"person_to_system\"]",
      "required": true,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Union"
          ],
          "is_type_import": true
        }
      ]
    },
    "metadata": {
      "name": "metadata",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class ConversationMetadata({{#each this.bases}}{
  "name": "ConversationMetadata",
  "type": "class",
  "fields": {
    "started_at": {
      "name": "started_at",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "last_message_at": {
      "name": "last_message_at",
      "type": "str",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "total_tokens": {
      "name": "total_tokens",
      "type": "float",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "message_count": {
      "name": "message_count",
      "type": "float",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "context_resets": {
      "name": "context_resets",
      "type": "float",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class Conversation({{#each this.bases}}{
  "name": "Conversation",
  "type": "class",
  "fields": {
    "messages": {
      "name": "messages",
      "type": "{}",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "metadata": {
      "name": "metadata",
      "type": "ConversationMetadata",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class MemoryState({{#each this.bases}}{
  "name": "MemoryState",
  "type": "class",
  "fields": {
    "visible_messages": {
      "name": "visible_messages",
      "type": "float",
      "required": true,
      "default": null,
      "description": "",
      "imports": []
    },
    "has_more": {
      "name": "has_more",
      "type": "bool",
      "required": false,
      "default": null,
      "description": "",
      "imports": [],
      "field_definition": "Field(default=None)"
    },
    "config": {
      "name": "config",
      "type": "Any",
      "required": false,
      "default": null,
      "description": "",
      "imports": [
        {
          "module": "typing",
          "items": [
            "Any"
          ],
          "is_type_import": true
        }
      ],
      "field_definition": "Field(default=None)"
    }
  },
  "bases": [
    "BaseModel"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": []
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class LLMService({{#each this.bases}}{
  "name": "LLMService",
  "type": "enum",
  "fields": {},
  "bases": [
    "str",
    "Enum"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": [
    [
      "OPENAI",
      "openai"
    ],
    [
      "ANTHROPIC",
      "anthropic"
    ],
    [
      "GOOGLE",
      "google"
    ],
    [
      "BEDROCK",
      "bedrock"
    ],
    [
      "VERTEX",
      "vertex"
    ],
    [
      "DEEPSEEK",
      "deepseek"
    ]
  ]
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class APIServiceType({{#each this.bases}}{
  "name": "APIServiceType",
  "type": "enum",
  "fields": {},
  "bases": [
    "str",
    "Enum"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": [
    [
      "OPENAI",
      "openai"
    ],
    [
      "ANTHROPIC",
      "anthropic"
    ],
    [
      "GOOGLE",
      "google"
    ],
    [
      "GEMINI",
      "gemini"
    ],
    [
      "BEDROCK",
      "bedrock"
    ],
    [
      "VERTEX",
      "vertex"
    ],
    [
      "DEEPSEEK",
      "deepseek"
    ],
    [
      "NOTION",
      "notion"
    ],
    [
      "GOOGLE_SEARCH",
      "google_search"
    ],
    [
      "SLACK",
      "slack"
    ],
    [
      "GITHUB",
      "github"
    ],
    [
      "JIRA",
      "jira"
    ]
  ]
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class NotionOperation({{#each this.bases}}{
  "name": "NotionOperation",
  "type": "enum",
  "fields": {},
  "bases": [
    "str",
    "Enum"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": [
    [
      "CREATE_PAGE",
      "create_page"
    ],
    [
      "UPDATE_PAGE",
      "update_page"
    ],
    [
      "READ_PAGE",
      "read_page"
    ],
    [
      "DELETE_PAGE",
      "delete_page"
    ],
    [
      "CREATE_DATABASE",
      "create_database"
    ],
    [
      "QUERY_DATABASE",
      "query_database"
    ],
    [
      "UPDATE_DATABASE",
      "update_database"
    ]
  ]
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class ToolType({{#each this.bases}}{
  "name": "ToolType",
  "type": "enum",
  "fields": {},
  "bases": [
    "str",
    "Enum"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": [
    [
      "WEB_SEARCH",
      "web_search"
    ],
    [
      "WEB_SEARCH_PREVIEW",
      "web_search_preview"
    ],
    [
      "IMAGE_GENERATION",
      "image_generation"
    ]
  ]
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class ExecutionStatus({{#each this.bases}}{
  "name": "ExecutionStatus",
  "type": "enum",
  "fields": {},
  "bases": [
    "str",
    "Enum"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": [
    [
      "PENDING",
      "PENDING"
    ],
    [
      "RUNNING",
      "RUNNING"
    ],
    [
      "PAUSED",
      "PAUSED"
    ],
    [
      "COMPLETED",
      "COMPLETED"
    ],
    [
      "FAILED",
      "FAILED"
    ],
    [
      "ABORTED",
      "ABORTED"
    ],
    [
      "SKIPPED",
      "SKIPPED"
    ]
  ]
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class NodeExecutionStatus({{#each this.bases}}{
  "name": "NodeExecutionStatus",
  "type": "enum",
  "fields": {},
  "bases": [
    "str",
    "Enum"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": [
    [
      "PENDING",
      "PENDING"
    ],
    [
      "RUNNING",
      "RUNNING"
    ],
    [
      "PAUSED",
      "PAUSED"
    ],
    [
      "COMPLETED",
      "COMPLETED"
    ],
    [
      "FAILED",
      "FAILED"
    ],
    [
      "ABORTED",
      "ABORTED"
    ],
    [
      "SKIPPED",
      "SKIPPED"
    ],
    [
      "MAXITER_REACHED",
      "MAXITER_REACHED"
    ]
  ]
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class EventType({{#each this.bases}}{
  "name": "EventType",
  "type": "enum",
  "fields": {},
  "bases": [
    "str",
    "Enum"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": [
    [
      "EXECUTION_STATUS_CHANGED",
      "EXECUTION_STATUS_CHANGED"
    ],
    [
      "NODE_STATUS_CHANGED",
      "NODE_STATUS_CHANGED"
    ],
    [
      "NODE_PROGRESS",
      "NODE_PROGRESS"
    ],
    [
      "INTERACTIVE_PROMPT",
      "INTERACTIVE_PROMPT"
    ],
    [
      "INTERACTIVE_RESPONSE",
      "INTERACTIVE_RESPONSE"
    ],
    [
      "EXECUTION_ERROR",
      "EXECUTION_ERROR"
    ],
    [
      "EXECUTION_UPDATE",
      "EXECUTION_UPDATE"
    ]
  ]
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class NodeType({{#each this.bases}}{
  "name": "NodeType",
  "type": "enum",
  "fields": {},
  "bases": [
    "str",
    "Enum"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": [
    [
      "START",
      "start"
    ],
    [
      "PERSON_JOB",
      "person_job"
    ],
    [
      "CONDITION",
      "condition"
    ],
    [
      "JOB",
      "job"
    ],
    [
      "CODE_JOB",
      "code_job"
    ],
    [
      "API_JOB",
      "api_job"
    ],
    [
      "ENDPOINT",
      "endpoint"
    ],
    [
      "DB",
      "db"
    ],
    [
      "USER_RESPONSE",
      "user_response"
    ],
    [
      "NOTION",
      "notion"
    ],
    [
      "PERSON_BATCH_JOB",
      "person_batch_job"
    ],
    [
      "HOOK",
      "hook"
    ],
    [
      "TEMPLATE_JOB",
      "template_job"
    ],
    [
      "JSON_SCHEMA_VALIDATOR",
      "json_schema_validator"
    ],
    [
      "TYPESCRIPT_AST",
      "typescript_ast"
    ],
    [
      "SUB_DIAGRAM",
      "sub_diagram"
    ]
  ]
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class HandleDirection({{#each this.bases}}{
  "name": "HandleDirection",
  "type": "enum",
  "fields": {},
  "bases": [
    "str",
    "Enum"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": [
    [
      "INPUT",
      "input"
    ],
    [
      "OUTPUT",
      "output"
    ]
  ]
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class HandleLabel({{#each this.bases}}{
  "name": "HandleLabel",
  "type": "enum",
  "fields": {},
  "bases": [
    "str",
    "Enum"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": [
    [
      "DEFAULT",
      "default"
    ],
    [
      "FIRST",
      "first"
    ],
    [
      "CONDITION_TRUE",
      "condtrue"
    ],
    [
      "CONDITION_FALSE",
      "condfalse"
    ],
    [
      "SUCCESS",
      "success"
    ],
    [
      "ERROR",
      "error"
    ]
  ]
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class DataType({{#each this.bases}}{
  "name": "DataType",
  "type": "enum",
  "fields": {},
  "bases": [
    "str",
    "Enum"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": [
    [
      "ANY",
      "any"
    ],
    [
      "STRING",
      "string"
    ],
    [
      "NUMBER",
      "number"
    ],
    [
      "BOOLEAN",
      "boolean"
    ],
    [
      "OBJECT",
      "object"
    ],
    [
      "ARRAY",
      "array"
    ]
  ]
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class ForgettingMode({{#each this.bases}}{
  "name": "ForgettingMode",
  "type": "enum",
  "fields": {},
  "bases": [
    "str",
    "Enum"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": [
    [
      "NO_FORGET",
      "no_forget"
    ],
    [
      "ON_EVERY_TURN",
      "on_every_turn"
    ],
    [
      "UPON_REQUEST",
      "upon_request"
    ]
  ]
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class MemoryView({{#each this.bases}}{
  "name": "MemoryView",
  "type": "enum",
  "fields": {},
  "bases": [
    "str",
    "Enum"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": [
    [
      "ALL_INVOLVED",
      "all_involved"
    ],
    [
      "SENT_BY_ME",
      "sent_by_me"
    ],
    [
      "SENT_TO_ME",
      "sent_to_me"
    ],
    [
      "SYSTEM_AND_ME",
      "system_and_me"
    ],
    [
      "CONVERSATION_PAIRS",
      "conversation_pairs"
    ],
    [
      "ALL_MESSAGES",
      "all_messages"
    ]
  ]
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class DiagramFormat({{#each this.bases}}{
  "name": "DiagramFormat",
  "type": "enum",
  "fields": {},
  "bases": [
    "str",
    "Enum"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": [
    [
      "NATIVE",
      "native"
    ],
    [
      "LIGHT",
      "light"
    ],
    [
      "READABLE",
      "readable"
    ]
  ]
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class DBBlockSubType({{#each this.bases}}{
  "name": "DBBlockSubType",
  "type": "enum",
  "fields": {},
  "bases": [
    "str",
    "Enum"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": [
    [
      "FIXED_PROMPT",
      "fixed_prompt"
    ],
    [
      "FILE",
      "file"
    ],
    [
      "CODE",
      "code"
    ],
    [
      "API_TOOL",
      "api_tool"
    ]
  ]
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class ContentType({{#each this.bases}}{
  "name": "ContentType",
  "type": "enum",
  "fields": {},
  "bases": [
    "str",
    "Enum"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": [
    [
      "RAW_TEXT",
      "raw_text"
    ],
    [
      "CONVERSATION_STATE",
      "conversation_state"
    ],
    [
      "OBJECT",
      "object"
    ]
  ]
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class SupportedLanguage({{#each this.bases}}{
  "name": "SupportedLanguage",
  "type": "enum",
  "fields": {},
  "bases": [
    "str",
    "Enum"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": [
    [
      "PYTHON",
      "python"
    ],
    [
      "TYPESCRIPT",
      "typescript"
    ],
    [
      "BASH",
      "bash"
    ],
    [
      "SHELL",
      "shell"
    ]
  ]
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class HttpMethod({{#each this.bases}}{
  "name": "HttpMethod",
  "type": "enum",
  "fields": {},
  "bases": [
    "str",
    "Enum"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": [
    [
      "GET",
      "GET"
    ],
    [
      "POST",
      "POST"
    ],
    [
      "PUT",
      "PUT"
    ],
    [
      "DELETE",
      "DELETE"
    ],
    [
      "PATCH",
      "PATCH"
    ]
  ]
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class HookType({{#each this.bases}}{
  "name": "HookType",
  "type": "enum",
  "fields": {},
  "bases": [
    "str",
    "Enum"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": [
    [
      "SHELL",
      "shell"
    ],
    [
      "WEBHOOK",
      "webhook"
    ],
    [
      "PYTHON",
      "python"
    ],
    [
      "FILE",
      "file"
    ]
  ]
}{{#unless @last}}, {{/unless}}
{{#if (eq this.type "class")}}
class HookTriggerMode({{#each this.bases}}{
  "name": "HookTriggerMode",
  "type": "enum",
  "fields": {},
  "bases": [
    "str",
    "Enum"
  ],
  "imports": [],
  "docstring": null,
  "decorators": [],
  "methods": [],
  "enum_values": [
    [
      "MANUAL",
      "manual"
    ],
    [
      "HOOK",
      "hook"
    ]
  ]
}{{#unless @last}}, {{/unless}}):
    """"""
    
    
    
    
    {{#if (eq this.name "BaseNode")}}
    # Common model configuration
    model_config = {
        "extra": "forbid",
        "validate_assignment": True,
        "arbitrary_types_allowed": True,
    }
    {{/if}}
    
    

{{/if}}
{{/each}}

# Helper functions
def validate_node_type(node_type: str) -> str:
    """Validate that node_type is a valid NodeType."""
    try:
        NodeType(node_type)
        return node_type
    except ValueError:
        raise ValueError(f"Invalid node type: {node_type}")


def validate_handle(handle: str) -> str:
    """Validate handle format."""
    if not handle or not isinstance(handle, str):
        raise ValueError("Handle must be a non-empty string")
    return handle


# Model registry for dynamic instantiation
MODEL_REGISTRY = {
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "GraphQLDomainPersonType": GraphQLDomainPersonType,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "StoreDiagram": StoreDiagram,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "ToolConfig": ToolConfig,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "WebSearchResult": WebSearchResult,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "ImageGenerationResult": ImageGenerationResult,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "ToolOutput": ToolOutput,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "ChatResult": ChatResult,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "LLMRequestOptions": LLMRequestOptions,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "TokenUsage": TokenUsage,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "NodeState": NodeState,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "ExecutionState": ExecutionState,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "ExecutionOptions": ExecutionOptions,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "InteractivePromptData": InteractivePromptData,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "InteractiveResponse": InteractiveResponse,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "ExecutionUpdate": ExecutionUpdate,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "NodeDefinition": NodeDefinition,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "Vec2": Vec2,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "DomainHandle": DomainHandle,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "DomainNode": DomainNode,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "DomainArrow": DomainArrow,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "MemoryConfig": MemoryConfig,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "MemorySettings": MemorySettings,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "PersonLLMConfig": PersonLLMConfig,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "DomainPerson": DomainPerson,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "DomainApiKey": DomainApiKey,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "DiagramMetadata": DiagramMetadata,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "DomainDiagram": DomainDiagram,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "BaseNodeData": BaseNodeData,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "StartNodeData": StartNodeData,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "ConditionNodeData": ConditionNodeData,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "PersonJobNodeData": PersonJobNodeData,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "EndpointNodeData": EndpointNodeData,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "DBNodeData": DBNodeData,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "JobNodeData": JobNodeData,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "CodeJobNodeData": CodeJobNodeData,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "ApiJobNodeData": ApiJobNodeData,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "UserResponseNodeData": UserResponseNodeData,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "NotionNodeData": NotionNodeData,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "HookNodeData": HookNodeData,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "TemplateJobNodeData": TemplateJobNodeData,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "ShellJobNodeData": ShellJobNodeData,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "JsonSchemaValidatorNodeData": JsonSchemaValidatorNodeData,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "TypescriptAstNodeData": TypescriptAstNodeData,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "SubDiagramNodeData": SubDiagramNodeData,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "Message": Message,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "ConversationMetadata": ConversationMetadata,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "Conversation": Conversation,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "MemoryState": MemoryState,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "LLMService": LLMService,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "APIServiceType": APIServiceType,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "NotionOperation": NotionOperation,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "ToolType": ToolType,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "ExecutionStatus": ExecutionStatus,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "NodeExecutionStatus": NodeExecutionStatus,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "EventType": EventType,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "NodeType": NodeType,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "HandleDirection": HandleDirection,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "HandleLabel": HandleLabel,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "DataType": DataType,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "ForgettingMode": ForgettingMode,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "MemoryView": MemoryView,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "DiagramFormat": DiagramFormat,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "DBBlockSubType": DBBlockSubType,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "ContentType": ContentType,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "SupportedLanguage": SupportedLanguage,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "HttpMethod": HttpMethod,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "HookType": HookType,
    {{/if}}
    
    {{#if (and (eq this.type "class") (endsWith this.name "Node"))}}
    "HookTriggerMode": HookTriggerMode,
    {{/if}}
    
}


def create_node_model(node_type: str, data: Dict[str, Any]) -> BaseModel:
    """Create a node model instance based on node type."""
    model_name = f"{node_type.replace('_', ' ').title().replace(' ', '')}Node"
    model_class = MODEL_REGISTRY.get(model_name)
    
    if not model_class:
        raise ValueError(f"Unknown node type: {node_type}")
    
    return model_class(**data)