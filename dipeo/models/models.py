from __future__ import annotations
from enum import Enum
from typing import Any, Dict, List, Literal, NewType, Optional, Union
from pydantic import BaseModel, ConfigDict, Field

"""
Autoâ€‘generated Python models (compact version).
DO NOT EDIT THIS FILE DIRECTLY.
"""

class NodeType(str, Enum):
    start = "start"
    person_job = "person_job"
    condition = "condition"
    job = "job"
    code_job = "code_job"
    api_job = "api_job"
    endpoint = "endpoint"
    db = "db"
    user_response = "user_response"
    notion = "notion"
    person_batch_job = "person_batch_job"
    hook = "hook"
    template_job = "template_job"
    json_schema_validator = "json_schema_validator"

class HandleDirection(str, Enum):
    input = "input"
    output = "output"

class HandleLabel(str, Enum):
    default = "default"
    first = "first"
    condtrue = "condtrue"
    condfalse = "condfalse"

class DataType(str, Enum):
    any = "any"
    string = "string"
    number = "number"
    boolean = "boolean"
    object = "object"
    array = "array"

class ForgettingMode(str, Enum):
    no_forget = "no_forget"
    on_every_turn = "on_every_turn"
    upon_request = "upon_request"

class MemoryView(str, Enum):
    all_involved = "all_involved"
    sent_by_me = "sent_by_me"
    sent_to_me = "sent_to_me"
    system_and_me = "system_and_me"
    conversation_pairs = "conversation_pairs"
    all_messages = "all_messages"

class DiagramFormat(str, Enum):
    native = "native"
    light = "light"
    readable = "readable"

class DBBlockSubType(str, Enum):
    fixed_prompt = "fixed_prompt"
    file = "file"
    code = "code"
    api_tool = "api_tool"

class ContentType(str, Enum):
    variable = "variable"
    raw_text = "raw_text"
    conversation_state = "conversation_state"
    object = "object"

class SupportedLanguage(str, Enum):
    python = "python"
    typescript = "typescript"
    bash = "bash"

class HttpMethod(str, Enum):
    GET = "GET"
    POST = "POST"
    PUT = "PUT"
    DELETE = "DELETE"
    PATCH = "PATCH"

class HookType(str, Enum):
    shell = "shell"
    webhook = "webhook"
    python = "python"
    file = "file"

class HookTriggerMode(str, Enum):
    manual = "manual"
    hook = "hook"

class ExecutionStatus(str, Enum):
    PENDING = "PENDING"
    RUNNING = "RUNNING"
    PAUSED = "PAUSED"
    COMPLETED = "COMPLETED"
    FAILED = "FAILED"
    ABORTED = "ABORTED"
    SKIPPED = "SKIPPED"

class NodeExecutionStatus(str, Enum):
    PENDING = "PENDING"
    RUNNING = "RUNNING"
    PAUSED = "PAUSED"
    COMPLETED = "COMPLETED"
    FAILED = "FAILED"
    ABORTED = "ABORTED"
    SKIPPED = "SKIPPED"
    MAXITER_REACHED = "MAXITER_REACHED"

class EventType(str, Enum):
    EXECUTION_STATUS_CHANGED = "EXECUTION_STATUS_CHANGED"
    NODE_STATUS_CHANGED = "NODE_STATUS_CHANGED"
    NODE_PROGRESS = "NODE_PROGRESS"
    INTERACTIVE_PROMPT = "INTERACTIVE_PROMPT"
    INTERACTIVE_RESPONSE = "INTERACTIVE_RESPONSE"
    EXECUTION_ERROR = "EXECUTION_ERROR"
    EXECUTION_UPDATE = "EXECUTION_UPDATE"

class LLMService(str, Enum):
    openai = "openai"
    anthropic = "anthropic"
    google = "google"
    bedrock = "bedrock"
    vertex = "vertex"
    deepseek = "deepseek"

class APIServiceType(str, Enum):
    openai = "openai"
    anthropic = "anthropic"
    google = "google"
    gemini = "gemini"
    bedrock = "bedrock"
    vertex = "vertex"
    deepseek = "deepseek"
    notion = "notion"
    google_search = "google_search"
    slack = "slack"
    github = "github"
    jira = "jira"

class NotionOperation(str, Enum):
    create_page = "create_page"
    update_page = "update_page"
    read_page = "read_page"
    delete_page = "delete_page"
    create_database = "create_database"
    query_database = "query_database"
    update_database = "update_database"

class ToolType(str, Enum):
    web_search = "web_search"
    web_search_preview = "web_search_preview"
    image_generation = "image_generation"

# Branded scalar IDs
NodeID = NewType('NodeID', str)
ArrowID = NewType('ArrowID', str)
HandleID = NewType('HandleID', str)
PersonID = NewType('PersonID', str)
ApiKeyID = NewType('ApiKeyID', str)
DiagramID = NewType('DiagramID', str)
ExecutionID = NewType('ExecutionID', str)

class Message(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    id: Optional[str] = Field(default=None)
    from_person_id: Union[PersonID, Literal["system"]]
    to_person_id: PersonID
    content: str
    timestamp: Optional[str] = Field(default=None)
    token_count: Optional[float] = Field(default=None)
    message_type: Literal["person_to_person", "system_to_person", "person_to_system"]
    metadata: Optional[Dict[str, Any]] = Field(default=None)

class ConversationMetadata(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    started_at: str
    last_message_at: str
    total_tokens: float
    message_count: float
    context_resets: float

class Conversation(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    messages: List[Message]
    metadata: Optional[ConversationMetadata] = Field(default=None)

class MemoryState(Conversation):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    visible_messages: float
    has_more: Optional[bool] = Field(default=None)
    config: Optional[MemoryConfig] = Field(default=None)

class Vec2(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    x: float
    y: float

class DomainHandle(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    id: HandleID
    node_id: NodeID
    label: HandleLabel
    direction: HandleDirection
    data_type: DataType
    position: Optional[str] = Field(default=None)

class DomainNode(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    id: NodeID
    type: NodeType
    position: Vec2
    data: Dict[str, Any]

class DomainArrow(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    id: ArrowID
    source: HandleID
    target: HandleID
    content_type: Optional[ContentType] = Field(default=None)
    label: Optional[str] = Field(default=None)
    data: Optional[Dict[str, Any]] = Field(default=None)

class MemoryConfig(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    forget_mode: Optional[ForgettingMode] = Field(default=None)
    max_messages: Optional[float] = Field(default=None)
    temperature: Optional[float] = Field(default=None)

class MemorySettings(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    view: MemoryView
    max_messages: Optional[float] = Field(default=None)
    preserve_system: Optional[bool] = Field(default=None)

class PersonLLMConfig(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    service: LLMService
    model: str
    api_key_id: ApiKeyID
    system_prompt: Optional[str] = Field(default=None)

class DomainPerson(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    id: PersonID
    label: str
    llm_config: PersonLLMConfig
    type: Literal["person"]

class DomainApiKey(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    id: ApiKeyID
    label: str
    service: APIServiceType
    key: Optional[str] = Field(default=None)

class DiagramMetadata(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    id: Optional[DiagramID] = Field(default=None)
    name: Optional[str] = Field(default=None)
    description: Optional[str] = Field(default=None)
    version: str
    created: str
    modified: str
    author: Optional[str] = Field(default=None)
    tags: Optional[List[str]] = Field(default=None)

class DomainDiagram(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    nodes: List[DomainNode]
    handles: List[DomainHandle]
    arrows: List[DomainArrow]
    persons: List[DomainPerson]
    metadata: Optional[DiagramMetadata] = Field(default=None)

class BaseNodeData(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    label: str
    flipped: Optional[bool] = Field(default=None)

class StartNodeData(BaseNodeData):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    custom_data: Dict[str, Union[str, float, bool]]
    output_data_structure: Dict[str, str]
    trigger_mode: Optional[HookTriggerMode] = Field(default=None)
    hook_event: Optional[str] = Field(default=None)
    hook_filters: Optional[Dict[str, Any]] = Field(default=None)

class ConditionNodeData(BaseNodeData):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    condition_type: str
    expression: Optional[str] = Field(default=None)
    node_indices: Optional[List[str]] = Field(default=None)

class PersonJobNodeData(BaseNodeData):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    person: Optional[PersonID] = Field(default=None)
    first_only_prompt: str
    default_prompt: Optional[str] = Field(default=None)
    max_iteration: float
    memory_config: Optional[MemoryConfig] = Field(default=None)
    memory_settings: Optional[MemorySettings] = Field(default=None)
    tools: Optional[List[ToolConfig]] = Field(default=None)

class EndpointNodeData(BaseNodeData):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    save_to_file: bool
    file_name: Optional[str] = Field(default=None)

class DBNodeData(BaseNodeData):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    file: Optional[str] = Field(default=None)
    collection: Optional[str] = Field(default=None)
    sub_type: DBBlockSubType
    operation: str
    query: Optional[str] = Field(default=None)
    data: Optional[Dict[str, Any]] = Field(default=None)

class JobNodeData(BaseNodeData):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    code_type: SupportedLanguage
    code: str

class CodeJobNodeData(BaseNodeData):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    language: SupportedLanguage
    filePath: str
    functionName: Optional[str] = Field(default=None)
    timeout: Optional[float] = Field(default=None)

class ApiJobNodeData(BaseNodeData):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    url: str
    method: HttpMethod
    headers: Optional[Dict[str, Any]] = Field(default=None)
    params: Optional[Dict[str, Any]] = Field(default=None)
    body: Optional[Any] = Field(default=None)
    timeout: Optional[float] = Field(default=None)
    auth_type: Optional[Union[Literal["none"], Literal["bearer"], Literal["basic"], Literal["api_key"]]] = Field(default=None)
    auth_config: Optional[Dict[str, Any]] = Field(default=None)

class UserResponseNodeData(BaseNodeData):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    prompt: str
    timeout: int

class NotionNodeData(BaseNodeData):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    operation: NotionOperation
    page_id: Optional[str] = Field(default=None)
    database_id: Optional[str] = Field(default=None)

class HookNodeData(BaseNodeData):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    hook_type: HookType
    config: Dict[str, Any]
    timeout: Optional[float] = Field(default=None)
    retry_count: Optional[float] = Field(default=None)
    retry_delay: Optional[float] = Field(default=None)

class TemplateJobNodeData(BaseNodeData):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    template_path: Optional[str] = Field(default=None)
    template_content: Optional[str] = Field(default=None)
    output_path: Optional[str] = Field(default=None)
    variables: Optional[Dict[str, Any]] = Field(default=None)
    engine: Optional[Union[Literal["internal"], Literal["jinja2"], Literal["handlebars"]]] = Field(default=None)

class ShellJobNodeData(BaseNodeData):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    command: str
    args: Optional[List[str]] = Field(default=None)
    cwd: Optional[str] = Field(default=None)
    env: Optional[Dict[str, Any]] = Field(default=None)
    timeout: Optional[float] = Field(default=None)
    capture_output: Optional[bool] = Field(default=None)
    shell: Optional[bool] = Field(default=None)

class JsonSchemaValidatorNodeData(BaseNodeData):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    schema_path: Optional[str] = Field(default=None)
    schema: Optional[Dict[str, Any]] = Field(default=None)
    data_path: Optional[str] = Field(default=None)
    strict_mode: Optional[bool] = Field(default=None)
    error_on_extra: Optional[bool] = Field(default=None)

class TokenUsage(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    input: int
    output: int
    cached: Optional[float] = Field(default=None)
    total: Optional[float] = Field(default=None)

class NodeState(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    status: NodeExecutionStatus
    started_at: Optional[str] = Field(default=None)
    ended_at: Optional[str] = Field(default=None)
    error: Optional[str] = Field(default=None)
    token_usage: Optional[TokenUsage] = Field(default=None)
    output: Optional[Dict[str, Any]] = Field(default=None)

class ExecutionState(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    id: ExecutionID
    status: ExecutionStatus
    diagram_id: Optional[DiagramID] = Field(default=None)
    started_at: str
    ended_at: Optional[str] = Field(default=None)
    node_states: Dict[str, NodeState]
    node_outputs: Dict[str, Dict[str, Any]]
    token_usage: TokenUsage
    error: Optional[str] = Field(default=None)
    variables: Dict[str, Any]
    duration_seconds: Optional[float] = Field(default=None)
    is_active: Optional[bool] = Field(default=None)
    exec_counts: Dict[str, float]
    executed_nodes: List[str]

class ExecutionOptions(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    mode: Optional[Union[Literal["normal"], Literal["debug"], Literal["monitor"]]] = Field(default=None)
    timeout: Optional[float] = Field(default=None)
    variables: Optional[Dict[str, Any]] = Field(default=None)
    debug: Optional[bool] = Field(default=None)

class InteractivePromptData(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    node_id: NodeID
    prompt: str
    timeout: Optional[float] = Field(default=None)
    default_value: Optional[str] = Field(default=None)

class InteractiveResponse(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    node_id: NodeID
    response: str
    timestamp: str

class ExecutionUpdate(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    type: EventType
    execution_id: ExecutionID
    node_id: Optional[NodeID] = Field(default=None)
    status: Optional[NodeExecutionStatus] = Field(default=None)
    result: Optional[Any] = Field(default=None)
    error: Optional[str] = Field(default=None)
    timestamp: Optional[str] = Field(default=None)
    total_tokens: Optional[float] = Field(default=None)
    node_type: Optional[str] = Field(default=None)
    tokens: Optional[float] = Field(default=None)
    data: Optional[Dict[str, Any]] = Field(default=None)

class NodeDefinition(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    type: str
    node_schema: Any
    handler: Any
    requires_services: Optional[List[str]] = Field(default=None)
    description: Optional[str] = Field(default=None)

class GraphQLDomainPersonType(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    id: str
    label: str
    llm_config: PersonLLMConfig
    type: str

class StoreDiagram(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    nodes: Dict[NodeID, DomainNode]
    handles: Dict[HandleID, DomainHandle]
    arrows: Dict[ArrowID, DomainArrow]
    persons: Dict[PersonID, DomainPerson]
    metadata: Optional[DiagramMetadata] = Field(default=None)

class ToolConfig(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    type: ToolType
    enabled: Optional[bool] = Field(default=None)
    config: Optional[Dict[str, Any]] = Field(default=None)

class WebSearchResult(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    url: str
    title: str
    snippet: str
    score: Optional[float] = Field(default=None)

class ImageGenerationResult(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    image_data: str
    format: str
    width: Optional[float] = Field(default=None)
    height: Optional[float] = Field(default=None)

class ToolOutput(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    type: ToolType
    result: Any
    raw_response: Optional[Any] = Field(default=None)

class ChatResult(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    text: str
    token_usage: Optional[TokenUsage] = Field(default=None)
    raw_response: Optional[Any] = Field(default=None)
    tool_outputs: Optional[List[ToolOutput]] = Field(default=None)

class LLMRequestOptions(BaseModel):
    model_config = ConfigDict(extra='allow', populate_by_name=True)

    temperature: Optional[float] = Field(default=None)
    max_tokens: Optional[float] = Field(default=None)
    top_p: Optional[float] = Field(default=None)
    n: Optional[float] = Field(default=None)
    tools: Optional[List[ToolConfig]] = Field(default=None)
    response_format: Optional[Any] = Field(default=None)

NodeID = NodeID

ArrowID = ArrowID

HandleID = HandleID

PersonID = PersonID

ApiKeyID = ApiKeyID

DiagramID = DiagramID

PersonBatchJobNodeData = PersonJobNodeData

ExecutionID = ExecutionID

PersonMemoryMessage = Message

PersonMemoryState = MemoryState

PersonMemoryConfig = MemoryConfig
