"""
Generated conversion functions for TypeScript <-> Python transformations.
DO NOT EDIT - This file is automatically generated.
"""

from typing import Any, Dict, List, Optional, Union, Type, TypeVar
from enum import Enum
import json

# Import generated models
from .__generated_models__ import *

T = TypeVar('T')


# Enum conversion helpers

def {{snakeCase this.name}}_to_string(value: LLMService) -> str:
    """Convert LLMService enum to string."""
    return value.value if isinstance(value, LLMService) else str(value)


def string_to_{{snakeCase this.name}}(value: str) -> LLMService:
    """Convert string to LLMService enum."""
    try:
        return LLMService(value)
    except ValueError:
        raise ValueError(f"Invalid LLMService value: {value}")


def {{snakeCase this.name}}_to_string(value: APIServiceType) -> str:
    """Convert APIServiceType enum to string."""
    return value.value if isinstance(value, APIServiceType) else str(value)


def string_to_{{snakeCase this.name}}(value: str) -> APIServiceType:
    """Convert string to APIServiceType enum."""
    try:
        return APIServiceType(value)
    except ValueError:
        raise ValueError(f"Invalid APIServiceType value: {value}")


def {{snakeCase this.name}}_to_string(value: NotionOperation) -> str:
    """Convert NotionOperation enum to string."""
    return value.value if isinstance(value, NotionOperation) else str(value)


def string_to_{{snakeCase this.name}}(value: str) -> NotionOperation:
    """Convert string to NotionOperation enum."""
    try:
        return NotionOperation(value)
    except ValueError:
        raise ValueError(f"Invalid NotionOperation value: {value}")


def {{snakeCase this.name}}_to_string(value: ToolType) -> str:
    """Convert ToolType enum to string."""
    return value.value if isinstance(value, ToolType) else str(value)


def string_to_{{snakeCase this.name}}(value: str) -> ToolType:
    """Convert string to ToolType enum."""
    try:
        return ToolType(value)
    except ValueError:
        raise ValueError(f"Invalid ToolType value: {value}")


def {{snakeCase this.name}}_to_string(value: ExecutionStatus) -> str:
    """Convert ExecutionStatus enum to string."""
    return value.value if isinstance(value, ExecutionStatus) else str(value)


def string_to_{{snakeCase this.name}}(value: str) -> ExecutionStatus:
    """Convert string to ExecutionStatus enum."""
    try:
        return ExecutionStatus(value)
    except ValueError:
        raise ValueError(f"Invalid ExecutionStatus value: {value}")


def {{snakeCase this.name}}_to_string(value: NodeExecutionStatus) -> str:
    """Convert NodeExecutionStatus enum to string."""
    return value.value if isinstance(value, NodeExecutionStatus) else str(value)


def string_to_{{snakeCase this.name}}(value: str) -> NodeExecutionStatus:
    """Convert string to NodeExecutionStatus enum."""
    try:
        return NodeExecutionStatus(value)
    except ValueError:
        raise ValueError(f"Invalid NodeExecutionStatus value: {value}")


def {{snakeCase this.name}}_to_string(value: EventType) -> str:
    """Convert EventType enum to string."""
    return value.value if isinstance(value, EventType) else str(value)


def string_to_{{snakeCase this.name}}(value: str) -> EventType:
    """Convert string to EventType enum."""
    try:
        return EventType(value)
    except ValueError:
        raise ValueError(f"Invalid EventType value: {value}")


def {{snakeCase this.name}}_to_string(value: NodeType) -> str:
    """Convert NodeType enum to string."""
    return value.value if isinstance(value, NodeType) else str(value)


def string_to_{{snakeCase this.name}}(value: str) -> NodeType:
    """Convert string to NodeType enum."""
    try:
        return NodeType(value)
    except ValueError:
        raise ValueError(f"Invalid NodeType value: {value}")


def {{snakeCase this.name}}_to_string(value: HandleDirection) -> str:
    """Convert HandleDirection enum to string."""
    return value.value if isinstance(value, HandleDirection) else str(value)


def string_to_{{snakeCase this.name}}(value: str) -> HandleDirection:
    """Convert string to HandleDirection enum."""
    try:
        return HandleDirection(value)
    except ValueError:
        raise ValueError(f"Invalid HandleDirection value: {value}")


def {{snakeCase this.name}}_to_string(value: HandleLabel) -> str:
    """Convert HandleLabel enum to string."""
    return value.value if isinstance(value, HandleLabel) else str(value)


def string_to_{{snakeCase this.name}}(value: str) -> HandleLabel:
    """Convert string to HandleLabel enum."""
    try:
        return HandleLabel(value)
    except ValueError:
        raise ValueError(f"Invalid HandleLabel value: {value}")


def {{snakeCase this.name}}_to_string(value: DataType) -> str:
    """Convert DataType enum to string."""
    return value.value if isinstance(value, DataType) else str(value)


def string_to_{{snakeCase this.name}}(value: str) -> DataType:
    """Convert string to DataType enum."""
    try:
        return DataType(value)
    except ValueError:
        raise ValueError(f"Invalid DataType value: {value}")


def {{snakeCase this.name}}_to_string(value: ForgettingMode) -> str:
    """Convert ForgettingMode enum to string."""
    return value.value if isinstance(value, ForgettingMode) else str(value)


def string_to_{{snakeCase this.name}}(value: str) -> ForgettingMode:
    """Convert string to ForgettingMode enum."""
    try:
        return ForgettingMode(value)
    except ValueError:
        raise ValueError(f"Invalid ForgettingMode value: {value}")


def {{snakeCase this.name}}_to_string(value: MemoryView) -> str:
    """Convert MemoryView enum to string."""
    return value.value if isinstance(value, MemoryView) else str(value)


def string_to_{{snakeCase this.name}}(value: str) -> MemoryView:
    """Convert string to MemoryView enum."""
    try:
        return MemoryView(value)
    except ValueError:
        raise ValueError(f"Invalid MemoryView value: {value}")


def {{snakeCase this.name}}_to_string(value: DiagramFormat) -> str:
    """Convert DiagramFormat enum to string."""
    return value.value if isinstance(value, DiagramFormat) else str(value)


def string_to_{{snakeCase this.name}}(value: str) -> DiagramFormat:
    """Convert string to DiagramFormat enum."""
    try:
        return DiagramFormat(value)
    except ValueError:
        raise ValueError(f"Invalid DiagramFormat value: {value}")


def {{snakeCase this.name}}_to_string(value: DBBlockSubType) -> str:
    """Convert DBBlockSubType enum to string."""
    return value.value if isinstance(value, DBBlockSubType) else str(value)


def string_to_{{snakeCase this.name}}(value: str) -> DBBlockSubType:
    """Convert string to DBBlockSubType enum."""
    try:
        return DBBlockSubType(value)
    except ValueError:
        raise ValueError(f"Invalid DBBlockSubType value: {value}")


def {{snakeCase this.name}}_to_string(value: ContentType) -> str:
    """Convert ContentType enum to string."""
    return value.value if isinstance(value, ContentType) else str(value)


def string_to_{{snakeCase this.name}}(value: str) -> ContentType:
    """Convert string to ContentType enum."""
    try:
        return ContentType(value)
    except ValueError:
        raise ValueError(f"Invalid ContentType value: {value}")


def {{snakeCase this.name}}_to_string(value: SupportedLanguage) -> str:
    """Convert SupportedLanguage enum to string."""
    return value.value if isinstance(value, SupportedLanguage) else str(value)


def string_to_{{snakeCase this.name}}(value: str) -> SupportedLanguage:
    """Convert string to SupportedLanguage enum."""
    try:
        return SupportedLanguage(value)
    except ValueError:
        raise ValueError(f"Invalid SupportedLanguage value: {value}")


def {{snakeCase this.name}}_to_string(value: HttpMethod) -> str:
    """Convert HttpMethod enum to string."""
    return value.value if isinstance(value, HttpMethod) else str(value)


def string_to_{{snakeCase this.name}}(value: str) -> HttpMethod:
    """Convert string to HttpMethod enum."""
    try:
        return HttpMethod(value)
    except ValueError:
        raise ValueError(f"Invalid HttpMethod value: {value}")


def {{snakeCase this.name}}_to_string(value: HookType) -> str:
    """Convert HookType enum to string."""
    return value.value if isinstance(value, HookType) else str(value)


def string_to_{{snakeCase this.name}}(value: str) -> HookType:
    """Convert string to HookType enum."""
    try:
        return HookType(value)
    except ValueError:
        raise ValueError(f"Invalid HookType value: {value}")


def {{snakeCase this.name}}_to_string(value: HookTriggerMode) -> str:
    """Convert HookTriggerMode enum to string."""
    return value.value if isinstance(value, HookTriggerMode) else str(value)


def string_to_{{snakeCase this.name}}(value: str) -> HookTriggerMode:
    """Convert string to HookTriggerMode enum."""
    try:
        return HookTriggerMode(value)
    except ValueError:
        raise ValueError(f"Invalid HookTriggerMode value: {value}")



# Model conversion functions

def {{snakeCase this.name}}_to_dict(model: GraphQLDomainPersonType) -> Dict[str, Any]:
    """Convert GraphQLDomainPersonType to dictionary."""
    if not isinstance(model, GraphQLDomainPersonType):
        raise TypeError(f"Expected GraphQLDomainPersonType, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    {{#each this.fields}}
    {{#if (isEnum this.type)}}
    if "GraphQLDomainPersonType" in data and data["GraphQLDomainPersonType"] is not None:
        data["GraphQLDomainPersonType"] = {{snakeCase this.type}}_to_string(data["GraphQLDomainPersonType"])
    {{/if}}
    
def {{snakeCase this.name}}_to_dict(model: StoreDiagram) -> Dict[str, Any]:
    """Convert StoreDiagram to dictionary."""
    if not isinstance(model, StoreDiagram):
        raise TypeError(f"Expected StoreDiagram, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    {{#each this.fields}}
    {{#if (isEnum this.type)}}
    if "StoreDiagram" in data and data["StoreDiagram"] is not None:
        data["StoreDiagram"] = {{snakeCase this.type}}_to_string(data["StoreDiagram"])
    {{/if}}
    
def {{snakeCase this.name}}_to_dict(model: ToolConfig) -> Dict[str, Any]:
    """Convert ToolConfig to dictionary."""
    if not isinstance(model, ToolConfig):
        raise TypeError(f"Expected ToolConfig, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    {{#each this.fields}}
    {{#if (isEnum this.type)}}
    if "ToolConfig" in data and data["ToolConfig"] is not None:
        data["ToolConfig"] = {{snakeCase this.type}}_to_string(data["ToolConfig"])
    {{/if}}
    
def {{snakeCase this.name}}_to_dict(model: WebSearchResult) -> Dict[str, Any]:
    """Convert WebSearchResult to dictionary."""
    if not isinstance(model, WebSearchResult):
        raise TypeError(f"Expected WebSearchResult, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    {{#each this.fields}}
    {{#if (isEnum this.type)}}
    if "WebSearchResult" in data and data["WebSearchResult"] is not None:
        data["WebSearchResult"] = {{snakeCase this.type}}_to_string(data["WebSearchResult"])
    {{/if}}
    
def {{snakeCase this.name}}_to_dict(model: ImageGenerationResult) -> Dict[str, Any]:
    """Convert ImageGenerationResult to dictionary."""
    if not isinstance(model, ImageGenerationResult):
        raise TypeError(f"Expected ImageGenerationResult, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    {{#each this.fields}}
    {{#if (isEnum this.type)}}
    if "ImageGenerationResult" in data and data["ImageGenerationResult"] is not None:
        data["ImageGenerationResult"] = {{snakeCase this.type}}_to_string(data["ImageGenerationResult"])
    {{/if}}
    
def {{snakeCase this.name}}_to_dict(model: ToolOutput) -> Dict[str, Any]:
    """Convert ToolOutput to dictionary."""
    if not isinstance(model, ToolOutput):
        raise TypeError(f"Expected ToolOutput, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    {{#each this.fields}}
    {{#if (isEnum this.type)}}
    if "ToolOutput" in data and data["ToolOutput"] is not None:
        data["ToolOutput"] = {{snakeCase this.type}}_to_string(data["ToolOutput"])
    {{/if}}
    
def {{snakeCase this.name}}_to_dict(model: ChatResult) -> Dict[str, Any]:
    """Convert ChatResult to dictionary."""
    if not isinstance(model, ChatResult):
        raise TypeError(f"Expected ChatResult, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    {{#each this.fields}}
    {{#if (isEnum this.type)}}
    if "ChatResult" in data and data["ChatResult"] is not None:
        data["ChatResult"] = {{snakeCase this.type}}_to_string(data["ChatResult"])
    {{/if}}
    
def {{snakeCase this.name}}_to_dict(model: LLMRequestOptions) -> Dict[str, Any]:
    """Convert LLMRequestOptions to dictionary."""
    if not isinstance(model, LLMRequestOptions):
        raise TypeError(f"Expected LLMRequestOptions, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    {{#each this.fields}}
    {{#if (isEnum this.type)}}
    if "LLMRequestOptions" in data and data["LLMRequestOptions"] is not None:
        data["LLMRequestOptions"] = {{snakeCase this.type}}_to_string(data["LLMRequestOptions"])
    {{/if}}
    
def {{snakeCase this.name}}_to_dict(model: TokenUsage) -> Dict[str, Any]:
    """Convert TokenUsage to dictionary."""
    if not isinstance(model, TokenUsage):
        raise TypeError(f"Expected TokenUsage, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    {{#each this.fields}}
    {{#if (isEnum this.type)}}
    if "TokenUsage" in data and data["TokenUsage"] is not None:
        data["TokenUsage"] = {{snakeCase this.type}}_to_string(data["TokenUsage"])
    {{/if}}
    
def {{snakeCase this.name}}_to_dict(model: NodeState) -> Dict[str, Any]:
    """Convert NodeState to dictionary."""
    if not isinstance(model, NodeState):
        raise TypeError(f"Expected NodeState, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    {{#each this.fields}}
    {{#if (isEnum this.type)}}
    if "NodeState" in data and data["NodeState"] is not None:
        data["NodeState"] = {{snakeCase this.type}}_to_string(data["NodeState"])
    {{/if}}
    
def {{snakeCase this.name}}_to_dict(model: ExecutionState) -> Dict[str, Any]:
    """Convert ExecutionState to dictionary."""
    if not isinstance(model, ExecutionState):
        raise TypeError(f"Expected ExecutionState, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    {{#each this.fields}}
    {{#if (isEnum this.type)}}
    if "ExecutionState" in data and data["ExecutionState"] is not None:
        data["ExecutionState"] = {{snakeCase this.type}}_to_string(data["ExecutionState"])
    {{/if}}
    
def {{snakeCase this.name}}_to_dict(model: ExecutionOptions) -> Dict[str, Any]:
    """Convert ExecutionOptions to dictionary."""
    if not isinstance(model, ExecutionOptions):
        raise TypeError(f"Expected ExecutionOptions, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    {{#each this.fields}}
    {{#if (isEnum this.type)}}
    if "ExecutionOptions" in data and data["ExecutionOptions"] is not None:
        data["ExecutionOptions"] = {{snakeCase this.type}}_to_string(data["ExecutionOptions"])
    {{/if}}
    
def {{snakeCase this.name}}_to_dict(model: InteractivePromptData) -> Dict[str, Any]:
    """Convert InteractivePromptData to dictionary."""
    if not isinstance(model, InteractivePromptData):
        raise TypeError(f"Expected InteractivePromptData, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    {{#each this.fields}}
    {{#if (isEnum this.type)}}
    if "InteractivePromptData" in data and data["InteractivePromptData"] is not None:
        data["InteractivePromptData"] = {{snakeCase this.type}}_to_string(data["InteractivePromptData"])
    {{/if}}
    
def {{snakeCase this.name}}_to_dict(model: InteractiveResponse) -> Dict[str, Any]:
    """Convert InteractiveResponse to dictionary."""
    if not isinstance(model, InteractiveResponse):
        raise TypeError(f"Expected InteractiveResponse, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    {{#each this.fields}}
    {{#if (isEnum this.type)}}
    if "InteractiveResponse" in data and data["InteractiveResponse"] is not None:
        data["InteractiveResponse"] = {{snakeCase this.type}}_to_string(data["InteractiveResponse"])
    {{/if}}
    
def {{snakeCase this.name}}_to_dict(model: ExecutionUpdate) -> Dict[str, Any]:
    """Convert ExecutionUpdate to dictionary."""
    if not isinstance(model, ExecutionUpdate):
        raise TypeError(f"Expected ExecutionUpdate, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    {{#each this.fields}}
    {{#if (isEnum this.type)}}
    if "ExecutionUpdate" in data and data["ExecutionUpdate"] is not None:
        data["ExecutionUpdate"] = {{snakeCase this.type}}_to_string(data["ExecutionUpdate"])
    {{/if}}
    
def {{snakeCase this.name}}_to_dict(model: NodeDefinition) -> Dict[str, Any]:
    """Convert NodeDefinition to dictionary."""
    if not isinstance(model, NodeDefinition):
        raise TypeError(f"Expected NodeDefinition, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    {{#each this.fields}}
    {{#if (isEnum this.type)}}
    if "NodeDefinition" in data and data["NodeDefinition"] is not None:
        data["NodeDefinition"] = {{snakeCase this.type}}_to_string(data["NodeDefinition"])
    {{/if}}
    
def {{snakeCase this.name}}_to_dict(model: Vec2) -> Dict[str, Any]:
    """Convert Vec2 to dictionary."""
    if not isinstance(model, Vec2):
        raise TypeError(f"Expected Vec2, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    {{#each this.fields}}
    {{#if (isEnum this.type)}}
    if "Vec2" in data and data["Vec2"] is not None:
        data["Vec2"] = {{snakeCase this.type}}_to_string(data["Vec2"])
    {{/if}}
    
def {{snakeCase this.name}}_to_dict(model: DomainHandle) -> Dict[str, Any]:
    """Convert DomainHandle to dictionary."""
    if not isinstance(model, DomainHandle):
        raise TypeError(f"Expected DomainHandle, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    {{#each this.fields}}
    {{#if (isEnum this.type)}}
    if "DomainHandle" in data and data["DomainHandle"] is not None:
        data["DomainHandle"] = {{snakeCase this.type}}_to_string(data["DomainHandle"])
    {{/if}}
    
def {{snakeCase this.name}}_to_dict(model: DomainNode) -> Dict[str, Any]:
    """Convert DomainNode to dictionary."""
    if not isinstance(model, DomainNode):
        raise TypeError(f"Expected DomainNode, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    {{#each this.fields}}
    {{#if (isEnum this.type)}}
    if "DomainNode" in data and data["DomainNode"] is not None:
        data["DomainNode"] = {{snakeCase this.type}}_to_string(data["DomainNode"])
    {{/if}}
    
def {{snakeCase this.name}}_to_dict(model: DomainArrow) -> Dict[str, Any]:
    """Convert DomainArrow to dictionary."""
    if not isinstance(model, DomainArrow):
        raise TypeError(f"Expected DomainArrow, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    {{#each this.fields}}
    {{#if (isEnum this.type)}}
    if "DomainArrow" in data and data["DomainArrow"] is not None:
        data["DomainArrow"] = {{snakeCase this.type}}_to_string(data["DomainArrow"])
    {{/if}}
    
def {{snakeCase this.name}}_to_dict(model: MemoryConfig) -> Dict[str, Any]:
    """Convert MemoryConfig to dictionary."""
    if not isinstance(model, MemoryConfig):
        raise TypeError(f"Expected MemoryConfig, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    {{#each this.fields}}
    {{#if (isEnum this.type)}}
    if "MemoryConfig" in data and data["MemoryConfig"] is not None:
        data["MemoryConfig"] = {{snakeCase this.type}}_to_string(data["MemoryConfig"])
    {{/if}}
    
def {{snakeCase this.name}}_to_dict(model: MemorySettings) -> Dict[str, Any]:
    """Convert MemorySettings to dictionary."""
    if not isinstance(model, MemorySettings):
        raise TypeError(f"Expected MemorySettings, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    {{#each this.fields}}
    {{#if (isEnum this.type)}}
    if "MemorySettings" in data and data["MemorySettings"] is not None:
        data["MemorySettings"] = {{snakeCase this.type}}_to_string(data["MemorySettings"])
    {{/if}}
    
def {{snakeCase this.name}}_to_dict(model: PersonLLMConfig) -> Dict[str, Any]:
    """Convert PersonLLMConfig to dictionary."""
    if not isinstance(model, PersonLLMConfig):
        raise TypeError(f"Expected PersonLLMConfig, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    {{#each this.fields}}
    {{#if (isEnum this.type)}}
    if "PersonLLMConfig" in data and data["PersonLLMConfig"] is not None:
        data["PersonLLMConfig"] = {{snakeCase this.type}}_to_string(data["PersonLLMConfig"])
    {{/if}}
    
def {{snakeCase this.name}}_to_dict(model: DomainPerson) -> Dict[str, Any]:
    """Convert DomainPerson to dictionary."""
    if not isinstance(model, DomainPerson):
        raise TypeError(f"Expected DomainPerson, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    {{#each this.fields}}
    {{#if (isEnum this.type)}}
    if "DomainPerson" in data and data["DomainPerson"] is not None:
        data["DomainPerson"] = {{snakeCase this.type}}_to_string(data["DomainPerson"])
    {{/if}}
    
def {{snakeCase this.name}}_to_dict(model: DomainApiKey) -> Dict[str, Any]:
    """Convert DomainApiKey to dictionary."""
    if not isinstance(model, DomainApiKey):
        raise TypeError(f"Expected DomainApiKey, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    {{#each this.fields}}
    {{#if (isEnum this.type)}}
    if "DomainApiKey" in data and data["DomainApiKey"] is not None:
        data["DomainApiKey"] = {{snakeCase this.type}}_to_string(data["DomainApiKey"])
    {{/if}}
    
def {{snakeCase this.name}}_to_dict(model: DiagramMetadata) -> Dict[str, Any]:
    """Convert DiagramMetadata to dictionary."""
    if not isinstance(model, DiagramMetadata):
        raise TypeError(f"Expected DiagramMetadata, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    {{#each this.fields}}
    {{#if (isEnum this.type)}}
    if "DiagramMetadata" in data and data["DiagramMetadata"] is not None:
        data["DiagramMetadata"] = {{snakeCase this.type}}_to_string(data["DiagramMetadata"])
    {{/if}}
    
def {{snakeCase this.name}}_to_dict(model: DomainDiagram) -> Dict[str, Any]:
    """Convert DomainDiagram to dictionary."""
    if not isinstance(model, DomainDiagram):
        raise TypeError(f"Expected DomainDiagram, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    {{#each this.fields}}
    {{#if (isEnum this.type)}}
    if "DomainDiagram" in data and data["DomainDiagram"] is not None:
        data["DomainDiagram"] = {{snakeCase this.type}}_to_string(data["DomainDiagram"])
    {{/if}}
    
def {{snakeCase this.name}}_to_dict(model: BaseNodeData) -> Dict[str, Any]:
    """Convert BaseNodeData to dictionary."""
    if not isinstance(model, BaseNodeData):
        raise TypeError(f"Expected BaseNodeData, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    {{#each this.fields}}
    {{#if (isEnum this.type)}}
    if "BaseNodeData" in data and data["BaseNodeData"] is not None:
        data["BaseNodeData"] = {{snakeCase this.type}}_to_string(data["BaseNodeData"])
    {{/if}}
    
def {{snakeCase this.name}}_to_dict(model: StartNodeData) -> Dict[str, Any]:
    """Convert StartNodeData to dictionary."""
    if not isinstance(model, StartNodeData):
        raise TypeError(f"Expected StartNodeData, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    {{#each this.fields}}
    {{#if (isEnum this.type)}}
    if "StartNodeData" in data and data["StartNodeData"] is not None:
        data["StartNodeData"] = {{snakeCase this.type}}_to_string(data["StartNodeData"])
    {{/if}}
    
def {{snakeCase this.name}}_to_dict(model: ConditionNodeData) -> Dict[str, Any]:
    """Convert ConditionNodeData to dictionary."""
    if not isinstance(model, ConditionNodeData):
        raise TypeError(f"Expected ConditionNodeData, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    {{#each this.fields}}
    {{#if (isEnum this.type)}}
    if "ConditionNodeData" in data and data["ConditionNodeData"] is not None:
        data["ConditionNodeData"] = {{snakeCase this.type}}_to_string(data["ConditionNodeData"])
    {{/if}}
    
def {{snakeCase this.name}}_to_dict(model: PersonJobNodeData) -> Dict[str, Any]:
    """Convert PersonJobNodeData to dictionary."""
    if not isinstance(model, PersonJobNodeData):
        raise TypeError(f"Expected PersonJobNodeData, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    {{#each this.fields}}
    {{#if (isEnum this.type)}}
    if "PersonJobNodeData" in data and data["PersonJobNodeData"] is not None:
        data["PersonJobNodeData"] = {{snakeCase this.type}}_to_string(data["PersonJobNodeData"])
    {{/if}}
    
def {{snakeCase this.name}}_to_dict(model: EndpointNodeData) -> Dict[str, Any]:
    """Convert EndpointNodeData to dictionary."""
    if not isinstance(model, EndpointNodeData):
        raise TypeError(f"Expected EndpointNodeData, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    {{#each this.fields}}
    {{#if (isEnum this.type)}}
    if "EndpointNodeData" in data and data["EndpointNodeData"] is not None:
        data["EndpointNodeData"] = {{snakeCase this.type}}_to_string(data["EndpointNodeData"])
    {{/if}}
    
def {{snakeCase this.name}}_to_dict(model: DBNodeData) -> Dict[str, Any]:
    """Convert DBNodeData to dictionary."""
    if not isinstance(model, DBNodeData):
        raise TypeError(f"Expected DBNodeData, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    {{#each this.fields}}
    {{#if (isEnum this.type)}}
    if "DBNodeData" in data and data["DBNodeData"] is not None:
        data["DBNodeData"] = {{snakeCase this.type}}_to_string(data["DBNodeData"])
    {{/if}}
    
def {{snakeCase this.name}}_to_dict(model: JobNodeData) -> Dict[str, Any]:
    """Convert JobNodeData to dictionary."""
    if not isinstance(model, JobNodeData):
        raise TypeError(f"Expected JobNodeData, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    {{#each this.fields}}
    {{#if (isEnum this.type)}}
    if "JobNodeData" in data and data["JobNodeData"] is not None:
        data["JobNodeData"] = {{snakeCase this.type}}_to_string(data["JobNodeData"])
    {{/if}}
    
def {{snakeCase this.name}}_to_dict(model: CodeJobNodeData) -> Dict[str, Any]:
    """Convert CodeJobNodeData to dictionary."""
    if not isinstance(model, CodeJobNodeData):
        raise TypeError(f"Expected CodeJobNodeData, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    {{#each this.fields}}
    {{#if (isEnum this.type)}}
    if "CodeJobNodeData" in data and data["CodeJobNodeData"] is not None:
        data["CodeJobNodeData"] = {{snakeCase this.type}}_to_string(data["CodeJobNodeData"])
    {{/if}}
    
def {{snakeCase this.name}}_to_dict(model: ApiJobNodeData) -> Dict[str, Any]:
    """Convert ApiJobNodeData to dictionary."""
    if not isinstance(model, ApiJobNodeData):
        raise TypeError(f"Expected ApiJobNodeData, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    {{#each this.fields}}
    {{#if (isEnum this.type)}}
    if "ApiJobNodeData" in data and data["ApiJobNodeData"] is not None:
        data["ApiJobNodeData"] = {{snakeCase this.type}}_to_string(data["ApiJobNodeData"])
    {{/if}}
    
def {{snakeCase this.name}}_to_dict(model: UserResponseNodeData) -> Dict[str, Any]:
    """Convert UserResponseNodeData to dictionary."""
    if not isinstance(model, UserResponseNodeData):
        raise TypeError(f"Expected UserResponseNodeData, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    {{#each this.fields}}
    {{#if (isEnum this.type)}}
    if "UserResponseNodeData" in data and data["UserResponseNodeData"] is not None:
        data["UserResponseNodeData"] = {{snakeCase this.type}}_to_string(data["UserResponseNodeData"])
    {{/if}}
    
def {{snakeCase this.name}}_to_dict(model: NotionNodeData) -> Dict[str, Any]:
    """Convert NotionNodeData to dictionary."""
    if not isinstance(model, NotionNodeData):
        raise TypeError(f"Expected NotionNodeData, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    {{#each this.fields}}
    {{#if (isEnum this.type)}}
    if "NotionNodeData" in data and data["NotionNodeData"] is not None:
        data["NotionNodeData"] = {{snakeCase this.type}}_to_string(data["NotionNodeData"])
    {{/if}}
    
def {{snakeCase this.name}}_to_dict(model: HookNodeData) -> Dict[str, Any]:
    """Convert HookNodeData to dictionary."""
    if not isinstance(model, HookNodeData):
        raise TypeError(f"Expected HookNodeData, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    {{#each this.fields}}
    {{#if (isEnum this.type)}}
    if "HookNodeData" in data and data["HookNodeData"] is not None:
        data["HookNodeData"] = {{snakeCase this.type}}_to_string(data["HookNodeData"])
    {{/if}}
    
def {{snakeCase this.name}}_to_dict(model: TemplateJobNodeData) -> Dict[str, Any]:
    """Convert TemplateJobNodeData to dictionary."""
    if not isinstance(model, TemplateJobNodeData):
        raise TypeError(f"Expected TemplateJobNodeData, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    {{#each this.fields}}
    {{#if (isEnum this.type)}}
    if "TemplateJobNodeData" in data and data["TemplateJobNodeData"] is not None:
        data["TemplateJobNodeData"] = {{snakeCase this.type}}_to_string(data["TemplateJobNodeData"])
    {{/if}}
    
def {{snakeCase this.name}}_to_dict(model: ShellJobNodeData) -> Dict[str, Any]:
    """Convert ShellJobNodeData to dictionary."""
    if not isinstance(model, ShellJobNodeData):
        raise TypeError(f"Expected ShellJobNodeData, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    {{#each this.fields}}
    {{#if (isEnum this.type)}}
    if "ShellJobNodeData" in data and data["ShellJobNodeData"] is not None:
        data["ShellJobNodeData"] = {{snakeCase this.type}}_to_string(data["ShellJobNodeData"])
    {{/if}}
    
def {{snakeCase this.name}}_to_dict(model: JsonSchemaValidatorNodeData) -> Dict[str, Any]:
    """Convert JsonSchemaValidatorNodeData to dictionary."""
    if not isinstance(model, JsonSchemaValidatorNodeData):
        raise TypeError(f"Expected JsonSchemaValidatorNodeData, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    {{#each this.fields}}
    {{#if (isEnum this.type)}}
    if "JsonSchemaValidatorNodeData" in data and data["JsonSchemaValidatorNodeData"] is not None:
        data["JsonSchemaValidatorNodeData"] = {{snakeCase this.type}}_to_string(data["JsonSchemaValidatorNodeData"])
    {{/if}}
    
def {{snakeCase this.name}}_to_dict(model: TypescriptAstNodeData) -> Dict[str, Any]:
    """Convert TypescriptAstNodeData to dictionary."""
    if not isinstance(model, TypescriptAstNodeData):
        raise TypeError(f"Expected TypescriptAstNodeData, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    {{#each this.fields}}
    {{#if (isEnum this.type)}}
    if "TypescriptAstNodeData" in data and data["TypescriptAstNodeData"] is not None:
        data["TypescriptAstNodeData"] = {{snakeCase this.type}}_to_string(data["TypescriptAstNodeData"])
    {{/if}}
    
def {{snakeCase this.name}}_to_dict(model: SubDiagramNodeData) -> Dict[str, Any]:
    """Convert SubDiagramNodeData to dictionary."""
    if not isinstance(model, SubDiagramNodeData):
        raise TypeError(f"Expected SubDiagramNodeData, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    {{#each this.fields}}
    {{#if (isEnum this.type)}}
    if "SubDiagramNodeData" in data and data["SubDiagramNodeData"] is not None:
        data["SubDiagramNodeData"] = {{snakeCase this.type}}_to_string(data["SubDiagramNodeData"])
    {{/if}}
    
def {{snakeCase this.name}}_to_dict(model: Message) -> Dict[str, Any]:
    """Convert Message to dictionary."""
    if not isinstance(model, Message):
        raise TypeError(f"Expected Message, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    {{#each this.fields}}
    {{#if (isEnum this.type)}}
    if "Message" in data and data["Message"] is not None:
        data["Message"] = {{snakeCase this.type}}_to_string(data["Message"])
    {{/if}}
    
def {{snakeCase this.name}}_to_dict(model: ConversationMetadata) -> Dict[str, Any]:
    """Convert ConversationMetadata to dictionary."""
    if not isinstance(model, ConversationMetadata):
        raise TypeError(f"Expected ConversationMetadata, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    {{#each this.fields}}
    {{#if (isEnum this.type)}}
    if "ConversationMetadata" in data and data["ConversationMetadata"] is not None:
        data["ConversationMetadata"] = {{snakeCase this.type}}_to_string(data["ConversationMetadata"])
    {{/if}}
    
def {{snakeCase this.name}}_to_dict(model: Conversation) -> Dict[str, Any]:
    """Convert Conversation to dictionary."""
    if not isinstance(model, Conversation):
        raise TypeError(f"Expected Conversation, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    {{#each this.fields}}
    {{#if (isEnum this.type)}}
    if "Conversation" in data and data["Conversation"] is not None:
        data["Conversation"] = {{snakeCase this.type}}_to_string(data["Conversation"])
    {{/if}}
    
def {{snakeCase this.name}}_to_dict(model: MemoryState) -> Dict[str, Any]:
    """Convert MemoryState to dictionary."""
    if not isinstance(model, MemoryState):
        raise TypeError(f"Expected MemoryState, got {type(model)}")
    
    data = model.dict(exclude_none=True)
    
    # Handle enum conversions
    {{#each this.fields}}
    {{#if (isEnum this.type)}}
    if "MemoryState" in data and data["MemoryState"] is not None:
        data["MemoryState"] = {{snakeCase this.type}}_to_string(data["MemoryState"])
    {{/if}}
    
    
    return data


def dict_to_{{snakeCase this.name}}(data: Dict[str, Any]) -> {{this.name}}:
    """Convert dictionary to {{this.name}}."""
    if not isinstance(data, dict):
        raise TypeError(f"Expected dict, got {type(data)}")
    
    # Create a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Handle enum conversions
    
    
    return {{this.name}}(**data_copy)

{{/each}}

# Generic conversion helpers
def model_to_dict(model: BaseModel) -> Dict[str, Any]:
    """Convert any Pydantic model to dictionary."""
    model_type = type(model).__name__
    converter_name = f"{model_type[0].lower()}{model_type[1:]}_to_dict"
    
    # Try to find specific converter
    converter = globals().get(converter_name)
    if converter:
        return converter(model)
    
    # Fallback to generic conversion
    return model.dict(exclude_none=True)


def dict_to_model(data: Dict[str, Any], model_type: Type[T]) -> T:
    """Convert dictionary to specified model type."""
    type_name = model_type.__name__
    converter_name = f"dict_to_{type_name[0].lower()}{type_name[1:]}"
    
    # Try to find specific converter
    converter = globals().get(converter_name)
    if converter:
        return converter(data)
    
    # Fallback to direct instantiation
    return model_type(**data)


# JSON conversion helpers
def model_to_json(model: BaseModel, **kwargs) -> str:
    """Convert model to JSON string."""
    return json.dumps(model_to_dict(model), **kwargs)


def json_to_model(json_str: str, model_type: Type[T]) -> T:
    """Convert JSON string to model."""
    data = json.loads(json_str)
    return dict_to_model(data, model_type)


# Batch conversion helpers
def models_to_dicts(models: List[BaseModel]) -> List[Dict[str, Any]]:
    """Convert list of models to list of dictionaries."""
    return [model_to_dict(model) for model in models]


def dicts_to_models(data_list: List[Dict[str, Any]], model_type: Type[T]) -> List[T]:
    """Convert list of dictionaries to list of models."""
    return [dict_to_model(data, model_type) for data in data_list]


# Node-specific conversion helpers
NODE_TYPE_MAP = {
    
    {{#if (endsWith this.name "Node")}}
    "{{toNodeType this.name}}": GraphQLDomainPersonType,
    {{/if}}
    
    {{#if (endsWith this.name "Node")}}
    "{{toNodeType this.name}}": StoreDiagram,
    {{/if}}
    
    {{#if (endsWith this.name "Node")}}
    "{{toNodeType this.name}}": ToolConfig,
    {{/if}}
    
    {{#if (endsWith this.name "Node")}}
    "{{toNodeType this.name}}": WebSearchResult,
    {{/if}}
    
    {{#if (endsWith this.name "Node")}}
    "{{toNodeType this.name}}": ImageGenerationResult,
    {{/if}}
    
    {{#if (endsWith this.name "Node")}}
    "{{toNodeType this.name}}": ToolOutput,
    {{/if}}
    
    {{#if (endsWith this.name "Node")}}
    "{{toNodeType this.name}}": ChatResult,
    {{/if}}
    
    {{#if (endsWith this.name "Node")}}
    "{{toNodeType this.name}}": LLMRequestOptions,
    {{/if}}
    
    {{#if (endsWith this.name "Node")}}
    "{{toNodeType this.name}}": TokenUsage,
    {{/if}}
    
    {{#if (endsWith this.name "Node")}}
    "{{toNodeType this.name}}": NodeState,
    {{/if}}
    
    {{#if (endsWith this.name "Node")}}
    "{{toNodeType this.name}}": ExecutionState,
    {{/if}}
    
    {{#if (endsWith this.name "Node")}}
    "{{toNodeType this.name}}": ExecutionOptions,
    {{/if}}
    
    {{#if (endsWith this.name "Node")}}
    "{{toNodeType this.name}}": InteractivePromptData,
    {{/if}}
    
    {{#if (endsWith this.name "Node")}}
    "{{toNodeType this.name}}": InteractiveResponse,
    {{/if}}
    
    {{#if (endsWith this.name "Node")}}
    "{{toNodeType this.name}}": ExecutionUpdate,
    {{/if}}
    
    {{#if (endsWith this.name "Node")}}
    "{{toNodeType this.name}}": NodeDefinition,
    {{/if}}
    
    {{#if (endsWith this.name "Node")}}
    "{{toNodeType this.name}}": Vec2,
    {{/if}}
    
    {{#if (endsWith this.name "Node")}}
    "{{toNodeType this.name}}": DomainHandle,
    {{/if}}
    
    {{#if (endsWith this.name "Node")}}
    "{{toNodeType this.name}}": DomainNode,
    {{/if}}
    
    {{#if (endsWith this.name "Node")}}
    "{{toNodeType this.name}}": DomainArrow,
    {{/if}}
    
    {{#if (endsWith this.name "Node")}}
    "{{toNodeType this.name}}": MemoryConfig,
    {{/if}}
    
    {{#if (endsWith this.name "Node")}}
    "{{toNodeType this.name}}": MemorySettings,
    {{/if}}
    
    {{#if (endsWith this.name "Node")}}
    "{{toNodeType this.name}}": PersonLLMConfig,
    {{/if}}
    
    {{#if (endsWith this.name "Node")}}
    "{{toNodeType this.name}}": DomainPerson,
    {{/if}}
    
    {{#if (endsWith this.name "Node")}}
    "{{toNodeType this.name}}": DomainApiKey,
    {{/if}}
    
    {{#if (endsWith this.name "Node")}}
    "{{toNodeType this.name}}": DiagramMetadata,
    {{/if}}
    
    {{#if (endsWith this.name "Node")}}
    "{{toNodeType this.name}}": DomainDiagram,
    {{/if}}
    
    {{#if (endsWith this.name "Node")}}
    "{{toNodeType this.name}}": BaseNodeData,
    {{/if}}
    
    {{#if (endsWith this.name "Node")}}
    "{{toNodeType this.name}}": StartNodeData,
    {{/if}}
    
    {{#if (endsWith this.name "Node")}}
    "{{toNodeType this.name}}": ConditionNodeData,
    {{/if}}
    
    {{#if (endsWith this.name "Node")}}
    "{{toNodeType this.name}}": PersonJobNodeData,
    {{/if}}
    
    {{#if (endsWith this.name "Node")}}
    "{{toNodeType this.name}}": EndpointNodeData,
    {{/if}}
    
    {{#if (endsWith this.name "Node")}}
    "{{toNodeType this.name}}": DBNodeData,
    {{/if}}
    
    {{#if (endsWith this.name "Node")}}
    "{{toNodeType this.name}}": JobNodeData,
    {{/if}}
    
    {{#if (endsWith this.name "Node")}}
    "{{toNodeType this.name}}": CodeJobNodeData,
    {{/if}}
    
    {{#if (endsWith this.name "Node")}}
    "{{toNodeType this.name}}": ApiJobNodeData,
    {{/if}}
    
    {{#if (endsWith this.name "Node")}}
    "{{toNodeType this.name}}": UserResponseNodeData,
    {{/if}}
    
    {{#if (endsWith this.name "Node")}}
    "{{toNodeType this.name}}": NotionNodeData,
    {{/if}}
    
    {{#if (endsWith this.name "Node")}}
    "{{toNodeType this.name}}": HookNodeData,
    {{/if}}
    
    {{#if (endsWith this.name "Node")}}
    "{{toNodeType this.name}}": TemplateJobNodeData,
    {{/if}}
    
    {{#if (endsWith this.name "Node")}}
    "{{toNodeType this.name}}": ShellJobNodeData,
    {{/if}}
    
    {{#if (endsWith this.name "Node")}}
    "{{toNodeType this.name}}": JsonSchemaValidatorNodeData,
    {{/if}}
    
    {{#if (endsWith this.name "Node")}}
    "{{toNodeType this.name}}": TypescriptAstNodeData,
    {{/if}}
    
    {{#if (endsWith this.name "Node")}}
    "{{toNodeType this.name}}": SubDiagramNodeData,
    {{/if}}
    
    {{#if (endsWith this.name "Node")}}
    "{{toNodeType this.name}}": Message,
    {{/if}}
    
    {{#if (endsWith this.name "Node")}}
    "{{toNodeType this.name}}": ConversationMetadata,
    {{/if}}
    
    {{#if (endsWith this.name "Node")}}
    "{{toNodeType this.name}}": Conversation,
    {{/if}}
    
    {{#if (endsWith this.name "Node")}}
    "{{toNodeType this.name}}": MemoryState,
    {{/if}}
    
}


def create_node_from_dict(node_type: str, data: Dict[str, Any]) -> BaseModel:
    """Create a node model from node type and data."""
    model_class = NODE_TYPE_MAP.get(node_type)
    if not model_class:
        raise ValueError(f"Unknown node type: {node_type}")
    
    return dict_to_model(data, model_class)


def node_to_dict(node: BaseModel) -> Dict[str, Any]:
    """Convert any node model to dictionary with type information."""
    data = model_to_dict(node)
    
    # Add node type if not present
    if "type" not in data:
        # Infer node type from class name
        class_name = type(node).__name__
        if class_name.endswith("Node"):
            node_type = class_name[:-4].lower()
            # Convert camelCase to snake_case
            import re
            node_type = re.sub(r'(?<!^)(?=[A-Z])', '_', node_type).lower()
            data["type"] = node_type
    
    return data


# Export all conversion functions
__all__ = [
    # Enum converters
    
    "{{snakeCase this.name}}_to_string",
    "string_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_string",
    "string_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_string",
    "string_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_string",
    "string_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_string",
    "string_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_string",
    "string_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_string",
    "string_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_string",
    "string_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_string",
    "string_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_string",
    "string_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_string",
    "string_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_string",
    "string_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_string",
    "string_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_string",
    "string_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_string",
    "string_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_string",
    "string_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_string",
    "string_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_string",
    "string_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_string",
    "string_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_string",
    "string_to_{{snakeCase this.name}}",
    
    # Model converters
    
    "{{snakeCase this.name}}_to_dict",
    "dict_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_dict",
    "dict_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_dict",
    "dict_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_dict",
    "dict_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_dict",
    "dict_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_dict",
    "dict_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_dict",
    "dict_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_dict",
    "dict_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_dict",
    "dict_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_dict",
    "dict_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_dict",
    "dict_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_dict",
    "dict_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_dict",
    "dict_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_dict",
    "dict_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_dict",
    "dict_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_dict",
    "dict_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_dict",
    "dict_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_dict",
    "dict_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_dict",
    "dict_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_dict",
    "dict_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_dict",
    "dict_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_dict",
    "dict_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_dict",
    "dict_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_dict",
    "dict_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_dict",
    "dict_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_dict",
    "dict_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_dict",
    "dict_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_dict",
    "dict_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_dict",
    "dict_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_dict",
    "dict_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_dict",
    "dict_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_dict",
    "dict_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_dict",
    "dict_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_dict",
    "dict_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_dict",
    "dict_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_dict",
    "dict_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_dict",
    "dict_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_dict",
    "dict_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_dict",
    "dict_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_dict",
    "dict_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_dict",
    "dict_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_dict",
    "dict_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_dict",
    "dict_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_dict",
    "dict_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_dict",
    "dict_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_dict",
    "dict_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_dict",
    "dict_to_{{snakeCase this.name}}",
    
    "{{snakeCase this.name}}_to_dict",
    "dict_to_{{snakeCase this.name}}",
    
    # Generic helpers
    "model_to_dict",
    "dict_to_model",
    "model_to_json",
    "json_to_model",
    "models_to_dicts",
    "dicts_to_models",
    # Node helpers
    "create_node_from_dict",
    "node_to_dict",
    "NODE_TYPE_MAP",
]