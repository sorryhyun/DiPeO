"""Simple generator for frontend node registry imports - Version 2.
Handles glob results directly without intermediate extraction.
"""

from typing import Any

from dipeo.infrastructure.codegen.templates.filters.case_filters import CaseFilters
from dipeo.infrastructure.codegen.utils import parse_dipeo_output


def extract_node_types_from_glob(glob_results: dict[str, Any]) -> list[str]:
    """Extract node types directly from glob results.

    Args:
        glob_results: Dict with file paths as keys from DB glob operation

    Returns:
        List of node type strings
    """
    from pathlib import Path

    node_types = []

    for filepath in glob_results:
        if filepath in ["default", "inputs", "node_id"]:
            continue

        path = Path(filepath)
        filename = path.name

        if not filename.endswith(".spec.ts.json"):
            continue

        node_type = filename.replace(".spec.ts.json", "").replace("-", "_")
        node_types.append(node_type)

    return sorted(node_types)


def generate_simple_registry(node_types: list[str]) -> str:
    """Generate registry file that imports and registers all node configs."""
    lines = [
        "// Auto-generated node registry",
        "// DO NOT EDIT - This file is automatically generated by the codegen system",
        "import { registerNodeConfig } from '@/domain/diagram/config/nodeRegistry';",
        "",
    ]

    for node_type in node_types:
        if node_type == "example_hook":
            config_name = "hookConfig"
            file_name = "HookConfig"
        elif node_type == "typescript_ast_parser":
            config_name = "typescriptAstConfig"
            file_name = "TypescriptAstConfig"
        else:
            config_name = f"{CaseFilters.camel_case(node_type)}Config"
            file_name = f"{CaseFilters.pascal_case(node_type)}Config"
        lines.append(f"import {{ {config_name} }} from '@/__generated__/nodes/{file_name}';")

    lines.append("")
    lines.append("export function registerAllNodes() {")

    for node_type in node_types:
        if node_type == "example_hook":
            config_name = "hookConfig"
        elif node_type == "typescript_ast_parser":
            config_name = "typescriptAstConfig"
        else:
            config_name = f"{CaseFilters.camel_case(node_type)}Config"
        lines.append(f"  registerNodeConfig({config_name});")

    lines.append("}")
    lines.append("")
    lines.append("// Call this on app initialization")
    lines.append("registerAllNodes();")

    return "\n".join(lines)


def main(inputs: dict[str, Any]) -> dict[str, Any]:
    """Entry point for code_job node - handles glob results directly."""

    raw_results = inputs["default"]

    if isinstance(raw_results, str):
        glob_results = parse_dipeo_output(raw_results)
        if not glob_results:
            glob_results = {}
    else:
        glob_results = raw_results if isinstance(raw_results, dict) else {}

    node_types = extract_node_types_from_glob(glob_results)

    if not node_types:
        keys = [k for k in glob_results if k not in ["default", "inputs", "node_id"]]
        raise ValueError(
            f"No node types found in glob results. "
            f"Found {len(keys)} paths in results: {keys[:5] if keys else '(none)'}"
        )

    generated_code = generate_simple_registry(node_types)

    return {
        "generated_code": generated_code,
        "filename": "nodeRegistry.ts",
        "node_count": len(node_types),
    }
