name: Build Windows Installer

on:
  push:
    branches: [ main, dev ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, dev ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.0.0)'
        required: true
        default: '0.1.0'

jobs:
  build-windows:
    runs-on: windows-latest
    
    env:
      DIPEO_BASE_DIR: ${{ github.workspace }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
      
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10
          run_install: false
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'
      
      - name: Install Windows dependencies
        run: |
          # Install Visual Studio Build Tools components if needed
          # This is usually pre-installed on GitHub Actions Windows runners
      
      - name: Setup Python Environment
        run: |
          # Use the GitHub Actions Python directly (no venv)
          python -m pip install --upgrade pip setuptools wheel
          
          # Pin PyInstaller to a stable version compatible with Python 3.13
          pip install pyinstaller==6.14.2
          
          # Install other dependencies
          pip install -r requirements.txt
          
          # Install the CLI and server packages
          pip install -e ./apps/server -e ./apps/cli
          
          # Add Windows-specific workarounds
          pip install --upgrade cffi pycparser
          
          # Show installed versions for debugging
          Write-Host "Installed packages:"
          pip list
          Write-Host "Python version: $(python --version)"
          Write-Host "PyInstaller version: $(pyinstaller --version)"
          Write-Host "Checking dipeo command:"
          Get-Command dipeo -ErrorAction SilentlyContinue
          
          Write-Host "Python environment setup complete"
      
      - name: Install Node dependencies
        run: |
          pnpm install --frozen-lockfile
      
      - name: Build TypeScript models
        run: pnpm --filter @dipeo/domain-models build
      
      - name: Generate code
        run: |
          Write-Host "Running unified diagram-based code generation..."
          
          # Generate models
          dipeo run codegen/diagrams/models/generate_all_models --light --debug --timeout=30
          
          # Generate backend
          dipeo run codegen/diagrams/backend/generate_backend --light --debug --timeout=30
          
          # Apply staged changes (copy files)
          if (Test-Path "dipeo/diagram_generated_staged") {
            Write-Host "Copying staged files to active directory..."
            Copy-Item -Path "dipeo/diagram_generated_staged/*" -Destination "dipeo/diagram_generated/" -Recurse -Force
            Write-Host "Staged changes applied successfully!"
          }
          
          # Generate frontend
          dipeo run codegen/diagrams/frontend/generate_frontend --light --debug --timeout=30
          
          # Export GraphQL schema
          Write-Host "Exporting GraphQL schema from application layer..."
          $env:PYTHONPATH = "${{ github.workspace }};$env:PYTHONPATH"
          python -m dipeo.application.graphql.export_schema apps/server/schema.graphql
          Write-Host "GraphQL schema exported to apps/server/schema.graphql"
          
          # Generate GraphQL TypeScript types
          Write-Host "Generating GraphQL TypeScript types..."
          pnpm --filter web codegen
          Write-Host "GraphQL TypeScript types generated!"
          
          Write-Host "All code generation completed using DiPeO diagrams!"
      
      - name: Build Python Server
        working-directory: apps/server
        run: |
          # Build with PyInstaller
          pyinstaller --clean dipeo-server-correct.spec
          
          # Verify build
          if (!(Test-Path "dist\dipeo-server.exe")) {
            Write-Error "Failed to build dipeo-server.exe"
            exit 1
          }
          Write-Host "Backend built successfully!"
      
      - name: Build Frontend
        working-directory: apps/web
        run: |
          # Build frontend using the build script
          & .\build-frontend.ps1
          
          # Verify build
          if (!(Test-Path "dist\dipeo-frontend.exe")) {
            Write-Error "Failed to build dipeo-frontend.exe"
            exit 1
          }
          Write-Host "Frontend built successfully!"
      
      - name: Install NSIS via Chocolatey
        shell: powershell
        run: |
          choco install nsis --yes --no-progress
          # Persist PATH for later steps just in case
          $nsis = "${env:ProgramFiles(x86)}\NSIS"
          if (!(Test-Path $nsis)) { $nsis = "${env:ProgramFiles}\NSIS" }
          if (Test-Path "$nsis\makensis.exe") { "$nsis" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append }

      - name: Build Installer
        run: |
          # Find NSIS path
          $nsisPath = "${env:ProgramFiles(x86)}\NSIS\makensis.exe"
          if (!(Test-Path $nsisPath)) {
            $nsisPath = "${env:ProgramFiles}\NSIS\makensis.exe"
          }
          
          if (!(Test-Path $nsisPath)) {
            Write-Error "NSIS not found!"
            exit 1
          }
          
          # Build the installer
          & $nsisPath scripts/minimal-installer.nsi
          
          # Verify installer was created
          if (!(Test-Path "DiPeO-Setup-Minimal.exe")) {
            Write-Error "Failed to create installer!"
            exit 1
          }
          
          Write-Host "Installer built successfully!"
      
      - name: Upload Installer Artifact
        uses: actions/upload-artifact@v4
        with:
          name: DiPeO-Windows-Installer
          path: DiPeO-Setup-Minimal.exe
          retention-days: 30
      
      - name: Upload Server Executable
        uses: actions/upload-artifact@v4
        with:
          name: DiPeO-Server-Windows
          path: apps/server/dist/dipeo-server.exe
          retention-days: 30
      
      - name: Upload Frontend Executable
        uses: actions/upload-artifact@v4
        with:
          name: DiPeO-Frontend-Windows
          path: apps/web/dist/dipeo-frontend.exe
          retention-days: 30
      
      - name: Create Release (if tagged)
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          name: "DiPeO ${{ github.ref_name }}"
          files: |
            DiPeO-Setup-Minimal.exe
            apps/server/dist/dipeo-server.exe
            apps/web/dist/dipeo-frontend.exe
          draft: false
          prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'alpha') }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
