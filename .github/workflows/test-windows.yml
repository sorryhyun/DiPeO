name: Test on Windows

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

jobs:
  test-windows:
    runs-on: windows-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
      
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10
          run_install: false
      
      - name: Verify Node.js version
        run: |
          $nodeVersion = node --version
          Write-Host "Node.js version: $nodeVersion"
          if ($nodeVersion -notmatch "v(1[8-9]|[2-9][0-9])") {
            Write-Warning "Node.js 18+ is recommended"
          }
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'
      
      - name: Verify Python version
        run: |
          $pythonVersion = python --version
          Write-Host "Python version: $pythonVersion"
          if ($pythonVersion -notmatch "Python 3.(1[1-9]|[2-9][0-9])") {
            Write-Warning "Python 3.11+ is recommended"
          }
      
      - name: Check project structure
        run: |
          Write-Host "Checking project structure..."
          $requiredDirs = @(
            "apps/server",
            "apps/cli",
            "apps/web",
            "apps/desktop",
            "dipeo",
            "files/diagrams"
          )
          
          $missingDirs = @()
          foreach ($dir in $requiredDirs) {
            if (Test-Path $dir) {
              Write-Host "✓ $dir" -ForegroundColor Green
            } else {
              Write-Host "✗ $dir" -ForegroundColor Red
              $missingDirs += $dir
            }
          }
          
          if ($missingDirs.Count -gt 0) {
            Write-Error "Missing required directories: $($missingDirs -join ', ')"
            exit 1
          }
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          
          # Install DiPeO package in development mode
          pip install -e .
          pip install -r requirements.txt
      
      - name: Install Frontend dependencies
        run: |
          pnpm install --frozen-lockfile
      
      - name: Check code generation dependencies
        run: |
          # Verify that codegen dependencies are available
          pnpm list @dipeo/models-generator
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Code generation dependencies not found"
            exit 1
          }
      
      - name: Build packages
        run: |
          pnpm build:packages
      
      - name: Test server installation
        working-directory: apps/server
        run: |
          # Create a test virtual environment
          python -m venv test-venv
          & ".\test-venv\Scripts\Activate.ps1"
          
          # Test installation
          pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
          pip install -e "${{ github.workspace }}"
          pip install -e .
          
          # Verify dipeo-server can be imported
          python -c "import dipeo_server; print('Server module OK')"
      
      - name: Test CLI installation
        working-directory: apps/cli
        run: |
          # Create a test virtual environment
          python -m venv test-venv
          & ".\test-venv\Scripts\Activate.ps1"
          
          # Test installation
          pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
          pip install -e "${{ github.workspace }}"
          pip install -e .
          
          # Verify CLI module can be imported
          python -c "import dipeo_cli; print('CLI module OK')"
      
      - name: Build Frontend (smoke test)
        working-directory: apps/web
        run: |
          pnpm build
          
          # Verify build output
          if (!(Test-Path "dist/index.html")) {
            Write-Error "Frontend build failed"
            exit 1
          }
          
          $fileCount = (Get-ChildItem -Path dist -Recurse -File).Count
          Write-Host "Frontend build complete: $fileCount files"
      
      - name: Test CLI execution from global install
        run: |
          # Test that the globally installed CLI can show help
          dipeo --help
          
      - name: Test minimal CLI directly
        working-directory: apps/cli
        run: |
          # Test running the CLI script directly
          & ".\test-venv\Scripts\Activate.ps1"
          python src/dipeo_cli/minimal_cli.py --help
      
      - name: Check code generation
        run: |
          # Run code generation to ensure it works on Windows
          pnpm codegen
          
          # Verify generated files exist
          if (!(Test-Path "dipeo/models/generated")) {
            Write-Error "Code generation failed - no generated directory"
            exit 1
          }
      
      - name: Summary
        run: |
          Write-Host ""
          Write-Host "================================" -ForegroundColor Cyan
          Write-Host "✓ All tests passed!" -ForegroundColor Green
          Write-Host "================================" -ForegroundColor Cyan
          Write-Host ""
          Write-Host "Environment:" -ForegroundColor Cyan
          Write-Host "  Python: $(python --version)"
          Write-Host "  Node.js: $(node --version)"
          Write-Host "  pnpm: $(pnpm --version)"
          Write-Host "  OS: Windows ${{ runner.os }}"