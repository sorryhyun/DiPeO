{
  "app_type": "portfolio",
  "framework": "react",
  "target_framework": "react",
  "styling_approach": "tailwind",
  "objective": "Creative Portfolio Showcase",
  "features": [
    "responsive navigation",
    "project gallery with filtering",
    "interactive project details",
    "skills and expertise display",
    "contact form with validation",
    "testimonials and reviews",
    "dark mode toggle",
    "smooth scroll animations"
  ],
  "target_audience": "Potential Clients and Employers",
  "output_dir": "./generated",
  "development_mode": {
    "enable_mock_data": true,
    "mock_auth_users": [
      {"email": "owner@portfolio.com", "password": "owner123", "role": "owner"},
      {"email": "client@company.com", "password": "client123", "role": "client"},
      {"email": "visitor@example.com", "password": "visitor123", "role": "visitor"}
    ],
    "mock_api_endpoints": [
      "/api/projects",
      "/api/skills",
      "/api/testimonials",
      "/api/contact",
      "/api/experience",
      "/api/blog-posts"
    ],
    "disable_websocket_in_dev": true,
    "use_localstorage_persistence": true
  },
  "prompt_requirements": [
    "Generate modern, production-ready React components with TypeScript",
    "Use React 18+ features: Suspense, Error Boundaries, Context API",
    "Implement responsive design with Tailwind CSS and dark mode support",
    "Ensure basic accessibility with ARIA labels and keyboard navigation",
    "Handle authentication with protected routes and token management",
    "Implement proper form validation with error handling",
    "Use React Query for data fetching with loading and error states",
    "Implement i18n support for internationalization",
    "IMPORTANT: Include mock project data and creative showcase content",
    "Create fallback mechanisms when backend services are unavailable",
    "Provide mock API responses for all portfolio endpoints",
    "Implement smooth animations and transitions for visual appeal",
    "Ensure the app runs standalone without any backend dependencies",
    "Use localStorage for contact form drafts and user preferences"
  ],
  "evaluation_criteria": [
    "Code quality and maintainability",
    "Component reusability and composability",
    "Type safety and error handling",
    "Performance optimization",
    "Accessibility compliance",
    "Responsive design implementation",
    "Best practices adherence"
  ],
  "prompt_sections": [
    "Component Structure",
    "Mock Project Data",
    "Gallery and Filtering",
    "Contact Form Handling",
    "Animation Implementation",
    "State Management",
    "Error Handling",
    "Development Mode Features"
  ]
}