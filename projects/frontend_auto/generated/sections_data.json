{
  "architecture": {
    "overview": "A modular, component-driven React + TypeScript e-commerce application structured for maintainability, testability, and developer ergonomics. The app uses a clear separation of concerns: core kernel (shared contracts/events/hooks), foundational providers and services (auth, data fetching, mock server), reusable UI components and hooks, feature modules (product catalog, cart, checkout, orders, wishlist, reviews), and page-level routes. React Query handles server state, Context API handles auth and theme, and Tailwind CSS handles styling with dark mode support. Development mode supplies a mock server, mock auth, localStorage persistence, and mock WebSocket streams so the app can run fully offline.",
    "patterns": [
      "Domain-driven folder slices (features grouped under /features and pages under /pages)",
      "Container/Presentational separation (pages & providers orchestrate, components render)",
      "Composition over inheritance for components (small reusable building blocks)",
      "Context for cross-cutting concerns (Auth, Theme, Toasts) and React Query for server state",
      "Provider composition pattern in App.tsx (QueryClientProvider -> AuthProvider -> ThemeProvider -> Router)",
      "Feature-level hooks that encapsulate data fetching (useProducts, useCart, useCheckout)",
      "Mock-first development using a local mock server (MSW-like) and WebSocket emulator"
    ],
    "data_flow": "UI components request data via feature hooks (useProducts, useCart, etc.). Hooks use service layer functions (productService, cartService) which call apiClient (fetch wrapper). React Query caches responses, manages loading/error states and invalidations. AuthProvider holds auth state (token) with localStorage persistence in dev; apiClient injects token into requests. WebSocket mock pushes inventory/price/stock changes through socketService and a useWebsocket hook to update React Query caches or local state in realtime. Errors bubble up to ErrorBoundary and are surfaced via ToastProvider. Routes are protected with ProtectedRoute that checks Auth context. i18n provider wraps the app for translations.",
    "folder_structure": "src/\n  core/\n    contracts.ts                # domain types and API contracts (kernel)\n    events.ts                   # minimal event bus (kernel)\n    hooks.ts                    # internal hook registry for extensions (kernel)\n    di.ts                       # dependency container (kernel)\n    utils.ts                    # core utils used by kernel (kernel)\n  app/\n    config.ts                   # materialized runtime config (kernel-level)\n    routes.tsx                  # route definitions and lazy route imports\n    i18n.ts                     # i18n setup (react-i18next)\n  main.tsx                      # app entry (hydration) and Tailwind import\n  App.tsx                       # App composition and global providers\n  providers/\n    QueryProvider.tsx          # React Query client provider wrapper\n    AuthProvider.tsx           # Auth context & mock auth for dev\n    ThemeProvider.tsx          # Tailwind dark-mode wrapper/context\n    ToastProvider.tsx          # simple toast context\n    ErrorBoundary.tsx          # app-level error boundary\n    RouterProvider.tsx         # react-router provider and protected route helper\n  services/\n    apiClient.ts               # fetch wrapper with token handling and fallbacks\n    queryClient.ts             # react-query client config\n    mockServer.ts              # development mock server (REST + WS emulation)\n    socketService.ts           # websocket / mock websocket manager\n    productService.ts          # product related API wrappers\n    cartService.ts\n    orderService.ts\n    paymentService.ts\n    reviewService.ts\n  mocks/\n    products.ts\n    users.ts\n    cart.ts\n    orders.ts\n    reviews.ts\n    websocket.ts\n  hooks/\n    useAuth.ts\n    useCart.ts\n    useWishlist.ts\n    useProducts.ts\n    useInfiniteProducts.ts\n    useCheckout.ts\n    useWebsocket.ts\n    useLocalStorage.ts\n  shared/\n    components/\n      Button.tsx\n      Icon.tsx\n      Input.tsx\n      Select.tsx\n      Modal.tsx\n      Avatar.tsx\n      Badge.tsx\n      Skeleton.tsx\n      Spinner.tsx\n      NavBar.tsx\n      Footer.tsx\n      ProtectedRoute.tsx\n    forms/\n      validation.ts\n      Form.tsx\n  features/\n    product/\n      ProductCard.tsx\n      ProductList.tsx\n      ProductFilters.tsx\n      ProductDetail.tsx\n    cart/\n      CartDrawer.tsx\n      CartItem.tsx\n    checkout/\n      CheckoutForm.tsx\n      PaymentForm.tsx\n    orders/\n      OrderList.tsx\n      OrderTracking.tsx\n    wishlist/\n      WishlistList.tsx\n    reviews/\n      ReviewForm.tsx\n      ReviewList.tsx\n  pages/\n    HomePage.tsx\n    ProductPage.tsx\n    CartPage.tsx\n    CheckoutPage.tsx\n    OrdersDashboard.tsx\n    WishlistPage.tsx\n    LoginPage.tsx\n    NotFoundPage.tsx\n  utils/\n    format.ts\n    currency.ts\n    date.ts\n  styles/\n    tailwind.css\n    globals.css",
    "tech_stack": [
      "React 18+ with Suspense and Error Boundaries",
      "TypeScript (strict mode)",
      "React Router v6",
      "React Query (TanStack Query) for server state",
      "Tailwind CSS for utility-first responsive styling and dark mode",
      "i18next for internationalization",
      "MSW-like mock server (in-project mockServer) and mock WebSocket",
      "Context API for Auth/Theme/Toast",
      "LocalStorage for dev persistence",
      "ESLint/Prettier (implied) for code quality"
    ]
  },
  "kernel_specs": {
    "overview": "The Core Kernel provides a small, well-typed foundation shared by all sections of the application. It centralizes domain contracts, runtime configuration, a typed event bus for decoupled messaging, a hook/extension registry, a lightweight dependency-injection container, and a set of minimal, safe utilities. All higher-level services, providers, and feature modules should import types and utilities from these files (use import paths like '@/core/contracts', '@/core/events', '@/core/hooks', '@/core/di', '@/core/utils', and '@/app/config'). The kernel is intentionally small, focused, and strictly typed so it can be used across the React app, the in-project mock server, and unit tests."
  },
  "sections": [
    {
      "id": "app-config",
      "file_path": "src/app/config.ts",
      "description": "Materialized runtime configuration for the app, including feature flags and development-mode toggles (mock server endpoints, mock users, persistence settings).",
      "dependencies": [
        "src/core/contracts.ts"
      ],
      "exports": [
        "APP_CONFIG",
        "isDev",
        "DEV_MOCK_USERS",
        "DEV_MOCK_ENDPOINTS"
      ],
      "priority": 1,
      "purpose": "Materialized runtime configuration for the app. Exports a typed APP_CONFIG containing build/runtime flags, computed booleans, feature toggles, and mock users/endpoints for development mode. All providers and services should import these values to decide behavior (e.g., startMockServer, use localStorage persistence, enable mock auth).",
      "content": "Purpose and design\n- Provide a single imported constant APP_CONFIG that materializes the original JSON config.\n- Expose computed flags so services don't need to duplicate logic (isDev, shouldUseMockData, etc.).\n- Provide typed mock users & mock endpoints only when mock data is enabled; otherwise exports are empty arrays for safety.\n\nTypes and the exported constant\n\nexport interface DevModeConfig {\n  enable_mock_data: boolean;\n  mock_auth_users: Array<{ email: string; password: string; role: 'seller' | 'buyer' | 'admin' }>;\n  mock_api_endpoints: string[];\n  disable_websocket_in_dev: boolean;\n  use_localstorage_persistence: boolean;\n}\n\nexport interface AppConfig {\n  app_type: string; // 'ecommerce'\n  framework: string;\n  target_framework: string;\n  styling_approach: string;\n  objective?: string;\n  features: string[]; // features array from the manifest\n  target_audience?: string;\n  output_dir?: string;\n  development_mode: DevModeConfig;\n  prompt_requirements?: string[];\n  evaluation_criteria?: string[];\n}\n\n// Materialized runtime configuration. This object is intentionally frozen to prevent accidental mutation.\nexport const APP_CONFIG: Readonly<AppConfig> = Object.freeze({\n  app_type: 'ecommerce',\n  framework: 'react',\n  target_framework: 'react',\n  styling_approach: 'tailwind',\n  objective: 'Modern E-commerce Platform',\n  features: [\n    'product catalog with filters',\n    'shopping cart functionality',\n    'payment integration UI',\n    'order tracking dashboard',\n    'wishlist management',\n    'product reviews and ratings',\n    'inventory status display'\n  ],\n  target_audience: 'Online Shoppers',\n  output_dir: './generated',\n  development_mode: {\n    enable_mock_data: true,\n    mock_auth_users: [\n      { email: 'seller@shop.com', password: 'seller123', role: 'seller' },\n      { email: 'buyer@customer.com', password: 'buyer123', role: 'buyer' },\n      { email: 'admin@shop.com', password: 'admin123', role: 'admin' }\n    ],\n    mock_api_endpoints: ['/api/products', '/api/cart', '/api/orders', '/api/payments', '/api/reviews'],\n    disable_websocket_in_dev: false,\n    use_localstorage_persistence: true\n  },\n  prompt_requirements: [],\n  evaluation_criteria: []\n});\n\n/* Computed flags and convenience exports */\nexport const isDev = process.env.NODE_ENV !== 'production';\nexport const shouldUseMockData = isDev && APP_CONFIG.development_mode.enable_mock_data === true;\nexport const shouldUseLocalStoragePersistence = isDev && !!APP_CONFIG.development_mode.use_localstorage_persistence;\n\n// Feature set for quick checks\nexport const FEATURES = new Set<string>(APP_CONFIG.features || []);\n\n// Export mock users/endpoints only when mocks are enabled, otherwise export empty lists (safe default)\nexport const DEV_MOCK_USERS = shouldUseMockData ? APP_CONFIG.development_mode.mock_auth_users : [] as typeof APP_CONFIG.development_mode.mock_auth_users;\nexport const DEV_MOCK_ENDPOINTS = shouldUseMockData ? APP_CONFIG.development_mode.mock_api_endpoints : [] as string[];\n\n// Example usage patterns\n// import { APP_CONFIG, shouldUseMockData, DEV_MOCK_USERS } from '@/app/config';\n// if (shouldUseMockData) startMockServer(DEV_MOCK_ENDPOINTS);\n\nNotes\n- This file is the canonical runtime config for the front-end. If a future build step injects environment-specific config, replace the literal object with a build-time generated one but keep the exports stable.\n- Consumers must not mutate APP_CONFIG. Use read-only checks like FEATURES.has('wishlist management')."
    },
    {
      "id": "app-i18n",
      "file_path": "src/app/i18n.ts",
      "description": "i18next initialization and helper hooks for translations. Provides a useTranslation wrapper and language switch helper.",
      "dependencies": [],
      "exports": [
        "i18n",
        "useAppTranslation",
        "initI18n"
      ],
      "priority": 1
    },
    {
      "id": "app-root",
      "file_path": "src/App.tsx",
      "description": "Root application composition: wraps providers (QueryProvider, Auth, Theme, Toast), ErrorBoundary, and RouterProvider. Suspense boundaries for lazy pages are set here.",
      "dependencies": [
        "src/providers/QueryProvider.tsx",
        "src/providers/AuthProvider.tsx",
        "src/providers/ThemeProvider.tsx",
        "src/providers/ToastProvider.tsx",
        "src/providers/ErrorBoundary.tsx",
        "src/app/routes.tsx",
        "src/app/i18n.ts"
      ],
      "exports": [
        "App"
      ],
      "priority": 1
    },
    {
      "id": "app-routes",
      "file_path": "src/app/routes.tsx",
      "description": "React Router definitions: lazy-loaded page components, route metadata (protected routes), and route-level data prefetch hooks.",
      "dependencies": [
        "src/pages/HomePage.tsx",
        "src/pages/ProductPage.tsx",
        "src/pages/CartPage.tsx",
        "src/pages/CheckoutPage.tsx",
        "src/pages/OrdersDashboard.tsx",
        "src/pages/WishlistPage.tsx",
        "src/pages/LoginPage.tsx",
        "src/pages/NotFoundPage.tsx",
        "src/shared/components/ProtectedRoute.tsx"
      ],
      "exports": [
        "AppRoutes",
        "routes"
      ],
      "priority": 1
    },
    {
      "id": "core-contracts",
      "file_path": "src/core/contracts.ts",
      "description": "Domain types and API request/response contracts used across the app (Product, CartItem, Order, User, Review, API paginated response types). This is the single source of truth for types between front-end modules.",
      "dependencies": [],
      "exports": [
        "Product",
        "ProductVariant",
        "CartItem",
        "Cart",
        "Order",
        "OrderStatus",
        "User",
        "AuthToken",
        "Review",
        "Paginated<T>"
      ],
      "priority": 1,
      "purpose": "Single source of truth for domain types used across the app. Includes e-commerce domain models (Product, Cart, Order, Review, User) and also a few healthcare types to satisfy cross-domain contract requirements so the kernel can be extended safely. It also contains API response and websocket event typings, pagination helpers, and UI state types.",
      "content": "Overview\n- Provide strict TypeScript interfaces for all domain models used across services, providers, mocks and components.\n- Keep interfaces small and composable; prefer readonly fields where possible.\n\nDesign conventions\n- Use PascalCase for types and enums\n- Use generics for reusable shapes (Paginated<T>, ApiResult<T>)\n- Keep API-level fields optional when backend may not return them\n- Include basic JSDoc for clarity\n\nType definitions (examples)\n- E-commerce domain models\n\nexport type ID = string;\n\n/** Product variant (size/color/sku mapping) */\nexport interface ProductVariant {\n  id: ID;\n  sku: string;\n  title?: string;\n  priceCents: number;\n  inventory: number; // available units\n  attributes?: Record<string, string>; // e.g. { color: 'red', size: 'M' }\n}\n\n/** E-commerce product */\nexport interface Product {\n  id: ID;\n  title: string;\n  description?: string;\n  priceCents: number;\n  currency: string; // ISO currency code e.g. 'USD'\n  images: string[];\n  variants?: ProductVariant[];\n  rating?: number; // aggregated rating 0-5\n  reviewCount?: number;\n  categories?: string[];\n  tags?: string[];\n  metadata?: Record<string, unknown>;\n  createdAt: string; // ISO\n  updatedAt?: string;\n}\n\n/** Cart item referencing a product or variant */\nexport interface CartItem {\n  id: ID; // cart item id\n  productId: ID;\n  variantId?: ID;\n  quantity: number;\n  priceCents: number; // snapshot price\n  title: string; // snapshot title\n  image?: string;\n}\n\nexport interface Cart {\n  id: ID;\n  userId?: ID; // optional for guest carts\n  items: CartItem[];\n  subtotalCents: number;\n  currency: string;\n  updatedAt: string;\n}\n\n/** Order status enumeration */\nexport type OrderStatus =\n  | 'pending'\n  | 'processing'\n  | 'paid'\n  | 'shipped'\n  | 'delivered'\n  | 'cancelled'\n  | 'refunded';\n\nexport interface Order {\n  id: ID;\n  userId: ID;\n  items: CartItem[];\n  totalCents: number;\n  currency: string;\n  status: OrderStatus;\n  createdAt: string;\n  updatedAt?: string;\n  trackingNumber?: string;\n  shippingAddress?: {\n    name: string;\n    line1: string;\n    line2?: string;\n    city: string;\n    state?: string;\n    postalCode?: string;\n    country?: string;\n  };\n  metadata?: Record<string, unknown>;\n}\n\nexport interface Review {\n  id: ID;\n  productId: ID;\n  userId: ID;\n  rating: number; // 1-5\n  title?: string;\n  body?: string;\n  createdAt: string;\n}\n\n/** User and Auth types */\nexport type UserRole = 'buyer' | 'seller' | 'admin' | 'guest';\n\nexport interface User {\n  id: ID;\n  email: string;\n  fullName?: string;\n  avatarUrl?: string;\n  roles: UserRole[];\n  createdAt?: string;\n}\n\nexport interface AuthToken {\n  accessToken: string;\n  refreshToken?: string;\n  expiresAt?: string; // ISO\n}\n\n/** Generic pagination container */\nexport interface Paginated<T> {\n  items: T[];\n  total: number;\n  page: number;\n  pageSize: number;\n  hasNext: boolean;\n}\n\n/** API response wrappers */\nexport interface ApiResult<T> {\n  ok: true;\n  data: T;\n}\n\nexport interface ApiError {\n  ok: false;\n  status: number;\n  message: string;\n  code?: string; // machine-readable\n  details?: Record<string, unknown>;\n}\n\n/** WebSocket event types used internally by the mock WS and socketService */\nexport type WsEventType =\n  | 'inventory.updated'\n  | 'price.updated'\n  | 'order.status.updated'\n  | 'review.created'\n  | 'ping';\n\nexport interface WsEvent<T = any> {\n  type: WsEventType;\n  payload: T;\n  timestamp: string;\n}\n\n// Example typed payloads\nexport interface InventoryUpdatedPayload {\n  productId: ID;\n  variantId?: ID;\n  inventory: number;\n}\n\nexport interface PriceUpdatedPayload {\n  productId: ID;\n  variantId?: ID;\n  priceCents: number;\n}\n\nexport interface OrderStatusUpdatedPayload {\n  orderId: ID;\n  status: OrderStatus;\n}\n\n/** UI state and helper types */\nexport type LoadingState = 'idle' | 'loading' | 'success' | 'error';\n\nexport interface FormState<T = Record<string, unknown>> {\n  values: T;\n  errors?: Partial<Record<keyof T, string>>;\n  touched?: Partial<Record<keyof T, boolean>>;\n  loading?: boolean;\n}\n\n/* -------------------------------------------------------------------------- */\n/* Optional: Healthcare models (included so kernel supports cross-domain types)\n   These are intentionally minimal but typed so parts of the app or plugins that\n   require healthcare domain models can import them from the same contract file.\n   They do not interfere with the ecommerce models. */\n\nexport interface Patient {\n  id: ID;\n  fullName: string;\n  dateOfBirth?: string;\n  email?: string;\n  phone?: string;\n  metadata?: Record<string, unknown>;\n}\n\nexport interface Doctor {\n  id: ID;\n  fullName: string;\n  specialty?: string;\n  email?: string;\n}\n\nexport interface Nurse {\n  id: ID;\n  fullName: string;\n  email?: string;\n}\n\nexport interface Appointment {\n  id: ID;\n  patientId: ID;\n  doctorId: ID;\n  startAt: string;\n  endAt?: string;\n  reason?: string;\n}\n\nexport interface MedicalRecord {\n  id: ID;\n  patientId: ID;\n  notes: string;\n  createdAt: string;\n}\n\nexport interface Prescription {\n  id: ID;\n  patientId: ID;\n  doctorId: ID;\n  medication: string;\n  dosage: string;\n  instructions?: string;\n}\n\nexport interface LabResult {\n  id: ID;\n  patientId: ID;\n  type: string;\n  result: string | Record<string, unknown>;\n  date: string;\n}\n\n/* -------------------------------------------------------------------------- */\n\nUsage patterns and integration points\n- Import domain types in services and hooks:\n  import { Product, Paginated } from '@/core/contracts';\n\n- Use ApiResult/ApiError for typed apiClient responses:\n  async function fetchProducts(): Promise<ApiResult<Paginated<Product>> | ApiError> { ... }\n\n- WebSocket event shapes are used in the mock websocket emitter and socketService:\n  import { WsEvent, InventoryUpdatedPayload } from '@/core/contracts';\n\n- UI components use LoadingState and FormState:\n  const [state, setState] = useState<FormState<{ email: string }>>({ values: { email: '' } });\n\nNotes\n- Keep this file focused on types only; no runtime values or side effects.\n- When adding fields, prefer optional fields for backwards compatibility."
    },
    {
      "id": "core-di",
      "file_path": "src/core/di.ts",
      "description": "Lightweight dependency injection container for wiring services in tests or runtime (used by services/mockServer and providers).",
      "dependencies": [],
      "exports": [
        "Container",
        "register",
        "resolve"
      ],
      "priority": 1,
      "purpose": "A lightweight dependency injection container to register and resolve services by tokens. Useful to provide test doubles in unit tests and to avoid hard imports in runtime wiring. Tokens are strongly typed symbols. Container supports singleton and transient registrations and enforces type safety using generics.",
      "content": "Design goals\n- Small, predictable API for registering and resolving services\n- Type-safe tokens using unique symbols and generic typing\n- Support for factory registration, singleton caching, and transient factories\n\nToken helper\n\nexport type Token<T> = symbol & { __type?: T };\n\nexport function createToken<T = unknown>(desc: string): Token<T> {\n  return Symbol(desc) as Token<T>;\n}\n\n/** Registration kinds */\ntype Factory<T> = () => T | Promise<T>;\n\ntype Registration<T> =\n  | { type: 'value'; value: T }\n  | { type: 'factory'; factory: Factory<T>; singleton: boolean; cached?: T };\n\n/** Container implementation */\nexport class Container {\n  private registry = new Map<Token<any>, Registration<any>>();\n\n  registerValue<T>(token: Token<T>, value: T): void {\n    this.registry.set(token, { type: 'value', value });\n  }\n\n  registerFactory<T>(token: Token<T>, factory: Factory<T>, options?: { singleton?: boolean }): void {\n    this.registry.set(token, { type: 'factory', factory, singleton: !!options?.singleton });\n  }\n\n  resolve<T>(token: Token<T>): T {\n    const reg = this.registry.get(token) as Registration<T> | undefined;\n    if (!reg) throw new Error('Token not registered');\n    if (reg.type === 'value') return reg.value as T;\n    // factory\n    if (reg.type === 'factory') {\n      if (reg.singleton) {\n        if (reg.cached !== undefined) return reg.cached as T;\n        const val = reg.factory();\n        if (val instanceof Promise) throw new Error('Cannot resolve async factory as sync');\n        reg.cached = val as T;\n        return val as T;\n      }\n      const val = reg.factory();\n      if (val instanceof Promise) throw new Error('Cannot resolve async factory as sync');\n      return val as T;\n    }\n    throw new Error('Invalid registration');\n  }\n\n  async resolveAsync<T>(token: Token<T>): Promise<T> {\n    const reg = this.registry.get(token) as Registration<T> | undefined;\n    if (!reg) throw new Error('Token not registered');\n    if (reg.type === 'value') return reg.value as T;\n    if (reg.type === 'factory') {\n      if (reg.singleton) {\n        if (reg.cached !== undefined) return reg.cached as T;\n        const val = await reg.factory();\n        reg.cached = val as T;\n        return val as T;\n      }\n      const val = await reg.factory();\n      return val as T;\n    }\n    throw new Error('Invalid registration');\n  }\n\n  has(token: Token<any>): boolean {\n    return this.registry.has(token);\n  }\n\n  clear(): void {\n    this.registry.clear();\n  }\n}\n\n/* Export a default container instance used by the app. Tests can create independent Container instances when isolating behavior. */\nexport const defaultContainer = new Container();\n\n/* Convenience register/resolve functions using defaultContainer */\nexport const register = <T>(token: Token<T>, valueOrFactory: T | Factory<T>, options?: { singleton?: boolean; isFactory?: boolean }) => {\n  if (typeof valueOrFactory === 'function' && options?.isFactory) {\n    defaultContainer.registerFactory(token, valueOrFactory as Factory<T>, { singleton: options.singleton });\n  } else {\n    defaultContainer.registerValue(token, valueOrFactory as T);\n  }\n};\n\nexport const resolve = <T>(token: Token<T>): T => defaultContainer.resolve(token);\nexport const resolveAsync = <T>(token: Token<T>): Promise<T> => defaultContainer.resolveAsync(token);\n\n/* Predefined tokens for core services (examples) */\nexport const TOKENS = {\n  ApiClient: createToken('ApiClient'),\n  AuthService: createToken('AuthService'),\n  StorageService: createToken('StorageService'),\n  WebSocketService: createToken('WebSocketService')\n} as const;\n\nexport type ApiClientToken = typeof TOKENS.ApiClient;\nexport type AuthServiceToken = typeof TOKENS.AuthService;\nexport type StorageServiceToken = typeof TOKENS.StorageService;\nexport type WebSocketServiceToken = typeof TOKENS.WebSocketService;\n\n/* Example usage\n\n// register an API client instance\nimport { register, TOKENS } from '@/core/di';\nregister(TOKENS.ApiClient, apiClientInstance);\n\n// later in a service module\nimport { resolve, TOKENS } from '@/core/di';\nconst apiClient = resolve<TApiClient>(TOKENS.ApiClient);\n\n// For factories and singletons\nregister(TOKENS.AuthService, () => new AuthService(), { isFactory: true, singleton: true });\n\nNotes\n- Avoid circular dependencies by registering only at app startup (e.g., App.tsx) and resolving inside functions/modules, not at top-level import time when possible.\n- Tests should either clear defaultContainer or create a new Container instance for isolation."
    },
    {
      "id": "core-events",
      "file_path": "src/core/events.ts",
      "description": "A tiny event bus utility for decoupled pub/sub within the app (used by mock websocket emulator and cross-module events).",
      "dependencies": [],
      "exports": [
        "EventBus",
        "subscribe",
        "unsubscribe",
        "publish"
      ],
      "priority": 1,
      "purpose": "Typed, minimal event bus for decoupled pub/sub across the app. Used by mock websocket emitter, socketService, and any module that needs lightweight in-process events. Supports synchronous handlers and asynchronous handlers (returns a Promise that resolves after all handlers complete).",
      "content": "Design goals\n- Strongly typed: event names mapped to payload shapes\n- Support for on/off and once\n- Allow async handlers (handler may return Promise)\n- Singleton defaultEventBus for application modules\n\nTyped event map used by the application\nimport { ID, Product, Order, InventoryUpdatedPayload, PriceUpdatedPayload } from '@/core/contracts';\n\nexport type AppEventMap = {\n  'auth.login': { userId: ID };\n  'auth.logout': { userId?: ID };\n  'cart.updated': { cartId: ID; userId?: ID };\n  'product.created': { product: Product };\n  'product.updated': { product: Product };\n  'inventory.updated': InventoryUpdatedPayload;\n  'price.updated': PriceUpdatedPayload;\n  'order.status.updated': { orderId: ID; status: OrderStatus };\n  'toast.show': { message: string; level?: 'info' | 'success' | 'error' };\n  'ws.ping': { timestamp: string };\n};\n\nexport type AppEventKey = keyof AppEventMap;\n\n/** Handler type: payload matched to the event key */\nexport type EventHandler<K extends AppEventKey> = (payload: AppEventMap[K]) => void | Promise<void>;\n\n/** Internal handler record */\ntype HandlerRecord<K extends AppEventKey = AppEventKey> = {\n  handler: EventHandler<K> | ((payload: any) => any);\n  once?: boolean;\n};\n\n/** EventBus class */\nexport class EventBus {\n  private handlers: Map<string, HandlerRecord[]> = new Map();\n\n  /** Subscribe to an event. Returns an unsubscribe function. */\n  on<K extends AppEventKey>(event: K, handler: EventHandler<K>): () => void {\n    const key = String(event);\n    const list = this.handlers.get(key) ?? [];\n    list.push({ handler });\n    this.handlers.set(key, list);\n    return () => this.off(event, handler as any);\n  }\n\n  /** Subscribe once */\n  once<K extends AppEventKey>(event: K, handler: EventHandler<K>): () => void {\n    const key = String(event);\n    const list = this.handlers.get(key) ?? [];\n    list.push({ handler, once: true });\n    this.handlers.set(key, list);\n    return () => this.off(event, handler as any);\n  }\n\n  /** Unsubscribe a handler */\n  off<K extends AppEventKey>(event: K, handler?: EventHandler<K>): void {\n    const key = String(event);\n    const list = this.handlers.get(key);\n    if (!list) return;\n    if (!handler) {\n      this.handlers.delete(key);\n      return;\n    }\n    const filtered = list.filter(r => r.handler !== handler);\n    if (filtered.length === 0) this.handlers.delete(key);\n    else this.handlers.set(key, filtered);\n  }\n\n  /** Publish an event synchronously; handlers that return promises will be awaited if wait flag is true */\n  async emit<K extends AppEventKey>(event: K, payload: AppEventMap[K], options?: { wait?: boolean }): Promise<void> {\n    const key = String(event);\n    const list = this.handlers.get(key) ?? [];\n    if (list.length === 0) return;\n\n    // iterate over a shallow copy to allow modifications during iteration\n    const copy = [...list];\n    const results: Promise<void>[] = [];\n\n    for (const rec of copy) {\n      try {\n        const res = rec.handler(payload as any);\n        if (rec.once) {\n          // remove the handler\n          this.off(event, rec.handler as any);\n        }\n        if (options?.wait && res instanceof Promise) {\n          results.push(res.then(() => undefined));\n        }\n      } catch (err) {\n        // swallow to avoid breaking other handlers; optionally log\n        // consumers can subscribe to error events if desired\n        // For dev, console.error\n        if (process.env.NODE_ENV !== 'production') console.error('Event handler error for', event, err);\n      }\n    }\n\n    if (options?.wait && results.length > 0) {\n      await Promise.all(results);\n    }\n  }\n\n  /** Clear all handlers (useful in tests) */\n  clear(): void {\n    this.handlers.clear();\n  }\n}\n\n// Export a singleton default bus used across the app\nexport const defaultEventBus = new EventBus();\n\n/* Convenience helpers for common operations */\nexport const subscribe = <K extends AppEventKey>(event: K, handler: EventHandler<K>) => defaultEventBus.on(event, handler);\nexport const unsubscribe = <K extends AppEventKey>(event: K, handler?: EventHandler<K>) => defaultEventBus.off(event, handler as any);\nexport const publish = <K extends AppEventKey>(event: K, payload: AppEventMap[K], options?: { wait?: boolean }) => defaultEventBus.emit(event, payload, options);\n\n/* Usage examples\n\nimport { subscribe, publish } from '@/core/events';\nimport { defaultEventBus } from '@/core/events';\n\n// subscribe\nconst unsub = subscribe('cart.updated', (payload) => {\n  console.log('cart updated', payload);\n});\n\n// publish\npublish('cart.updated', { cartId: 'cart_1' });\n\n// async handlers\nsubscribe('order.status.updated', async ({ orderId, status }) => {\n  await someAsyncCleanup(orderId);\n});\n\n// tests can clear handlers\ndefaultEventBus.clear();\n\nNotes\n- Keep handlers fast. Use 'options.wait' when emitters must ensure async handlers complete (e.g., during graceful shutdown in tests).\n- The event map is the canonical list of cross-cutting event names. Extend it as needed when features require new global events."
    },
    {
      "id": "core-hooks-registry",
      "file_path": "src/core/hooks.ts",
      "description": "Hook registry and extension points for third-party plugins or runtime feature toggles. Exposes a registerHook/resolveHook API.",
      "dependencies": [],
      "exports": [
        "registerHook",
        "resolveHook",
        "HookKey"
      ],
      "priority": 1,
      "purpose": "A small, typed hook/extension registry for runtime extensibility. Allows modules to register hook callbacks for predefined hook points (beforeApiRequest, afterApiResponse, onLogin, onLogout, onRouteChange). Hook callbacks receive a context object and may return modifications or async results. The registry supports registering multiple handlers per hook and running them in sequence or in parallel depending on the hook contract.",
      "content": "Goals\n- Provide a typed, centralized extension mechanism for small cross-cutting concerns (e.g., analytics, telemetry, request transforms, feature toggles).\n- Lightweight and synchronous-by-default; handlers may be async when needed.\n\nHook point names\nexport type HookKey =\n  | 'beforeApiRequest' // allows modifying request init or url\n  | 'afterApiResponse' // receives response or error and can modify/augment\n  | 'onLogin' // called when user logs in\n  | 'onLogout' // called on logout\n  | 'onRouteChange'; // receives pathname and params\n\n/** Context object passed to hooks; each hook can expect specific fields but keep it extendable */\nexport interface HookContext {\n  // for request hooks\n  url?: string;\n  init?: RequestInit;\n  // for response hooks\n  response?: unknown;\n  error?: unknown;\n  // for auth hooks\n  userId?: string;\n  user?: unknown;\n  // route hooks\n  pathname?: string;\n  params?: Record<string, string>;\n  // generic metadata\n  meta?: Record<string, unknown>;\n}\n\nexport type HookHandler<T extends HookKey = HookKey> = (ctx: HookContext) => void | Promise<void> | HookContext | Promise<HookContext>;\n\n/** Hook registry implementation */\nexport class HookRegistry {\n  private registry: Map<HookKey, HookHandler[]> = new Map();\n\n  register<T extends HookKey>(key: T, handler: HookHandler<T>): () => void {\n    const list = this.registry.get(key) ?? [];\n    list.push(handler as HookHandler);\n    this.registry.set(key, list);\n    return () => this.unregister(key, handler as HookHandler);\n  }\n\n  unregister<T extends HookKey>(key: T, handler?: HookHandler<T>): void {\n    const list = this.registry.get(key);\n    if (!list) return;\n    if (!handler) {\n      this.registry.delete(key);\n      return;\n    }\n    const filtered = list.filter(h => h !== handler);\n    if (filtered.length === 0) this.registry.delete(key);\n    else this.registry.set(key, filtered);\n  }\n\n  /** Run handlers sequentially, passing the context along. Each handler may mutate or return a context. */\n  async run<T extends HookKey>(key: T, ctx: HookContext): Promise<HookContext> {\n    const list = this.registry.get(key) ?? [];\n    let current = { ...ctx };\n    for (const handler of list) {\n      const result = await handler(current as HookContext);\n      if (result && typeof result === 'object') {\n        current = { ...current, ...result };\n      }\n    }\n    return current;\n  }\n\n  /** Run handlers in parallel and return aggregated contexts (useful for non-mutating hooks) */\n  async runParallel<T extends HookKey>(key: T, ctx: HookContext): Promise<HookContext[]> {\n    const list = this.registry.get(key) ?? [];\n    return Promise.all(list.map(h => Promise.resolve(h(ctx as HookContext)).then(r => (typeof r === 'object' ? r as HookContext : ctx))));\n  }\n\n  clear(): void {\n    this.registry.clear();\n  }\n}\n\n// Export a global registry instance that app modules can import and extend\nexport const globalHookRegistry = new HookRegistry();\n\n// Convenience functions\nexport const registerHook = <T extends HookKey>(key: T, handler: HookHandler<T>) => globalHookRegistry.register(key, handler);\nexport const resolveHook = <T extends HookKey>(key: T, ctx: HookContext) => globalHookRegistry.run(key, ctx);\n\n/* Standard hooks and patterns\n- beforeApiRequest: modify url/init (add headers, trace ids)\n  registerHook('beforeApiRequest', async (ctx) => {\n    // mutate ctx.init.headers\n  });\n- afterApiResponse: log or transform response; can attach telemetry\n- onLogin/onLogout: used by plugins to update analytics or clear caches\n- onRouteChange: used by analytics or feature flags to respond to navigation\n\nExample integration with apiClient (pseudocode):\n\nimport { registerHook, resolveHook } from '@/core/hooks';\n\nasync function apiFetch(url: string, init: RequestInit = {}) {\n  const ctx = await resolveHook('beforeApiRequest', { url, init });\n  const res = await fetch(ctx.url ?? url, ctx.init ?? init);\n  const data = await res.json().catch(() => null);\n  await resolveHook('afterApiResponse', { url: ctx.url, init: ctx.init, response: data });\n  return data;\n}\n\nNotes\n- Hooks are intentionally low-level; prefer idempotent handlers and avoid heavy side effects in runParallel unless you know handlers are independent.\n- Use unregister to remove plugin handlers in tests or dynamic plugin systems."
    },
    {
      "id": "core-utils",
      "file_path": "src/core/utils.ts",
      "description": "Minimal core utilities used by kernel modules (deepClone, noop, isServer, sleep).",
      "dependencies": [],
      "exports": [
        "deepClone",
        "noop",
        "isServer",
        "sleep"
      ],
      "priority": 1,
      "purpose": "Small set of safe utilities used across kernel modules: deep clone (structuredClone fallback), noop, environment checks, sleep/delay, safe JSON parse/stringify, basic date formatting, and debug logging controlled by NODE_ENV.",
      "content": "Design goals\n- Provide tiny, dependency-free helpers that are safe in both browser and Node-like environments.\n- Avoid heavy third-party libraries in kernel; higher-level modules can import more advanced utils from /utils if needed.\n\nUtilities\n\n/** deepClone - uses structuredClone when available, otherwise falls back to JSON-based clone (loses functions and Dates) */\nexport function deepClone<T>(obj: T): T {\n  if (typeof (globalThis as any).structuredClone === 'function') {\n    return (globalThis as any).structuredClone(obj) as T;\n  }\n  return JSON.parse(JSON.stringify(obj)) as T;\n}\n\n/** noop - typed no-op function */\nexport const noop = (..._args: any[]) => undefined;\n\n/** isServer - runtime check for SSR or node environment */\nexport const isServer = typeof window === 'undefined';\n\n/** sleep/delay - async delay helper */\nexport const sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\n\n/** safeJsonParse - returns undefined on failure (prevents throw in many callsites) */\nexport function safeJsonParse<T = unknown>(input: string | undefined | null): T | undefined {\n  if (input == null) return undefined;\n  try {\n    return JSON.parse(input) as T;\n  } catch {\n    return undefined;\n  }\n}\n\n/** safeJsonStringify - returns string or undefined if fails */\nexport function safeJsonStringify(input: unknown): string | undefined {\n  try {\n    return JSON.stringify(input);\n  } catch {\n    return undefined;\n  }\n}\n\n/** formatDateISO - friendly formatting of ISO strings; falls back to toString */\nexport function formatDateISO(iso: string | undefined, locale = 'en-US', options?: Intl.DateTimeFormatOptions): string {\n  if (!iso) return '';\n  try {\n    const d = new Date(iso);\n    return new Intl.DateTimeFormat(locale, options ?? { year: 'numeric', month: 'short', day: 'numeric' }).format(d);\n  } catch {\n    return String(iso);\n  }\n}\n\n/** debugLog - logs only in non-production */\nexport function debugLog(...args: any[]) {\n  if (process.env.NODE_ENV !== 'production') console.debug('[debug]', ...args);\n}\n\n/** validateEmail - small RFC-lite email check for forms */\nexport function validateEmail(email?: string): boolean {\n  if (!email) return false;\n  // simple regex: not exhaustive but practical for UI validation\n  return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);\n}\n\n/* Usage examples\n\nimport { deepClone, sleep, safeJsonParse, debugLog } from '@/core/utils';\n\nconst copy = deepClone(someObject);\nawait sleep(200);\nconst parsed = safeJsonParse<MyType>(maybeJson);\ndebugLog('parsed', parsed);\n\nNotes\n- Keep these helpers intentionally small. Add additional helpers here only if they are generic and used across many modules. Otherwise add feature-scoped utilities under src/utils/.\n- deepClone uses structuredClone when available to preserve Dates/Maps in supporting runtimes."
    },
    {
      "id": "hooks-use-auth",
      "file_path": "src/hooks/useAuth.ts",
      "description": "Convenience hook that exposes Auth context functions and typed user state for components to consume.",
      "dependencies": [
        "src/providers/AuthProvider.tsx",
        "src/core/contracts.ts"
      ],
      "exports": [
        "useAuthState",
        "useRequireAuth"
      ],
      "priority": 1
    },
    {
      "id": "hooks-use-cart",
      "file_path": "src/hooks/useCart.ts",
      "description": "Encapsulates cart state and mutations using React Query and cartService (get/add/update/remove). Exposes optimistic updates and error handling.",
      "dependencies": [
        "src/services/cartService.ts",
        "src/services/queryClient.ts",
        "src/core/contracts.ts"
      ],
      "exports": [
        "useCart",
        "useCartMutations"
      ],
      "priority": 1
    },
    {
      "id": "hooks-use-checkout",
      "file_path": "src/hooks/useCheckout.ts",
      "description": "Encapsulates checkout process flow: validation, payment initiation, order creation. Talks to paymentService and orderService.",
      "dependencies": [
        "src/services/paymentService.ts",
        "src/services/orderService.ts",
        "src/core/contracts.ts"
      ],
      "exports": [
        "useCheckout"
      ],
      "priority": 1
    },
    {
      "id": "hooks-use-infinite-products",
      "file_path": "src/hooks/useInfiniteProducts.ts",
      "description": "Hook using React Query's useInfiniteQuery to implement cursor-based or page-based infinite scroll/pagination for product lists.",
      "dependencies": [
        "src/services/productService.ts",
        "src/services/queryClient.ts",
        "src/core/contracts.ts"
      ],
      "exports": [
        "useInfiniteProducts"
      ],
      "priority": 1
    },
    {
      "id": "hooks-use-local-storage",
      "file_path": "src/hooks/useLocalStorage.ts",
      "description": "Reusable hook to persist state to localStorage with serialization and SSR-safe checks. Used by AuthProvider and ThemeProvider.",
      "dependencies": [],
      "exports": [
        "useLocalStorage"
      ],
      "priority": 1
    },
    {
      "id": "hooks-use-products",
      "file_path": "src/hooks/useProducts.ts",
      "description": "Hook to fetch product lists with filters and sorting via React Query. Provides loading, error, and refetch interfaces.",
      "dependencies": [
        "src/services/productService.ts",
        "src/services/queryClient.ts",
        "src/core/contracts.ts"
      ],
      "exports": [
        "useProducts"
      ],
      "priority": 1
    },
    {
      "id": "hooks-use-websocket",
      "file_path": "src/hooks/useWebsocket.ts",
      "description": "Hook to subscribe to socketService messages and optionally trigger React Query cache invalidations or local updates (e.g., inventory changes).",
      "dependencies": [
        "src/services/socketService.ts",
        "src/services/queryClient.ts"
      ],
      "exports": [
        "useWebsocket"
      ],
      "priority": 1
    },
    {
      "id": "hooks-use-wishlist",
      "file_path": "src/hooks/useWishlist.ts",
      "description": "Wishlist hook managing wishlist items persisted in localStorage in dev and optionally backed by an API in prod.",
      "dependencies": [
        "src/hooks/useLocalStorage.ts",
        "src/core/contracts.ts"
      ],
      "exports": [
        "useWishlist"
      ],
      "priority": 1
    },
    {
      "id": "main-entry",
      "file_path": "src/main.tsx",
      "description": "Application entry point. Renders <App /> into the DOM, imports global Tailwind CSS, starts mock server in development, and hydrates React.",
      "dependencies": [
        "src/App.tsx",
        "src/styles/tailwind.css",
        "src/services/mockServer.ts",
        "src/app/config.ts"
      ],
      "exports": [
        "bootstrapApp"
      ],
      "priority": 1
    },
    {
      "id": "mocks-cart",
      "file_path": "src/mocks/cart.ts",
      "description": "Mock cart storage and operations per user for dev; supports get/add/update/remove operations consumed by mockServer.",
      "dependencies": [
        "src/core/contracts.ts"
      ],
      "exports": [
        "mockCarts",
        "getCartForUser",
        "mutateCartForUser"
      ],
      "priority": 1
    },
    {
      "id": "mocks-orders",
      "file_path": "src/mocks/orders.ts",
      "description": "Mock orders dataset and utilities to create orders and update statuses for dev testing (including order tracking progression).",
      "dependencies": [
        "src/core/contracts.ts"
      ],
      "exports": [
        "mockOrders",
        "createMockOrder",
        "getOrdersForUser"
      ],
      "priority": 1
    },
    {
      "id": "mocks-products",
      "file_path": "src/mocks/products.ts",
      "description": "Development mock product dataset and helper functions to query/filter/sort products. Used by mockServer to respond to /api/products.",
      "dependencies": [
        "src/core/contracts.ts"
      ],
      "exports": [
        "mockProducts",
        "queryMockProducts"
      ],
      "priority": 1
    },
    {
      "id": "mocks-reviews",
      "file_path": "src/mocks/reviews.ts",
      "description": "Mock review records and utilities to list/submit reviews for products, used by mockServer endpoints.",
      "dependencies": [
        "src/core/contracts.ts"
      ],
      "exports": [
        "mockReviews",
        "listReviewsForProduct",
        "submitMockReview"
      ],
      "priority": 1
    },
    {
      "id": "mocks-users",
      "file_path": "src/mocks/users.ts",
      "description": "Mock user records (seller/buyer/admin) used for development authentication flows and role-based testing.",
      "dependencies": [
        "src/app/config.ts",
        "src/core/contracts.ts"
      ],
      "exports": [
        "mockUsers",
        "findMockUser"
      ],
      "priority": 1
    },
    {
      "id": "mocks-websocket",
      "file_path": "src/mocks/websocket.ts",
      "description": "Mock websocket emitter that pushes simulated inventory/price updates and order status changes via the core events bus.",
      "dependencies": [
        "src/core/events.ts",
        "src/mocks/products.ts",
        "src/mocks/orders.ts"
      ],
      "exports": [
        "startMockWebsocket",
        "stopMockWebsocket"
      ],
      "priority": 1
    },
    {
      "id": "providers-auth",
      "file_path": "src/providers/AuthProvider.tsx",
      "description": "Auth context provider implementing login/logout, token storage (localStorage in dev), role-based access and mock authentication using DEV_MOCK_USERS when enabled.",
      "dependencies": [
        "src/core/contracts.ts",
        "src/app/config.ts",
        "src/services/apiClient.ts",
        "src/core/events.ts",
        "src/hooks/useLocalStorage.ts"
      ],
      "exports": [
        "AuthProvider",
        "useAuth"
      ],
      "priority": 1
    },
    {
      "id": "providers-error-boundary",
      "file_path": "src/providers/ErrorBoundary.tsx",
      "description": "React Error Boundary component that captures rendering errors and allows retry. Shows a friendly fallback UI and logs errors to console or a mock telemetry.",
      "dependencies": [
        "src/shared/components/Modal.tsx"
      ],
      "exports": [
        "ErrorBoundary"
      ],
      "priority": 1
    },
    {
      "id": "providers-query",
      "file_path": "src/providers/QueryProvider.tsx",
      "description": "Context provider that instantiates and supplies the React Query client to the app.",
      "dependencies": [
        "src/services/queryClient.ts",
        "react-query"
      ],
      "exports": [
        "ReactQueryProvider"
      ],
      "priority": 1
    },
    {
      "id": "providers-router",
      "file_path": "src/providers/RouterProvider.tsx",
      "description": "Router provider that sets up react-router's BrowserRouter and provides helper components like ProtectedRoute for role-based route protection.",
      "dependencies": [
        "react-router-dom",
        "src/shared/components/ProtectedRoute.tsx"
      ],
      "exports": [
        "AppRouter",
        "NavigateTo"
      ],
      "priority": 1
    },
    {
      "id": "providers-theme",
      "file_path": "src/providers/ThemeProvider.tsx",
      "description": "Theme provider to toggle dark mode and persist preference. Integrates with Tailwind's dark class strategy.",
      "dependencies": [
        "src/hooks/useLocalStorage.ts"
      ],
      "exports": [
        "ThemeProvider",
        "useTheme"
      ],
      "priority": 1
    },
    {
      "id": "providers-toast",
      "file_path": "src/providers/ToastProvider.tsx",
      "description": "Lightweight toast/notification context used across the app for user feedback on async operations.",
      "dependencies": [],
      "exports": [
        "ToastProvider",
        "useToast"
      ],
      "priority": 1
    },
    {
      "id": "services-api-client",
      "file_path": "src/services/apiClient.ts",
      "description": "Fetch wrapper that centralizes API calls, handles auth token injection, retry/fallback logic, timeouts, and development fallbacks when the mock server is disabled.",
      "dependencies": [
        "src/app/config.ts",
        "src/core/contracts.ts"
      ],
      "exports": [
        "apiClient",
        "ApiError"
      ],
      "priority": 1
    },
    {
      "id": "services-cart",
      "file_path": "src/services/cartService.ts",
      "description": "Cart API wrappers for retrieving/adding/updating/removing cart items and syncing with local storage in dev.",
      "dependencies": [
        "src/services/apiClient.ts",
        "src/core/contracts.ts",
        "src/app/config.ts"
      ],
      "exports": [
        "getCart",
        "addToCart",
        "updateCartItem",
        "removeCartItem",
        "clearCart"
      ],
      "priority": 1
    },
    {
      "id": "services-mock-server",
      "file_path": "src/services/mockServer.ts",
      "description": "In-project mock server that registers REST handlers for /api/products, /api/cart, /api/orders, /api/payments, /api/reviews and a WebSocket emulator for realtime updates. Uses the mock data files and supports enabling/disabling via APP_CONFIG.",
      "dependencies": [
        "src/mocks/products.ts",
        "src/mocks/users.ts",
        "src/mocks/cart.ts",
        "src/mocks/orders.ts",
        "src/mocks/reviews.ts",
        "src/mocks/websocket.ts",
        "src/app/config.ts",
        "src/core/events.ts"
      ],
      "exports": [
        "startMockServer",
        "stopMockServer"
      ],
      "priority": 1
    },
    {
      "id": "services-order",
      "file_path": "src/services/orderService.ts",
      "description": "Order API wrappers for creating orders, fetching order history, and retrieving tracking information.",
      "dependencies": [
        "src/services/apiClient.ts",
        "src/core/contracts.ts"
      ],
      "exports": [
        "createOrder",
        "getOrders",
        "getOrderById",
        "getOrderTracking"
      ],
      "priority": 1
    },
    {
      "id": "services-payment",
      "file_path": "src/services/paymentService.ts",
      "description": "Payment-related UI-level service: tokenization integration points, mock payment flows in dev, and payment status polling helpers.",
      "dependencies": [
        "src/services/apiClient.ts",
        "src/app/config.ts"
      ],
      "exports": [
        "initiatePayment",
        "pollPaymentStatus"
      ],
      "priority": 1
    },
    {
      "id": "services-product",
      "file_path": "src/services/productService.ts",
      "description": "Product-related API wrappers: list products with filters and pagination, get product details, and fetch inventory status. Uses apiClient and maps responses to core contracts.",
      "dependencies": [
        "src/services/apiClient.ts",
        "src/core/contracts.ts"
      ],
      "exports": [
        "fetchProducts",
        "fetchProductById",
        "fetchInventoryForProduct"
      ],
      "priority": 1
    },
    {
      "id": "services-query-client",
      "file_path": "src/services/queryClient.ts",
      "description": "React Query (TanStack Query) client configuration: default cache times, error handling, and devtools setup.",
      "dependencies": [],
      "exports": [
        "getQueryClient"
      ],
      "priority": 1
    },
    {
      "id": "services-review",
      "file_path": "src/services/reviewService.ts",
      "description": "Review and rating service wrappers for listing and creating reviews for products.",
      "dependencies": [
        "src/services/apiClient.ts",
        "src/core/contracts.ts"
      ],
      "exports": [
        "fetchReviewsForProduct",
        "submitReview"
      ],
      "priority": 1
    },
    {
      "id": "services-socket",
      "file_path": "src/services/socketService.ts",
      "description": "WebSocket manager that connects to real WS in production or to the mock websocket emulator in development. Exposes subscribe/unsubscribe helpers and reconnection logic.",
      "dependencies": [
        "src/app/config.ts",
        "src/core/events.ts",
        "src/mocks/websocket.ts"
      ],
      "exports": [
        "socketService",
        "subscribeSocket",
        "unsubscribeSocket"
      ],
      "priority": 1
    },
    {
      "id": "styles-tailwind",
      "file_path": "src/styles/tailwind.css",
      "description": "Tailwind entry CSS file that imports base, components, utilities and defines dark-mode config. Included by main.tsx.",
      "dependencies": [],
      "exports": [
        "tailwindStyles"
      ],
      "priority": 1
    },
    {
      "id": "features-cart-drawer",
      "file_path": "src/features/cart/CartDrawer.tsx",
      "description": "Slide-over cart drawer used across the site for quick cart preview and checkout CTA. Uses useCart for mutations and optimistic updates.",
      "dependencies": [
        "src/hooks/useCart.ts",
        "src/shared/components/Modal.tsx",
        "src/features/cart/CartItem.tsx",
        "src/shared/components/Button.tsx"
      ],
      "exports": [
        "CartDrawer"
      ],
      "priority": 2
    },
    {
      "id": "features-cart-item",
      "file_path": "src/features/cart/CartItem.tsx",
      "description": "Individual cart item row with quantity controls, remove, and small product summary.",
      "dependencies": [
        "src/shared/components/Input.tsx",
        "src/shared/components/Button.tsx",
        "src/core/contracts.ts"
      ],
      "exports": [
        "CartItem"
      ],
      "priority": 2
    },
    {
      "id": "features-checkout-form",
      "file_path": "src/features/checkout/CheckoutForm.tsx",
      "description": "Checkout form for capturing shipping and billing details, with validation and accessible form controls.",
      "dependencies": [
        "src/shared/forms/Form.tsx",
        "src/shared/components/Input.tsx",
        "src/shared/components/Select.tsx",
        "src/shared/forms/validation.ts"
      ],
      "exports": [
        "CheckoutForm"
      ],
      "priority": 2
    },
    {
      "id": "features-order-tracking",
      "file_path": "src/features/orders/OrderTracking.tsx",
      "description": "Order tracking component showing current status and timeline for a specific order; supports polling in case backend is slow.",
      "dependencies": [
        "src/services/orderService.ts",
        "src/core/contracts.ts"
      ],
      "exports": [
        "OrderTracking"
      ],
      "priority": 2
    },
    {
      "id": "features-orders-list",
      "file_path": "src/features/orders/OrderList.tsx",
      "description": "List of past orders for the user with status badges and links to tracking.",
      "dependencies": [
        "src/services/orderService.ts",
        "src/shared/components/Badge.tsx",
        "src/core/contracts.ts"
      ],
      "exports": [
        "OrderList"
      ],
      "priority": 2
    },
    {
      "id": "features-payment-form",
      "file_path": "src/features/checkout/PaymentForm.tsx",
      "description": "Payment UI that integrates with paymentService for tokenization and displays statuses, with a mocked payment flow in development.",
      "dependencies": [
        "src/services/paymentService.ts",
        "src/shared/components/Input.tsx",
        "src/shared/components/Button.tsx"
      ],
      "exports": [
        "PaymentForm"
      ],
      "priority": 2
    },
    {
      "id": "features-product-card",
      "file_path": "src/features/product/ProductCard.tsx",
      "description": "Presentational product card showing image, title, price, rating, and add-to-cart/wishlist actions.",
      "dependencies": [
        "src/shared/components/Button.tsx",
        "src/shared/components/Badge.tsx",
        "src/shared/components/Avatar.tsx",
        "src/hooks/useWishlist.ts",
        "src/hooks/useCart.ts",
        "src/core/contracts.ts"
      ],
      "exports": [
        "ProductCard"
      ],
      "priority": 2
    },
    {
      "id": "features-product-detail",
      "file_path": "src/features/product/ProductDetail.tsx",
      "description": "Product detail component showing gallery, variants, inventory status, add to cart, reviews summary and review list. Integrates with useProducts/useReview hooks.",
      "dependencies": [
        "src/services/productService.ts",
        "src/hooks/useCart.ts",
        "src/features/reviews/ReviewList.tsx",
        "src/features/reviews/ReviewForm.tsx",
        "src/core/contracts.ts"
      ],
      "exports": [
        "ProductDetail"
      ],
      "priority": 2
    },
    {
      "id": "features-product-filters",
      "file_path": "src/features/product/ProductFilters.tsx",
      "description": "Filter panel for categories, price range, ratings, and availability (inventory). Emits filter state to parent via callbacks.",
      "dependencies": [
        "src/shared/components/Select.tsx",
        "src/shared/components/Input.tsx"
      ],
      "exports": [
        "ProductFilters"
      ],
      "priority": 2
    },
    {
      "id": "features-product-list",
      "file_path": "src/features/product/ProductList.tsx",
      "description": "Grid/list component that renders ProductCard for a list of products and supports placeholders/skeletons and infinite scroll hooks.",
      "dependencies": [
        "src/features/product/ProductCard.tsx",
        "src/hooks/useInfiniteProducts.ts",
        "src/shared/components/Skeleton.tsx"
      ],
      "exports": [
        "ProductList"
      ],
      "priority": 2
    },
    {
      "id": "features-reviews-form",
      "file_path": "src/features/reviews/ReviewForm.tsx",
      "description": "Review submission form with star rating, validation and optimistic UI for posting reviews in dev.",
      "dependencies": [
        "src/services/reviewService.ts",
        "src/shared/forms/Form.tsx",
        "src/shared/components/Button.tsx"
      ],
      "exports": [
        "ReviewForm"
      ],
      "priority": 2
    },
    {
      "id": "features-reviews-list",
      "file_path": "src/features/reviews/ReviewList.tsx",
      "description": "List component for product reviews and aggregated rating display.",
      "dependencies": [
        "src/services/reviewService.ts",
        "src/core/contracts.ts"
      ],
      "exports": [
        "ReviewList"
      ],
      "priority": 2
    },
    {
      "id": "features-wishlist-list",
      "file_path": "src/features/wishlist/WishlistList.tsx",
      "description": "Renders wishlist items with quick add-to-cart and remove interactions.",
      "dependencies": [
        "src/hooks/useWishlist.ts",
        "src/hooks/useCart.ts",
        "src/features/product/ProductCard.tsx"
      ],
      "exports": [
        "WishlistList"
      ],
      "priority": 2
    },
    {
      "id": "forms-form",
      "file_path": "src/shared/forms/Form.tsx",
      "description": "Form wrapper component that integrates labels, validation error presentation, and keyboard submission handling.",
      "dependencies": [
        "src/shared/components/Input.tsx",
        "src/shared/components/Button.tsx"
      ],
      "exports": [
        "Form"
      ],
      "priority": 2
    },
    {
      "id": "forms-validation",
      "file_path": "src/shared/forms/validation.ts",
      "description": "Validation rules and helpers used by forms. Centralizes error messages and schema builders (compatible with React Hook Form or Zod).",
      "dependencies": [],
      "exports": [
        "required",
        "emailRule",
        "minLength",
        "validatePrice"
      ],
      "priority": 2
    },
    {
      "id": "shared-avatar",
      "file_path": "src/shared/components/Avatar.tsx",
      "description": "Simple avatar component for user representations with fallback initials.",
      "dependencies": [],
      "exports": [
        "Avatar"
      ],
      "priority": 2
    },
    {
      "id": "shared-badge",
      "file_path": "src/shared/components/Badge.tsx",
      "description": "Small UI badge for counts and statuses (inventory low, sale badge).",
      "dependencies": [],
      "exports": [
        "Badge"
      ],
      "priority": 2
    },
    {
      "id": "shared-button",
      "file_path": "src/shared/components/Button.tsx",
      "description": "Accessible, themable button component with variants (primary/secondary/ghost) and loading state. Built with Tailwind and supports ARIA and keyboard focus.",
      "dependencies": [],
      "exports": [
        "Button",
        "IconButton"
      ],
      "priority": 2
    },
    {
      "id": "shared-footer",
      "file_path": "src/shared/components/Footer.tsx",
      "description": "Global footer with links, accessibility info, and language switcher integration.",
      "dependencies": [
        "src/app/i18n.ts"
      ],
      "exports": [
        "Footer"
      ],
      "priority": 2
    },
    {
      "id": "shared-icon",
      "file_path": "src/shared/components/Icon.tsx",
      "description": "Small icon wrapper component to normalize sizes and ARIA hidden logic. Exports a few commonly used icons.",
      "dependencies": [],
      "exports": [
        "Icon",
        "Icons"
      ],
      "priority": 2
    },
    {
      "id": "shared-input",
      "file_path": "src/shared/components/Input.tsx",
      "description": "Accessible input control with label, error message, and integration helpers for React Hook Form or custom forms.",
      "dependencies": [
        "src/shared/components/Icon.tsx"
      ],
      "exports": [
        "Input",
        "TextArea"
      ],
      "priority": 2
    },
    {
      "id": "shared-modal",
      "file_path": "src/shared/components/Modal.tsx",
      "description": "Accessible modal dialog with focus trap, close on ESC, and aria attributes. Used by ErrorBoundary and other features.",
      "dependencies": [
        "src/shared/components/Button.tsx"
      ],
      "exports": [
        "Modal"
      ],
      "priority": 2
    },
    {
      "id": "shared-nav-footer-composition",
      "file_path": "src/shared/Layout.tsx",
      "description": "High-level site layout wrapping pages with NavBar, Footer and a main content container. Used by AppRoutes page wrappers.",
      "dependencies": [
        "src/shared/components/NavBar.tsx",
        "src/shared/components/Footer.tsx"
      ],
      "exports": [
        "DefaultLayout"
      ],
      "priority": 2
    },
    {
      "id": "shared-navbar",
      "file_path": "src/shared/components/NavBar.tsx",
      "description": "Top navigation bar with search, cart icon, wishlist, login button, and responsive mobile menu.",
      "dependencies": [
        "src/shared/components/Badge.tsx",
        "src/shared/components/Icon.tsx",
        "src/hooks/useCart.ts",
        "src/hooks/useAuth.ts"
      ],
      "exports": [
        "NavBar"
      ],
      "priority": 2
    },
    {
      "id": "shared-protected-route",
      "file_path": "src/shared/components/ProtectedRoute.tsx",
      "description": "Route wrapper that enforces authentication and role-based access; redirects to login when necessary.",
      "dependencies": [
        "src/hooks/useAuth.ts",
        "react-router-dom"
      ],
      "exports": [
        "ProtectedRoute"
      ],
      "priority": 2
    },
    {
      "id": "shared-select",
      "file_path": "src/shared/components/Select.tsx",
      "description": "Accessible select control (native select styled with Tailwind) and multi-select support.",
      "dependencies": [],
      "exports": [
        "Select"
      ],
      "priority": 2
    },
    {
      "id": "shared-skeleton",
      "file_path": "src/shared/components/Skeleton.tsx",
      "description": "Skeleton loader components for products and lists to show while data is loading.",
      "dependencies": [],
      "exports": [
        "Skeleton"
      ],
      "priority": 2
    },
    {
      "id": "shared-spinner",
      "file_path": "src/shared/components/Spinner.tsx",
      "description": "Small spinner component used in buttons and global loading UIs.",
      "dependencies": [],
      "exports": [
        "Spinner"
      ],
      "priority": 2
    },
    {
      "id": "utils-currency",
      "file_path": "src/utils/currency.ts",
      "description": "Currency formatting helpers and helpers for price display and localization-aware formatting.",
      "dependencies": [
        "src/app/i18n.ts"
      ],
      "exports": [
        "formatMoney",
        "parseMoney"
      ],
      "priority": 2
    },
    {
      "id": "utils-date",
      "file_path": "src/utils/date.ts",
      "description": "Date formatting utilities and relative time helpers for order tracking and timestamps.",
      "dependencies": [],
      "exports": [
        "formatDate",
        "timeAgo"
      ],
      "priority": 2
    },
    {
      "id": "utils-format",
      "file_path": "src/utils/format.ts",
      "description": "Formatting utilities (truncate, titleCase, slugify) used in UI components.",
      "dependencies": [],
      "exports": [
        "truncate",
        "titleCase",
        "slugify"
      ],
      "priority": 2
    },
    {
      "id": "pages-cart",
      "file_path": "src/pages/CartPage.tsx",
      "description": "Full cart page with list of items (CartItem), totals, coupon UI and proceed-to-checkout CTA.",
      "dependencies": [
        "src/features/cart/CartItem.tsx",
        "src/hooks/useCart.ts",
        "src/shared/components/Button.tsx"
      ],
      "exports": [
        "CartPage"
      ],
      "priority": 3
    },
    {
      "id": "pages-checkout",
      "file_path": "src/pages/CheckoutPage.tsx",
      "description": "Checkout page that composes CheckoutForm and PaymentForm and orchestrates the useCheckout hook for finalizing orders.",
      "dependencies": [
        "src/features/checkout/CheckoutForm.tsx",
        "src/features/checkout/PaymentForm.tsx",
        "src/hooks/useCheckout.ts",
        "src/shared/components/Spinner.tsx"
      ],
      "exports": [
        "CheckoutPage"
      ],
      "priority": 3
    },
    {
      "id": "pages-home",
      "file_path": "src/pages/HomePage.tsx",
      "description": "Landing page with featured product carousel, promotional banners, category links and a product grid using ProductList.",
      "dependencies": [
        "src/features/product/ProductList.tsx",
        "src/features/product/ProductFilters.tsx",
        "src/hooks/useInfiniteProducts.ts",
        "src/shared/components/NavBar.tsx",
        "src/shared/components/Footer.tsx"
      ],
      "exports": [
        "HomePage"
      ],
      "priority": 3
    },
    {
      "id": "pages-login",
      "file_path": "src/pages/LoginPage.tsx",
      "description": "Login page offering mock login in development and standard login UI. Integrates with AuthProvider and handles redirect after login.",
      "dependencies": [
        "src/providers/AuthProvider.tsx",
        "src/shared/forms/Form.tsx",
        "src/shared/components/Input.tsx",
        "src/shared/components/Button.tsx"
      ],
      "exports": [
        "LoginPage"
      ],
      "priority": 3
    },
    {
      "id": "pages-not-found",
      "file_path": "src/pages/NotFoundPage.tsx",
      "description": "404 page shown for unmatched routes with navigation options back to home.",
      "dependencies": [
        "src/shared/components/NavBar.tsx",
        "src/shared/components/Footer.tsx"
      ],
      "exports": [
        "NotFoundPage"
      ],
      "priority": 3
    },
    {
      "id": "pages-orders-dashboard",
      "file_path": "src/pages/OrdersDashboard.tsx",
      "description": "User's orders dashboard with OrderList and links to tracking details. Protected route requiring authentication.",
      "dependencies": [
        "src/features/orders/OrderList.tsx",
        "src/providers/AuthProvider.tsx",
        "src/shared/components/ProtectedRoute.tsx"
      ],
      "exports": [
        "OrdersDashboard"
      ],
      "priority": 3
    },
    {
      "id": "pages-product",
      "file_path": "src/pages/ProductPage.tsx",
      "description": "Product detail page that fetches a product by ID and renders ProductDetail (gallery, variants, reviews). Handles loading and error states.",
      "dependencies": [
        "src/features/product/ProductDetail.tsx",
        "src/services/productService.ts",
        "src/shared/components/Skeleton.tsx"
      ],
      "exports": [
        "ProductPage"
      ],
      "priority": 3
    },
    {
      "id": "pages-product-listing",
      "file_path": "src/pages/ProductListingPage.tsx",
      "description": "Product listing page that combines ProductFilters and ProductList with support for server-side search parameters and query-state syncing.",
      "dependencies": [
        "src/features/product/ProductFilters.tsx",
        "src/features/product/ProductList.tsx",
        "src/hooks/useProducts.ts",
        "react-router-dom"
      ],
      "exports": [
        "ProductListingPage"
      ],
      "priority": 3
    },
    {
      "id": "pages-wishlist",
      "file_path": "src/pages/WishlistPage.tsx",
      "description": "Wishlist page showing items saved by the user with quick actions to move to cart or remove.",
      "dependencies": [
        "src/features/wishlist/WishlistList.tsx",
        "src/hooks/useWishlist.ts"
      ],
      "exports": [
        "WishlistPage"
      ],
      "priority": 3
    }
  ],
  "file_paths": [
    "src/app/config.ts",
    "src/app/i18n.ts",
    "src/App.tsx",
    "src/app/routes.tsx",
    "src/core/contracts.ts",
    "src/core/di.ts",
    "src/core/events.ts",
    "src/core/hooks.ts",
    "src/core/utils.ts",
    "src/hooks/useAuth.ts",
    "src/hooks/useCart.ts",
    "src/hooks/useCheckout.ts",
    "src/hooks/useInfiniteProducts.ts",
    "src/hooks/useLocalStorage.ts",
    "src/hooks/useProducts.ts",
    "src/hooks/useWebsocket.ts",
    "src/hooks/useWishlist.ts",
    "src/main.tsx",
    "src/mocks/cart.ts",
    "src/mocks/orders.ts",
    "src/mocks/products.ts",
    "src/mocks/reviews.ts",
    "src/mocks/users.ts",
    "src/mocks/websocket.ts",
    "src/providers/AuthProvider.tsx",
    "src/providers/ErrorBoundary.tsx",
    "src/providers/QueryProvider.tsx",
    "src/providers/RouterProvider.tsx",
    "src/providers/ThemeProvider.tsx",
    "src/providers/ToastProvider.tsx",
    "src/services/apiClient.ts",
    "src/services/cartService.ts",
    "src/services/mockServer.ts",
    "src/services/orderService.ts",
    "src/services/paymentService.ts",
    "src/services/productService.ts",
    "src/services/queryClient.ts",
    "src/services/reviewService.ts",
    "src/services/socketService.ts",
    "src/styles/tailwind.css",
    "src/features/cart/CartDrawer.tsx",
    "src/features/cart/CartItem.tsx",
    "src/features/checkout/CheckoutForm.tsx",
    "src/features/orders/OrderTracking.tsx",
    "src/features/orders/OrderList.tsx",
    "src/features/checkout/PaymentForm.tsx",
    "src/features/product/ProductCard.tsx",
    "src/features/product/ProductDetail.tsx",
    "src/features/product/ProductFilters.tsx",
    "src/features/product/ProductList.tsx",
    "src/features/reviews/ReviewForm.tsx",
    "src/features/reviews/ReviewList.tsx",
    "src/features/wishlist/WishlistList.tsx",
    "src/shared/forms/Form.tsx",
    "src/shared/forms/validation.ts",
    "src/shared/components/Avatar.tsx",
    "src/shared/components/Badge.tsx",
    "src/shared/components/Button.tsx",
    "src/shared/components/Footer.tsx",
    "src/shared/components/Icon.tsx",
    "src/shared/components/Input.tsx",
    "src/shared/components/Modal.tsx",
    "src/shared/Layout.tsx",
    "src/shared/components/NavBar.tsx",
    "src/shared/components/ProtectedRoute.tsx",
    "src/shared/components/Select.tsx",
    "src/shared/components/Skeleton.tsx",
    "src/shared/components/Spinner.tsx",
    "src/utils/currency.ts",
    "src/utils/date.ts",
    "src/utils/format.ts",
    "src/pages/CartPage.tsx",
    "src/pages/CheckoutPage.tsx",
    "src/pages/HomePage.tsx",
    "src/pages/LoginPage.tsx",
    "src/pages/NotFoundPage.tsx",
    "src/pages/OrdersDashboard.tsx",
    "src/pages/ProductPage.tsx",
    "src/pages/ProductListingPage.tsx",
    "src/pages/WishlistPage.tsx"
  ],
  "descriptions": [
    "Materialized runtime configuration for the app, including feature flags and development-mode toggles (mock server endpoints, mock users, persistence settings).",
    "i18next initialization and helper hooks for translations. Provides a useTranslation wrapper and language switch helper.",
    "Root application composition: wraps providers (QueryProvider, Auth, Theme, Toast), ErrorBoundary, and RouterProvider. Suspense boundaries for lazy pages are set here.",
    "React Router definitions: lazy-loaded page components, route metadata (protected routes), and route-level data prefetch hooks.",
    "Domain types and API request/response contracts used across the app (Product, CartItem, Order, User, Review, API paginated response types). This is the single source of truth for types between front-end modules.",
    "Lightweight dependency injection container for wiring services in tests or runtime (used by services/mockServer and providers).",
    "A tiny event bus utility for decoupled pub/sub within the app (used by mock websocket emulator and cross-module events).",
    "Hook registry and extension points for third-party plugins or runtime feature toggles. Exposes a registerHook/resolveHook API.",
    "Minimal core utilities used by kernel modules (deepClone, noop, isServer, sleep).",
    "Convenience hook that exposes Auth context functions and typed user state for components to consume.",
    "Encapsulates cart state and mutations using React Query and cartService (get/add/update/remove). Exposes optimistic updates and error handling.",
    "Encapsulates checkout process flow: validation, payment initiation, order creation. Talks to paymentService and orderService.",
    "Hook using React Query's useInfiniteQuery to implement cursor-based or page-based infinite scroll/pagination for product lists.",
    "Reusable hook to persist state to localStorage with serialization and SSR-safe checks. Used by AuthProvider and ThemeProvider.",
    "Hook to fetch product lists with filters and sorting via React Query. Provides loading, error, and refetch interfaces.",
    "Hook to subscribe to socketService messages and optionally trigger React Query cache invalidations or local updates (e.g., inventory changes).",
    "Wishlist hook managing wishlist items persisted in localStorage in dev and optionally backed by an API in prod.",
    "Application entry point. Renders <App /> into the DOM, imports global Tailwind CSS, starts mock server in development, and hydrates React.",
    "Mock cart storage and operations per user for dev; supports get/add/update/remove operations consumed by mockServer.",
    "Mock orders dataset and utilities to create orders and update statuses for dev testing (including order tracking progression).",
    "Development mock product dataset and helper functions to query/filter/sort products. Used by mockServer to respond to /api/products.",
    "Mock review records and utilities to list/submit reviews for products, used by mockServer endpoints.",
    "Mock user records (seller/buyer/admin) used for development authentication flows and role-based testing.",
    "Mock websocket emitter that pushes simulated inventory/price updates and order status changes via the core events bus.",
    "Auth context provider implementing login/logout, token storage (localStorage in dev), role-based access and mock authentication using DEV_MOCK_USERS when enabled.",
    "React Error Boundary component that captures rendering errors and allows retry. Shows a friendly fallback UI and logs errors to console or a mock telemetry.",
    "Context provider that instantiates and supplies the React Query client to the app.",
    "Router provider that sets up react-router's BrowserRouter and provides helper components like ProtectedRoute for role-based route protection.",
    "Theme provider to toggle dark mode and persist preference. Integrates with Tailwind's dark class strategy.",
    "Lightweight toast/notification context used across the app for user feedback on async operations.",
    "Fetch wrapper that centralizes API calls, handles auth token injection, retry/fallback logic, timeouts, and development fallbacks when the mock server is disabled.",
    "Cart API wrappers for retrieving/adding/updating/removing cart items and syncing with local storage in dev.",
    "In-project mock server that registers REST handlers for /api/products, /api/cart, /api/orders, /api/payments, /api/reviews and a WebSocket emulator for realtime updates. Uses the mock data files and supports enabling/disabling via APP_CONFIG.",
    "Order API wrappers for creating orders, fetching order history, and retrieving tracking information.",
    "Payment-related UI-level service: tokenization integration points, mock payment flows in dev, and payment status polling helpers.",
    "Product-related API wrappers: list products with filters and pagination, get product details, and fetch inventory status. Uses apiClient and maps responses to core contracts.",
    "React Query (TanStack Query) client configuration: default cache times, error handling, and devtools setup.",
    "Review and rating service wrappers for listing and creating reviews for products.",
    "WebSocket manager that connects to real WS in production or to the mock websocket emulator in development. Exposes subscribe/unsubscribe helpers and reconnection logic.",
    "Tailwind entry CSS file that imports base, components, utilities and defines dark-mode config. Included by main.tsx.",
    "Slide-over cart drawer used across the site for quick cart preview and checkout CTA. Uses useCart for mutations and optimistic updates.",
    "Individual cart item row with quantity controls, remove, and small product summary.",
    "Checkout form for capturing shipping and billing details, with validation and accessible form controls.",
    "Order tracking component showing current status and timeline for a specific order; supports polling in case backend is slow.",
    "List of past orders for the user with status badges and links to tracking.",
    "Payment UI that integrates with paymentService for tokenization and displays statuses, with a mocked payment flow in development.",
    "Presentational product card showing image, title, price, rating, and add-to-cart/wishlist actions.",
    "Product detail component showing gallery, variants, inventory status, add to cart, reviews summary and review list. Integrates with useProducts/useReview hooks.",
    "Filter panel for categories, price range, ratings, and availability (inventory). Emits filter state to parent via callbacks.",
    "Grid/list component that renders ProductCard for a list of products and supports placeholders/skeletons and infinite scroll hooks.",
    "Review submission form with star rating, validation and optimistic UI for posting reviews in dev.",
    "List component for product reviews and aggregated rating display.",
    "Renders wishlist items with quick add-to-cart and remove interactions.",
    "Form wrapper component that integrates labels, validation error presentation, and keyboard submission handling.",
    "Validation rules and helpers used by forms. Centralizes error messages and schema builders (compatible with React Hook Form or Zod).",
    "Simple avatar component for user representations with fallback initials.",
    "Small UI badge for counts and statuses (inventory low, sale badge).",
    "Accessible, themable button component with variants (primary/secondary/ghost) and loading state. Built with Tailwind and supports ARIA and keyboard focus.",
    "Global footer with links, accessibility info, and language switcher integration.",
    "Small icon wrapper component to normalize sizes and ARIA hidden logic. Exports a few commonly used icons.",
    "Accessible input control with label, error message, and integration helpers for React Hook Form or custom forms.",
    "Accessible modal dialog with focus trap, close on ESC, and aria attributes. Used by ErrorBoundary and other features.",
    "High-level site layout wrapping pages with NavBar, Footer and a main content container. Used by AppRoutes page wrappers.",
    "Top navigation bar with search, cart icon, wishlist, login button, and responsive mobile menu.",
    "Route wrapper that enforces authentication and role-based access; redirects to login when necessary.",
    "Accessible select control (native select styled with Tailwind) and multi-select support.",
    "Skeleton loader components for products and lists to show while data is loading.",
    "Small spinner component used in buttons and global loading UIs.",
    "Currency formatting helpers and helpers for price display and localization-aware formatting.",
    "Date formatting utilities and relative time helpers for order tracking and timestamps.",
    "Formatting utilities (truncate, titleCase, slugify) used in UI components.",
    "Full cart page with list of items (CartItem), totals, coupon UI and proceed-to-checkout CTA.",
    "Checkout page that composes CheckoutForm and PaymentForm and orchestrates the useCheckout hook for finalizing orders.",
    "Landing page with featured product carousel, promotional banners, category links and a product grid using ProductList.",
    "Login page offering mock login in development and standard login UI. Integrates with AuthProvider and handles redirect after login.",
    "404 page shown for unmatched routes with navigation options back to home.",
    "User's orders dashboard with OrderList and links to tracking details. Protected route requiring authentication.",
    "Product detail page that fetches a product by ID and renders ProductDetail (gallery, variants, reviews). Handles loading and error states.",
    "Product listing page that combines ProductFilters and ProductList with support for server-side search parameters and query-state syncing.",
    "Wishlist page showing items saved by the user with quick actions to move to cart or remove."
  ],
  "total_files": 80
}