{
  "architecture": {
    "overview": "A modular, scalable React + TypeScript patient healthcare portal. Core domain contracts and utilities live under src/core. App-level configuration and routing live under src/app. Providers (Auth, Query, Theme, Mock server, WebSocket) bootstrap app-wide behavior. Services encapsulate API calls and business contracts. Shared UI primitives, hooks and utilities are reusable across feature pages. Each feature (appointments, records, prescriptions, telemedicine, dashboard, lab results, insurance, medications) is implemented as a page + small feature components that consume services via React Query. Development mode includes a mock server, mock WebSocket, and persisted mock auth via localStorage so the app runs standalone without backend dependencies.",
    "patterns": [
      "Container/Presentational: pages and providers compose small presentational components under shared/components.",
      "Domain-driven modules: services per domain (appointments, medicalRecords, prescriptions, labResults, insurance, medications).",
      "Provider pattern: AuthProvider / QueryProvider / ThemeProvider / WebsocketProvider to centralize cross-cutting concerns.",
      "React Query for data-fetching and caching, with Suspense and Error Boundaries for loading/failure UX.",
      "Context + hooks: small contexts and custom hooks (useAuth, useSocket, useLocalStorage) for local concerns.",
      "Mock-first development: MockServerProvider and websocketMock to simulate backend and real-time events.",
      "i18n: central i18n initialization with translation JSONs (en / ko)."
    ],
    "data_flow": "UI components call service functions (services/*) which use apiClient to fetch data. React Query manages fetching, caching, retries and invalidation. AuthProvider stores authentication state (token + user) and persists to localStorage in development. WebsocketProvider (or a mock) pushes real-time updates to React Query via events or to local state via useSocket. ErrorBoundary components catch render/runtime exceptions; React Suspense handles async loading states. MockServer intercepts API calls in development and returns mock data. All components use typed contracts from core/contracts.ts for type safety.",
    "folder_structure": "src/\n  core/\n    contracts.ts                # domain types, DTOs and API contracts\n    events.ts                   # lightweight event bus to broadcast domain events\n    hooks.ts                    # hook registry / extension points\n    di.ts                       # simple DI container (optional service overrides for tests)\n    utils.ts                    # small generic helpers\n  app/\n    config.ts                   # runtime materialized configuration (dev flags, routes, endpoints)\n    routes.tsx                  # app route definitions and route meta\n    i18n.ts                     # i18n initialization (react-i18next wrapper)\n  providers/\n    AuthProvider.tsx            # authentication context, token handling, protected routes\n    QueryProvider.tsx           # react-query client + default settings\n    ThemeProvider.tsx           # tailwind dark mode toggle context\n    MockServerProvider.tsx      # starts mock server in development\n    WebsocketProvider.tsx       # WebSocket or mock socket provider\n  services/\n    apiClient.ts                # wrapper around fetch/axios with auth token injection\n    auth.ts                     # auth-related API calls and mock adapters\n    appointments.ts\n    medicalRecords.ts\n    prescriptions.ts\n    labResults.ts\n    insurance.ts\n    medications.ts\n  mock/\n    mockServer.ts               # mock API routing & handlers (mirrors endpoints list)\n    websocketMock.ts            # mock real-time event dispatcher\n    data/\n      users.ts\n      appointments.ts\n      medicalRecords.ts\n      prescriptions.ts\n      labResults.ts\n      insurance.ts\n      medications.ts\n  shared/\n    components/\n      Layout.tsx\n      Header.tsx\n      Sidebar.tsx\n      Button.tsx\n      Input.tsx\n      Card.tsx\n      Modal.tsx\n      Table.tsx\n      Spinner.tsx\n      ErrorFallback.tsx\n      ProtectedRoute.tsx\n    forms/\n      useForm.ts\n      validators.ts\n    hooks/\n      useLocalStorage.ts\n      useAuth.ts\n      useSocket.ts\n      useInterval.ts\n    i18n/\n      en.json\n      ko.json\n    utils/\n      date.ts\n      formatters.ts\n  pages/\n    Auth/\n      LoginPage.tsx\n      Logout.tsx\n    Dashboard/\n      DashboardPage.tsx\n    Appointments/\n      AppointmentsPage.tsx\n      AppointmentDetail.tsx\n    MedicalRecords/\n      RecordsPage.tsx\n    Prescriptions/\n      PrescriptionsPage.tsx\n    Telemedicine/\n      TelemedicinePage.tsx\n    LabResults/\n      LabResultsPage.tsx\n    Insurance/\n      InsurancePage.tsx\n    Medications/\n      MedicationsPage.tsx\n    NotFound.tsx\n  styles/\n    index.css                   # Tailwind entry and global styles\n  App.tsx\n  main.tsx\n\nSupport files (root):\n  tailwind.config.cjs\n  postcss.config.cjs\n  tsconfig.json\n",
    "tech_stack": [
      "React 18+ (functional components, Suspense, Error Boundaries, Context API)",
      "TypeScript",
      "React Router (v6) for routing",
      "React Query (TanStack Query) for data fetching and caching",
      "Tailwind CSS for styling with dark mode support",
      "i18next / react-i18next for internationalization (English + Korean JSONs)",
      "Mock Service Worker-style mock server (in-project simple mock server)",
      "WebSocket mock for real-time updates",
      "LocalStorage for local persistence in development",
      "Jest/React Testing Library (recommended but not included here by code list)"
    ]
  },
  "kernel_specs": {
    "overview": "The Core Kernel provides a small, well-typed foundation for the entire application. It centralizes domain contracts, runtime configuration, a typed event bus, an extensible hook registry, a tiny dependency-injection container, and generic utilities. All feature modules, providers and services should import types and primitives from these files (use @/core/* imports). These files are minimal, focused, and immediately usable in production and development workflows (including mock-mode)."
  },
  "sections": [
    {
      "id": "app-config",
      "file_path": "src/app/config.ts",
      "description": "Materialized runtime config: feature flags (enable_mock_data), API base URL, mock endpoints list, dev users and persistence flags (use_localstorage_persistence).",
      "dependencies": [
        "src/core/contracts.ts"
      ],
      "exports": [
        "AppConfig",
        "appConfig",
        "DEV_MOCK_ENDPOINTS"
      ],
      "priority": 1,
      "purpose": "Materialized runtime configuration. Exposes a typed AppConfig, computed flags, feature toggles and development mock users & endpoints. This file is the single source for runtime flags and should be referenced by providers and the mock server.",
      "content": "/* src/app/config.ts\n   Runtime configuration. Keep non-sensitive defaults here. For production, the build can replace\n'this file' or environment variables injected. For this project we materialize the provided\nconfiguration for development-first behavior (mock mode enabled by default in dev).\n*/\n\nimport { Role, User } from '@/core/contracts';\n\nexport interface AppConfig {\n  appName: string;\n  apiBaseUrl: string; // used by apiClient in production\n  features: string[]; // feature toggles list\n  env: 'development' | 'production' | 'test';\n  enableMockData: boolean;\n  disableWebsocketInDev: boolean;\n  useLocalStoragePersistence: boolean;\n  mockApiEndpoints: string[];\n  devMockUsers: User[];\n}\n\n// Materialized defaults based on provided project configuration\nconst DEFAULT_MOCK_USERS: User[] = [\n  {\n    id: 'u-doctor-1',\n    email: 'doctor@hospital.com',\n    name: 'Dr. Alice Kim',\n    role: Role.DOCTOR,\n    avatarUrl: null,\n    createdAt: new Date().toISOString()\n  },\n  {\n    id: 'u-patient-1',\n    email: 'patient@email.com',\n    name: 'John Patient',\n    role: Role.PATIENT,\n    avatarUrl: null,\n    createdAt: new Date().toISOString()\n  },\n  {\n    id: 'u-nurse-1',\n    email: 'nurse@hospital.com',\n    name: 'Nora Nurse',\n    role: Role.NURSE,\n    avatarUrl: null,\n    createdAt: new Date().toISOString()\n  }\n];\n\nexport const DEV_MOCK_ENDPOINTS = [\n  '/api/appointments',\n  '/api/medical-records',\n  '/api/prescriptions',\n  '/api/lab-results',\n  '/api/insurance',\n  '/api/medications'\n] as const;\n\nexport const appConfig: AppConfig = {\n  appName: 'Healthcare Portal',\n  apiBaseUrl: typeof window !== 'undefined' ? window.location.origin + '/api' : 'http://localhost:3000/api',\n  features: [\n    'appointment scheduling',\n    'medical records viewer',\n    'prescription management',\n    'telemedicine interface',\n    'health metrics dashboard',\n    'lab results display',\n    'insurance claim tracker',\n    'medication reminders'\n  ],\n  env: (process.env.NODE_ENV as AppConfig['env']) || 'development',\n  enableMockData: true, // development-first default; providers will honor computed flags\n  disableWebsocketInDev: true,\n  useLocalStoragePersistence: true,\n  mockApiEndpoints: DEV_MOCK_ENDPOINTS as unknown as string[],\n  devMockUsers: DEFAULT_MOCK_USERS\n};\n\n/* Computed helpers */\nexport const isDevelopment = appConfig.env === 'development';\nexport const shouldUseMockData = isDevelopment && appConfig.enableMockData;\n\n/* Example usage:\nimport { appConfig, shouldUseMockData } from '@/app/config';\nif (shouldUseMockData) { startMockServer(); }\n*/"
    },
    {
      "id": "app-i18n",
      "file_path": "src/app/i18n.ts",
      "description": "i18n initialization wrapper using react-i18next; loads local JSON translations (en, ko) and exposes translation utilities.",
      "dependencies": [
        "src/shared/i18n/en.json",
        "src/shared/i18n/ko.json"
      ],
      "exports": [
        "initI18n"
      ],
      "priority": 1
    },
    {
      "id": "app-root",
      "file_path": "src/App.tsx",
      "description": "Top-level app component: Router wrapper, Error Boundary, Suspense boundary, and route outlet. Applies global layout and fallback UIs.",
      "dependencies": [
        "src/app/routes.tsx",
        "src/shared/components/ErrorFallback.tsx",
        "src/shared/components/Spinner.tsx"
      ],
      "exports": [
        "App"
      ],
      "priority": 1
    },
    {
      "id": "app-routes",
      "file_path": "src/app/routes.tsx",
      "description": "React Router route definitions for public and protected routes; uses ProtectedRoute wrapper. Exports route components and route metadata for navigation.",
      "dependencies": [
        "src/pages/Auth/LoginPage.tsx",
        "src/pages/Auth/Logout.tsx",
        "src/pages/Dashboard/DashboardPage.tsx",
        "src/pages/Appointments/AppointmentsPage.tsx",
        "src/pages/Appointments/AppointmentDetail.tsx",
        "src/pages/MedicalRecords/RecordsPage.tsx",
        "src/pages/Prescriptions/PrescriptionsPage.tsx",
        "src/pages/Telemedicine/TelemedicinePage.tsx",
        "src/pages/LabResults/LabResultsPage.tsx",
        "src/pages/Insurance/InsurancePage.tsx"
      ],
      "exports": [
        "AppRoutes",
        "publicRoutes",
        "protectedRoutes"
      ],
      "priority": 1
    },
    {
      "id": "core-contracts",
      "file_path": "src/core/contracts.ts",
      "description": "Domain types, DTOs and API contracts shared across services and UI (User, Appointment, MedicalRecord, Prescription, LabResult, InsuranceClaim, Medication, Pagination, API error shapes).",
      "dependencies": [],
      "exports": [
        "User",
        "AuthToken",
        "Role",
        "Appointment",
        "MedicalRecord",
        "Prescription",
        "LabResult",
        "InsuranceClaim",
        "Medication",
        "ApiResponse",
        "PaginationParams",
        "ApiError"
      ],
      "priority": 1,
      "purpose": "Domain types, DTOs and API contracts shared across services and UI. Provides a single source of truth for domain models, API shapes and WS events.",
      "content": "/* src/core/contracts.ts\n   Central domain contracts used across services and UI.\n   Keep this file small and stable; prefer additive changes.\n*/\n\nexport enum Role {\n  PATIENT = 'patient',\n  DOCTOR = 'doctor',\n  NURSE = 'nurse',\n  ADMIN = 'admin'\n}\n\nexport type AuthToken = string & { __brand?: 'AuthToken' };\n\nexport interface User {\n  id: string;\n  email: string;\n  name: string;\n  role: Role;\n  avatarUrl?: string | null;\n  createdAt: string; // ISO\n}\n\nexport interface Patient extends User {\n  role: Role.PATIENT;\n  dateOfBirth?: string; // ISO\n  medicalRecordNumber?: string;\n}\n\nexport interface Doctor extends User {\n  role: Role.DOCTOR;\n  specialty?: string;\n  licenseNumber?: string;\n}\n\nexport interface Nurse extends User {\n  role: Role.NURSE;\n  department?: string;\n}\n\nexport type AnyUser = Patient | Doctor | Nurse | User;\n\nexport enum AppointmentStatus {\n  SCHEDULED = 'scheduled',\n  COMPLETED = 'completed',\n  CANCELLED = 'cancelled',\n  NO_SHOW = 'no_show',\n  RESCHEDULED = 'rescheduled'\n}\n\nexport interface Appointment {\n  id: string;\n  patientId: string;\n  providerId: string; // doctor or nurse\n  startAt: string; // ISO\n  endAt: string; // ISO\n  status: AppointmentStatus;\n  reason?: string;\n  location?: string | { type: 'virtual' | 'in-person'; details?: string };\n  createdAt: string;\n  updatedAt?: string;\n}\n\nexport interface MedicalRecord {\n  id: string;\n  patientId: string;\n  title: string;\n  notes?: string;\n  attachments?: Array<{ id: string; name: string; url?: string }>; // url may be absent in mock\n  createdAt: string;\n  reviewedBy?: string; // provider id\n}\n\nexport enum PrescriptionStatus {\n  ACTIVE = 'active',\n  EXPIRED = 'expired',\n  CANCELLED = 'cancelled',\n  REFILLED = 'refilled'\n}\n\nexport interface Prescription {\n  id: string;\n  patientId: string;\n  prescriberId: string;\n  medicationId: string;\n  dosage: string;\n  frequency?: string;\n  durationDays?: number;\n  status: PrescriptionStatus;\n  issuedAt: string;\n  expiresAt?: string;\n}\n\nexport enum LabResultSeverity {\n  NORMAL = 'normal',\n  WARNING = 'warning',\n  CRITICAL = 'critical'\n}\n\nexport interface LabResult {\n  id: string;\n  patientId: string;\n  testName: string;\n  value: string | number;\n  unit?: string;\n  referenceRange?: string;\n  severity?: LabResultSeverity;\n  collectedAt: string;\n  reportedAt?: string;\n}\n\nexport enum InsuranceStatus {\n  PENDING = 'pending',\n  APPROVED = 'approved',\n  DENIED = 'denied',\n  PAID = 'paid'\n}\n\nexport interface InsuranceClaim {\n  id: string;\n  patientId: string;\n  providerId?: string;\n  amount: number;\n  status: InsuranceStatus;\n  submittedAt: string;\n  updatedAt?: string;\n  notes?: string;\n}\n\nexport interface Medication {\n  id: string;\n  name: string;\n  doseForm?: string; // e.g., 'tablet', 'syrup'\n  strength?: string; // e.g., '10mg'\n  instructions?: string;\n  rxRequired?: boolean;\n}\n\nexport interface PaginationParams {\n  page?: number; // 1-based\n  pageSize?: number;\n  q?: string; // search query\n  sortBy?: string;\n  sortDir?: 'asc' | 'desc';\n}\n\nexport interface ApiResult<T> {\n  data: T;\n  meta?: Record<string, unknown>;\n}\n\nexport interface PaginatedResponse<T> {\n  items: T[];\n  total: number;\n  page: number;\n  pageSize: number;\n}\n\nexport interface ApiError {\n  code: string; // machine code\n  message: string; // human friendly\n  status?: number; // HTTP status\n  details?: Record<string, unknown> | string;\n}\n\n/* Minimal WebSocket / event types used by providers and the mock websocket\n   Real app may expand payloads. Having stable event keys helps TypeScript\n   across the app when subscribing to events.\n*/\nexport type WebsocketEvent =\n  | { type: 'appointment.updated'; payload: Appointment }\n  | { type: 'labresult.created'; payload: LabResult }\n  | { type: 'prescription.refilled'; payload: Prescription }\n  | { type: 'medication.reminder'; payload: { medicationId: string; userId: string; remindAt: string } }\n  | { type: 'insurance.updated'; payload: InsuranceClaim };\n\nexport type WebsocketEventMap = {\n  'appointment.updated': Appointment;\n  'labresult.created': LabResult;\n  'prescription.refilled': Prescription;\n  'medication.reminder': { medicationId: string; userId: string; remindAt: string };\n  'insurance.updated': InsuranceClaim;\n};\n\n/* Common UI state types used by shared components */\nexport type LoadingState = 'idle' | 'loading' | 'success' | 'error';\n\nexport interface FormState<FieldValues extends Record<string, any> = Record<string, any>> {\n  values: FieldValues;\n  touched: Partial<Record<keyof FieldValues, boolean>>;\n  errors: Partial<Record<keyof FieldValues, string>>;\n  isSubmitting: boolean;\n}\n\n/* Example usage:\nimport { Appointment, User, ApiResult } from '@/core/contracts';\n\nfunction handleAppointment(resp: ApiResult<Appointment>) {\n  const appointment = resp.data;\n  console.log(appointment.startAt);\n}\n*/"
    },
    {
      "id": "core-di",
      "file_path": "src/core/di.ts",
      "description": "Simple dependency injection container to allow swapping implementations (e.g., for tests or mock server) \u2014 register/get services by token.",
      "dependencies": [
        "src/core/contracts.ts"
      ],
      "exports": [
        "DIContainer",
        "registerService",
        "getService"
      ],
      "priority": 1,
      "purpose": "A minimal, type-safe dependency injection container. It lets parts of the app (tests or mock providers) register alternate implementations for well-known tokens (ApiClient, AuthService, StorageService, WebsocketService). Prefer passing dependencies explicitly where possible; the DIContainer is a pragmatic escape hatch for app-wide swaps in tests or dev.",
      "content": "/* src/core/di.ts\n   Tiny type-safe DI container. Tokens are unique symbols with associated types.\n   Usage:\n     const AuthServiceToken = token<AuthService>('AuthService');\n     registerService(AuthServiceToken, new MockAuthService());\n     const auth = getService(AuthServiceToken);\n*/\n\nexport type Token<T> = symbol & { __type?: T };\n\nexport const token = <T = unknown>(description = 'token'): Token<T> => Symbol(description) as Token<T>;\n\nclass DIContainer {\n  private map = new Map<symbol, unknown>();\n\n  register<T>(t: Token<T>, impl: T): void {\n    this.map.set(t as symbol, impl);\n  }\n\n  resolve<T>(t: Token<T>): T {\n    if (!this.map.has(t as symbol)) {\n      throw new Error(`DIContainer: no binding for token ${String(t)}`);\n    }\n    return this.map.get(t as symbol) as T;\n  }\n\n  has(t: Token<any>): boolean {\n    return this.map.has(t as symbol);\n  }\n\n  clear(): void {\n    this.map.clear();\n  }\n}\n\nexport const di = new DIContainer();\n\n/* Predefined tokens for common services. Types are intentionally minimal so the kernel does not\n   depend on service implementations. Services can extend these interfaces.\n*/\n\nexport interface ApiClientLike {\n  request<T = unknown>(input: RequestInfo, init?: RequestInit): Promise<T>;\n}\n\nexport interface AuthServiceLike {\n  login(email: string, password: string): Promise<{ token: string; user: { id: string } }>;\n  logout(): Promise<void>;\n  getCurrentUser(): Promise<{ id: string } | null>;\n}\n\nexport interface StorageServiceLike {\n  get<T = unknown>(key: string): Promise<T | null> | T | null;\n  set<T = unknown>(key: string, value: T): Promise<void> | void;\n  remove(key: string): Promise<void> | void;\n}\n\nexport interface WebsocketServiceLike {\n  connect(url: string): Promise<void> | void;\n  disconnect(): Promise<void> | void;\n  send(event: unknown): void;\n}\n\nexport const ApiClientToken = token<ApiClientLike>('ApiClient');\nexport const AuthServiceToken = token<AuthServiceLike>('AuthService');\nexport const StorageServiceToken = token<StorageServiceLike>('StorageService');\nexport const WebsocketServiceToken = token<WebsocketServiceLike>('WebsocketService');\n\n/* Register and resolve helpers */\nexport const registerService = <T>(t: Token<T>, impl: T) => di.register(t, impl);\nexport const getService = <T>(t: Token<T>): T => di.resolve(t);\n\n/* Example usage:\nimport { ApiClientToken, registerService, getService } from '@/core/di';\n\n// In test setup\nregisterService(ApiClientToken, { request: async (input) => ({ data: 'ok' }) });\n\n// In a service file\nconst client = getService(ApiClientToken);\nawait client.request('/api/appointments');\n*/"
    },
    {
      "id": "core-events",
      "file_path": "src/core/events.ts",
      "description": "Tiny event bus used for broadcasting domain events (e.g., appointmentUpdated, labResultArrived) across providers and hooks.",
      "dependencies": [
        "src/core/contracts.ts"
      ],
      "exports": [
        "eventBus",
        "EventTypes",
        "subscribe",
        "publish",
        "unsubscribe"
      ],
      "priority": 1,
      "purpose": "A tiny, strongly-typed event bus used for broadcasting domain events across providers and features. Useful for integrating WebSocket messages with React Query or local state.",
      "content": "/* src/core/events.ts\n   Typed EventBus with both sync and async handler support.\n   Use it to decouple providers from consumers (e.g., WebsocketProvider publishes, pages subscribe).\n*/\n\nimport {\n  Appointment,\n  LabResult,\n  Prescription,\n  InsuranceClaim,\n  WebsocketEventMap\n} from '@/core/contracts';\n\n/* Define the event names used across the app. Keep this narrow and stable. */\nexport type EventTypes =\n  | 'appointment.updated'\n  | 'appointment.created'\n  | 'appointment.deleted'\n  | 'labresult.created'\n  | 'prescription.refilled'\n  | 'medication.reminder'\n  | 'insurance.updated'\n  | 'auth.login'\n  | 'auth.logout';\n\n/* Map event names to payload types for compile-time safety. Extend as needed. */\nexport interface EventPayloadMap {\n  'appointment.updated': Appointment;\n  'appointment.created': Appointment;\n  'appointment.deleted': { id: string };\n  'labresult.created': LabResult;\n  'prescription.refilled': Prescription;\n  'medication.reminder': { medicationId: string; userId: string; remindAt: string };\n  'insurance.updated': InsuranceClaim;\n  'auth.login': { userId: string };\n  'auth.logout': { userId?: string };\n}\n\ntype Handler<K extends EventTypes> = (payload: EventPayloadMap[K]) => void | Promise<void>;\n\nclass EventBus {\n  private handlers: Map<EventTypes, Set<Handler<any>>> = new Map();\n\n  on<K extends EventTypes>(event: K, handler: Handler<K>): () => void {\n    const set = this.handlers.get(event) ?? new Set();\n    set.add(handler as Handler<any>);\n    this.handlers.set(event, set);\n\n    // return unsubscribe\n    return () => {\n      set.delete(handler as Handler<any>);\n      if (set.size === 0) this.handlers.delete(event);\n    };\n  }\n\n  off<K extends EventTypes>(event: K, handler: Handler<K>): void {\n    const set = this.handlers.get(event);\n    if (!set) return;\n    set.delete(handler as Handler<any>);\n    if (set.size === 0) this.handlers.delete(event);\n  }\n\n  async emit<K extends EventTypes>(event: K, payload: EventPayloadMap[K]): Promise<void> {\n    const set = this.handlers.get(event);\n    if (!set || set.size === 0) return;\n\n    // Run handlers and await any returned Promises; do not short-circuit\n    const promises: Array<void | Promise<void>> = [];\n    for (const h of Array.from(set)) {\n      try {\n        const result = (h as Handler<K>)(payload);\n        promises.push(result as Promise<void> | void);\n      } catch (err) {\n        // swallow sync errors but log for diagnostics\n        // In production integrate with a structured logger\n        // eslint-disable-next-line no-console\n        console.error('[EventBus] handler sync error', event, err);\n      }\n    }\n    await Promise.all(promises.map(p => Promise.resolve(p)));\n  }\n\n  clear(): void {\n    this.handlers.clear();\n  }\n}\n\nexport const eventBus = new EventBus();\n\n/* Convenience helpers for non-class-based code */\nexport const subscribe = <K extends EventTypes>(event: K, handler: Handler<K>): () => void => eventBus.on(event, handler);\nexport const unsubscribe = <K extends EventTypes>(event: K, handler: Handler<K>): void => eventBus.off(event, handler);\nexport const publish = async <K extends EventTypes>(event: K, payload: EventPayloadMap[K]): Promise<void> => eventBus.emit(event, payload);\n\n/* Example usage:\nimport { subscribe, publish } from '@/core/events';\n\nconst off = subscribe('labresult.created', async (lab) => { console.log('new lab', lab); });\nawait publish('labresult.created', labResultInstance);\n// later to unsubscribe: off();\n*/"
    },
    {
      "id": "core-hooks-registry",
      "file_path": "src/core/hooks.ts",
      "description": "Extension points and hook registry (named hooks) used by features/providers to register behavior (e.g., onAuthChange).",
      "dependencies": [
        "src/core/events.ts"
      ],
      "exports": [
        "registerHook",
        "invokeHook",
        "HookName"
      ],
      "priority": 1,
      "purpose": "Hook registry for extension points. Providers and features register small callbacks (hooks) for cross-cutting behavior: logging, instrumentation, request lifecycle and auth changes. The registry supports ordering and both sync & async handlers.",
      "content": "/* src/core/hooks.ts\n   HookRegistry enables named extension points across the application.\n   Keep hook side-effects idempotent; hooks should be small.\n*/\n\nimport { ApiError } from '@/core/contracts';\n\nexport type HookName =\n  | 'beforeApiRequest'\n  | 'afterApiResponse'\n  | 'onLogin'\n  | 'onLogout'\n  | 'onRouteChange';\n\nexport interface BeforeApiRequestContext {\n  url: string;\n  method: string;\n  headers?: Record<string, string>;\n  body?: unknown;\n}\n\nexport interface AfterApiResponseContext<T = unknown> {\n  url: string;\n  method: string;\n  status: number;\n  data?: T;\n  error?: ApiError | null;\n}\n\nexport interface OnAuthContext {\n  userId?: string;\n}\n\nexport interface OnRouteChangeContext {\n  from?: string;\n  to: string;\n}\n\ntype HookHandler<T> = (ctx: T) => void | Promise<void>;\n\nclass HookRegistry {\n  private registry: Map<HookName, Set<HookHandler<any>>> = new Map();\n\n  register<T>(name: HookName, handler: HookHandler<T>): () => void {\n    const set = this.registry.get(name) ?? new Set();\n    set.add(handler as HookHandler<any>);\n    this.registry.set(name, set);\n    return () => set.delete(handler as HookHandler<any>);\n  }\n\n  async invoke<T>(name: HookName, ctx: T): Promise<void> {\n    const set = this.registry.get(name);\n    if (!set) return;\n    const tasks: Array<void | Promise<void>> = [];\n    for (const h of Array.from(set)) {\n      try {\n        tasks.push((h as HookHandler<T>)(ctx));\n      } catch (err) {\n        // swallow single handler errors but log\n        // eslint-disable-next-line no-console\n        console.error('[HookRegistry] handler threw', name, err);\n      }\n    }\n    await Promise.all(tasks.map(p => Promise.resolve(p)));\n  }\n\n  clear(name?: HookName) {\n    if (name) this.registry.delete(name);\n    else this.registry.clear();\n  }\n}\n\nconst registry = new HookRegistry();\n\n/* Public helpers */\nexport const registerHook = <T>(name: HookName, handler: HookHandler<T>): (() => void) => registry.register(name, handler as HookHandler<any>);\nexport const invokeHook = async <T>(name: HookName, ctx: T): Promise<void> => registry.invoke(name, ctx);\n\n/* Example common hook usage:\n\nimport { registerHook, invokeHook } from '@/core/hooks';\n\n// Register instrumentation for all API requests\nconst off = registerHook('beforeApiRequest', (ctx: BeforeApiRequestContext) => {\n  console.log('[API] request', ctx.method, ctx.url);\n});\n\n// In api client, call invokeHook('beforeApiRequest', { url, method, headers, body });\n*/"
    },
    {
      "id": "core-utils",
      "file_path": "src/core/utils.ts",
      "description": "Small generic utilities used across the app (safeJsonParse, sleep, isDevelopment).",
      "dependencies": [
        "src/app/config.ts"
      ],
      "exports": [
        "safeJsonParse",
        "sleep",
        "isDev"
      ],
      "priority": 1,
      "purpose": "Small, well-tested utilities used across the app: safe json parse, sleep, development detection and small helpers. Keep utilities generic and dependency-free where possible.",
      "content": "/* src/core/utils.ts\n   Generic utilities used throughout the application.\n*/\n\nimport { appConfig } from '@/app/config';\n\nexport const isDev = appConfig.env === 'development';\n\nexport function safeJsonParse<T = unknown>(input: string | null | undefined, fallback: T): T {\n  if (!input) return fallback;\n  try {\n    return JSON.parse(input) as T;\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.warn('[safeJsonParse] parse failed, returning fallback', err);\n    return fallback;\n  }\n}\n\nexport const sleep = (ms: number) => new Promise<void>(res => setTimeout(res, ms));\n\nexport function uid(prefix = ''): string {\n  // small, collision-resistant id for mock data and temporary keys\n  return prefix + Math.random().toString(36).slice(2, 9) + Date.now().toString(36).slice(-4);\n}\n\nexport function debugLog(...args: any[]) {\n  if (isDev) {\n    // eslint-disable-next-line no-console\n    console.debug('[debug]', ...args);\n  }\n}\n\n/* Example usage:\nimport { safeJsonParse, sleep, isDev } from '@/core/utils';\n\nif (isDev) debugLog('running in development');\nawait sleep(200);\n*/"
    },
    {
      "id": "main-entry",
      "file_path": "src/main.tsx",
      "description": "App bootstrap: renders App into root, wraps providers (MockServerProvider, QueryProvider, AuthProvider, ThemeProvider, WebsocketProvider) and initializes i18n.",
      "dependencies": [
        "src/App.tsx",
        "src/providers/MockServerProvider.tsx",
        "src/providers/QueryProvider.tsx",
        "src/providers/AuthProvider.tsx",
        "src/providers/ThemeProvider.tsx",
        "src/providers/WebsocketProvider.tsx",
        "src/app/i18n.ts",
        "src/styles/index.css"
      ],
      "exports": [
        "bootstrapApp"
      ],
      "priority": 1
    },
    {
      "id": "mock-data-appointments",
      "file_path": "src/mock/data/appointments.ts",
      "description": "Mock appointment dataset and factory helpers for appointments endpoints.",
      "dependencies": [
        "src/core/contracts.ts"
      ],
      "exports": [
        "mockAppointments",
        "getAppointmentById",
        "createMockAppointment",
        "updateMockAppointment"
      ],
      "priority": 1
    },
    {
      "id": "mock-data-insurance",
      "file_path": "src/mock/data/insurance.ts",
      "description": "Mock insurance claims dataset and helpers.",
      "dependencies": [
        "src/core/contracts.ts"
      ],
      "exports": [
        "mockInsuranceClaims",
        "getInsuranceClaimById"
      ],
      "priority": 1
    },
    {
      "id": "mock-data-lab-results",
      "file_path": "src/mock/data/labResults.ts",
      "description": "Mock lab results data and helper to generate new results for real-time simulation.",
      "dependencies": [
        "src/core/contracts.ts"
      ],
      "exports": [
        "mockLabResults",
        "getLabResultById",
        "generateLabResult"
      ],
      "priority": 1
    },
    {
      "id": "mock-data-medical-records",
      "file_path": "src/mock/data/medicalRecords.ts",
      "description": "Mock medical records dataset and helpers.",
      "dependencies": [
        "src/core/contracts.ts"
      ],
      "exports": [
        "mockMedicalRecords",
        "getMedicalRecordById"
      ],
      "priority": 1
    },
    {
      "id": "mock-data-medications",
      "file_path": "src/mock/data/medications.ts",
      "description": "Mock medication list and reminder metadata.",
      "dependencies": [
        "src/core/contracts.ts"
      ],
      "exports": [
        "mockMedications",
        "getMedicationById",
        "scheduleMedicationReminderMock"
      ],
      "priority": 1
    },
    {
      "id": "mock-data-prescriptions",
      "file_path": "src/mock/data/prescriptions.ts",
      "description": "Mock prescriptions data and helpers.",
      "dependencies": [
        "src/core/contracts.ts"
      ],
      "exports": [
        "mockPrescriptions",
        "getPrescriptionById",
        "refillPrescriptionMock"
      ],
      "priority": 1
    },
    {
      "id": "mock-data-users",
      "file_path": "src/mock/data/users.ts",
      "description": "Mock users used for development mode authentication (doctors, patients, nurses).",
      "dependencies": [
        "src/core/contracts.ts"
      ],
      "exports": [
        "mockUsers",
        "findMockUserByEmail"
      ],
      "priority": 1
    },
    {
      "id": "mock-server",
      "file_path": "src/mock/mockServer.ts",
      "description": "Lightweight mock API server that intercepts fetch requests in development. Provides handlers for all endpoints defined in app config and returns realistic mock responses from /mock/data.",
      "dependencies": [
        "src/app/config.ts",
        "src/mock/data/users.ts",
        "src/mock/data/appointments.ts",
        "src/mock/data/medicalRecords.ts",
        "src/mock/data/prescriptions.ts",
        "src/mock/data/labResults.ts",
        "src/mock/data/insurance.ts",
        "src/mock/data/medications.ts",
        "src/core/events.ts"
      ],
      "exports": [
        "startMockServer",
        "stopMockServer",
        "mockFetchHandler"
      ],
      "priority": 1
    },
    {
      "id": "mock-websocket",
      "file_path": "src/mock/websocketMock.ts",
      "description": "Simulates WebSocket events in development: emits appointment changes, new lab results, medication reminders. Integrates with core/events to deliver updates to app code.",
      "dependencies": [
        "src/core/events.ts",
        "src/mock/data/labResults.ts",
        "src/app/config.ts"
      ],
      "exports": [
        "startWebsocketMock",
        "stopWebsocketMock",
        "emitMockEvent"
      ],
      "priority": 1
    },
    {
      "id": "provider-auth",
      "file_path": "src/providers/AuthProvider.tsx",
      "description": "Authentication context and hook provider. Handles login/logout, token management, role-based access, protected route wrapper and persistence to localStorage when enabled for development mode.",
      "dependencies": [
        "src/core/contracts.ts",
        "src/services/auth.ts",
        "src/shared/hooks/useLocalStorage.ts",
        "src/app/config.ts",
        "src/core/events.ts"
      ],
      "exports": [
        "AuthProvider",
        "useAuthContext",
        "withAuth"
      ],
      "priority": 1
    },
    {
      "id": "provider-mock-server",
      "file_path": "src/providers/MockServerProvider.tsx",
      "description": "Starts the in-app mock server when appConfig.enable_mock_data is true and ensures it is registered before app renders. Injects mock handlers for APIs defined in app config.",
      "dependencies": [
        "src/mock/mockServer.ts",
        "src/app/config.ts",
        "src/core/events.ts"
      ],
      "exports": [
        "MockServerProvider"
      ],
      "priority": 1
    },
    {
      "id": "provider-query",
      "file_path": "src/providers/QueryProvider.tsx",
      "description": "Sets up React Query QueryClient with sensible defaults (staleTime, retry, queryCache) and wraps children with QueryClientProvider.",
      "dependencies": [
        "src/app/config.ts"
      ],
      "exports": [
        "ReactQueryProvider"
      ],
      "priority": 1
    },
    {
      "id": "provider-theme",
      "file_path": "src/providers/ThemeProvider.tsx",
      "description": "Theme context that toggles light/dark mode and persists preference to localStorage. Integrates Tailwind dark class on document.",
      "dependencies": [
        "src/shared/hooks/useLocalStorage.ts"
      ],
      "exports": [
        "ThemeProvider",
        "useTheme"
      ],
      "priority": 1
    },
    {
      "id": "provider-websocket",
      "file_path": "src/providers/WebsocketProvider.tsx",
      "description": "Abstraction for WebSocket connection; in development it uses websocketMock to simulate real-time updates. Exposes a context to subscribe to domain events.",
      "dependencies": [
        "src/mock/websocketMock.ts",
        "src/core/events.ts",
        "src/app/config.ts"
      ],
      "exports": [
        "WebsocketProvider",
        "useSocketContext"
      ],
      "priority": 1
    },
    {
      "id": "services-api-client",
      "file_path": "src/services/apiClient.ts",
      "description": "Centralized HTTP client (fetch wrapper) that injects auth tokens, handles errors, applies timeouts and maps API error shapes to ApiError defined in core/contracts.",
      "dependencies": [
        "src/core/contracts.ts",
        "src/app/config.ts",
        "src/core/utils.ts"
      ],
      "exports": [
        "apiClient",
        "getJson",
        "postJson",
        "putJson",
        "deleteJson"
      ],
      "priority": 1
    },
    {
      "id": "services-appointments",
      "file_path": "src/services/appointments.ts",
      "description": "Service functions to list, get, create, update and cancel appointments. Designed to be used with React Query.",
      "dependencies": [
        "src/services/apiClient.ts",
        "src/core/contracts.ts",
        "src/mock/data/appointments.ts",
        "src/app/config.ts"
      ],
      "exports": [
        "fetchAppointments",
        "fetchAppointment",
        "createAppointment",
        "updateAppointment",
        "cancelAppointment"
      ],
      "priority": 1
    },
    {
      "id": "services-auth",
      "file_path": "src/services/auth.ts",
      "description": "Auth service: login, logout, fetch current user. Uses apiClient in production or the mock adapter in dev. Provides token and user shapes.",
      "dependencies": [
        "src/services/apiClient.ts",
        "src/mock/data/users.ts",
        "src/core/contracts.ts",
        "src/app/config.ts"
      ],
      "exports": [
        "login",
        "logout",
        "getCurrentUser",
        "AuthService"
      ],
      "priority": 1
    },
    {
      "id": "services-insurance",
      "file_path": "src/services/insurance.ts",
      "description": "Service to query insurance claims and their statuses.",
      "dependencies": [
        "src/services/apiClient.ts",
        "src/core/contracts.ts",
        "src/mock/data/insurance.ts",
        "src/app/config.ts"
      ],
      "exports": [
        "fetchInsuranceClaims",
        "fetchInsuranceClaimById"
      ],
      "priority": 1
    },
    {
      "id": "services-lab-results",
      "file_path": "src/services/labResults.ts",
      "description": "Service functions to fetch and stream lab results; supports real-time updates via events or sockets.",
      "dependencies": [
        "src/services/apiClient.ts",
        "src/core/contracts.ts",
        "src/mock/data/labResults.ts",
        "src/core/events.ts",
        "src/app/config.ts"
      ],
      "exports": [
        "fetchLabResults",
        "fetchLabResultById",
        "subscribeToLabResults"
      ],
      "priority": 1
    },
    {
      "id": "services-medical-records",
      "file_path": "src/services/medicalRecords.ts",
      "description": "Service functions to fetch patient medical records, with pagination and metadata.",
      "dependencies": [
        "src/services/apiClient.ts",
        "src/core/contracts.ts",
        "src/mock/data/medicalRecords.ts",
        "src/app/config.ts"
      ],
      "exports": [
        "fetchMedicalRecords",
        "fetchMedicalRecordById"
      ],
      "priority": 1
    },
    {
      "id": "services-medications",
      "file_path": "src/services/medications.ts",
      "description": "Service functions for medication list, reminders, and scheduling (client-managed reminders).",
      "dependencies": [
        "src/services/apiClient.ts",
        "src/core/contracts.ts",
        "src/mock/data/medications.ts",
        "src/app/config.ts"
      ],
      "exports": [
        "fetchMedications",
        "setMedicationReminder",
        "clearMedicationReminder"
      ],
      "priority": 1
    },
    {
      "id": "services-prescriptions",
      "file_path": "src/services/prescriptions.ts",
      "description": "Service functions to manage prescriptions (list, refill, cancel).",
      "dependencies": [
        "src/services/apiClient.ts",
        "src/core/contracts.ts",
        "src/mock/data/prescriptions.ts",
        "src/app/config.ts"
      ],
      "exports": [
        "fetchPrescriptions",
        "createPrescription",
        "refillPrescription",
        "cancelPrescription"
      ],
      "priority": 1
    },
    {
      "id": "i18n-en",
      "file_path": "src/shared/i18n/en.json",
      "description": "English translations for UI labels, validation messages and error strings.",
      "dependencies": [],
      "exports": [
        "en"
      ],
      "priority": 2
    },
    {
      "id": "i18n-ko",
      "file_path": "src/shared/i18n/ko.json",
      "description": "Korean translations for UI labels, validation messages and error strings (Korean support requirement).",
      "dependencies": [],
      "exports": [
        "ko"
      ],
      "priority": 2
    },
    {
      "id": "shared-components-button",
      "file_path": "src/shared/components/Button.tsx",
      "description": "Accessible Tailwind-styled Button component with variant props (primary, secondary, danger) and loading state.",
      "dependencies": [],
      "exports": [
        "Button"
      ],
      "priority": 2
    },
    {
      "id": "shared-components-card",
      "file_path": "src/shared/components/Card.tsx",
      "description": "Simple card container component used for dashboard cards and small panels.",
      "dependencies": [],
      "exports": [
        "Card"
      ],
      "priority": 2
    },
    {
      "id": "shared-components-error-fallback",
      "file_path": "src/shared/components/ErrorFallback.tsx",
      "description": "Error boundary fallback UI that displays friendly message, retry action and logs errors.",
      "dependencies": [
        "src/shared/components/Button.tsx"
      ],
      "exports": [
        "ErrorFallback"
      ],
      "priority": 2
    },
    {
      "id": "shared-components-header",
      "file_path": "src/shared/components/Header.tsx",
      "description": "Top navigation bar: contains brand, current user, theme toggle and quick actions. Accessible and keyboard navigable.",
      "dependencies": [
        "src/shared/components/Button.tsx",
        "src/shared/hooks/useAuth.ts",
        "src/shared/i18n/en.json",
        "src/shared/i18n/ko.json"
      ],
      "exports": [
        "Header"
      ],
      "priority": 2
    },
    {
      "id": "shared-components-input",
      "file_path": "src/shared/components/Input.tsx",
      "description": "Accessible input component with label, error text and aria attributes. Supports text, date, time and textarea modes.",
      "dependencies": [
        "src/shared/forms/validators.ts"
      ],
      "exports": [
        "Input"
      ],
      "priority": 2
    },
    {
      "id": "shared-components-layout",
      "file_path": "src/shared/components/Layout.tsx",
      "description": "App shell layout with Header and Sidebar regions. Responsible for responsive behavior and accessibility landmarks.",
      "dependencies": [
        "src/shared/components/Header.tsx",
        "src/shared/components/Sidebar.tsx"
      ],
      "exports": [
        "Layout"
      ],
      "priority": 2
    },
    {
      "id": "shared-components-modal",
      "file_path": "src/shared/components/Modal.tsx",
      "description": "Accessible modal dialog with focus trap and keyboard close behavior.",
      "dependencies": [
        "src/shared/components/Button.tsx"
      ],
      "exports": [
        "Modal"
      ],
      "priority": 2
    },
    {
      "id": "shared-components-protected-route",
      "file_path": "src/shared/components/ProtectedRoute.tsx",
      "description": "Route wrapper that checks current auth state & roles; redirects to login if unauthorized. Used by route definitions.",
      "dependencies": [
        "src/providers/AuthProvider.tsx",
        "src/pages/Auth/LoginPage.tsx"
      ],
      "exports": [
        "ProtectedRoute"
      ],
      "priority": 2
    },
    {
      "id": "shared-components-sidebar",
      "file_path": "src/shared/components/Sidebar.tsx",
      "description": "Primary navigation menu for feature pages, supports collapse/expand and keyboard navigation.",
      "dependencies": [
        "src/app/routes.tsx"
      ],
      "exports": [
        "Sidebar"
      ],
      "priority": 2
    },
    {
      "id": "shared-components-spinner",
      "file_path": "src/shared/components/Spinner.tsx",
      "description": "Small spinner component used for loading states (also used as Suspense fallback).",
      "dependencies": [],
      "exports": [
        "Spinner"
      ],
      "priority": 2
    },
    {
      "id": "shared-components-table",
      "file_path": "src/shared/components/Table.tsx",
      "description": "Accessible table component with responsive behavior, optional sortable headers and row actions.",
      "dependencies": [
        "src/shared/components/Button.tsx"
      ],
      "exports": [
        "Table"
      ],
      "priority": 2
    },
    {
      "id": "shared-forms-use-form",
      "file_path": "src/shared/forms/useForm.ts",
      "description": "Form helper hook built on React Hook Form patterns (lightweight) to manage validation, touched, errors, and submission states.",
      "dependencies": [
        "src/shared/forms/validators.ts"
      ],
      "exports": [
        "useForm"
      ],
      "priority": 2
    },
    {
      "id": "shared-forms-validators",
      "file_path": "src/shared/forms/validators.ts",
      "description": "Common form validators (required, email, minLength, dateInFuture) and localized error messages.",
      "dependencies": [
        "src/app/i18n.ts"
      ],
      "exports": [
        "validators",
        "validate"
      ],
      "priority": 2
    },
    {
      "id": "shared-hook-use-auth",
      "file_path": "src/shared/hooks/useAuth.ts",
      "description": "Convenience hook that wraps AuthProvider context to expose login/logout and current user for components.",
      "dependencies": [
        "src/providers/AuthProvider.tsx",
        "src/core/contracts.ts"
      ],
      "exports": [
        "useAuth"
      ],
      "priority": 2
    },
    {
      "id": "shared-hook-use-interval",
      "file_path": "src/shared/hooks/useInterval.ts",
      "description": "Small hook for setInterval with proper cleanup and latest callback capture, used for polling/reminders.",
      "dependencies": [],
      "exports": [
        "useInterval"
      ],
      "priority": 2
    },
    {
      "id": "shared-hook-use-localstorage",
      "file_path": "src/shared/hooks/useLocalStorage.ts",
      "description": "Generic typed useLocalStorage hook that persists JSON to localStorage with serialization safety and change listeners.",
      "dependencies": [
        "src/core/utils.ts"
      ],
      "exports": [
        "useLocalStorage"
      ],
      "priority": 2
    },
    {
      "id": "shared-hook-use-socket",
      "file_path": "src/shared/hooks/useSocket.ts",
      "description": "Hook to subscribe to socket or event bus messages; abstracts provider implementation (real WS or mock).",
      "dependencies": [
        "src/providers/WebsocketProvider.tsx",
        "src/core/events.ts"
      ],
      "exports": [
        "useSocket"
      ],
      "priority": 2
    },
    {
      "id": "shared-utils-date",
      "file_path": "src/shared/utils/date.ts",
      "description": "Date helpers: formatDate, parseISO, relativeTime, timezone helpers.",
      "dependencies": [],
      "exports": [
        "formatDate",
        "parseISO",
        "relativeTime"
      ],
      "priority": 2
    },
    {
      "id": "shared-utils-formatters",
      "file_path": "src/shared/utils/formatters.ts",
      "description": "Various small formatters (currency, lab value formatters) used by UI components.",
      "dependencies": [],
      "exports": [
        "formatCurrency",
        "formatLabValue"
      ],
      "priority": 2
    },
    {
      "id": "styles-index",
      "file_path": "src/styles/index.css",
      "description": "Tailwind entrypoint and global styles (imports Tailwind base/components/utilities and sets up dark mode).",
      "dependencies": [],
      "exports": [
        "globalStyles"
      ],
      "priority": 2
    },
    {
      "id": "page-appointment-detail",
      "file_path": "src/pages/Appointments/AppointmentDetail.tsx",
      "description": "Appointment detail view: shows appointment metadata, notes, provider details and actions (reschedule/cancel).",
      "dependencies": [
        "src/services/appointments.ts",
        "src/shared/components/Card.tsx",
        "src/shared/components/Button.tsx",
        "src/shared/utils/date.ts"
      ],
      "exports": [
        "AppointmentDetail"
      ],
      "priority": 3
    },
    {
      "id": "page-appointments-list",
      "file_path": "src/pages/Appointments/AppointmentsPage.tsx",
      "description": "Appointments listing page with create/update flows, calendar/time pickers, and table of appointments. Integrates with create/update services and optimistic updates via React Query.",
      "dependencies": [
        "src/services/appointments.ts",
        "src/shared/components/Table.tsx",
        "src/shared/components/Modal.tsx",
        "src/shared/components/Input.tsx",
        "src/shared/forms/useForm.ts",
        "src/shared/components/Layout.tsx",
        "src/core/events.ts"
      ],
      "exports": [
        "AppointmentsPage"
      ],
      "priority": 3
    },
    {
      "id": "page-auth-login",
      "file_path": "src/pages/Auth/LoginPage.tsx",
      "description": "Login page with form, validation and mock auth support in dev. On success redirects to protected route. Supports keyboard navigation and ARIA attributes.",
      "dependencies": [
        "src/shared/forms/useForm.ts",
        "src/services/auth.ts",
        "src/shared/components/Input.tsx",
        "src/shared/components/Button.tsx",
        "src/providers/AuthProvider.tsx",
        "src/app/i18n.ts"
      ],
      "exports": [
        "LoginPage"
      ],
      "priority": 3
    },
    {
      "id": "page-auth-logout",
      "file_path": "src/pages/Auth/Logout.tsx",
      "description": "Performs logout through Auth service and redirects to login; used by header quick action.",
      "dependencies": [
        "src/services/auth.ts",
        "src/providers/AuthProvider.tsx"
      ],
      "exports": [
        "Logout"
      ],
      "priority": 3
    },
    {
      "id": "page-dashboard",
      "file_path": "src/pages/Dashboard/DashboardPage.tsx",
      "description": "Health metrics dashboard: composes small cards for vitals, upcoming appointments, recent lab results and medication reminders. Uses React Query to fetch multiple endpoints and Suspense for loading.",
      "dependencies": [
        "src/shared/components/Card.tsx",
        "src/shared/components/Layout.tsx",
        "src/services/appointments.ts",
        "src/services/labResults.ts",
        "src/services/medications.ts",
        "src/shared/utils/formatters.ts"
      ],
      "exports": [
        "DashboardPage"
      ],
      "priority": 3
    },
    {
      "id": "page-insurance",
      "file_path": "src/pages/Insurance/InsurancePage.tsx",
      "description": "Insurance claim tracker UI: lists claims, shows statuses and claim details. Provides fallback and retry patterns for API failures.",
      "dependencies": [
        "src/services/insurance.ts",
        "src/shared/components/Table.tsx",
        "src/shared/components/Layout.tsx"
      ],
      "exports": [
        "InsurancePage"
      ],
      "priority": 3
    },
    {
      "id": "page-lab-results",
      "file_path": "src/pages/LabResults/LabResultsPage.tsx",
      "description": "Lab results display with sortable/filterable list and quick-view details. Subscribes to new results via events or socket for real-time updates.",
      "dependencies": [
        "src/services/labResults.ts",
        "src/shared/components/Table.tsx",
        "src/shared/hooks/useSocket.ts",
        "src/shared/components/Layout.tsx"
      ],
      "exports": [
        "LabResultsPage"
      ],
      "priority": 3
    },
    {
      "id": "page-medical-records",
      "file_path": "src/pages/MedicalRecords/RecordsPage.tsx",
      "description": "Viewer for medical records: searchable list, detail view, PDF/download fallback. Uses virtualized lists for performance.",
      "dependencies": [
        "src/services/medicalRecords.ts",
        "src/shared/components/Table.tsx",
        "src/shared/components/Layout.tsx",
        "src/shared/utils/formatters.ts"
      ],
      "exports": [
        "RecordsPage"
      ],
      "priority": 3
    },
    {
      "id": "page-medications",
      "file_path": "src/pages/Medications/MedicationsPage.tsx",
      "description": "Medications and reminders management screen. Allows creating client-side reminders which persist to localStorage in development. Shows upcoming reminders and integrates with useInterval to trigger reminders.",
      "dependencies": [
        "src/services/medications.ts",
        "src/shared/components/Table.tsx",
        "src/shared/hooks/useLocalStorage.ts",
        "src/shared/hooks/useInterval.ts",
        "src/shared/components/Layout.tsx"
      ],
      "exports": [
        "MedicationsPage"
      ],
      "priority": 3
    },
    {
      "id": "page-notfound",
      "file_path": "src/pages/NotFound.tsx",
      "description": "404 page: shown when no route matches. Provides links back to dashboard and login.",
      "dependencies": [
        "src/shared/components/Layout.tsx"
      ],
      "exports": [
        "NotFound"
      ],
      "priority": 3
    },
    {
      "id": "page-prescriptions",
      "file_path": "src/pages/Prescriptions/PrescriptionsPage.tsx",
      "description": "Prescription management UI featuring list of active prescriptions, refill requests, and status. Integrates with mock refill flows in dev.",
      "dependencies": [
        "src/services/prescriptions.ts",
        "src/shared/components/Table.tsx",
        "src/shared/components/Button.tsx",
        "src/shared/components/Layout.tsx"
      ],
      "exports": [
        "PrescriptionsPage"
      ],
      "priority": 3
    },
    {
      "id": "page-telemedicine",
      "file_path": "src/pages/Telemedicine/TelemedicinePage.tsx",
      "description": "Telemedicine interface placeholder that integrates with WebSocket provider for session status and mock video/session metadata. Provides fallback UI when backend is unavailable.",
      "dependencies": [
        "src/providers/WebsocketProvider.tsx",
        "src/shared/components/Card.tsx",
        "src/shared/components/Button.tsx"
      ],
      "exports": [
        "TelemedicinePage"
      ],
      "priority": 3
    }
  ],
  "file_paths": [
    "src/app/config.ts",
    "src/app/i18n.ts",
    "src/App.tsx",
    "src/app/routes.tsx",
    "src/core/contracts.ts",
    "src/core/di.ts",
    "src/core/events.ts",
    "src/core/hooks.ts",
    "src/core/utils.ts",
    "src/main.tsx",
    "src/mock/data/appointments.ts",
    "src/mock/data/insurance.ts",
    "src/mock/data/labResults.ts",
    "src/mock/data/medicalRecords.ts",
    "src/mock/data/medications.ts",
    "src/mock/data/prescriptions.ts",
    "src/mock/data/users.ts",
    "src/mock/mockServer.ts",
    "src/mock/websocketMock.ts",
    "src/providers/AuthProvider.tsx",
    "src/providers/MockServerProvider.tsx",
    "src/providers/QueryProvider.tsx",
    "src/providers/ThemeProvider.tsx",
    "src/providers/WebsocketProvider.tsx",
    "src/services/apiClient.ts",
    "src/services/appointments.ts",
    "src/services/auth.ts",
    "src/services/insurance.ts",
    "src/services/labResults.ts",
    "src/services/medicalRecords.ts",
    "src/services/medications.ts",
    "src/services/prescriptions.ts",
    "src/shared/i18n/en.json",
    "src/shared/i18n/ko.json",
    "src/shared/components/Button.tsx",
    "src/shared/components/Card.tsx",
    "src/shared/components/ErrorFallback.tsx",
    "src/shared/components/Header.tsx",
    "src/shared/components/Input.tsx",
    "src/shared/components/Layout.tsx",
    "src/shared/components/Modal.tsx",
    "src/shared/components/ProtectedRoute.tsx",
    "src/shared/components/Sidebar.tsx",
    "src/shared/components/Spinner.tsx",
    "src/shared/components/Table.tsx",
    "src/shared/forms/useForm.ts",
    "src/shared/forms/validators.ts",
    "src/shared/hooks/useAuth.ts",
    "src/shared/hooks/useInterval.ts",
    "src/shared/hooks/useLocalStorage.ts",
    "src/shared/hooks/useSocket.ts",
    "src/shared/utils/date.ts",
    "src/shared/utils/formatters.ts",
    "src/styles/index.css",
    "src/pages/Appointments/AppointmentDetail.tsx",
    "src/pages/Appointments/AppointmentsPage.tsx",
    "src/pages/Auth/LoginPage.tsx",
    "src/pages/Auth/Logout.tsx",
    "src/pages/Dashboard/DashboardPage.tsx",
    "src/pages/Insurance/InsurancePage.tsx",
    "src/pages/LabResults/LabResultsPage.tsx",
    "src/pages/MedicalRecords/RecordsPage.tsx",
    "src/pages/Medications/MedicationsPage.tsx",
    "src/pages/NotFound.tsx",
    "src/pages/Prescriptions/PrescriptionsPage.tsx",
    "src/pages/Telemedicine/TelemedicinePage.tsx"
  ],
  "descriptions": [
    "Materialized runtime config: feature flags (enable_mock_data), API base URL, mock endpoints list, dev users and persistence flags (use_localstorage_persistence).",
    "i18n initialization wrapper using react-i18next; loads local JSON translations (en, ko) and exposes translation utilities.",
    "Top-level app component: Router wrapper, Error Boundary, Suspense boundary, and route outlet. Applies global layout and fallback UIs.",
    "React Router route definitions for public and protected routes; uses ProtectedRoute wrapper. Exports route components and route metadata for navigation.",
    "Domain types, DTOs and API contracts shared across services and UI (User, Appointment, MedicalRecord, Prescription, LabResult, InsuranceClaim, Medication, Pagination, API error shapes).",
    "Simple dependency injection container to allow swapping implementations (e.g., for tests or mock server) \u2014 register/get services by token.",
    "Tiny event bus used for broadcasting domain events (e.g., appointmentUpdated, labResultArrived) across providers and hooks.",
    "Extension points and hook registry (named hooks) used by features/providers to register behavior (e.g., onAuthChange).",
    "Small generic utilities used across the app (safeJsonParse, sleep, isDevelopment).",
    "App bootstrap: renders App into root, wraps providers (MockServerProvider, QueryProvider, AuthProvider, ThemeProvider, WebsocketProvider) and initializes i18n.",
    "Mock appointment dataset and factory helpers for appointments endpoints.",
    "Mock insurance claims dataset and helpers.",
    "Mock lab results data and helper to generate new results for real-time simulation.",
    "Mock medical records dataset and helpers.",
    "Mock medication list and reminder metadata.",
    "Mock prescriptions data and helpers.",
    "Mock users used for development mode authentication (doctors, patients, nurses).",
    "Lightweight mock API server that intercepts fetch requests in development. Provides handlers for all endpoints defined in app config and returns realistic mock responses from /mock/data.",
    "Simulates WebSocket events in development: emits appointment changes, new lab results, medication reminders. Integrates with core/events to deliver updates to app code.",
    "Authentication context and hook provider. Handles login/logout, token management, role-based access, protected route wrapper and persistence to localStorage when enabled for development mode.",
    "Starts the in-app mock server when appConfig.enable_mock_data is true and ensures it is registered before app renders. Injects mock handlers for APIs defined in app config.",
    "Sets up React Query QueryClient with sensible defaults (staleTime, retry, queryCache) and wraps children with QueryClientProvider.",
    "Theme context that toggles light/dark mode and persists preference to localStorage. Integrates Tailwind dark class on document.",
    "Abstraction for WebSocket connection; in development it uses websocketMock to simulate real-time updates. Exposes a context to subscribe to domain events.",
    "Centralized HTTP client (fetch wrapper) that injects auth tokens, handles errors, applies timeouts and maps API error shapes to ApiError defined in core/contracts.",
    "Service functions to list, get, create, update and cancel appointments. Designed to be used with React Query.",
    "Auth service: login, logout, fetch current user. Uses apiClient in production or the mock adapter in dev. Provides token and user shapes.",
    "Service to query insurance claims and their statuses.",
    "Service functions to fetch and stream lab results; supports real-time updates via events or sockets.",
    "Service functions to fetch patient medical records, with pagination and metadata.",
    "Service functions for medication list, reminders, and scheduling (client-managed reminders).",
    "Service functions to manage prescriptions (list, refill, cancel).",
    "English translations for UI labels, validation messages and error strings.",
    "Korean translations for UI labels, validation messages and error strings (Korean support requirement).",
    "Accessible Tailwind-styled Button component with variant props (primary, secondary, danger) and loading state.",
    "Simple card container component used for dashboard cards and small panels.",
    "Error boundary fallback UI that displays friendly message, retry action and logs errors.",
    "Top navigation bar: contains brand, current user, theme toggle and quick actions. Accessible and keyboard navigable.",
    "Accessible input component with label, error text and aria attributes. Supports text, date, time and textarea modes.",
    "App shell layout with Header and Sidebar regions. Responsible for responsive behavior and accessibility landmarks.",
    "Accessible modal dialog with focus trap and keyboard close behavior.",
    "Route wrapper that checks current auth state & roles; redirects to login if unauthorized. Used by route definitions.",
    "Primary navigation menu for feature pages, supports collapse/expand and keyboard navigation.",
    "Small spinner component used for loading states (also used as Suspense fallback).",
    "Accessible table component with responsive behavior, optional sortable headers and row actions.",
    "Form helper hook built on React Hook Form patterns (lightweight) to manage validation, touched, errors, and submission states.",
    "Common form validators (required, email, minLength, dateInFuture) and localized error messages.",
    "Convenience hook that wraps AuthProvider context to expose login/logout and current user for components.",
    "Small hook for setInterval with proper cleanup and latest callback capture, used for polling/reminders.",
    "Generic typed useLocalStorage hook that persists JSON to localStorage with serialization safety and change listeners.",
    "Hook to subscribe to socket or event bus messages; abstracts provider implementation (real WS or mock).",
    "Date helpers: formatDate, parseISO, relativeTime, timezone helpers.",
    "Various small formatters (currency, lab value formatters) used by UI components.",
    "Tailwind entrypoint and global styles (imports Tailwind base/components/utilities and sets up dark mode).",
    "Appointment detail view: shows appointment metadata, notes, provider details and actions (reschedule/cancel).",
    "Appointments listing page with create/update flows, calendar/time pickers, and table of appointments. Integrates with create/update services and optimistic updates via React Query.",
    "Login page with form, validation and mock auth support in dev. On success redirects to protected route. Supports keyboard navigation and ARIA attributes.",
    "Performs logout through Auth service and redirects to login; used by header quick action.",
    "Health metrics dashboard: composes small cards for vitals, upcoming appointments, recent lab results and medication reminders. Uses React Query to fetch multiple endpoints and Suspense for loading.",
    "Insurance claim tracker UI: lists claims, shows statuses and claim details. Provides fallback and retry patterns for API failures.",
    "Lab results display with sortable/filterable list and quick-view details. Subscribes to new results via events or socket for real-time updates.",
    "Viewer for medical records: searchable list, detail view, PDF/download fallback. Uses virtualized lists for performance.",
    "Medications and reminders management screen. Allows creating client-side reminders which persist to localStorage in development. Shows upcoming reminders and integrates with useInterval to trigger reminders.",
    "404 page: shown when no route matches. Provides links back to dashboard and login.",
    "Prescription management UI featuring list of active prescriptions, refill requests, and status. Integrates with mock refill flows in dev.",
    "Telemedicine interface placeholder that integrates with WebSocket provider for session status and mock video/session metadata. Provides fallback UI when backend is unavailable."
  ],
  "total_files": 66
}