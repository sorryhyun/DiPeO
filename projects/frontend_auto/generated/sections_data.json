{
  "architecture": {
    "overview": "A modular, feature-driven React + TypeScript single-page application for a Patient Healthcare Portal. The app is split into foundational providers and services (auth, query client, i18n, theme), reusable UI primitives and layout components, feature folders that encapsulate pages, components and hooks for appointments, medical records, prescriptions, telemedicine, lab results, insurance, and medication reminders, and a development mock layer that provides mock REST endpoints and WebSocket updates so the app can run standalone without backend dependencies.",
    "patterns": [
      "Feature-first folder layout (src/features/*) with each feature owning its pages, components, hooks and api clients",
      "Providers layer (Auth, QueryClient, I18n, Theme) mounted at app root",
      "Container/Presentational separation: pages and containers orchestrate data and hooks; presentational components are in shared/components",
      "React Query for server state (data fetching, caching, stale-while-revalidate)",
      "Context API for global cross-cutting concerns (Auth, Theme, Toasts)",
      "Mock Server pattern for development mode providing REST handlers and simulated WebSockets",
      "Progressive enhancement via Suspense and Error Boundaries",
      "Composition with small reusable hooks (useAuth, useLocalStorage, useWebsocket, useToast)"
    ],
    "data_flow": "UI components call feature hooks (e.g., useAppointments) which use React Query to fetch via feature API clients (appointments.api). API clients use a single apiClient wrapper which points to the real backend in prod or to the mock server in dev. AuthProvider gives tokens and role information to apiClient. React Query centralizes caching and invalidation; components invalidate or refetch via returned query keys. Real-time updates (telemetry/appointment updates) are delivered through a WebSocket service; a mock websocket provider runs in dev to broadcast updates. LocalStorage is used to persist mock auth in development. i18n provides translated strings to UI. ErrorBoundary and SuspenseFallback handle loading and errors across routes.",
    "folder_structure": "src/\n  main.tsx\n  index.css\n  App.tsx\n  routes/\n    AppRouter.tsx\n    ProtectedRoute.tsx\n  providers/\n    RootProviders.tsx\n    AuthProvider.tsx\n    ThemeProvider.tsx\n    I18nProvider.tsx\n  query/\n    queryClient.ts\n  i18n/\n    i18n.ts\n    locales/\n      en.json\n      ko.json\n  services/\n    apiClient.ts\n    mockServer.ts\n    mockWebsocket.ts\n    websocket.ts\n    endpoints/\n      appointments.api.ts\n      medicalRecords.api.ts\n      prescriptions.api.ts\n      labResults.api.ts\n      insurance.api.ts\n      medications.api.ts\n  mocks/\n    mockUsers.ts\n    appointments.json\n    medicalRecords.json\n    prescriptions.json\n    labResults.json\n    insurance.json\n    medications.json\n  hooks/\n    useAuth.ts\n    useLocalStorage.ts\n    useWebsocket.ts\n    useToast.ts\n    useAppointments.ts\n    useMedicalRecords.ts\n    usePrescriptions.ts\n    useLabResults.ts\n    useInsurance.ts\n    useMedications.ts\n  components/\n    ErrorBoundary.tsx\n    SuspenseFallback.tsx\n    Layouts/\n      MainLayout.tsx\n      AuthLayout.tsx\n    ui/\n      Button.tsx\n      Input.tsx\n      Modal.tsx\n      Card.tsx\n      Table.tsx\n      LoadingSpinner.tsx\n      EmptyState.tsx\n      Avatar.tsx\n    nav/\n      Header.tsx\n      Sidebar.tsx\n      Footer.tsx\n  features/\n    appointments/\n      AppointmentList.tsx\n      AppointmentForm.tsx\n      AppointmentCard.tsx\n      AppointmentPage.tsx\n      AppointmentDetailPage.tsx\n    medicalRecords/\n      MedicalRecordsPage.tsx\n      RecordViewer.tsx\n    prescriptions/\n      PrescriptionsPage.tsx\n      PrescriptionForm.tsx\n    telemedicine/\n      TelemedicinePage.tsx\n      VideoCallPlaceholder.tsx\n    dashboard/\n      DashboardPage.tsx\n      HealthMetricCard.tsx\n    labResults/\n      LabResultsPage.tsx\n      LabResultRow.tsx\n    insurance/\n      InsurancePage.tsx\n      ClaimTracker.tsx\n    medications/\n      MedicationsPage.tsx\n      ReminderForm.tsx\n  pages/\n    LoginPage.tsx\n    SettingsPage.tsx\n    NotFoundPage.tsx\n  styles/\n    tailwind.css\n  utils/\n    formatDate.ts\n    validators.ts\n  types/\n    (Core Kernel provides shared domain types; local helpers if needed)\n\nOther top-level files:\n  tailwind.config.cjs\n  postcss.config.cjs\n  vite.config.ts",
    "tech_stack": [
      "React 18+ (functional components, Suspense)",
      "TypeScript",
      "React Router v6",
      "React Query (TanStack Query)",
      "React Hook Form + Zod for validation (or optional validators.ts with zod schemas)",
      "Tailwind CSS for styling (responsive, dark mode support)",
      "i18next for i18n with en + ko locales",
      "Mock Service Worker (or internal lightweight mock server) for development mock endpoints",
      "WebSocket abstraction with mock websocket for dev",
      "LocalStorage for local persistence in development"
    ]
  },
  "sections": [
    {
      "id": "entry-point",
      "file_to_implement": "src/main.tsx",
      "description": "Application entry: mounts React app, imports global styles, registers mock server in development, and renders RootProviders + App.",
      "dependencies": [
        "src/index.css",
        "src/providers/RootProviders.tsx",
        "src/App.tsx",
        "src/services/mockServer.ts",
        "src/services/mockWebsocket.ts"
      ],
      "exports": [
        "bootstraps the app (no runtime exports)"
      ],
      "priority": 1
    },
    {
      "id": "global-styles",
      "file_to_implement": "src/index.css",
      "description": "Global Tailwind / base CSS, dark mode utilities and custom overrides used by components.",
      "dependencies": [],
      "exports": [
        "global CSS (imported by main.tsx)"
      ],
      "priority": 1
    },
    {
      "id": "app-root",
      "file_to_implement": "src/App.tsx",
      "description": "Top-level application component: mounts AppRouter and wraps global ErrorBoundary and SuspenseFallback.",
      "dependencies": [
        "src/routes/AppRouter.tsx",
        "src/components/ErrorBoundary.tsx",
        "src/components/SuspenseFallback.tsx"
      ],
      "exports": [
        "App component"
      ],
      "priority": 1
    },
    {
      "id": "root-providers",
      "file_to_implement": "src/providers/RootProviders.tsx",
      "description": "Composes global providers: React Query QueryClientProvider, AuthProvider, I18nProvider, ThemeProvider and any Toast provider. Exposes QueryClientProvider configured for the app.",
      "dependencies": [
        "src/query/queryClient.ts",
        "src/providers/AuthProvider.tsx",
        "src/providers/I18nProvider.tsx",
        "src/providers/ThemeProvider.tsx",
        "src/hooks/useToast.ts"
      ],
      "exports": [
        "RootProviders component"
      ],
      "priority": 1
    },
    {
      "id": "query-client",
      "file_to_implement": "src/query/queryClient.ts",
      "description": "Creates and configures the React Query QueryClient with sensible defaults (retry, staleTime), devtools toggling, and error handling hooks.",
      "dependencies": [],
      "exports": [
        "queryClient instance",
        "QueryClientProvider wrapper utility (if any)"
      ],
      "priority": 1
    },
    {
      "id": "auth-provider",
      "file_to_implement": "src/providers/AuthProvider.tsx",
      "description": "Provides authentication context, login/logout methods, token storage and role info. In development mode uses mock users and localStorage persistence. Exposes context for useAuth hook.",
      "dependencies": [
        "src/hooks/useLocalStorage.ts",
        "src/mocks/mockUsers.ts",
        "src/services/mockServer.ts"
      ],
      "exports": [
        "AuthProvider component",
        "AuthContext (React context)"
      ],
      "priority": 1
    },
    {
      "id": "i18n-provider",
      "file_to_implement": "src/providers/I18nProvider.tsx",
      "description": "Initializes i18next and provides translation utilities to the app, loads locale files and exposes a Language switcher support.",
      "dependencies": [
        "src/i18n/i18n.ts",
        "src/i18n/locales/en.json",
        "src/i18n/locales/ko.json"
      ],
      "exports": [
        "I18nProvider component (wraps children)",
        "useTranslation hook passthrough (if re-exported)"
      ],
      "priority": 1
    },
    {
      "id": "theme-provider",
      "file_to_implement": "src/providers/ThemeProvider.tsx",
      "description": "Manages light/dark mode, persists preference to localStorage and provides CSS class toggling for Tailwind dark mode.",
      "dependencies": [
        "src/hooks/useLocalStorage.ts"
      ],
      "exports": [
        "ThemeProvider component",
        "ThemeContext"
      ],
      "priority": 1
    },
    {
      "id": "i18n-init",
      "file_to_implement": "src/i18n/i18n.ts",
      "description": "i18next initialization file: configures languages (en, ko), fallback, and loads resources. Exports i18n instance.",
      "dependencies": [
        "src/i18n/locales/en.json",
        "src/i18n/locales/ko.json"
      ],
      "exports": [
        "i18n instance"
      ],
      "priority": 1
    },
    {
      "id": "locale-en",
      "file_to_implement": "src/i18n/locales/en.json",
      "description": "English translation strings used across the app.",
      "dependencies": [],
      "exports": [
        "JSON object of English translations"
      ],
      "priority": 1
    },
    {
      "id": "locale-ko",
      "file_to_implement": "src/i18n/locales/ko.json",
      "description": "Korean translation strings used across the app (must cover keys used in UI).",
      "dependencies": [],
      "exports": [
        "JSON object of Korean translations"
      ],
      "priority": 1
    },
    {
      "id": "api-client",
      "file_to_implement": "src/services/apiClient.ts",
      "description": "Single HTTP client wrapper for fetch/axios that adds auth token, baseUrl switching (real vs dev mock), error normalization and fallback handling when backend unavailable.",
      "dependencies": [
        "src/providers/AuthProvider.tsx",
        "src/services/mockServer.ts"
      ],
      "exports": [
        "apiClient instance (get/post/put/delete helper functions)"
      ],
      "priority": 1
    },
    {
      "id": "mock-server",
      "file_to_implement": "src/services/mockServer.ts",
      "description": "In-development mock server that registers route handlers for all API endpoints, returns data from local JSON mocks, enforces basic auth checks and supports REST semantics. Starts automatically in dev mode when imported.",
      "dependencies": [
        "src/mocks/mockUsers.ts",
        "src/mocks/appointments.json",
        "src/mocks/medicalRecords.json",
        "src/mocks/prescriptions.json",
        "src/mocks/labResults.json",
        "src/mocks/insurance.json",
        "src/mocks/medications.json"
      ],
      "exports": [
        "startMockServer() function (maybe auto-start)",
        "mockHandlers export for testing"
      ],
      "priority": 1
    },
    {
      "id": "mock-websocket",
      "file_to_implement": "src/services/mockWebsocket.ts",
      "description": "Simulates WebSocket events for real-time features in development mode (appointment status updates, lab result ready notifications, medication reminders). Provides an API to subscribe/unsubscribe.",
      "dependencies": [
        "src/mocks/appointments.json"
      ],
      "exports": [
        "MockWebsocket class or createMockWebsocket() factory",
        "startMockWebsocket() utility"
      ],
      "priority": 1
    },
    {
      "id": "websocket-abstraction",
      "file_to_implement": "src/services/websocket.ts",
      "description": "Production WebSocket wrapper which in dev delegates to mockWebsocket. Exposes connect, subscribe, send. Provides fallback behavior and reconnection policy.",
      "dependencies": [
        "src/services/mockWebsocket.ts"
      ],
      "exports": [
        "createWebsocketClient()"
      ],
      "priority": 1
    },
    {
      "id": "mock-users",
      "file_to_implement": "src/mocks/mockUsers.ts",
      "description": "Defines mock user accounts and helper functions to validate credentials in development mode. Matches dev config (doctor, patient, nurse).",
      "dependencies": [],
      "exports": [
        "mockUsers array",
        "validateMockCredentials(email, password)"
      ],
      "priority": 1
    },
    {
      "id": "mock-appointments",
      "file_to_implement": "src/mocks/appointments.json",
      "description": "Mock data for /api/appointments endpoint used by mockServer.",
      "dependencies": [],
      "exports": [
        "JSON data"
      ],
      "priority": 1
    },
    {
      "id": "mock-medical-records",
      "file_to_implement": "src/mocks/medicalRecords.json",
      "description": "Mock data for /api/medical-records endpoint.",
      "dependencies": [],
      "exports": [
        "JSON data"
      ],
      "priority": 1
    },
    {
      "id": "mock-prescriptions",
      "file_to_implement": "src/mocks/prescriptions.json",
      "description": "Mock data for /api/prescriptions endpoint.",
      "dependencies": [],
      "exports": [
        "JSON data"
      ],
      "priority": 1
    },
    {
      "id": "mock-lab-results",
      "file_to_implement": "src/mocks/labResults.json",
      "description": "Mock lab results data for /api/lab-results.",
      "dependencies": [],
      "exports": [
        "JSON data"
      ],
      "priority": 1
    },
    {
      "id": "mock-insurance",
      "file_to_implement": "src/mocks/insurance.json",
      "description": "Mock data for /api/insurance endpoint.",
      "dependencies": [],
      "exports": [
        "JSON data"
      ],
      "priority": 1
    },
    {
      "id": "mock-medications",
      "file_to_implement": "src/mocks/medications.json",
      "description": "Mock data for /api/medications endpoint and medication reminders.",
      "dependencies": [],
      "exports": [
        "JSON data"
      ],
      "priority": 1
    },
    {
      "id": "use-localstorage",
      "file_to_implement": "src/hooks/useLocalStorage.ts",
      "description": "Small utility hook to read/write typed values to localStorage with SSR-safe checks. Used by AuthProvider and ThemeProvider.",
      "dependencies": [],
      "exports": [
        "useLocalStorage hook"
      ],
      "priority": 1
    },
    {
      "id": "use-auth-hook",
      "file_to_implement": "src/hooks/useAuth.ts",
      "description": "Hook that consumes AuthContext to expose currentUser, isAuthenticated, login, logout, and helper methods. Used by ProtectedRoute and feature hooks.",
      "dependencies": [
        "src/providers/AuthProvider.tsx"
      ],
      "exports": [
        "useAuth hook"
      ],
      "priority": 1
    },
    {
      "id": "use-toast",
      "file_to_implement": "src/hooks/useToast.ts",
      "description": "Small cross-app toast/notification hook used by services and providers to show non-blocking messages (e.g., network errors, reminders).",
      "dependencies": [],
      "exports": [
        "useToast hook",
        "ToastProvider (if included)"
      ],
      "priority": 1
    },
    {
      "id": "format-date-util",
      "file_to_implement": "src/utils/formatDate.ts",
      "description": "Utility to format dates consistently across the app and handle timezone basics.",
      "dependencies": [],
      "exports": [
        "formatDate()"
      ],
      "priority": 1
    },
    {
      "id": "validators",
      "file_to_implement": "src/utils/validators.ts",
      "description": "Reusable validation functions or Zod schemas for forms (appointments, prescriptions, login).",
      "dependencies": [],
      "exports": [
        "validators / zod schemas"
      ],
      "priority": 1
    },
    {
      "id": "error-boundary",
      "file_to_implement": "src/components/ErrorBoundary.tsx",
      "description": "Global React ErrorBoundary component to catch render errors and display a friendly fallback with retry.",
      "dependencies": [
        "src/components/LoadingSpinner.tsx"
      ],
      "exports": [
        "ErrorBoundary component"
      ],
      "priority": 1
    },
    {
      "id": "suspense-fallback",
      "file_to_implement": "src/components/SuspenseFallback.tsx",
      "description": "UI shown while Suspense boundaries are pending; used by App and pages.",
      "dependencies": [
        "src/components/LoadingSpinner.tsx"
      ],
      "exports": [
        "SuspenseFallback component"
      ],
      "priority": 1
    },
    {
      "id": "loading-spinner",
      "file_to_implement": "src/components/ui/LoadingSpinner.tsx",
      "description": "Small accessible loading spinner used across the app.",
      "dependencies": [],
      "exports": [
        "LoadingSpinner component"
      ],
      "priority": 2
    },
    {
      "id": "button-component",
      "file_to_implement": "src/components/ui/Button.tsx",
      "description": "Accessible primary button with Tailwind styles, supports variants (primary/secondary), loading state and icon slots.",
      "dependencies": [],
      "exports": [
        "Button component"
      ],
      "priority": 2
    },
    {
      "id": "input-component",
      "file_to_implement": "src/components/ui/Input.tsx",
      "description": "Accessible input and textarea wrappers with label, error display and Tailwind styling for forms.",
      "dependencies": [],
      "exports": [
        "Input component",
        "Textarea component (if included)"
      ],
      "priority": 2
    },
    {
      "id": "modal-component",
      "file_to_implement": "src/components/ui/Modal.tsx",
      "description": "Reusable modal dialog component with focus trap, aria attributes and keyboard handling.",
      "dependencies": [
        "src/components/ui/Button.tsx"
      ],
      "exports": [
        "Modal component"
      ],
      "priority": 2
    },
    {
      "id": "card-component",
      "file_to_implement": "src/components/ui/Card.tsx",
      "description": "Simple card container used for dashboard metric cards and record cards.",
      "dependencies": [],
      "exports": [
        "Card component"
      ],
      "priority": 2
    },
    {
      "id": "table-component",
      "file_to_implement": "src/components/ui/Table.tsx",
      "description": "Accessible table abstraction used for lists (appointments, lab results) including keyboard navigation support.",
      "dependencies": [],
      "exports": [
        "Table component"
      ],
      "priority": 2
    },
    {
      "id": "empty-state",
      "file_to_implement": "src/components/ui/EmptyState.tsx",
      "description": "Fallback UI to show when lists are empty (with action CTA support).",
      "dependencies": [
        "src/components/ui/Button.tsx"
      ],
      "exports": [
        "EmptyState component"
      ],
      "priority": 2
    },
    {
      "id": "avatar",
      "file_to_implement": "src/components/ui/Avatar.tsx",
      "description": "Small avatar component for user pictures/initials used in the header.",
      "dependencies": [],
      "exports": [
        "Avatar component"
      ],
      "priority": 2
    },
    {
      "id": "header",
      "file_to_implement": "src/components/nav/Header.tsx",
      "description": "Top header bar with app title, language switch, user menu and quick actions. Consumes AuthContext.",
      "dependencies": [
        "src/hooks/useAuth.ts",
        "src/components/ui/Avatar.tsx",
        "src/providers/I18nProvider.tsx"
      ],
      "exports": [
        "Header component"
      ],
      "priority": 2
    },
    {
      "id": "sidebar",
      "file_to_implement": "src/components/nav/Sidebar.tsx",
      "description": "Primary navigation sidebar with links to features (Dashboard, Appointments, Records, Prescriptions, Telemedicine, Lab Results, Insurance, Medications, Settings). Responsive collapse behavior.",
      "dependencies": [
        "src/routes/AppRouter.tsx"
      ],
      "exports": [
        "Sidebar component",
        "Nav link items"
      ],
      "priority": 2
    },
    {
      "id": "footer",
      "file_to_implement": "src/components/nav/Footer.tsx",
      "description": "Application footer with lightweight links and legal info.",
      "dependencies": [],
      "exports": [
        "Footer component"
      ],
      "priority": 2
    },
    {
      "id": "main-layout",
      "file_to_implement": "src/components/Layouts/MainLayout.tsx",
      "description": "Main app layout used for authenticated sections: includes Header, Sidebar and a content area. Implements responsive design and ARIA landmarks.",
      "dependencies": [
        "src/components/nav/Header.tsx",
        "src/components/nav/Sidebar.tsx",
        "src/components/nav/Footer.tsx"
      ],
      "exports": [
        "MainLayout component"
      ],
      "priority": 2
    },
    {
      "id": "auth-layout",
      "file_to_implement": "src/components/Layouts/AuthLayout.tsx",
      "description": "Layout for auth pages (login) centered with branding and accessible form container.",
      "dependencies": [
        "src/components/ui/Card.tsx"
      ],
      "exports": [
        "AuthLayout component"
      ],
      "priority": 2
    },
    {
      "id": "protected-route",
      "file_to_implement": "src/routes/ProtectedRoute.tsx",
      "description": "Route wrapper that checks authentication and optionally role-based access. Redirects to login if unauthenticated.",
      "dependencies": [
        "src/hooks/useAuth.ts",
        "src/pages/LoginPage.tsx"
      ],
      "exports": [
        "ProtectedRoute component"
      ],
      "priority": 2
    },
    {
      "id": "app-router",
      "file_to_implement": "src/routes/AppRouter.tsx",
      "description": "React Router v6 configuration for all app routes. Sets up lazy-loaded pages with Suspense and integrates ProtectedRoute for guarded routes.",
      "dependencies": [
        "src/pages/LoginPage.tsx",
        "src/pages/NotFoundPage.tsx",
        "src/features/dashboard/DashboardPage.tsx",
        "src/features/appointments/AppointmentPage.tsx",
        "src/features/appointments/AppointmentDetailPage.tsx",
        "src/features/medicalRecords/MedicalRecordsPage.tsx",
        "src/features/prescriptions/PrescriptionsPage.tsx",
        "src/features/telemedicine/TelemedicinePage.tsx",
        "src/features/labResults/LabResultsPage.tsx",
        "src/features/insurance/InsurancePage.tsx"
      ],
      "exports": [
        "AppRouter component"
      ],
      "priority": 2
    },
    {
      "id": "appointments-api",
      "file_to_implement": "src/services/endpoints/appointments.api.ts",
      "description": "Feature API client for appointments: fetch list, fetch details, create, update, cancel. Uses apiClient under the hood.",
      "dependencies": [
        "src/services/apiClient.ts"
      ],
      "exports": [
        "appointmentsApi object with CRUD methods",
        "appointment query keys helper"
      ],
      "priority": 1
    },
    {
      "id": "medical-records-api",
      "file_to_implement": "src/services/endpoints/medicalRecords.api.ts",
      "description": "API client for medical records related endpoints (list, view record PDF/details).",
      "dependencies": [
        "src/services/apiClient.ts"
      ],
      "exports": [
        "medicalRecordsApi object"
      ],
      "priority": 1
    },
    {
      "id": "prescriptions-api",
      "file_to_implement": "src/services/endpoints/prescriptions.api.ts",
      "description": "API client for prescriptions endpoints: list, request refill, mark as fulfilled.",
      "dependencies": [
        "src/services/apiClient.ts"
      ],
      "exports": [
        "prescriptionsApi object"
      ],
      "priority": 1
    },
    {
      "id": "lab-results-api",
      "file_to_implement": "src/services/endpoints/labResults.api.ts",
      "description": "API client for lab results endpoints: fetch results, fetch details and attachments.",
      "dependencies": [
        "src/services/apiClient.ts"
      ],
      "exports": [
        "labResultsApi object"
      ],
      "priority": 1
    },
    {
      "id": "insurance-api",
      "file_to_implement": "src/services/endpoints/insurance.api.ts",
      "description": "API client for insurance claim tracking endpoints: list claims, fetch claim detail, submit claim.",
      "dependencies": [
        "src/services/apiClient.ts"
      ],
      "exports": [
        "insuranceApi object"
      ],
      "priority": 1
    },
    {
      "id": "medications-api",
      "file_to_implement": "src/services/endpoints/medications.api.ts",
      "description": "API client for medications and medication reminders.",
      "dependencies": [
        "src/services/apiClient.ts"
      ],
      "exports": [
        "medicationsApi object"
      ],
      "priority": 1
    },
    {
      "id": "use-appointments-hook",
      "file_to_implement": "src/hooks/useAppointments.ts",
      "description": "React Query hooks and helpers for appointments (useAppointments, useAppointment). Uses appointments.api and provides optimistic updates and invalidation helpers.",
      "dependencies": [
        "src/services/endpoints/appointments.api.ts",
        "src/query/queryClient.ts"
      ],
      "exports": [
        "useAppointments hook",
        "useAppointment hook"
      ],
      "priority": 2
    },
    {
      "id": "use-medical-records-hook",
      "file_to_implement": "src/hooks/useMedicalRecords.ts",
      "description": "React Query hooks for medical records listing and record viewing.",
      "dependencies": [
        "src/services/endpoints/medicalRecords.api.ts"
      ],
      "exports": [
        "useMedicalRecords hook",
        "useMedicalRecord hook"
      ],
      "priority": 2
    },
    {
      "id": "use-prescriptions-hook",
      "file_to_implement": "src/hooks/usePrescriptions.ts",
      "description": "Hooks to fetch and mutate prescriptions data via React Query.",
      "dependencies": [
        "src/services/endpoints/prescriptions.api.ts"
      ],
      "exports": [
        "usePrescriptions hook"
      ],
      "priority": 2
    },
    {
      "id": "use-lab-results-hook",
      "file_to_implement": "src/hooks/useLabResults.ts",
      "description": "Hooks for fetching lab results and subscribing to real-time updates (integrates websocket for 'new result' notifications).",
      "dependencies": [
        "src/services/endpoints/labResults.api.ts",
        "src/services/websocket.ts"
      ],
      "exports": [
        "useLabResults hook"
      ],
      "priority": 2
    },
    {
      "id": "use-insurance-hook",
      "file_to_implement": "src/hooks/useInsurance.ts",
      "description": "Hooks to fetch insurance claims and submit new claims.",
      "dependencies": [
        "src/services/endpoints/insurance.api.ts"
      ],
      "exports": [
        "useInsurance hook"
      ],
      "priority": 2
    },
    {
      "id": "use-medications-hook",
      "file_to_implement": "src/hooks/useMedications.ts",
      "description": "Hooks to fetch medications and schedule reminders; integrates local persistence for reminders in dev.",
      "dependencies": [
        "src/services/endpoints/medications.api.ts",
        "src/hooks/useLocalStorage.ts"
      ],
      "exports": [
        "useMedications hook"
      ],
      "priority": 2
    },
    {
      "id": "appointments-list-component",
      "file_to_implement": "src/features/appointments/AppointmentList.tsx",
      "description": "Component that renders a list/table of appointments using useAppointments and Table component. Supports filtering and keyboard navigation.",
      "dependencies": [
        "src/hooks/useAppointments.ts",
        "src/components/ui/Table.tsx",
        "src/components/ui/EmptyState.tsx"
      ],
      "exports": [
        "AppointmentList component"
      ],
      "priority": 2
    },
    {
      "id": "appointment-card",
      "file_to_implement": "src/features/appointments/AppointmentCard.tsx",
      "description": "Presentational card showing appointment summary for dashboards and lists.",
      "dependencies": [
        "src/utils/formatDate.ts",
        "src/components/ui/Card.tsx"
      ],
      "exports": [
        "AppointmentCard component"
      ],
      "priority": 2
    },
    {
      "id": "appointment-form",
      "file_to_implement": "src/features/appointments/AppointmentForm.tsx",
      "description": "Form to create or update appointment. Uses React Hook Form + validators and shows validation errors. On submit calls appointments API via useAppointments hook mutation.",
      "dependencies": [
        "src/components/ui/Input.tsx",
        "src/components/ui/Button.tsx",
        "src/utils/validators.ts",
        "src/hooks/useAppointments.ts"
      ],
      "exports": [
        "AppointmentForm component"
      ],
      "priority": 2
    },
    {
      "id": "appointment-page",
      "file_to_implement": "src/features/appointments/AppointmentPage.tsx",
      "description": "Page component listing appointments (uses MainLayout). Provides create appointment modal and links to details.",
      "dependencies": [
        "src/components/Layouts/MainLayout.tsx",
        "src/features/appointments/AppointmentList.tsx",
        "src/features/appointments/AppointmentForm.tsx",
        "src/hooks/useAuth.ts"
      ],
      "exports": [
        "AppointmentPage (page component)"
      ],
      "priority": 3
    },
    {
      "id": "appointment-detail-page",
      "file_to_implement": "src/features/appointments/AppointmentDetailPage.tsx",
      "description": "Detail page for a single appointment with actions (reschedule, cancel), integrates video call action for telemedicine appointments.",
      "dependencies": [
        "src/components/Layouts/MainLayout.tsx",
        "src/hooks/useAppointments.ts",
        "src/features/telemedicine/VideoCallPlaceholder.tsx"
      ],
      "exports": [
        "AppointmentDetailPage (page component)"
      ],
      "priority": 3
    },
    {
      "id": "medical-records-page",
      "file_to_implement": "src/features/medicalRecords/MedicalRecordsPage.tsx",
      "description": "Page to browse and view medical records. Uses RecordViewer component to display record details and attachments.",
      "dependencies": [
        "src/components/Layouts/MainLayout.tsx",
        "src/hooks/useMedicalRecords.ts",
        "src/features/medicalRecords/RecordViewer.tsx"
      ],
      "exports": [
        "MedicalRecordsPage"
      ],
      "priority": 3
    },
    {
      "id": "record-viewer",
      "file_to_implement": "src/features/medicalRecords/RecordViewer.tsx",
      "description": "Component to render a single medical record (structured info, attachments, printable view).",
      "dependencies": [],
      "exports": [
        "RecordViewer component"
      ],
      "priority": 2
    },
    {
      "id": "prescriptions-page",
      "file_to_implement": "src/features/prescriptions/PrescriptionsPage.tsx",
      "description": "Page listing current and past prescriptions; allows requesting refills via PrescriptionForm.",
      "dependencies": [
        "src/components/Layouts/MainLayout.tsx",
        "src/hooks/usePrescriptions.ts",
        "src/features/prescriptions/PrescriptionForm.tsx"
      ],
      "exports": [
        "PrescriptionsPage"
      ],
      "priority": 3
    },
    {
      "id": "prescription-form",
      "file_to_implement": "src/features/prescriptions/PrescriptionForm.tsx",
      "description": "Form used to request a refill or create a prescription order; includes validation and confirmation flow.",
      "dependencies": [
        "src/components/ui/Input.tsx",
        "src/components/ui/Button.tsx",
        "src/utils/validators.ts"
      ],
      "exports": [
        "PrescriptionForm component"
      ],
      "priority": 2
    },
    {
      "id": "telemedicine-page",
      "file_to_implement": "src/features/telemedicine/TelemedicinePage.tsx",
      "description": "Telemedicine landing page for video calls. Integrates WebSocket events and a VideoCallPlaceholder for demo mode.",
      "dependencies": [
        "src/components/Layouts/MainLayout.tsx",
        "src/services/websocket.ts",
        "src/features/telemedicine/VideoCallPlaceholder.tsx"
      ],
      "exports": [
        "TelemedicinePage"
      ],
      "priority": 3
    },
    {
      "id": "video-call-placeholder",
      "file_to_implement": "src/features/telemedicine/VideoCallPlaceholder.tsx",
      "description": "Placeholder UI that simulates a video call experience (for mock/dev).",
      "dependencies": [],
      "exports": [
        "VideoCallPlaceholder component"
      ],
      "priority": 2
    },
    {
      "id": "dashboard-page",
      "file_to_implement": "src/features/dashboard/DashboardPage.tsx",
      "description": "Patient/Provider dashboard page showing health metrics, upcoming appointments, and notifications. Composes HealthMetricCard and AppointmentCard components.",
      "dependencies": [
        "src/components/Layouts/MainLayout.tsx",
        "src/features/dashboard/HealthMetricCard.tsx",
        "src/features/appointments/AppointmentCard.tsx",
        "src/hooks/useAppointments.ts",
        "src/hooks/useMedications.ts"
      ],
      "exports": [
        "DashboardPage"
      ],
      "priority": 3
    },
    {
      "id": "health-metric-card",
      "file_to_implement": "src/features/dashboard/HealthMetricCard.tsx",
      "description": "Small presentational component for showing health metrics (steps, heart rate, BP) with sparkline placeholder.",
      "dependencies": [
        "src/components/ui/Card.tsx"
      ],
      "exports": [
        "HealthMetricCard component"
      ],
      "priority": 2
    },
    {
      "id": "lab-results-page",
      "file_to_implement": "src/features/labResults/LabResultsPage.tsx",
      "description": "Page listing lab results with ability to open result detail. Subscribes to websocket for new results if available.",
      "dependencies": [
        "src/components/Layouts/MainLayout.tsx",
        "src/hooks/useLabResults.ts",
        "src/components/ui/Table.tsx"
      ],
      "exports": [
        "LabResultsPage"
      ],
      "priority": 3
    },
    {
      "id": "lab-result-row",
      "file_to_implement": "src/features/labResults/LabResultRow.tsx",
      "description": "Row component for a single lab result entry with status and link to details.",
      "dependencies": [
        "src/utils/formatDate.ts"
      ],
      "exports": [
        "LabResultRow component"
      ],
      "priority": 2
    },
    {
      "id": "insurance-page",
      "file_to_implement": "src/features/insurance/InsurancePage.tsx",
      "description": "Page for tracking insurance claims and submitting new claims. Uses useInsurance hook.",
      "dependencies": [
        "src/components/Layouts/MainLayout.tsx",
        "src/hooks/useInsurance.ts",
        "src/features/insurance/ClaimTracker.tsx"
      ],
      "exports": [
        "InsurancePage"
      ],
      "priority": 3
    },
    {
      "id": "claim-tracker",
      "file_to_implement": "src/features/insurance/ClaimTracker.tsx",
      "description": "Component to list and detail insurance claims with statuses and actions.",
      "dependencies": [
        "src/components/ui/Table.tsx"
      ],
      "exports": [
        "ClaimTracker component"
      ],
      "priority": 2
    },
    {
      "id": "medications-page",
      "file_to_implement": "src/features/medications/MedicationsPage.tsx",
      "description": "Page to view current medications, set up reminders and manage pharmacy info.",
      "dependencies": [
        "src/components/Layouts/MainLayout.tsx",
        "src/hooks/useMedications.ts",
        "src/features/medications/ReminderForm.tsx"
      ],
      "exports": [
        "MedicationsPage"
      ],
      "priority": 3
    },
    {
      "id": "reminder-form",
      "file_to_implement": "src/features/medications/ReminderForm.tsx",
      "description": "Form component to schedule medication reminders; persists reminders locally in development and integrates with mock websocket for simulated notifications.",
      "dependencies": [
        "src/hooks/useMedications.ts",
        "src/components/ui/Input.tsx",
        "src/components/ui/Button.tsx"
      ],
      "exports": [
        "ReminderForm component"
      ],
      "priority": 2
    },
    {
      "id": "login-page",
      "file_to_implement": "src/pages/LoginPage.tsx",
      "description": "Login page with React Hook Form, validation and integration with AuthProvider. Supports dev mock credentials and accessible error feedback.",
      "dependencies": [
        "src/components/Layouts/AuthLayout.tsx",
        "src/providers/AuthProvider.tsx",
        "src/components/ui/Input.tsx",
        "src/components/ui/Button.tsx",
        "src/utils/validators.ts"
      ],
      "exports": [
        "LoginPage"
      ],
      "priority": 3
    },
    {
      "id": "settings-page",
      "file_to_implement": "src/pages/SettingsPage.tsx",
      "description": "User settings page for profile, language, theme and notification preferences.",
      "dependencies": [
        "src/components/Layouts/MainLayout.tsx",
        "src/providers/ThemeProvider.tsx",
        "src/providers/I18nProvider.tsx"
      ],
      "exports": [
        "SettingsPage"
      ],
      "priority": 3
    },
    {
      "id": "not-found-page",
      "file_to_implement": "src/pages/NotFoundPage.tsx",
      "description": "404 not-found page shown for unknown routes, with link back to dashboard or login.",
      "dependencies": [
        "src/components/ui/Button.tsx"
      ],
      "exports": [
        "NotFoundPage"
      ],
      "priority": 3
    },
    {
      "id": "telemetry-notifications",
      "file_to_implement": "src/hooks/useWebsocket.ts",
      "description": "Hook to connect to websocket client, subscribe to specific event channels and provide an event emitter interface to components. Uses createWebsocketClient under the hood.",
      "dependencies": [
        "src/services/websocket.ts"
      ],
      "exports": [
        "useWebsocket hook"
      ],
      "priority": 1
    },
    {
      "id": "toast-provider",
      "file_to_implement": "src/components/ui/ToastProvider.tsx",
      "description": "Lightweight toast provider that exposes context for useToast. Used for notifications across the app.",
      "dependencies": [
        "src/hooks/useToast.ts"
      ],
      "exports": [
        "ToastProvider component"
      ],
      "priority": 2
    },
    {
      "id": "accessibility-helpers",
      "file_to_implement": "src/components/aria/FocusTrap.tsx",
      "description": "Small focus trap component used by Modal to trap focus inside dialogs for accessibility.",
      "dependencies": [],
      "exports": [
        "FocusTrap component"
      ],
      "priority": 2
    },
    {
      "id": "settings-integration",
      "file_to_implement": "src/features/settings/Preferences.tsx",
      "description": "Small preferences controls for language, theme and notification toggles used by SettingsPage.",
      "dependencies": [
        "src/providers/ThemeProvider.tsx",
        "src/providers/I18nProvider.tsx"
      ],
      "exports": [
        "Preferences component"
      ],
      "priority": 2
    },
    {
      "id": "dev-fallbacks",
      "file_to_implement": "src/services/fallbacks.ts",
      "description": "Fallback utilities used when backend is unavailable: returns cached mock data, graceful degradation UI helpers and circuit-breaker style helpers used by apiClient.",
      "dependencies": [
        "src/mocks/appointments.json"
      ],
      "exports": [
        "fallback handlers used by apiClient"
      ],
      "priority": 1
    },
    {
      "id": "tailwind-config",
      "file_to_implement": "tailwind.config.cjs",
      "description": "Tailwind CSS configuration enabling dark mode and custom theme tokens used by the app.",
      "dependencies": [],
      "exports": [
        "Tailwind config (not imported by TS runtime but required for build)"
      ],
      "priority": 1
    },
    {
      "id": "postcss-config",
      "file_to_implement": "postcss.config.cjs",
      "description": "PostCSS configuration used to compile Tailwind in the build.",
      "dependencies": [],
      "exports": [
        "PostCSS config"
      ],
      "priority": 1
    },
    {
      "id": "styles-entry",
      "file_to_implement": "src/styles/tailwind.css",
      "description": "Tailwind directives (@tailwind base; @tailwind components; @tailwind utilities) and any custom classes.",
      "dependencies": [],
      "exports": [
        "CSS file (imported by index.css/main)"
      ],
      "priority": 1
    }
  ]
}