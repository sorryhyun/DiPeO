{
  "architecture": {
    "overview": "A modular, production-ready React + TypeScript patient healthcare portal. The app is split into a small Core Kernel (shared contracts, events, DI, utils), foundational providers and services (auth, data fetching, mock server, theme, i18n), reusable UI components and feature components, and feature pages routed via a central router. React Query handles remote data with cache + retries; Context + hooks manage auth and UI state. Tailwind CSS + dark mode provide styling. In development mode a built-in mock API and mock WebSocket provide offline-first behavior with localStorage persistence and mock users.",
    "patterns": [
      "Domain-driven folders per feature (features/ & pages/ per domain)",
      "Container/Presentational: Pages and feature containers use presentational reusable UI components",
      "Provider pattern: AuthProvider, QueryProvider, ThemeProvider encapsulate cross-cutting concerns",
      "React Query for server state, Context for auth/UI state",
      "Core Kernel for shared contracts, events, DI and utilities",
      "Mocking layer (MSW-like) for dev mode; graceful fallbacks for missing backend"
    ],
    "data_flow": "UI components call feature services (services/*) which use a single apiClient. React Query wraps service calls for caching, retries and optimistic updates. AuthProvider exposes token and user via useAuth hook; QueryProvider injects auth token into apiClient. MockServer intercepts API calls in development and feeds mock data from mocks/data/*. WebSocket mock provides real-time updates to subscribed hooks (useWebSocket). LocalPersistence handles storing auth tokens and minimal UI state in localStorage in dev mode. Events (core/events) provide an internal pub/sub for cross-cutting notifications (e.g., incoming telemedicine call).",
    "folder_structure": "src/\n  app/\n    config.ts\n  core/\n    contracts.ts\n    events.ts\n    hooks.ts\n    di.ts\n    utils.ts\n  main.tsx\n  index.css\n  App.tsx\n  routes/\n    AppRouter.tsx\n    ProtectedRoute.tsx\n  providers/\n    AuthProvider.tsx\n    QueryProvider.tsx\n    ThemeProvider.tsx\n  services/\n    apiClient.ts\n    appointmentsService.ts\n    recordsService.ts\n    prescriptionsService.ts\n    labsService.ts\n    insuranceService.ts\n    medicationsService.ts\n    mockServer.ts\n    websocketMock.ts\n    localPersistence.ts\n  state/\n    store.ts\n  hooks/\n    useAuth.ts\n    useFetch.ts\n    useWebSocket.ts\n  i18n/\n    i18n.ts\n    locales/\n      en.json\n      ko.json\n  mocks/\n    data/\n      authUsers.ts\n      appointments.ts\n      medicalRecords.ts\n      prescriptions.ts\n      labResults.ts\n      insurance.ts\n      medications.ts\n    handlers.ts\n    browser.ts\n  validators/\n    validators.ts\n  utils/\n    date.ts\n    formatting.ts\n  components/\n    ErrorBoundary.tsx\n    SuspenseFallback.tsx\n    Layout/\n      AppLayout.tsx\n      Header.tsx\n      Sidebar.tsx\n    ui/\n      Button.tsx\n      Input.tsx\n      Modal.tsx\n    forms/\n      FormField.tsx\n      DatePicker.tsx\n  features/\n    appointments/\n      AppointmentCard.tsx\n      AppointmentForm.tsx\n    records/\n      RecordViewer.tsx\n    prescriptions/\n      PrescriptionList.tsx\n    telemedicine/\n      VideoCall.tsx\n    metrics/\n      MetricsChart.tsx\n    labs/\n      LabResultItem.tsx\n    insurance/\n      ClaimItem.tsx\n    reminders/\n      ReminderList.tsx\n  pages/\n    HomePage.tsx\n    LoginPage.tsx\n    DashboardPage.tsx\n    appointments/\n      AppointmentListPage.tsx\n      AppointmentDetailPage.tsx\n    records/\n      MedicalRecordsPage.tsx\n    prescriptions/\n      PrescriptionsPage.tsx\n    telemedicine/\n      TelemedicinePage.tsx\n    metrics/\n      HealthMetricsPage.tsx\n    labs/\n      LabResultsPage.tsx\n    insurance/\n      InsurancePage.tsx\n    reminders/\n      MedicationRemindersPage.tsx\n    NotFoundPage.tsx\nconfig/\n  tailwind.config.js\n  postcss.config.cjs\n  tsconfig.json",
    "tech_stack": [
      "React 18+ (Suspense, Error Boundaries, Context API)",
      "TypeScript",
      "Tailwind CSS (with dark mode)",
      "React Query (server state)",
      "React Router v6+",
      "i18next for i18n (Korean + English)",
      "Mock Service Worker pattern for mocks (in-app handlers/browser)",
      "LocalStorage for dev persistence",
      "WebSocket mock for real-time updates"
    ]
  },
  "kernel_specs": {
    "overview": "The Core Kernel provides a small, highly-focused foundation used by every feature and provider in the app. It contains the single source of truth for domain types and API contracts (core/contracts.ts), materialized runtime configuration (app/config.ts), a typed event bus for decoupled communication (core/events.ts), a hook registry for extension points (core/hooks.ts), a small DI container for swapping implementations in tests/dev (core/di.ts), and compact safe utilities used by kernel-level code (core/utils.ts). All other modules import contracts, events, hooks and DI tokens from this kernel. Keep the kernel deliberately minimal, well-typed and side-effect free so it can be imported anywhere (including mocks and node-based tooling)."
  },
  "sections": [
    {
      "id": "api-client",
      "file_path": "src/services/apiClient.ts",
      "description": "Centralized API client wrapper using fetch with automatic auth token injection, timeout, JSON parse handling, and fallback behavior when backend unavailable (graceful errors). Swappable to a mock adapter in dev.",
      "dependencies": [
        "src/app/config.ts",
        "src/services/localPersistence.ts"
      ],
      "exports": [
        "apiClient",
        "setApiToken",
        "clearApiToken"
      ],
      "priority": 1
    },
    {
      "id": "app-config",
      "file_path": "app/config.ts",
      "description": "Materialized application configuration including environment flags (dev mode, mock toggles), API base paths, feature flags and i18n default. Reads from process.env where appropriate and exports a typed config.",
      "dependencies": [],
      "exports": [
        "AppConfig",
        "config"
      ],
      "priority": 1,
      "purpose": "Materialized runtime configuration object. Exposes typed flags and computed helper booleans. Also exports the development mock users derived from the top-level application configuration.",
      "content": "Summary\n- Purpose: create a typed, materialized config that other modules import at runtime. The file reads environment variables minimally (process.env.NODE_ENV, process.env.REACT_APP_API_BASE) and merges them with the static application configuration provided in the build/development environment.\n- Keep the config pure and serializable.\n\nTypes\n- export interface AppConfig {\n-   appName: string;\n-   environment: 'development' | 'production' | 'test';\n-   apiBaseUrl: string;\n-   appType: string; // 'healthcare'\n-   framework: string; // 'react'\n-   features: string[]; // from architecture.features\n-   developmentMode: {\n-     enableMockData: boolean;\n-     mockAuthUsers: Array<{ email: string; password: string; role: 'doctor' | 'patient' | 'nurse' | string }>;\n-     mockApiEndpoints: string[];\n-     disableWebsocketInDev: boolean;\n-     useLocalstoragePersistence: boolean;\n-   };\n-   i18n: { defaultLocale: string; supported: string[] };\n-   featureFlags: Record<string, boolean>;\n- }\n\nMaterialized value and computed helpers\n- const isDevelopment = process.env.NODE_ENV !== 'production';\n- const apiBase = process.env.REACT_APP_API_BASE ?? (isDevelopment ? 'http://localhost:4000' : '/api');\n\n- export const config: AppConfig = { ... } // fully populated below.\n\nConcrete exported config (example)\nexport const config: AppConfig = {\n  appName: 'Patient Portal',\n  environment: (process.env.NODE_ENV as any) || 'development',\n  apiBaseUrl: apiBase,\n  appType: 'healthcare',\n  framework: 'react',\n  features: [\n    'appointment scheduling',\n    'medical records viewer',\n    'prescription management',\n    'telemedicine interface',\n    'health metrics dashboard',\n    'lab results display',\n    'insurance claim tracker',\n    'medication reminders'\n  ],\n  developmentMode: {\n    enableMockData: true,\n    mockAuthUsers: [\n      { email: 'doctor@hospital.com', password: 'doc123', role: 'doctor' },\n      { email: 'patient@email.com', password: 'patient123', role: 'patient' },\n      { email: 'nurse@hospital.com', password: 'nurse123', role: 'nurse' }\n    ],\n    mockApiEndpoints: [\n      '/api/appointments',\n      '/api/medical-records',\n      '/api/prescriptions',\n      '/api/lab-results',\n      '/api/insurance',\n      '/api/medications'\n    ],\n    disableWebsocketInDev: true,\n    useLocalstoragePersistence: true\n  },\n  i18n: { defaultLocale: 'en', supported: ['en', 'ko'] },\n  featureFlags: {\n    telemedicine: true,\n    prescriptionsRefill: true,\n    insuranceClaims: true\n  }\n};\n\nComputed helpers\n- export const isDevelopment = config.environment === 'development';\n- export const shouldUseMockData = isDevelopment && config.developmentMode.enableMockData;\n- export const shouldDisableWebsocket = isDevelopment && config.developmentMode.disableWebsocketInDev;\n- export const supportsFeature = (name: string) => config.features.includes(name) || !!config.featureFlags[name];\n\nMock data exposure\n- If shouldUseMockData is true, export a strongly-typed array of mockAuthUsers: export const mockAuthUsers = config.developmentMode.mockAuthUsers;\n\nPatterns and conventions\n- Import this file everywhere as the canonical runtime config. Avoid reading process.env elsewhere in the codebase.\n- Keep secrets out of the commit \u2014 only non-sensitive values belong here. In CI/production REACT_APP_API_BASE should be set externally.\n\nExample usage\n- import { config, shouldUseMockData, mockAuthUsers } from '@/app/config';\n- if (shouldUseMockData) { startMockServer({ users: mockAuthUsers }); }\n\nIntegration points\n- mocks/*: will import mockAuthUsers to seed authentication.\n- services/apiClient.ts and providers/QueryProvider.tsx: will read config.apiBaseUrl.\n- websocketMock.ts: will consult shouldDisableWebsocket.\n"
    },
    {
      "id": "app-layout",
      "file_path": "src/components/Layout/AppLayout.tsx",
      "description": "Main application layout used by protected pages: includes Header, Sidebar and main content area with responsive behavior for mobile and desktop.",
      "dependencies": [
        "src/components/Layout/Header.tsx",
        "src/components/Layout/Sidebar.tsx",
        "src/hooks/useAuth.ts"
      ],
      "exports": [
        "AppLayout"
      ],
      "priority": 1
    },
    {
      "id": "app-root",
      "file_path": "src/App.tsx",
      "description": "Top-level App component: mounts router inside ErrorBoundary and Suspense with Fallback; provides global layout. Connects i18n initialization.",
      "dependencies": [
        "src/routes/AppRouter.tsx",
        "src/components/ErrorBoundary.tsx",
        "src/components/SuspenseFallback.tsx",
        "src/providers/ThemeProvider.tsx",
        "src/i18n/i18n.ts"
      ],
      "exports": [
        "App component"
      ],
      "priority": 1
    },
    {
      "id": "app-router",
      "file_path": "src/routes/AppRouter.tsx",
      "description": "React Router v6 configuration: declares public and protected routes for all pages including lazy-loaded feature pages. Integrates ProtectedRoute for auth-guarded sections.",
      "dependencies": [
        "src/routes/ProtectedRoute.tsx",
        "src/pages/HomePage.tsx",
        "src/pages/LoginPage.tsx",
        "src/pages/DashboardPage.tsx",
        "src/pages/NotFoundPage.tsx",
        "src/pages/appointments/AppointmentListPage.tsx",
        "src/pages/appointments/AppointmentDetailPage.tsx",
        "src/pages/records/MedicalRecordsPage.tsx",
        "src/pages/prescriptions/PrescriptionsPage.tsx",
        "src/pages/telemedicine/TelemedicinePage.tsx"
      ],
      "exports": [
        "AppRouter component"
      ],
      "priority": 1
    },
    {
      "id": "appointments-service",
      "file_path": "src/services/appointmentsService.ts",
      "description": "Service functions for appointment scheduling: list, create, update, cancel. Consumed by React Query hooks in pages and components.",
      "dependencies": [
        "src/services/apiClient.ts"
      ],
      "exports": [
        "listAppointments",
        "getAppointment",
        "createAppointment",
        "updateAppointment",
        "cancelAppointment"
      ],
      "priority": 1
    },
    {
      "id": "auth-provider",
      "file_path": "src/providers/AuthProvider.tsx",
      "description": "Auth context provider that manages login/logout, token storage (via localPersistence in dev), exposes current user and role, and supports mock auth users in development. Uses core/contracts types.",
      "dependencies": [
        "src/services/localPersistence.ts",
        "src/mocks/data/authUsers.ts",
        "src/core/events.ts"
      ],
      "exports": [
        "AuthProvider",
        "useAuthContext (context)"
      ],
      "priority": 1
    },
    {
      "id": "core-contracts",
      "file_path": "core/contracts.ts",
      "description": "Domain types, API request/response contracts, enums and shared TypeScript interfaces used across the app (appointments, records, prescriptions, labs, user, auth token, WebSocket events).",
      "dependencies": [],
      "exports": [
        "User",
        "AuthToken",
        "Role",
        "Appointment",
        "MedicalRecord",
        "Prescription",
        "LabResult",
        "InsuranceClaim",
        "Medication",
        "ApiResponse",
        "WebSocketEvent"
      ],
      "priority": 1,
      "purpose": "Domain types, API request/response contracts and shared interfaces used across the entire application (appointments, records, prescriptions, lab results, user and auth types, WebSocket events, form/loading states).",
      "content": "Summary\n- Purpose: provide a lightweight, fully-typed contract layer that every file imports from (avoid importing services/providers here). Keep only pure types and small helper types.\n\nType design principles\n- Use discriminated unions where appropriate (e.g., role: 'patient' | 'doctor' | 'nurse').\n- Keep fields optional only when truly optional across API responses.\n- Prefer ISO 8601 strings for dates in API payloads (backend-agnostic).\n- Provide generic ApiResult<T> and ApiError to standardize error handling.\n\nRequired types\n1) Basic primitives and helpers\n- export type Nullable<T> = T | null;\n\n2) Roles and Auth token\n- export type Role = 'patient' | 'doctor' | 'nurse' | 'admin';\n\n- export interface AuthToken {\n-   accessToken: string; // JWT or opaque token\n-   refreshToken?: string;\n-   expiresAt?: string; // ISO date-time when token expires\n- }\n\n3) User types\n- export interface UserBase {\n-   id: string;\n-   email: string;\n-   fullName: string;\n-   avatarUrl?: string;\n-   role: Role;\n- }\n-\n- export interface Patient extends UserBase {\n-   role: 'patient';\n-   dateOfBirth?: string; // ISO\n-   medicalRecordNumber?: string;\n- }\n-\n- export interface Doctor extends UserBase {\n-   role: 'doctor';\n-   specialty?: string;\n-   licenseId?: string;\n- }\n-\n- export interface Nurse extends UserBase {\n-   role: 'nurse';\n-   department?: string;\n- }\n-\n- export type User = Patient | Doctor | Nurse | UserBase;\n\n4) Domain models (keep minimal fields required by UI)\n- Appointment\n  - id, patientId, providerId, startAt, endAt, status, type, location, notes\n  - status: 'scheduled' | 'confirmed' | 'cancelled' | 'completed' | 'no_show'\n  - type: 'telemedicine' | 'in_person' | 'phone'\n\n- MedicalRecord\n  - id, patientId, title, summary, recordedAt, attachments?: string[]\n\n- Prescription\n  - id, patientId, prescribedBy (doctor id), medicationId, dosage, frequency, startAt, endAt, status\n  - status: 'active' | 'expired' | 'cancelled' | 'refill_requested'\n\n- LabResult\n  - id, patientId, testName, value, unit, referenceRange?, collectedAt, status\n  - status: 'preliminary' | 'final' | 'amended'\n\n- InsuranceClaim\n  - id, patientId, providerId, amount, currency, submittedAt, status\n  - status: 'pending' | 'approved' | 'denied' | 'in_review'\n\n- Medication\n  - id, name, form, strength, instructions, nextReminderAt?\n\nExample Type Declarations (pseudo-TS inside content)\nexport interface Appointment {\n  id: string;\n  patientId: string;\n  providerId: string;\n  startAt: string; // ISO\n  endAt?: string; // ISO\n  status: 'scheduled' | 'confirmed' | 'cancelled' | 'completed' | 'no_show';\n  type: 'telemedicine' | 'in_person' | 'phone';\n  location?: string;\n  notes?: string;\n}\n\nexport interface MedicalRecord {\n  id: string;\n  patientId: string;\n  title: string;\n  summary: string;\n  recordedAt: string; // ISO\n  attachments?: Array<{ url: string; name?: string; mime?: string }>;\n}\n\nexport interface Prescription {\n  id: string;\n  patientId: string;\n  prescribedBy: string; // doctor id\n  medicationId: string;\n  dosage: string; // human readable: '5 mg'\n  frequency: string; // 'twice daily'\n  startAt?: string;\n  endAt?: string;\n  status: 'active' | 'expired' | 'cancelled' | 'refill_requested';\n}\n\nexport interface LabResult {\n  id: string;\n  patientId: string;\n  testName: string;\n  value: number | string;\n  unit?: string;\n  referenceRange?: string;\n  collectedAt: string; // ISO\n  status: 'preliminary' | 'final' | 'amended';\n  flags?: 'low' | 'high' | 'normal';\n}\n\nexport interface InsuranceClaim {\n  id: string;\n  patientId: string;\n  providerId?: string;\n  amount: number;\n  currency: string;\n  submittedAt?: string;\n  status: 'pending' | 'approved' | 'denied' | 'in_review';\n}\n\nexport interface Medication {\n  id: string;\n  name: string;\n  form?: string; // tablet, liquid\n  strength?: string; // '500 mg'\n  instructions?: string;\n  nextReminderAt?: string;\n}\n\n5) API envelope types\n- export interface ApiError {\n-   code?: string;\n-   message: string;\n-   details?: any;\n- }\n-\n- export interface ApiResult<T> {\n-   success: boolean;\n-   data?: T;\n-   error?: ApiError;\n- }\n-\n- export interface PaginatedResponse<T> {\n-   items: T[];\n-   total: number;\n-   page: number;\n-   perPage: number;\n- }\n\n6) WebSocket event types (used by WebSocket mock and real WS integrations). Include event discriminants, payload shapes.\n- export type WebSocketEventType =\n-   | 'appointment_update'\n-   | 'incoming_call'\n-   | 'lab_result_available'\n-   | 'prescription_refill_request'\n-   | 'notification';\n-\n- export interface WebSocketEventBase {\n-   id: string;\n-   type: WebSocketEventType;\n-   timestamp: string; // ISO\n- }\n-\n- export interface AppointmentUpdateEvent extends WebSocketEventBase {\n-   type: 'appointment_update';\n-   payload: { appointmentId: string; status: Appointment['status']; }; \n- }\n-\n- export interface IncomingCallEvent extends WebSocketEventBase {\n-   type: 'incoming_call';\n-   payload: { callId: string; fromUserId: string; room?: string; }; \n- }\n-\n- export type WebSocketEvent = AppointmentUpdateEvent | IncomingCallEvent | {\n-   type: 'lab_result_available';\n-   payload: { labResultId: string; patientId: string; };\n- } | { type: 'prescription_refill_request'; payload: { prescriptionId: string; patientId: string } } | { type: 'notification'; payload: { title: string; body: string } };\n\n7) UI state helpers\n- export type LoadingState = 'idle' | 'loading' | 'success' | 'error';\n-\n- export interface FormState {\n-   isSubmitting: boolean;\n-   isValid: boolean;\n-   errors?: Record<string, string>;\n- }\n\nPatterns and conventions\n- Keep domain models small and serializable.\n- Do not include service methods or runtime logic in this file\u2014only pure types.\n- Use these types across hooks, providers and services (e.g., appointmentsService returns ApiResult<PaginatedResponse<Appointment>>).\n\nExample usage\n- import { Appointment, ApiResult } from '@/core/contracts';\n- const result: ApiResult<Appointment[]> = await apiClient.get('/api/appointments');\n\nIntegration points\n- app/config.ts: will import Role types only to type-check mock user fixtures.\n- services/*: import domain models to declare return types.\n- hooks/useWebSocket.ts and core/events.ts: use WebSocketEvent types.\n"
    },
    {
      "id": "core-di",
      "file_path": "core/di.ts",
      "description": "Simple dependency injection container / service locator (optional), used to swap implementations in tests or mock mode.",
      "dependencies": [],
      "exports": [
        "register",
        "resolve",
        "clearRegistry"
      ],
      "priority": 1,
      "purpose": "A minimal, type-safe dependency injection service locator and token registry. Used to swap implementations in tests and to register mock adapters in development. Keep it intentionally small \u2014 the preferred pattern in the app is explicit props/context; DI is only for global swappables (apiClient, storage, websocket).",
      "content": "Summary\n- Purpose: provide a minimal, predictable container with token-level type safety. The container supports registering implementations under tokens (unique symbols) and resolving them in runtime code.\n- Do not use reflection or stringly-typed keys. Use well-documented symbols exported from this module for the canonical tokens.\n\nToken abstraction\n- export type Token<T> = symbol & { __type?: T };\n- export function createToken<T>(desc: string): Token<T> { return Symbol(desc) as Token<T>; }\n\nPre-defined tokens\n- export const Tokens = {\n-   ApiClient: createToken<{ get: Function; post: Function; put: Function; delete: Function }>('ApiClient'),\n-   AuthService: createToken<{ login: Function; logout: Function; getCurrentUser: Function }>('AuthService'),\n-   StorageService: createToken<{ getItem: (k: string) => any; setItem: (k: string, v: any) => void; removeItem: (k: string) => void }>('StorageService'),\n-   WebSocketService: createToken<{ publish: Function; subscribe: Function; unsubscribe: Function }>('WebSocketService')\n- } as const;\n\nContainer implementation\n- export class DIContainer {\n-   private registry = new Map<Token<any>, any>();\n-\n-   register<T>(token: Token<T>, impl: T, { overwrite = false } = {}) {\n-     if (!overwrite && this.registry.has(token)) throw new Error('Token already registered');\n-     this.registry.set(token, impl);\n-   }\n-\n-   resolve<T>(token: Token<T>): T {\n-     if (!this.registry.has(token)) throw new Error('No provider registered for token');\n-     return this.registry.get(token) as T;\n-   }\n-\n-   clear() { this.registry.clear(); }\n- }\n\nSingleton container helpers\n- export const container = new DIContainer();\n- export const register = container.register.bind(container);\n- export const resolve = container.resolve.bind(container);\n- export const clearRegistry = container.clear.bind(container);\n\nUsage pattern\n- Service implementation registers at app bootstrap (main.tsx or providers):\n  register(Tokens.ApiClient, apiClientInstance);\n  register(Tokens.StorageService, localStorageAdapter);\n\n- Consumers resolve in modules that must be swappable (rare):\n  const api = resolve(Tokens.ApiClient);\n  await api.get('/api/appointments');\n\nType-safety guidance\n- Prefer to import the concrete apiClient or pass implementations via React Context. Use DI only for true global swappables or when writing tests that need to swap implementations without mounting providers.\n\nIntegration points\n- main.tsx: register real implementations, and during development main.tsx can register mock implementations (mock apiClient, mock websocket) before app mounts.\n- tests: tests can call register(token, mockImpl, { overwrite: true }) and restore/clearRegistry after tests.\n"
    },
    {
      "id": "core-events",
      "file_path": "core/events.ts",
      "description": "Lightweight typed event bus for in-app pub/sub for cross-cutting events (incoming call, notification, global error).",
      "dependencies": [],
      "exports": [
        "EventBus",
        "subscribe",
        "publish",
        "unsubscribe"
      ],
      "priority": 1,
      "purpose": "Typed, lightweight in-process event bus for cross-cutting notifications (incoming telemedicine calls, global notifications, background sync results). The event bus supports synchronous and asynchronous handlers and is safe to import anywhere.",
      "content": "Summary\n- Purpose: provide a tiny, typesafe publish/subscribe mechanism used by both UI and non-UI modules. Prefer EventBus for cross-component signals; prefer React Context for local UI state.\n- Implementation guarantees: handlers can be sync or return Promise<void>. publish returns Promise<void> that resolves when all handlers finished or rejects if any handler throws (caller can ignore errors if they wish).\n\nEvent map (typed)\n- Define a central EventMap interface mapping event names to payload shapes. Keep names camelCase and domain-specific.\n\nexport interface EventMap {\n  // Telemedicine\n  incomingCall: { callId: string; fromUserId: string; room?: string };\n  callEnded: { callId: string; reason?: string };\n\n  // Appointment lifecycle\n  appointmentUpdated: { appointmentId: string; status: string };\n\n  // Notifications\n  notification: { id: string; title: string; body?: string; level?: 'info' | 'warning' | 'error' };\n\n  // Auth\n  login: { userId: string };\n  logout: { userId?: string };\n\n  // Global error\n  globalError: { error: Error | string; context?: any };\n}\n\nEventBus class\n- class EventBus<EM extends Record<string, any>> {\n-   private handlers = new Map<keyof EM, Set<(...args: any[]) => any>>();\n-\n-   on<K extends keyof EM>(event: K, handler: (payload: EM[K]) => void | Promise<void>): () => void {\n-     // register and return unsubscribe\n-   }\n-\n-   off<K extends keyof EM>(event: K, handler: (payload: EM[K]) => void | Promise<void>): void {\n-     // remove handler\n-   }\n-\n-   async emit<K extends keyof EM>(event: K, payload: EM[K]): Promise<void> {\n-     // call handlers (catch per-handler errors, aggregate or rethrow depending on policy)\n-   }\n- }\n\nExported singleton\n- export const events = new EventBus<EventMap>();\n\nHelper functions exported for ergonomic usage\n- export const subscribe = events.on.bind(events);\n- export const unsubscribe = events.off.bind(events);\n- export const publish = events.emit.bind(events);\n\nBehavior and error policy\n- Handlers run in registration order.\n- publish waits for all handlers (await Promise.allSettled([...])) and then:\n  - if any handler throws, publish will log the error via core/utils.log and rethrow an aggregated Error containing first error message unless caller passes { swallowErrors: true }.\n- Provide an optional options bag on emit to control swallowErrors.\n\nCode example usage\n- import { publish, subscribe, events } from '@/core/events';\n-\n- // subscribing\n- const unsub = subscribe('incomingCall', async (payload) => {\n-   // show incoming call UI\n-   await showCallModal(payload);\n- });\n-\n- // publishing\n- await publish('incomingCall', { callId: 'abc', fromUserId: 'user-1', room: 'room-1' });\n-\n- // cleanup\n- unsub();\n\nIntegration points\n- AuthProvider emits 'login' and 'logout'.\n- WebSocketMock will publish 'appointmentUpdated', 'labResultAvailable' etc. Services and UI components subscribe to these events.\n- ErrorBoundary should publish 'globalError' when catching.\n"
    },
    {
      "id": "core-hooks",
      "file_path": "core/hooks.ts",
      "description": "Registry for extension hooks; allows other modules to register lifecycle hooks (e.g., onAuthChange).",
      "dependencies": [],
      "exports": [
        "registerHook",
        "runHooks"
      ],
      "priority": 1,
      "purpose": "A small, typed hook registry used to register lifecycle extension points. Use this for cross-cutting plugins (analytics, logging, feature toggles) without coupling to provider implementations.",
      "content": "Summary\n- Purpose: enable feature modules or external integrations to register small callbacks at well-known points in the app lifecycle (e.g., beforeApiRequest, afterApiResponse, onLogin, onLogout, onRouteChange). Hooks run in registration order and can be sync or async.\n- Keep hooks lightweight: they receive a typed context and return void or Promise<void>.\n\nHookPoint names\n- export type HookPoint = 'beforeApiRequest' | 'afterApiResponse' | 'onLogin' | 'onLogout' | 'onRouteChange' | 'onError';\n\nHook context shapes\n- export interface HookContextBase { timestamp: string; }\n- export interface BeforeApiRequestContext extends HookContextBase { url: string; method: string; payload?: any; headers?: Record<string, string> }\n- export interface AfterApiResponseContext extends HookContextBase { url: string; method: string; status: number; response?: any; error?: any }\n- export interface AuthContext extends HookContextBase { userId: string }\n- export interface RouteChangeContext extends HookContextBase { from?: string; to: string }\n- export type HookContext = BeforeApiRequestContext | AfterApiResponseContext | AuthContext | RouteChangeContext | { [k: string]: any };\n\nHandler signature\n- export type HookHandler<HP extends HookPoint = HookPoint> = (ctx: HookContext) => void | Promise<void>;\n\nHookRegistry class\n- class HookRegistry {\n-   private registry = new Map<HookPoint, Set<HookHandler>>();\n-\n-   register(point: HookPoint, handler: HookHandler): () => void {\n-     // add and return unregister fn\n-   }\n-\n-   async run(point: HookPoint, ctx: HookContext): Promise<void> {\n-     // run handlers sequentially (or parallel depending on point). If a handler throws, log via core/utils and continue (do not break the chain) unless a handler returns a specific control message.\n-   }\n- }\n\nTop-level exports\n- export const hooks = new HookRegistry();\n- export const registerHook = hooks.register.bind(hooks);\n- export const runHooks = hooks.run.bind(hooks);\n\nDesign decisions\n- beforeApiRequest hooks should be able to mutate headers/payload if they return a modified object. To keep typing simple, beforeApiRequest handlers can return an optional mutated payload object; the caller (apiClient) should pick up the returned object.\n- afterApiResponse and onError are primarily for logging, analytics and instrumentation; they should not mutate the response.\n\nExample usage\n- Register a hook in a plugin module:\n  registerHook('beforeApiRequest', async (ctx) => {\n    // example: add header\n    if (ctx.headers) { ctx.headers['x-trace-id'] = generateTraceId(); }\n  });\n\n- apiClient integration point in services/apiClient.ts:\n  // before the fetch\n  const beforeResult = await runHooks('beforeApiRequest', { timestamp: new Date().toISOString(), url, method, payload, headers });\n  // after receiving response\n  await runHooks('afterApiResponse', { timestamp: new Date().toISOString(), url, method, status: response.status, response: parsed });\n\nIntegration points\n- services/apiClient.ts: call runHooks('beforeApiRequest'...) and runHooks('afterApiResponse'...)\n- providers/AuthProvider: call runHooks('onLogin') and runHooks('onLogout')\n- routes/AppRouter.tsx or router wrapper: call runHooks('onRouteChange')\n- ErrorBoundary: call runHooks('onError')\n"
    },
    {
      "id": "core-utils",
      "file_path": "core/utils.ts",
      "description": "Core utilities shared across the app (safeJSON, noop, sleep, fetchWithTimeout). Intended as very small primitives safe to use from kernel-level files.",
      "dependencies": [],
      "exports": [
        "safeJSON",
        "noop",
        "sleep",
        "fetchWithTimeout"
      ],
      "priority": 1,
      "purpose": "Small set of zero-dependency runtime utilities used by core kernel files and safe to import everywhere (safeJSON, noop, sleep, fetchWithTimeout, small logger). Keep this file tiny \u2014 avoid pulling in 3rd-party libs.",
      "content": "Summary\n- Purpose: small, dependency-free helpers used by kernel code (e.g., EventBus, HookRegistry) and safe to import anywhere including build-tooling.\n\nFunctions to implement\n1) noop\n- export const noop = (): void => {};\n\n2) safeJSON\n- export function safeJSON<T = any>(str: string | undefined | null, fallback: T | null = null): T | null {\n-   if (str == null) return fallback;\n-   try { return JSON.parse(str) as T; } catch (err) { log('warn', 'safeJSON parse failed', { str }); return fallback; }\n- }\n\n3) sleep\n- export const sleep = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));\n\n4) fetchWithTimeout\n- export async function fetchWithTimeout(input: RequestInfo, init: RequestInit = {}, timeout = 10000) {\n-   const controller = new AbortController();\n-   const timer = setTimeout(() => controller.abort(), timeout);\n-   try {\n-     const res = await fetch(input, { ...init, signal: controller.signal });\n-     clearTimeout(timer);\n-     return res;\n-   } catch (err) {\n-     clearTimeout(timer);\n-     throw err;\n-   }\n- }\n\n5) log\n- Lightweight logging wrapper that respects NODE_ENV: in production log only errors. Provide log(level, message, meta?).\n- export const log = (level: 'debug' | 'info' | 'warn' | 'error', message: string, meta?: any) => { if (process.env.NODE_ENV === 'production' && level === 'debug') return; /* prefer console for now */ console[level === 'debug' ? 'debug' : level === 'info' ? 'info' : level === 'warn' ? 'warn' : 'error'](`[${level.toUpperCase()}] ${message}`, meta ?? ''); };\n\n6) date helpers (tiny)\n- export function isISODate(value: string): boolean { return /^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}/.test(value); }\n- export function parseISODate(s: string): Date | null { try { const d = new Date(s); return Number.isNaN(d.getTime()) ? null : d; } catch { return null; } }\n\n7) deepClone\n- export function deepClone<T>(obj: T): T { return JSON.parse(JSON.stringify(obj)); }\n\nPatterns and conventions\n- Keep this file small to avoid increasing bundle size. When adding utilities, prefer to keep them pure and well-tested.\n- All functions are side-effect free except log().\n\nExample usage\n- import { safeJSON, fetchWithTimeout, sleep, log } from '@/core/utils';\n- const parsed = safeJSON<MyType>(raw, null);\n- await fetchWithTimeout('/api/ping', {}, 5000).catch(err => log('error', 'ping failed', err));\n\nIntegration points\n- events.ts: uses log() and safeJSON for serializing handler errors.\n- hooks.ts and di.ts: use noop, sleep for testing and safe shutdown flows.\n"
    },
    {
      "id": "entry-main",
      "file_path": "src/main.tsx",
      "description": "React entry point: renders App into DOM, bootstraps mock server in development, wraps with top-level providers (QueryProvider, AuthProvider, ThemeProvider) and ErrorBoundary.",
      "dependencies": [
        "src/App.tsx",
        "src/providers/QueryProvider.tsx",
        "src/providers/AuthProvider.tsx",
        "src/providers/ThemeProvider.tsx",
        "src/mocks/browser.ts",
        "src/app/config.ts"
      ],
      "exports": [
        "bootstrap"
      ],
      "priority": 1
    },
    {
      "id": "error-boundary",
      "file_path": "src/components/ErrorBoundary.tsx",
      "description": "React Error Boundary component with fallback UI and option to report errors to an event bus. Used at top-level to catch rendering errors.",
      "dependencies": [
        "src/core/events.ts"
      ],
      "exports": [
        "ErrorBoundary"
      ],
      "priority": 1
    },
    {
      "id": "global-styles",
      "file_path": "src/index.css",
      "description": "Tailwind base imports and global CSS variables for light/dark themes. Used by main.tsx.",
      "dependencies": [],
      "exports": [
        "global styles (side-effect import)"
      ],
      "priority": 1
    },
    {
      "id": "i18n-en",
      "file_path": "src/i18n/locales/en.json",
      "description": "English translations for UI strings. Minimal set covering pages, labels and validation messages.",
      "dependencies": [],
      "exports": [
        "en JSON object"
      ],
      "priority": 1
    },
    {
      "id": "i18n-ko",
      "file_path": "src/i18n/locales/ko.json",
      "description": "Korean translations for UI strings (Korean support required).",
      "dependencies": [],
      "exports": [
        "ko JSON object"
      ],
      "priority": 1
    },
    {
      "id": "i18n-setup",
      "file_path": "src/i18n/i18n.ts",
      "description": "i18next initialization with English and Korean locales, language detector, and a typed translation hook. Exports initialized instance and helpers.",
      "dependencies": [
        "src/i18n/locales/en.json",
        "src/i18n/locales/ko.json",
        "src/app/config.ts"
      ],
      "exports": [
        "i18n",
        "useTranslation"
      ],
      "priority": 1
    },
    {
      "id": "insurance-service",
      "file_path": "src/services/insuranceService.ts",
      "description": "Service functions for insurance claim tracking.",
      "dependencies": [
        "src/services/apiClient.ts"
      ],
      "exports": [
        "listClaims",
        "getClaim"
      ],
      "priority": 1
    },
    {
      "id": "labs-service",
      "file_path": "src/services/labsService.ts",
      "description": "Service functions for lab results retrieval and status checks.",
      "dependencies": [
        "src/services/apiClient.ts"
      ],
      "exports": [
        "listLabResults",
        "getLabResult"
      ],
      "priority": 1
    },
    {
      "id": "layout-header",
      "file_path": "src/components/Layout/Header.tsx",
      "description": "Top navigation header with user menu, language switcher and theme toggle. Accessible keyboard navigation and ARIA labels.",
      "dependencies": [
        "src/providers/ThemeProvider.tsx",
        "src/hooks/useAuth.ts",
        "src/i18n/i18n.ts"
      ],
      "exports": [
        "Header"
      ],
      "priority": 1
    },
    {
      "id": "layout-sidebar",
      "file_path": "src/components/Layout/Sidebar.tsx",
      "description": "Responsive sidebar with navigation links for features; handles collapsing and keyboard navigation.",
      "dependencies": [
        "src/hooks/useAuth.ts"
      ],
      "exports": [
        "Sidebar"
      ],
      "priority": 1
    },
    {
      "id": "local-persistence",
      "file_path": "src/services/localPersistence.ts",
      "description": "Abstracts localStorage get/set interactions, namespaced keys for auth and UI state. Honors development config for persistence.",
      "dependencies": [
        "src/app/config.ts"
      ],
      "exports": [
        "getItem",
        "setItem",
        "removeItem",
        "persistAuth",
        "readAuth"
      ],
      "priority": 1
    },
    {
      "id": "medications-service",
      "file_path": "src/services/medicationsService.ts",
      "description": "Service functions for medication tracking and reminders.",
      "dependencies": [
        "src/services/apiClient.ts"
      ],
      "exports": [
        "listMedications",
        "getMedication",
        "dismissReminder"
      ],
      "priority": 1
    },
    {
      "id": "mock-server",
      "file_path": "src/services/mockServer.ts",
      "description": "Bootstraps the in-app mock server when dev mode is enabled. Initializes handlers from mocks/handlers.ts and exposes start/stop functions. Ensures the app runs standalone.",
      "dependencies": [
        "src/mocks/browser.ts",
        "src/app/config.ts"
      ],
      "exports": [
        "startMockServer",
        "stopMockServer"
      ],
      "priority": 1
    },
    {
      "id": "mocks-appointments-data",
      "file_path": "src/mocks/data/appointments.ts",
      "description": "Mock appointment data used by mock API endpoint /api/appointments.",
      "dependencies": [],
      "exports": [
        "mockAppointments"
      ],
      "priority": 1
    },
    {
      "id": "mocks-auth-users",
      "file_path": "src/mocks/data/authUsers.ts",
      "description": "Mock users for development mode (doctor, patient, nurse) used by mock auth server. Matches app.config mock_auth_users.",
      "dependencies": [
        "src/app/config.ts"
      ],
      "exports": [
        "mockAuthUsers"
      ],
      "priority": 1
    },
    {
      "id": "mocks-browser",
      "file_path": "src/mocks/browser.ts",
      "description": "Client-side mock server bootstrapper (MSW-like) that registers handlers and exposes a start() function for main.tsx to call in development.",
      "dependencies": [
        "src/mocks/handlers.ts"
      ],
      "exports": [
        "startMockBrowser",
        "stopMockBrowser"
      ],
      "priority": 1
    },
    {
      "id": "mocks-handlers",
      "file_path": "src/mocks/handlers.ts",
      "description": "Defines mock API handlers for endpoints listed in development config (/api/appointments, /api/medical-records, etc.). Also implements mock auth login and token issuance.",
      "dependencies": [
        "src/mocks/data/authUsers.ts",
        "src/mocks/data/appointments.ts",
        "src/mocks/data/medicalRecords.ts",
        "src/mocks/data/prescriptions.ts",
        "src/mocks/data/labResults.ts",
        "src/mocks/data/insurance.ts",
        "src/mocks/data/medications.ts"
      ],
      "exports": [
        "handlers"
      ],
      "priority": 1
    },
    {
      "id": "mocks-insurance-data",
      "file_path": "src/mocks/data/insurance.ts",
      "description": "Mock insurance claim data for /api/insurance.",
      "dependencies": [],
      "exports": [
        "mockInsuranceClaims"
      ],
      "priority": 1
    },
    {
      "id": "mocks-lab-results-data",
      "file_path": "src/mocks/data/labResults.ts",
      "description": "Mock lab results for /api/lab-results.",
      "dependencies": [],
      "exports": [
        "mockLabResults"
      ],
      "priority": 1
    },
    {
      "id": "mocks-medical-records-data",
      "file_path": "src/mocks/data/medicalRecords.ts",
      "description": "Mock medical records data for /api/medical-records.",
      "dependencies": [],
      "exports": [
        "mockMedicalRecords"
      ],
      "priority": 1
    },
    {
      "id": "mocks-medications-data",
      "file_path": "src/mocks/data/medications.ts",
      "description": "Mock medications and reminders for /api/medications used to drive medication reminders feature.",
      "dependencies": [],
      "exports": [
        "mockMedications"
      ],
      "priority": 1
    },
    {
      "id": "mocks-prescriptions-data",
      "file_path": "src/mocks/data/prescriptions.ts",
      "description": "Mock prescription data for /api/prescriptions.",
      "dependencies": [],
      "exports": [
        "mockPrescriptions"
      ],
      "priority": 1
    },
    {
      "id": "postcss-config",
      "file_path": "config/postcss.config.cjs",
      "description": "PostCSS configuration for Tailwind processing.",
      "dependencies": [],
      "exports": [
        "postcss config (build-time)"
      ],
      "priority": 1
    },
    {
      "id": "prescriptions-service",
      "file_path": "src/services/prescriptionsService.ts",
      "description": "Service functions for prescriptions management.",
      "dependencies": [
        "src/services/apiClient.ts"
      ],
      "exports": [
        "listPrescriptions",
        "requestRefill"
      ],
      "priority": 1
    },
    {
      "id": "protected-route",
      "file_path": "src/routes/ProtectedRoute.tsx",
      "description": "Route wrapper that checks authentication and role-based access via useAuth; redirects to login for unauthorized users.",
      "dependencies": [
        "src/hooks/useAuth.ts",
        "src/pages/LoginPage.tsx"
      ],
      "exports": [
        "ProtectedRoute component"
      ],
      "priority": 1
    },
    {
      "id": "query-provider",
      "file_path": "src/providers/QueryProvider.tsx",
      "description": "Sets up React Query QueryClient with sensible defaults (staleTime, retries) and ErrorBoundary integration. Injects auth token into apiClient via context or apiClient setter.",
      "dependencies": [
        "src/lib/reactQuery.ts",
        "src/services/apiClient.ts",
        "src/providers/AuthProvider.tsx"
      ],
      "exports": [
        "QueryProvider"
      ],
      "priority": 1
    },
    {
      "id": "react-query-setup",
      "file_path": "src/lib/reactQuery.ts",
      "description": "Creates and configures a QueryClient instance used by QueryProvider; defines common query keys and helper functions.",
      "dependencies": [],
      "exports": [
        "createQueryClient",
        "queryKeys"
      ],
      "priority": 1
    },
    {
      "id": "records-service",
      "file_path": "src/services/recordsService.ts",
      "description": "Service functions for medical records retrieval and filtering.",
      "dependencies": [
        "src/services/apiClient.ts"
      ],
      "exports": [
        "listRecords",
        "getRecord"
      ],
      "priority": 1
    },
    {
      "id": "store-state",
      "file_path": "src/state/store.ts",
      "description": "Global UI state (sidebar open, modals) managed via React Context and useReducer (small, predictable). Not for server data (React Query used for that).",
      "dependencies": [
        "src/providers/ThemeProvider.tsx"
      ],
      "exports": [
        "StoreProvider",
        "useStore"
      ],
      "priority": 1
    },
    {
      "id": "suspense-fallback",
      "file_path": "src/components/SuspenseFallback.tsx",
      "description": "Accessible suspense fallback UI (skeletons/spinner) used across lazy-loaded routes and components.",
      "dependencies": [],
      "exports": [
        "SuspenseFallback"
      ],
      "priority": 1
    },
    {
      "id": "tailwind-config",
      "file_path": "config/tailwind.config.js",
      "description": "Tailwind CSS configuration enabling JIT, dark mode and paths to scan.",
      "dependencies": [],
      "exports": [
        "tailwind config (build-time)"
      ],
      "priority": 1
    },
    {
      "id": "theme-provider",
      "file_path": "src/providers/ThemeProvider.tsx",
      "description": "Provides theme (light/dark) context, toggling, and persists preference to localStorage. Integrates Tailwind dark mode class on body.",
      "dependencies": [
        "src/services/localPersistence.ts"
      ],
      "exports": [
        "ThemeProvider",
        "useTheme"
      ],
      "priority": 1
    },
    {
      "id": "tsconfig",
      "file_path": "config/tsconfig.json",
      "description": "TypeScript compiler options tuned for a React 18 + TS project.",
      "dependencies": [],
      "exports": [
        "tsconfig (build-time)"
      ],
      "priority": 1
    },
    {
      "id": "use-auth-hook",
      "file_path": "src/hooks/useAuth.ts",
      "description": "Public hook to access auth context: login, logout, current user, role checks. Uses AuthProvider context and localPersistence in dev mode.",
      "dependencies": [
        "src/providers/AuthProvider.tsx",
        "src/services/localPersistence.ts",
        "src/mocks/data/authUsers.ts"
      ],
      "exports": [
        "useAuth"
      ],
      "priority": 1
    },
    {
      "id": "use-fetch-hook",
      "file_path": "src/hooks/useFetch.ts",
      "description": "Thin wrapper around React Query's useQuery/useMutation providing typed response handling and common error mapping. Uses apiClient under the hood.",
      "dependencies": [
        "src/lib/reactQuery.ts",
        "src/services/apiClient.ts"
      ],
      "exports": [
        "useQueryTyped",
        "useMutationTyped"
      ],
      "priority": 1
    },
    {
      "id": "use-websocket-hook",
      "file_path": "src/hooks/useWebSocket.ts",
      "description": "Hook to subscribe to real-time WebSocketMock events; exposes latest events and convenience subscription functions. Falls back to polling when WS disabled.",
      "dependencies": [
        "src/services/websocketMock.ts",
        "src/app/config.ts"
      ],
      "exports": [
        "useWebSocket"
      ],
      "priority": 1
    },
    {
      "id": "utils-date",
      "file_path": "src/utils/date.ts",
      "description": "Date helper utilities for formatting and timezone-safe conversions used by many components and services.",
      "dependencies": [
        "src/core/utils.ts"
      ],
      "exports": [
        "formatDate",
        "toLocalISO",
        "parseDate"
      ],
      "priority": 1
    },
    {
      "id": "utils-formatting",
      "file_path": "src/utils/formatting.ts",
      "description": "Formatting helpers for numbers, units and medical value presentation.",
      "dependencies": [],
      "exports": [
        "formatNumber",
        "formatUnits"
      ],
      "priority": 1
    },
    {
      "id": "validators",
      "file_path": "src/validators/validators.ts",
      "description": "Shared validation rules and helper functions for forms used across features (email, required, date ranges).",
      "dependencies": [],
      "exports": [
        "validateEmail",
        "required",
        "validateDateRange"
      ],
      "priority": 1
    },
    {
      "id": "websocket-mock",
      "file_path": "src/services/websocketMock.ts",
      "description": "Mock WebSocket server/client that can be enabled/disabled in development. Exposes a subscribe/publish API and simulates real-time updates for features like telemedicine and live lab results.",
      "dependencies": [
        "src/app/config.ts",
        "src/core/events.ts"
      ],
      "exports": [
        "WebSocketMock",
        "subscribeWS",
        "unsubscribeWS",
        "publishWS"
      ],
      "priority": 1
    },
    {
      "id": "appointments-card",
      "file_path": "src/features/appointments/AppointmentCard.tsx",
      "description": "Presentational card showing appointment summary and actions (reschedule, cancel).",
      "dependencies": [
        "src/components/ui/Button.tsx",
        "src/core/contracts.ts"
      ],
      "exports": [
        "AppointmentCard"
      ],
      "priority": 2
    },
    {
      "id": "appointments-form",
      "file_path": "src/features/appointments/AppointmentForm.tsx",
      "description": "Form used to create or reschedule an appointment with validation and accessible fields.",
      "dependencies": [
        "src/components/forms/FormField.tsx",
        "src/components/forms/DatePicker.tsx",
        "src/validators/validators.ts",
        "src/services/appointmentsService.ts"
      ],
      "exports": [
        "AppointmentForm"
      ],
      "priority": 2
    },
    {
      "id": "claim-item",
      "file_path": "src/features/insurance/ClaimItem.tsx",
      "description": "UI element summarizing an insurance claim with status indicators and action CTA to contact provider.",
      "dependencies": [
        "src/core/contracts.ts"
      ],
      "exports": [
        "ClaimItem"
      ],
      "priority": 2
    },
    {
      "id": "date-picker",
      "file_path": "src/components/forms/DatePicker.tsx",
      "description": "Accessible date picker input used for appointment scheduling and filters (lightweight, tailwind styled).",
      "dependencies": [
        "src/components/ui/Input.tsx",
        "src/validators/validators.ts"
      ],
      "exports": [
        "DatePicker"
      ],
      "priority": 2
    },
    {
      "id": "form-field",
      "file_path": "src/components/forms/FormField.tsx",
      "description": "Generic form field wrapper for labels, help text and validation messages.",
      "dependencies": [
        "src/components/ui/Input.tsx"
      ],
      "exports": [
        "FormField"
      ],
      "priority": 2
    },
    {
      "id": "lab-result-item",
      "file_path": "src/features/labs/LabResultItem.tsx",
      "description": "Component showing a single lab result row with indicator for abnormal values and option to view details.",
      "dependencies": [
        "src/core/contracts.ts"
      ],
      "exports": [
        "LabResultItem"
      ],
      "priority": 2
    },
    {
      "id": "metrics-chart",
      "file_path": "src/features/metrics/MetricsChart.tsx",
      "description": "Reusable chart component for health metrics (blood pressure, heart rate). Uses simple SVG or lightweight chart lib wrapper.",
      "dependencies": [
        "src/services/medicationsService.ts"
      ],
      "exports": [
        "MetricsChart"
      ],
      "priority": 2
    },
    {
      "id": "prescription-list",
      "file_path": "src/features/prescriptions/PrescriptionList.tsx",
      "description": "List component displaying current prescriptions with refill action.",
      "dependencies": [
        "src/services/prescriptionsService.ts",
        "src/components/ui/Button.tsx"
      ],
      "exports": [
        "PrescriptionList"
      ],
      "priority": 2
    },
    {
      "id": "record-viewer",
      "file_path": "src/features/records/RecordViewer.tsx",
      "description": "Component to render medical record entries, supports document viewer fallback and attachments.",
      "dependencies": [
        "src/core/contracts.ts"
      ],
      "exports": [
        "RecordViewer"
      ],
      "priority": 2
    },
    {
      "id": "reminder-list",
      "file_path": "src/features/reminders/ReminderList.tsx",
      "description": "Component listing medication reminders and allows marking them as taken or snoozing.",
      "dependencies": [
        "src/services/medicationsService.ts",
        "src/components/ui/Button.tsx"
      ],
      "exports": [
        "ReminderList"
      ],
      "priority": 2
    },
    {
      "id": "ui-button",
      "file_path": "src/components/ui/Button.tsx",
      "description": "Accessible Button component built with Tailwind and forwardRef; supports variants and loading state.",
      "dependencies": [],
      "exports": [
        "Button"
      ],
      "priority": 2
    },
    {
      "id": "ui-input",
      "file_path": "src/components/ui/Input.tsx",
      "description": "Input component integrated with ARIA attributes and error display; works with React Hook Form or controlled inputs.",
      "dependencies": [],
      "exports": [
        "Input"
      ],
      "priority": 2
    },
    {
      "id": "ui-modal",
      "file_path": "src/components/ui/Modal.tsx",
      "description": "Accessible modal dialog with focus trap and keyboard handling for forms and telemedicine popups.",
      "dependencies": [],
      "exports": [
        "Modal"
      ],
      "priority": 2
    },
    {
      "id": "video-call",
      "file_path": "src/features/telemedicine/VideoCall.tsx",
      "description": "Lightweight telemedicine UI for video call session (mock video streams in dev), handles incoming call events and basic controls.",
      "dependencies": [
        "src/services/websocketMock.ts",
        "src/core/events.ts"
      ],
      "exports": [
        "VideoCall"
      ],
      "priority": 2
    },
    {
      "id": "appointments-detail-page",
      "file_path": "src/pages/appointments/AppointmentDetailPage.tsx",
      "description": "Detail page for a single appointment including provider notes and reschedule/cancel actions.",
      "dependencies": [
        "src/services/appointmentsService.ts",
        "src/features/records/RecordViewer.tsx"
      ],
      "exports": [
        "AppointmentDetailPage"
      ],
      "priority": 3
    },
    {
      "id": "appointments-list-page",
      "file_path": "src/pages/appointments/AppointmentListPage.tsx",
      "description": "Page listing user's appointments and action to schedule new ones. Uses AppointmentCard and AppointmentForm (modal).",
      "dependencies": [
        "src/features/appointments/AppointmentCard.tsx",
        "src/features/appointments/AppointmentForm.tsx",
        "src/services/appointmentsService.ts",
        "src/components/ui/Modal.tsx"
      ],
      "exports": [
        "AppointmentListPage"
      ],
      "priority": 3
    },
    {
      "id": "dashboard-page",
      "file_path": "src/pages/DashboardPage.tsx",
      "description": "Patient health dashboard aggregating upcoming appointments, recent lab results and health metrics. Uses AppLayout.",
      "dependencies": [
        "src/components/Layout/AppLayout.tsx",
        "src/features/metrics/MetricsChart.tsx",
        "src/features/reminders/ReminderList.tsx",
        "src/services/appointmentsService.ts",
        "src/services/labsService.ts"
      ],
      "exports": [
        "DashboardPage"
      ],
      "priority": 3
    },
    {
      "id": "home-page",
      "file_path": "src/pages/HomePage.tsx",
      "description": "Public landing page for the portal with summary and CTA to login or learn more.",
      "dependencies": [
        "src/i18n/i18n.ts"
      ],
      "exports": [
        "HomePage"
      ],
      "priority": 3
    },
    {
      "id": "insurance-page",
      "file_path": "src/pages/insurance/InsurancePage.tsx",
      "description": "Insurance claim tracker page showing claim items and statuses.",
      "dependencies": [
        "src/features/insurance/ClaimItem.tsx",
        "src/services/insuranceService.ts"
      ],
      "exports": [
        "InsurancePage"
      ],
      "priority": 3
    },
    {
      "id": "lab-results-page",
      "file_path": "src/pages/labs/LabResultsPage.tsx",
      "description": "Page showing lab results list and detail view.",
      "dependencies": [
        "src/features/labs/LabResultItem.tsx",
        "src/services/labsService.ts"
      ],
      "exports": [
        "LabResultsPage"
      ],
      "priority": 3
    },
    {
      "id": "login-page",
      "file_path": "src/pages/LoginPage.tsx",
      "description": "Login page and form integrating mock auth in dev and real auth flows in prod. Uses validation and persists token on success.",
      "dependencies": [
        "src/hooks/useAuth.ts",
        "src/components/forms/FormField.tsx",
        "src/components/ui/Button.tsx",
        "src/validators/validators.ts"
      ],
      "exports": [
        "LoginPage"
      ],
      "priority": 3
    },
    {
      "id": "medical-records-page",
      "file_path": "src/pages/records/MedicalRecordsPage.tsx",
      "description": "Page to browse and view medical records, with search and filters.",
      "dependencies": [
        "src/features/records/RecordViewer.tsx",
        "src/services/recordsService.ts"
      ],
      "exports": [
        "MedicalRecordsPage"
      ],
      "priority": 3
    },
    {
      "id": "metrics-page",
      "file_path": "src/pages/metrics/HealthMetricsPage.tsx",
      "description": "Health metrics dashboard with charts and historical data; uses MetricsChart components with React Query for metrics data.",
      "dependencies": [
        "src/features/metrics/MetricsChart.tsx",
        "src/services/medicationsService.ts"
      ],
      "exports": [
        "HealthMetricsPage"
      ],
      "priority": 3
    },
    {
      "id": "not-found-page",
      "file_path": "src/pages/NotFoundPage.tsx",
      "description": "404 Not Found page for unknown routes.",
      "dependencies": [
        "src/i18n/i18n.ts"
      ],
      "exports": [
        "NotFoundPage"
      ],
      "priority": 3
    },
    {
      "id": "prescriptions-page",
      "file_path": "src/pages/prescriptions/PrescriptionsPage.tsx",
      "description": "Page for prescriptions management and refill requests.",
      "dependencies": [
        "src/features/prescriptions/PrescriptionList.tsx",
        "src/services/prescriptionsService.ts"
      ],
      "exports": [
        "PrescriptionsPage"
      ],
      "priority": 3
    },
    {
      "id": "reminders-page",
      "file_path": "src/pages/reminders/MedicationRemindersPage.tsx",
      "description": "Medication reminders page where users can see upcoming reminders and mark them as taken.",
      "dependencies": [
        "src/features/reminders/ReminderList.tsx",
        "src/services/medicationsService.ts"
      ],
      "exports": [
        "MedicationRemindersPage"
      ],
      "priority": 3
    },
    {
      "id": "telemedicine-page",
      "file_path": "src/pages/telemedicine/TelemedicinePage.tsx",
      "description": "Telemedicine interface page that uses VideoCall component, shows upcoming calls, and handles WebSocket events for call signaling.",
      "dependencies": [
        "src/features/telemedicine/VideoCall.tsx",
        "src/hooks/useWebSocket.ts",
        "src/services/websocketMock.ts"
      ],
      "exports": [
        "TelemedicinePage"
      ],
      "priority": 3
    }
  ],
  "file_paths": [
    "src/services/apiClient.ts",
    "app/config.ts",
    "src/components/Layout/AppLayout.tsx",
    "src/App.tsx",
    "src/routes/AppRouter.tsx",
    "src/services/appointmentsService.ts",
    "src/providers/AuthProvider.tsx",
    "core/contracts.ts",
    "core/di.ts",
    "core/events.ts",
    "core/hooks.ts",
    "core/utils.ts",
    "src/main.tsx",
    "src/components/ErrorBoundary.tsx",
    "src/index.css",
    "src/i18n/locales/en.json",
    "src/i18n/locales/ko.json",
    "src/i18n/i18n.ts",
    "src/services/insuranceService.ts",
    "src/services/labsService.ts",
    "src/components/Layout/Header.tsx",
    "src/components/Layout/Sidebar.tsx",
    "src/services/localPersistence.ts",
    "src/services/medicationsService.ts",
    "src/services/mockServer.ts",
    "src/mocks/data/appointments.ts",
    "src/mocks/data/authUsers.ts",
    "src/mocks/browser.ts",
    "src/mocks/handlers.ts",
    "src/mocks/data/insurance.ts",
    "src/mocks/data/labResults.ts",
    "src/mocks/data/medicalRecords.ts",
    "src/mocks/data/medications.ts",
    "src/mocks/data/prescriptions.ts",
    "config/postcss.config.cjs",
    "src/services/prescriptionsService.ts",
    "src/routes/ProtectedRoute.tsx",
    "src/providers/QueryProvider.tsx",
    "src/lib/reactQuery.ts",
    "src/services/recordsService.ts",
    "src/state/store.ts",
    "src/components/SuspenseFallback.tsx",
    "config/tailwind.config.js",
    "src/providers/ThemeProvider.tsx",
    "config/tsconfig.json",
    "src/hooks/useAuth.ts",
    "src/hooks/useFetch.ts",
    "src/hooks/useWebSocket.ts",
    "src/utils/date.ts",
    "src/utils/formatting.ts",
    "src/validators/validators.ts",
    "src/services/websocketMock.ts",
    "src/features/appointments/AppointmentCard.tsx",
    "src/features/appointments/AppointmentForm.tsx",
    "src/features/insurance/ClaimItem.tsx",
    "src/components/forms/DatePicker.tsx",
    "src/components/forms/FormField.tsx",
    "src/features/labs/LabResultItem.tsx",
    "src/features/metrics/MetricsChart.tsx",
    "src/features/prescriptions/PrescriptionList.tsx",
    "src/features/records/RecordViewer.tsx",
    "src/features/reminders/ReminderList.tsx",
    "src/components/ui/Button.tsx",
    "src/components/ui/Input.tsx",
    "src/components/ui/Modal.tsx",
    "src/features/telemedicine/VideoCall.tsx",
    "src/pages/appointments/AppointmentDetailPage.tsx",
    "src/pages/appointments/AppointmentListPage.tsx",
    "src/pages/DashboardPage.tsx",
    "src/pages/HomePage.tsx",
    "src/pages/insurance/InsurancePage.tsx",
    "src/pages/labs/LabResultsPage.tsx",
    "src/pages/LoginPage.tsx",
    "src/pages/records/MedicalRecordsPage.tsx",
    "src/pages/metrics/HealthMetricsPage.tsx",
    "src/pages/NotFoundPage.tsx",
    "src/pages/prescriptions/PrescriptionsPage.tsx",
    "src/pages/reminders/MedicationRemindersPage.tsx",
    "src/pages/telemedicine/TelemedicinePage.tsx"
  ],
  "descriptions": [
    "Centralized API client wrapper using fetch with automatic auth token injection, timeout, JSON parse handling, and fallback behavior when backend unavailable (graceful errors). Swappable to a mock adapter in dev.",
    "Materialized application configuration including environment flags (dev mode, mock toggles), API base paths, feature flags and i18n default. Reads from process.env where appropriate and exports a typed config.",
    "Main application layout used by protected pages: includes Header, Sidebar and main content area with responsive behavior for mobile and desktop.",
    "Top-level App component: mounts router inside ErrorBoundary and Suspense with Fallback; provides global layout. Connects i18n initialization.",
    "React Router v6 configuration: declares public and protected routes for all pages including lazy-loaded feature pages. Integrates ProtectedRoute for auth-guarded sections.",
    "Service functions for appointment scheduling: list, create, update, cancel. Consumed by React Query hooks in pages and components.",
    "Auth context provider that manages login/logout, token storage (via localPersistence in dev), exposes current user and role, and supports mock auth users in development. Uses core/contracts types.",
    "Domain types, API request/response contracts, enums and shared TypeScript interfaces used across the app (appointments, records, prescriptions, labs, user, auth token, WebSocket events).",
    "Simple dependency injection container / service locator (optional), used to swap implementations in tests or mock mode.",
    "Lightweight typed event bus for in-app pub/sub for cross-cutting events (incoming call, notification, global error).",
    "Registry for extension hooks; allows other modules to register lifecycle hooks (e.g., onAuthChange).",
    "Core utilities shared across the app (safeJSON, noop, sleep, fetchWithTimeout). Intended as very small primitives safe to use from kernel-level files.",
    "React entry point: renders App into DOM, bootstraps mock server in development, wraps with top-level providers (QueryProvider, AuthProvider, ThemeProvider) and ErrorBoundary.",
    "React Error Boundary component with fallback UI and option to report errors to an event bus. Used at top-level to catch rendering errors.",
    "Tailwind base imports and global CSS variables for light/dark themes. Used by main.tsx.",
    "English translations for UI strings. Minimal set covering pages, labels and validation messages.",
    "Korean translations for UI strings (Korean support required).",
    "i18next initialization with English and Korean locales, language detector, and a typed translation hook. Exports initialized instance and helpers.",
    "Service functions for insurance claim tracking.",
    "Service functions for lab results retrieval and status checks.",
    "Top navigation header with user menu, language switcher and theme toggle. Accessible keyboard navigation and ARIA labels.",
    "Responsive sidebar with navigation links for features; handles collapsing and keyboard navigation.",
    "Abstracts localStorage get/set interactions, namespaced keys for auth and UI state. Honors development config for persistence.",
    "Service functions for medication tracking and reminders.",
    "Bootstraps the in-app mock server when dev mode is enabled. Initializes handlers from mocks/handlers.ts and exposes start/stop functions. Ensures the app runs standalone.",
    "Mock appointment data used by mock API endpoint /api/appointments.",
    "Mock users for development mode (doctor, patient, nurse) used by mock auth server. Matches app.config mock_auth_users.",
    "Client-side mock server bootstrapper (MSW-like) that registers handlers and exposes a start() function for main.tsx to call in development.",
    "Defines mock API handlers for endpoints listed in development config (/api/appointments, /api/medical-records, etc.). Also implements mock auth login and token issuance.",
    "Mock insurance claim data for /api/insurance.",
    "Mock lab results for /api/lab-results.",
    "Mock medical records data for /api/medical-records.",
    "Mock medications and reminders for /api/medications used to drive medication reminders feature.",
    "Mock prescription data for /api/prescriptions.",
    "PostCSS configuration for Tailwind processing.",
    "Service functions for prescriptions management.",
    "Route wrapper that checks authentication and role-based access via useAuth; redirects to login for unauthorized users.",
    "Sets up React Query QueryClient with sensible defaults (staleTime, retries) and ErrorBoundary integration. Injects auth token into apiClient via context or apiClient setter.",
    "Creates and configures a QueryClient instance used by QueryProvider; defines common query keys and helper functions.",
    "Service functions for medical records retrieval and filtering.",
    "Global UI state (sidebar open, modals) managed via React Context and useReducer (small, predictable). Not for server data (React Query used for that).",
    "Accessible suspense fallback UI (skeletons/spinner) used across lazy-loaded routes and components.",
    "Tailwind CSS configuration enabling JIT, dark mode and paths to scan.",
    "Provides theme (light/dark) context, toggling, and persists preference to localStorage. Integrates Tailwind dark mode class on body.",
    "TypeScript compiler options tuned for a React 18 + TS project.",
    "Public hook to access auth context: login, logout, current user, role checks. Uses AuthProvider context and localPersistence in dev mode.",
    "Thin wrapper around React Query's useQuery/useMutation providing typed response handling and common error mapping. Uses apiClient under the hood.",
    "Hook to subscribe to real-time WebSocketMock events; exposes latest events and convenience subscription functions. Falls back to polling when WS disabled.",
    "Date helper utilities for formatting and timezone-safe conversions used by many components and services.",
    "Formatting helpers for numbers, units and medical value presentation.",
    "Shared validation rules and helper functions for forms used across features (email, required, date ranges).",
    "Mock WebSocket server/client that can be enabled/disabled in development. Exposes a subscribe/publish API and simulates real-time updates for features like telemedicine and live lab results.",
    "Presentational card showing appointment summary and actions (reschedule, cancel).",
    "Form used to create or reschedule an appointment with validation and accessible fields.",
    "UI element summarizing an insurance claim with status indicators and action CTA to contact provider.",
    "Accessible date picker input used for appointment scheduling and filters (lightweight, tailwind styled).",
    "Generic form field wrapper for labels, help text and validation messages.",
    "Component showing a single lab result row with indicator for abnormal values and option to view details.",
    "Reusable chart component for health metrics (blood pressure, heart rate). Uses simple SVG or lightweight chart lib wrapper.",
    "List component displaying current prescriptions with refill action.",
    "Component to render medical record entries, supports document viewer fallback and attachments.",
    "Component listing medication reminders and allows marking them as taken or snoozing.",
    "Accessible Button component built with Tailwind and forwardRef; supports variants and loading state.",
    "Input component integrated with ARIA attributes and error display; works with React Hook Form or controlled inputs.",
    "Accessible modal dialog with focus trap and keyboard handling for forms and telemedicine popups.",
    "Lightweight telemedicine UI for video call session (mock video streams in dev), handles incoming call events and basic controls.",
    "Detail page for a single appointment including provider notes and reschedule/cancel actions.",
    "Page listing user's appointments and action to schedule new ones. Uses AppointmentCard and AppointmentForm (modal).",
    "Patient health dashboard aggregating upcoming appointments, recent lab results and health metrics. Uses AppLayout.",
    "Public landing page for the portal with summary and CTA to login or learn more.",
    "Insurance claim tracker page showing claim items and statuses.",
    "Page showing lab results list and detail view.",
    "Login page and form integrating mock auth in dev and real auth flows in prod. Uses validation and persists token on success.",
    "Page to browse and view medical records, with search and filters.",
    "Health metrics dashboard with charts and historical data; uses MetricsChart components with React Query for metrics data.",
    "404 Not Found page for unknown routes.",
    "Page for prescriptions management and refill requests.",
    "Medication reminders page where users can see upcoming reminders and mark them as taken.",
    "Telemedicine interface page that uses VideoCall component, shows upcoming calls, and handles WebSocket events for call signaling."
  ],
  "total_files": 79
}