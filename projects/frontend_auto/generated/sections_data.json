{
  "architecture": {
    "overview": "A modular, React 18+ + TypeScript SPA built around a small, explicit Core Kernel (contracts, config, event bus, hook registry, DI, utilities) with a clear separation of concerns. The app bootstraps via a lightweight DI and event-driven system, uses a theme provider and a central API client, and composes UI through shared components, hooks, features, and pages. This structure supports plugin-like extensions through a Hook Registry and a simple DI container while keeping core contracts stable and reusable across features.",
    "patterns": [
      "Container/Presentational (smart components wire data via hooks and services, dumb components render UI)",
      "Context-based theme and app config (ThemeProvider, APP_CONFIG)",
      "Event Bus for cross-cutting communication",
      "Hook Registry for extensibility (plugins/extensions can register hooks)",
      "Dependency Injection (lightweight DI container) to decouple consumers from implementations",
      "Feature-based organization (shared components, hooks, services, features, and pages)"
    ],
    "data_flow": "App boot sequence: main.tsx mounts App -> ThemeProvider consumes APP_CONFIG -> AppRoutes decides page rendering -> Pages render using hooks (useApi, useForm, useDashboard) which call services (apiClient, authService) -> shared components render UI. Data travels from API via apiClient -> hooks manage local state -> pages and components render. Events can be emitted via the Event Bus to coordinate cross-cutting concerns (e.g., auth state changes).",
    "folder_structure": "src/\n  core/\n    contracts.ts\n    events.ts\n    hooks.ts\n    di.ts\n    utils.ts\n  app/\n    config.ts\n  providers/\n    ThemeProvider.tsx\n  services/\n    apiClient.ts\n    authService.ts\n  shared/\n    components/\n      Button.tsx\n      Card.tsx\n      Input.tsx\n    hooks/\n      useDebounce.ts\n      useLocalStorage.ts\n  hooks/\n    useForm.ts\n    useApi.ts\n  features/\n    dashboard/\n      components/\n        DashboardLayout.tsx\n        MetricCard.tsx\n      hooks/\n        useDashboard.ts\n  pages/\n    HomePage.tsx\n    DashboardPage.tsx\n    NotFoundPage.tsx\n  routes/\n    AppRoutes.tsx\n  App.tsx\n  main.tsx",
    "tech_stack": [
      "React 18+",
      "TypeScript",
      "React Router for routing",
      "Context API for theming/config",
      "Fetch API for HTTP (wrapped by apiClient)",
      "Lightweight Event Bus and Hook Registry for extensibility"
    ]
  },
  "kernel_specs": {
    "overview": "The Core Kernel provides the immutable foundation for every application section. It defines shared domain contracts, a typed configuration surface with computed flags, a decoupled event bus, a pluggable hook registry, a tiny DI container, and a compact utilities toolkit. Each file is focused, interoperable, and designed to be consumed via @/core/* imports across features, pages, and services."
  },
  "sections": [
    {
      "id": "app-config",
      "file_path": "src/app/config.ts",
      "description": "Materialized configuration including API base URL, feature flags, and theme defaults.",
      "dependencies": [],
      "exports": [
        "AppConfig",
        "APP_CONFIG"
      ],
      "priority": 1,
      "purpose": "Materialized application configuration with API base, feature flags, theming defaults, and mock data for development.",
      "content": "// Materialized application configuration\n\nexport type ThemeName = 'light'|'dark';\n\nexport interface MockUser {\n  id: string;\n  name: string;\n  email: string;\n  role: 'patient'|'doctor'|'nurse';\n}\n\nexport interface DevelopmentConfig {\n  enableMockData?: boolean;\n  mockUsers?: MockUser[];\n}\n\nexport interface AppConfig {\n  environment: 'development'|'production'|'staging';\n  apiBaseUrl: string;\n  features: string[]; // e.g., ['dashboard','patients','appointments','auth','settings']\n  theme: ThemeName;\n  development?: DevelopmentConfig;\n}\n\n// Raw config (could be sourced from process.env or a JSON file in a real app)\nconst RAW_CONFIG = {\n  environment: 'development' as const,\n  apiBaseUrl: 'https://api-dev.local',\n  features: ['dashboard','patients','appointments','auth','settings'],\n  theme: 'light' as const,\n  development: {\n    enableMockData: true,\n    mockUsers: [\n      { id: 'mock-doctor-1', name: 'Dr. Ava Smith', email: 'ava.smith@example.local', role: 'doctor' as const },\n      { id: 'mock-patient-1', name: 'John Doe', email: 'john.doe@example.local', role: 'patient' as const }\n    ]\n  }\n};\n\nexport const APP_CONFIG: AppConfig = {\n  environment: RAW_CONFIG.environment,\n  apiBaseUrl: RAW_CONFIG.apiBaseUrl,\n  features: RAW_CONFIG.features,\n  theme: RAW_CONFIG.theme,\n  development: RAW_CONFIG.development\n};\n\nexport const isDevelopment = APP_CONFIG.environment === 'development';\nexport const shouldUseMockData = APP_CONFIG.development?.enableMockData === true;\n\nexport function isFeatureEnabled(feature: string): boolean {\n  return APP_CONFIG.features.includes(feature);\n}\n"
    },
    {
      "id": "core-contracts",
      "file_path": "src/core/contracts.ts",
      "description": "Domain types and API contracts shared across the app (generic API response, user, identifiers).",
      "dependencies": [],
      "exports": [
        "ApiResponse<T>",
        "User",
        "ID"
      ],
      "priority": 1,
      "purpose": "Domain models and API contracts shared across the app (generic API response, user identities, healthcare domain models, and basic UI state).",
      "content": "// Core domain contracts and API contracts shared across the app\n\nexport type ID = string;\n\nexport interface ApiError {\n  code?: string;\n  message: string;\n  details?: any;\n}\n\nexport interface ApiResult<T> {\n  ok: boolean;\n  data?: T;\n  error?: ApiError;\n}\n\nexport type ApiResponse<T> = ApiResult<T>;\n\nexport type UserRole = 'patient'|'doctor'|'nurse'|'admin';\n\nexport interface User {\n  id: ID;\n  name: string;\n  email: string;\n  role: UserRole;\n}\n\nexport interface Patient extends User {\n  role: 'patient';\n  patientId?: string;\n}\n\nexport interface Doctor extends User {\n  role: 'doctor';\n  specialty?: string;\n}\n\nexport interface Nurse extends User {\n  role: 'nurse';\n  department?: string;\n}\n\ntype HealthcareUser = Patient | Doctor | Nurse | User;\n\nexport interface Appointment {\n  id: string;\n  patientId: string;\n  doctorId: string;\n  when: string; // ISO date string\n  status: 'scheduled'|'completed'|'cancelled';\n  reason?: string;\n}\n\nexport interface MedicalRecord {\n  id: string;\n  patientId: string;\n  doctorId?: string;\n  notes?: string;\n  diagnoses?: string[];\n  createdAt: string; // ISO date string\n}\n\nexport interface Prescription {\n  id: string;\n  patientId: string;\n  doctorId: string;\n  medication: string;\n  dosage?: string;\n  instructions?: string;\n  date?: string;\n}\n\nexport interface LabResult {\n  id: string;\n  patientId: string;\n  testName: string;\n  value?: string;\n  unit?: string;\n  referenceRange?: string;\n  date?: string;\n}\n\nexport interface PaginatedResponse<T> {\n  items: T[];\n  total: number;\n  page: number;\n  pageSize: number;\n}\n\nexport type WSMessage<T = any> = {\n  type: string;\n  payload: T;\n  timestamp?: number;\n};\n\nexport type WebSocketEventMap = {\n  'appointment:updated': Appointment;\n  'medicalRecord:updated': MedicalRecord;\n  'labResult:updated': LabResult;\n};\n\nexport type LoadingState = 'idle'|'loading'|'success'|'error';\n\nexport interface FormState<T> {\n  values: T;\n  touched?: Partial<Record<keyof T, boolean>>;\n  errors?: Partial<Record<keyof T, string>>;\n  isSubmitting?: boolean;\n}\n\n// NOTE:\n// - These contracts are the shared language across features and services.\n// - Import from '@/core/contracts' wherever you model domain data.\n"
    },
    {
      "id": "core-di",
      "file_path": "src/core/di.ts",
      "description": "Tiny dependency injection container to decouple consumers from concrete implementations.",
      "dependencies": [],
      "exports": [
        "DIContainer",
        "createContainer"
      ],
      "priority": 1,
      "purpose": "Tiny dependency injection container to decouple consumers from concrete implementations.",
      "content": "// Lightweight DI container with token-based resolution\n\n// Tokens (tokens are symbols to avoid collisions)\nexport const TOKEN_API_CLIENT = Symbol.for('ApiClient');\nexport const TOKEN_AUTH_SERVICE = Symbol.for('AuthService');\nexport const TOKEN_STORAGE_SERVICE = Symbol.for('StorageService');\nexport const TOKEN_WEBSOCKET_SERVICE = Symbol.for('WebSocketService');\n\nexport class DIContainer {\n  private registry = new Map<any, any>();\n\n  register<T>(token: any, instance: T): void {\n    this.registry.set(token, instance);\n  }\n\n  resolve<T>(token: any): T {\n    if (!this.registry.has(token)) {\n      throw new Error(`Unregistered token: ${String(token)}`);\n    }\n    return this.registry.get(token) as T;\n  }\n}\n\nexport const createContainer = (): DIContainer => new DIContainer();\n"
    },
    {
      "id": "core-events",
      "file_path": "src/core/events.ts",
      "description": "Simple event bus for cross-component communication and decoupled interactions.",
      "dependencies": [],
      "exports": [
        "EventBus",
        "createEventBus"
      ],
      "priority": 1,
      "purpose": "Typed event bus for cross-component communication and decoupled interactions.",
      "content": "import type { Appointment, MedicalRecord, LabResult } from '@/core/contracts';\n\n// Typed domain events map. Extend as your domain grows.\nexport type DomainEventMap = {\n  'auth:login': { userId: string };\n  'auth:logout': void;\n  'route:change': { path: string; params?: any };\n  'appointment:updated': Appointment;\n  'medicalRecord:updated': MedicalRecord;\n  'labResult:updated': LabResult;\n};\n\ntype Handler<T> = (payload: T) => void | Promise<void>;\n\nexport class EventBus<Events extends Record<string, any> = DomainEventMap> {\n  private listeners = new Map<keyof Events | string, Set<Handler<any>>>() as Map<string, Set<Handler<any>>>;\n\n  on<K extends keyof Events>(event: K, handler: Handler<Events[K]>): void {\n    const key = String(event);\n    const set = this.listeners.get(key) ?? new Set<Handler<any>>();\n    set.add(handler as Handler<any>);\n    this.listeners.set(key, set);\n  }\n\n  off<K extends keyof Events>(event: K, handler: Handler<Events[K]>): void {\n    const key = String(event);\n    const set = this.listeners.get(key);\n    if (!set) return;\n    set.delete(handler as Handler<any>);\n  }\n\n  async emit<K extends keyof Events>(event: K, payload: Events[K]): Promise<void> {\n    const key = String(event);\n    const handlers = Array.from(this.listeners.get(key) ?? []);\n    const results = handlers.map(h => {\n      try {\n        return h(payload);\n      } catch {\n        return Promise.resolve();\n      }\n    });\n    if (results.length) {\n      await Promise.all(results.map(r => (r instanceof Promise ? r : Promise.resolve())));\n    }\n  }\n}\n\nexport const eventBus = new EventBus<DomainEventMap>();\n"
    },
    {
      "id": "core-hooks",
      "file_path": "src/core/hooks.ts",
      "description": "Hook registry to support extension points and plugins for runtime behavior augmentation.",
      "dependencies": [],
      "exports": [
        "registerHook",
        "useHook",
        "HookRegistry"
      ],
      "priority": 1,
      "purpose": "Hook registry to support extension points and runtime augmentation.",
      "content": "// Hook registry to enable extension points across the app\n\nexport type HookPoint = 'beforeApiRequest'|'afterApiResponse'|'onLogin'|'onLogout'|'onRouteChange';\n\nexport type HookHandler<Ctx = any> = (ctx: Ctx, ...args: any[]) => void | Promise<void>;\n\nexport class HookRegistry<Ctx = any> {\n  private registry = new Map<HookPoint, Array<HookHandler<Ctx>>>();\n\n  register(point: HookPoint, handler: HookHandler<Ctx>): void {\n    const list = this.registry.get(point) ?? [];\n    list.push(handler);\n    this.registry.set(point, list);\n  }\n\n  async run(point: HookPoint, ctx: Ctx, ...args: any[]): Promise<void> {\n    const handlers = this.registry.get(point) ?? [];\n    for (const h of handlers) {\n      await h(ctx, ...args);\n    }\n  }\n}\n\nexport const hooks = new HookRegistry<any>();\n\nexport function registerHook<Ctx = any>(point: HookPoint, handler: HookHandler<Ctx>): void {\n  hooks.register(point, handler);\n}\n\nexport async function runHook<Ctx = any>(point: HookPoint, ctx: Ctx, ...args: any[]): Promise<void> {\n  await hooks.run(point, ctx, ...args);\n}\n"
    },
    {
      "id": "core-utils",
      "file_path": "src/core/utils.ts",
      "description": "Common utilities used across the app (async sleep, formatting, etc).",
      "dependencies": [],
      "exports": [
        "sleep",
        "formatDate",
        "clamp"
      ],
      "priority": 1,
      "purpose": "Common utility helpers used across the app (timers, formatting, safe JSON, etc).",
      "content": "// Small collection of utilities used across the app\n\nexport async function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nexport function formatDate(input: string | number | Date, options?: Intl.DateTimeFormatOptions): string {\n  const d = input instanceof Date ? input : new Date(input);\n  return d.toLocaleString(undefined, options);\n}\n\nexport function clamp(n: number, min: number, max: number): number {\n  return Math.max(min, Math.min(n, max));\n}\n\nexport function safeJsonParse<T = any>(value: string, fallback: T): T {\n  try {\n    return JSON.parse(value) as T;\n  } catch {\n    return fallback;\n  }\n}\n\nexport function safeJsonStringify(value: any, replacer?: any, space?: number): string {\n  try {\n    return JSON.stringify(value, replacer, space);\n  } catch {\n    return '{}';\n  }\n}\n"
    },
    {
      "id": "providers-theme",
      "file_path": "src/providers/ThemeProvider.tsx",
      "description": "Theme management context (light/dark) using APP_CONFIG.",
      "dependencies": [
        "src/app/config.ts"
      ],
      "exports": [
        "ThemeProvider",
        "useTheme"
      ],
      "priority": 1
    },
    {
      "id": "app-root",
      "file_path": "src/App.tsx",
      "description": "Root application component that wires providers, routes, and global layout.",
      "dependencies": [
        "src/providers/ThemeProvider.tsx",
        "src/routes/AppRoutes.tsx"
      ],
      "exports": [
        "App"
      ],
      "priority": 2
    },
    {
      "id": "dashboard-hook",
      "file_path": "src/features/dashboard/hooks/useDashboard.ts",
      "description": "Dashboard data hook orchestrating API calls for metrics.",
      "dependencies": [
        "src/hooks/useApi.ts",
        "src/services/authService.ts"
      ],
      "exports": [
        "useDashboard"
      ],
      "priority": 2
    },
    {
      "id": "dashboard-layout",
      "file_path": "src/features/dashboard/components/DashboardLayout.tsx",
      "description": "Layout wrapper for dashboard-related pages.",
      "dependencies": [
        "src/shared/components/Card.tsx"
      ],
      "exports": [
        "DashboardLayout"
      ],
      "priority": 2
    },
    {
      "id": "dashboard-metric",
      "file_path": "src/features/dashboard/components/MetricCard.tsx",
      "description": "Metric display card used in dashboard dashboards.",
      "dependencies": [
        "src/shared/components/Card.tsx"
      ],
      "exports": [
        "MetricCard"
      ],
      "priority": 2
    },
    {
      "id": "hook-api",
      "file_path": "src/hooks/useApi.ts",
      "description": "Generic data-fetching hook to consume APIs via apiClient.",
      "dependencies": [
        "react",
        "src/services/apiClient.ts"
      ],
      "exports": [
        "useApi"
      ],
      "priority": 2
    },
    {
      "id": "hook-form",
      "file_path": "src/hooks/useForm.ts",
      "description": "Generic form state management hook.",
      "dependencies": [
        "react"
      ],
      "exports": [
        "useForm"
      ],
      "priority": 2
    },
    {
      "id": "main-entry",
      "file_path": "src/main.tsx",
      "description": "Application bootstrap and root renderd into the DOM.",
      "dependencies": [
        "src/App.tsx",
        "react",
        "react-dom"
      ],
      "exports": [],
      "priority": 2
    },
    {
      "id": "routes-app",
      "file_path": "src/routes/AppRoutes.tsx",
      "description": "Defines app routes (Home, Dashboard, NotFound) using React Router.",
      "dependencies": [
        "react",
        "src/pages/HomePage.tsx",
        "src/pages/DashboardPage.tsx",
        "src/pages/NotFoundPage.tsx"
      ],
      "exports": [
        "AppRoutes"
      ],
      "priority": 2
    },
    {
      "id": "services-api",
      "file_path": "src/services/apiClient.ts",
      "description": "HTTP client wrapper around fetch with a base URL from APP_CONFIG.",
      "dependencies": [
        "src/app/config.ts"
      ],
      "exports": [
        "apiClient"
      ],
      "priority": 2
    },
    {
      "id": "services-auth",
      "file_path": "src/services/authService.ts",
      "description": "Authentication helpers leveraging apiClient (login/logout, current user).",
      "dependencies": [
        "src/services/apiClient.ts"
      ],
      "exports": [
        "login",
        "logout",
        "getCurrentUser"
      ],
      "priority": 2
    },
    {
      "id": "shared-button",
      "file_path": "src/shared/components/Button.tsx",
      "description": "Reusable Button UI component.",
      "dependencies": [
        "react"
      ],
      "exports": [
        "Button"
      ],
      "priority": 2
    },
    {
      "id": "shared-card",
      "file_path": "src/shared/components/Card.tsx",
      "description": "Generic Card container component used by dashboards and pages.",
      "dependencies": [
        "react"
      ],
      "exports": [
        "Card"
      ],
      "priority": 2
    },
    {
      "id": "shared-hook-debounce",
      "file_path": "src/shared/hooks/useDebounce.ts",
      "description": "Debounce hook for delaying rapid value changes.",
      "dependencies": [
        "react"
      ],
      "exports": [
        "useDebounce"
      ],
      "priority": 2
    },
    {
      "id": "shared-hook-localstorage",
      "file_path": "src/shared/hooks/useLocalStorage.ts",
      "description": "Hook to persist state in localStorage.",
      "dependencies": [
        "react"
      ],
      "exports": [
        "useLocalStorage"
      ],
      "priority": 2
    },
    {
      "id": "shared-input",
      "file_path": "src/shared/components/Input.tsx",
      "description": "Input field component for forms.",
      "dependencies": [
        "react"
      ],
      "exports": [
        "Input"
      ],
      "priority": 2
    },
    {
      "id": "dashboard-page",
      "file_path": "src/pages/DashboardPage.tsx",
      "description": "Dashboard page composing dashboard layout and metrics.",
      "dependencies": [
        "src/features/dashboard/components/DashboardLayout.tsx",
        "src/features/dashboard/hooks/useDashboard.ts"
      ],
      "exports": [
        "DashboardPage"
      ],
      "priority": 3
    },
    {
      "id": "home-page",
      "file_path": "src/pages/HomePage.tsx",
      "description": "Landing page component for the app.",
      "dependencies": [
        "react",
        "src/routes/AppRoutes.tsx"
      ],
      "exports": [
        "HomePage"
      ],
      "priority": 3
    },
    {
      "id": "not-found-page",
      "file_path": "src/pages/NotFoundPage.tsx",
      "description": "Fallback 404 page.",
      "dependencies": [
        "react"
      ],
      "exports": [
        "NotFoundPage"
      ],
      "priority": 3
    }
  ],
  "file_paths": [
    "src/app/config.ts",
    "src/core/contracts.ts",
    "src/core/di.ts",
    "src/core/events.ts",
    "src/core/hooks.ts",
    "src/core/utils.ts",
    "src/providers/ThemeProvider.tsx",
    "src/App.tsx",
    "src/features/dashboard/hooks/useDashboard.ts",
    "src/features/dashboard/components/DashboardLayout.tsx",
    "src/features/dashboard/components/MetricCard.tsx",
    "src/hooks/useApi.ts",
    "src/hooks/useForm.ts",
    "src/main.tsx",
    "src/routes/AppRoutes.tsx",
    "src/services/apiClient.ts",
    "src/services/authService.ts",
    "src/shared/components/Button.tsx",
    "src/shared/components/Card.tsx",
    "src/shared/hooks/useDebounce.ts",
    "src/shared/hooks/useLocalStorage.ts",
    "src/shared/components/Input.tsx",
    "src/pages/DashboardPage.tsx",
    "src/pages/HomePage.tsx",
    "src/pages/NotFoundPage.tsx"
  ],
  "descriptions": [
    "Materialized configuration including API base URL, feature flags, and theme defaults.",
    "Domain types and API contracts shared across the app (generic API response, user, identifiers).",
    "Tiny dependency injection container to decouple consumers from concrete implementations.",
    "Simple event bus for cross-component communication and decoupled interactions.",
    "Hook registry to support extension points and plugins for runtime behavior augmentation.",
    "Common utilities used across the app (async sleep, formatting, etc).",
    "Theme management context (light/dark) using APP_CONFIG.",
    "Root application component that wires providers, routes, and global layout.",
    "Dashboard data hook orchestrating API calls for metrics.",
    "Layout wrapper for dashboard-related pages.",
    "Metric display card used in dashboard dashboards.",
    "Generic data-fetching hook to consume APIs via apiClient.",
    "Generic form state management hook.",
    "Application bootstrap and root renderd into the DOM.",
    "Defines app routes (Home, Dashboard, NotFound) using React Router.",
    "HTTP client wrapper around fetch with a base URL from APP_CONFIG.",
    "Authentication helpers leveraging apiClient (login/logout, current user).",
    "Reusable Button UI component.",
    "Generic Card container component used by dashboards and pages.",
    "Debounce hook for delaying rapid value changes.",
    "Hook to persist state in localStorage.",
    "Input field component for forms.",
    "Dashboard page composing dashboard layout and metrics.",
    "Landing page component for the app.",
    "Fallback 404 page."
  ],
  "total_files": 25
}