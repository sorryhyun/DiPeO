{
  "architecture": {
    "overview": "This is a modern React 18 + TypeScript single-page application scaffolded for Vite. The app is split into a Core Kernel (contracts, DI, events, common utils), Design Foundations (theme tokens, animations, global styles), Providers (Auth, Theme, Query, Toast), a polished design system of shared UI components, domain services/hooks, feature pages, and a route layer. The structure favors small single-responsibility files so the Frontend Generator can implement each one in parallel.",
    "patterns": [
      "Container / Presentational: pages and feature containers orchestrate data; shared components remain presentational and composable",
      "Composition API for providers: small, focused provider components composed in a single Providers.tsx",
      "Atomic design for UI components: atoms (Button, Input), molecules (Card, Modal), organisms (NavBar, Sidebar)",
      "Domain-driven foldering: features and pages grouped under src/pages and src/features",
      "Explicit dependency injection (src/core/di.ts) + service layer (src/services/*) for testability",
      "React Query for data fetching and cache; optional global state with lightweight hooks (no heavy global store unless required)"
    ],
    "data_flow": "UI components call hooks in src/hooks/* which orchestrate services in src/services/*. Services call the API client (src/services/apiClient.ts) which uses configuration from src/app/config.ts. React Query manages server state and caching; local ephemeral UI state lives in component state or compact hooks (useToast, useResponsive). Events (src/core/events.ts) provide decoupled cross-cutting notifications (toast, analytics). Providers compose context and expose hooks to pages. All side-effects funnel through services so instrumentation and DI can be applied centrally.",
    "folder_structure": "src/\n  app/\n    config.ts\n  core/\n    contracts.ts\n    events.ts\n    hooks.ts\n    di.ts\n    utils.ts\n  theme/\n    index.ts\n    animations.ts\n  styles/\n    global.css\n  providers/\n    ThemeProvider.tsx\n    QueryProvider.tsx\n    AuthProvider.tsx\n    ToastProvider.tsx\n    Providers.tsx\n  services/\n    apiClient.ts\n    authService.ts\n    analytics.ts\n  hooks/\n    useAuth.ts\n    useToast.ts\n    useFetch.ts\n    useDebounce.ts\n    useResponsive.ts\n  shared/\n    components/\n      index.ts\n      Button/\n        Button.tsx\n      Input/\n        Input.tsx\n      Icon/\n        Icon.tsx\n      Card/\n        Card.tsx\n      Modal/\n        Modal.tsx\n      Toast/\n        ToastProvider.tsx\n      Skeleton/\n        Skeleton.tsx\n      Spinner/\n        Spinner.tsx\n      Glass/\n        GlassCard.tsx\n      Chart/\n        LineChart.tsx\n      Nav/\n        NavBar.tsx\n      Sidebar/\n        Sidebar.tsx\n      Tooltip/\n        Tooltip.tsx\n      Table/\n        Table.tsx\n    layouts/\n      MainLayout.tsx\n      AuthLayout.tsx\n      ResponsiveGrid.tsx\n  features/\n    dashboard/\n      widgets/\n        MetricCard.tsx\n        ActivityChart.tsx\n  pages/\n    Dashboard/\n      DashboardPage.tsx\n    Login/\n      LoginPage.tsx\n    Settings/\n      SettingsPage.tsx\n    NotFound/\n      NotFoundPage.tsx\n  routes/\n    AppRouter.tsx\n  App.tsx\n  main.tsx",
    "tech_stack": [
      "React 18+ (functional components, hooks)",
      "TypeScript (strict mode recommended)",
      "Vite (import.meta.env for configuration)",
      "React Router v6+ for routing",
      "TanStack React Query for data fetching & cache",
      "Framer Motion for animations & micro-interactions",
      "Recharts or Chart.js for lightweight data visualization",
      "CSS Modules / utility-first classes / PostCSS (global.css included) - design tokens in TS",
      "Optional: small DI pattern (simple container) for service mocking",
      "Accessibility-first patterns: ARIA, keyboard, focus management"
    ]
  },
  "kernel_specs": {
    "overview": "The Core Kernel provides a small, well-typed foundation used by every section of the application: domain contracts, runtime configuration, a typed event bus, a hook/extension registry, a minimal dependency injection container, and general-purpose utilities. These core files are intentionally small, focused, and strongly typed so the rest of the app (services, providers, hooks, components and pages) can import a single source of truth for types, behavior and runtime flags."
  },
  "sections": [
    {
      "id": "app-config",
      "file_path": "src/app/config.ts",
      "description": "Materialized runtime configuration using import.meta.env; central source for base URLs, feature flags, and timeouts.",
      "dependencies": [
        "src/core/contracts.ts"
      ],
      "exports": [
        "config"
      ],
      "priority": 1,
      "purpose": "Materialized runtime configuration using Vite's import.meta.env. Central source for base URLs, feature flags, timeouts, environment flags and development mock data.",
      "content": "Purpose\n- Materialize a single, strongly-typed config object from import.meta.env.\n- Provide computed flags (isDevelopment, shouldUseMockData, enableWebsockets) and utilities to check feature toggles.\n- Generate small mock dataset when development mocking is enabled so other modules can import it safely.\n\nEnv contract\n- Expect Vite environment variables prefixed with VITE_ . Example variables used:\n  - VITE_API_BASE (string)\n  - VITE_ENV (\"development\"|\"staging\"|\"production\")\n  - VITE_TIMEOUT_MS (number, fallback 15000)\n  - VITE_FEATURES (JSON string or comma-separated list, e.g. '[\"analytics\",\"beta_dashboard\"]' or 'analytics,beta_dashboard')\n  - VITE_DISABLE_WEBSOCKETS (\"true\"|\"false\")\n  - VITE_ENABLE_MOCK_DATA (\"true\"|\"false\")\n  - VITE_ANALYTICS_PROVIDERS (JSON string array or csv)\n\nTypes\n  export type FeatureName = 'analytics' | 'beta_dashboard' | 'websockets' | 'mock_data' | 'experimental_ui';\n\n  export interface AppConfig {\n    env: 'development' | 'staging' | 'production';\n    isDevelopment: boolean;\n    apiBaseUrl: string;\n    requestTimeoutMs: number;\n    features: Set<string>; // allow arbitrary names for forward compatibility, prefer FeatureName\n    analyticsProviders: string[];\n    enableWebsockets: boolean;\n    shouldUseMockData: boolean;\n    buildTimestamp?: string;\n    // convenience helper\n    isFeatureEnabled: (name: string) => boolean;\n  }\n\nImplementation notes\n- Use import.meta.env (Vite) not process.env.\n- Robust parsing: permissive parsing of FEATURES and ANALYTICS_PROVIDERS using JSON.parse with safe fallback or comma-splitting.\n- Provide an isFeatureEnabled helper bound to the config object.\n- When shouldUseMockData is true, export a small mock user and sample records that conform to src/core/contracts types. Keep mocks minimal and deterministic.\n\nExample implementation (behavioral description)\n- Read raw values:\n  const rawEnv = import.meta.env;\n  const apiBase = (rawEnv.VITE_API_BASE as string) ?? `${location.protocol}//${location.host}/api`;\n  const env = ((rawEnv.VITE_ENV as string) ?? 'development') as AppConfig['env'];\n  const featuresRaw = (rawEnv.VITE_FEATURES as string | undefined) ?? '[]';\n  const parsedFeatures = safeParseFeatures(featuresRaw); // returns string[]\n\n- Computed flags:\n  const isDevelopment = env === 'development';\n  const shouldUseMockData = isDevelopment && (rawEnv.VITE_ENABLE_MOCK_DATA === 'true');\n  const enableWebsockets = rawEnv.VITE_DISABLE_WEBSOCKETS !== 'true';\n\n- Build config object and freeze it to avoid accidental mutation.\n\nMock Data\n- When shouldUseMockData is true, config exports a small `mock` object with sample User/Patient/Doctor/Appointment items. Mocks should import types from '@/core/contracts' (not circular since contracts don't import config).\n\n  export const mock = {\n    currentUser: { id: 'mock-user-1', email: 'dev@local', fullName: 'Developer Mock', roles: ['admin', 'doctor'], createdAt: new Date().toISOString() },\n    patients: [ ...sample Patient objects... ],\n    appointments: [ ...sample Appointment objects... ]\n  };\n\nUtilities\n- isFeatureEnabled(name: string): boolean - reads features Set.\n- parseCsvOrJson(raw?: string): string[] - helper to normalize env arrays.\n\nIntegration points\n- src/services/apiClient.ts should import config.apiBaseUrl and config.requestTimeoutMs.\n- src/providers/QueryProvider.tsx should import config to tune retry/timeouts and devtools.\n- src/core/events.ts and src/core/hooks.ts may read config.isFeatureEnabled('analytics') or config.enableWebsockets to decide runtime behavior.\n\nExamples\n  import { config, isFeatureEnabled } from '@/app/config';\n  if (config.isDevelopment && config.shouldUseMockData) {\n    // use injected mock data substitute in services\n  }\n\nNotes\n- Keep the config export as a single frozen object to encourage reading-only usage across the app.\n- Do not perform network calls from this module \u2014 configuration only.\n- Keep types minimal and stable so tests can import the config type to stub values."
    },
    {
      "id": "core-contracts",
      "file_path": "src/core/contracts.ts",
      "description": "Domain types, DTOs, and API contract TypeScript interfaces used across services and UI.",
      "dependencies": [],
      "exports": [
        "AppConfig",
        "User",
        "AuthTokens",
        "ApiResponse<T>",
        "DashboardMetric",
        "ChartPoint"
      ],
      "priority": 1,
      "purpose": "Domain types, DTOs and reusable UI state contracts. Centralized domain models (users, healthcare models), API response shapes and client-side UI helpers used throughout the app.",
      "content": "Purpose\n- Provide strongly-typed contracts for the app domain (healthcare), API interactions and common UI primitives.\n- Keep stable types in one place to avoid duplication and to make tests and mocks easier.\n\nConventions\n- Types are immutable records (readonly where appropriate).\n- Use discriminated unions for role-specific payloads.\n- Keep small helper types (Address, Contact) that can be reused by multiple domain entities.\n\nTypes (detailed)\n- Role: union type string literal of allowed roles used across the app.\n\n  export type Role = 'admin' | 'doctor' | 'nurse' | 'patient' | 'staff';\n\n- User and role-specializations: base User plus small derived shapes with role-specific fields.\n\n  export interface User {\n    id: string;\n    email: string;\n    fullName: string;\n    roles: Role[];\n    avatarUrl?: string | null;\n    metadata?: Record<string, any>;\n    createdAt: string; // ISO\n    updatedAt?: string;\n  }\n\n  export interface Patient extends User {\n    medicalRecordNumber: string;\n    dateOfBirth?: string; // ISO\n    primaryProviderId?: string;\n  }\n\n  export interface Doctor extends User {\n    licenseNumber?: string;\n    specialties?: string[];\n    clinicIds?: string[];\n  }\n\n  export interface Nurse extends User {\n    department?: string;\n    shift?: 'day' | 'night' | 'rotating';\n  }\n\n- Lightweight address & contact helpers\n\n  export interface Address {\n    line1: string;\n    line2?: string;\n    city?: string;\n    state?: string;\n    postalCode?: string;\n    country?: string;\n  }\n\n  export interface Contact {\n    phone?: string;\n    secondaryPhone?: string;\n    emergencyContact?: { name: string; phone: string };\n  }\n\n- Healthcare domain models\n\n  export type AppointmentStatus = 'scheduled' | 'checked_in' | 'in_progress' | 'completed' | 'cancelled' | 'no_show';\n\n  export interface Appointment {\n    id: string;\n    patientId: string;\n    clinicianId?: string; // doctor or nurse\n    scheduledAt: string; // ISO\n    durationMinutes?: number;\n    reason?: string;\n    status: AppointmentStatus;\n    locationId?: string;\n    createdBy?: string;\n    metadata?: Record<string, any>;\n  }\n\n  export interface VisitNote {\n    id: string;\n    appointmentId?: string;\n    authorId: string;\n    note: string;\n    createdAt: string;\n  }\n\n  export type PrescriptionStatus = 'active' | 'expired' | 'cancelled' | 'draft';\n\n  export interface Prescription {\n    id: string;\n    patientId: string;\n    prescriberId: string;\n    medications: Array<{ name: string; dose?: string; frequency?: string; quantity?: number }>;\n    issuedAt: string;\n    expiresAt?: string;\n    status: PrescriptionStatus;\n    notes?: string;\n  }\n\n  export type LabResultStatus = 'pending' | 'completed' | 'amended' | 'cancelled';\n\n  export interface LabResult {\n    id: string;\n    patientId: string;\n    testName: string;\n    performedAt?: string;\n    status: LabResultStatus;\n    resultSummary?: string;\n    raw?: any; // provider-specific payload, keep as any but documented\n  }\n\n  export interface MedicalRecord {\n    id: string;\n    patientId: string;\n    problems?: string[];\n    allergies?: string[];\n    medications?: Prescription[];\n    visits?: VisitNote[];\n    lastUpdatedAt?: string;\n  }\n\n- API response / error shapes\n\n  export interface ApiResult<T = any> {\n    success: boolean;\n    data?: T;\n    error?: ApiError;\n  }\n\n  export interface ApiError {\n    code?: string | number;\n    message: string;\n    details?: any;\n    status?: number;\n  }\n\n  export interface PaginatedResponse<T> {\n    items: T[];\n    total: number;\n    page: number;\n    pageSize: number;\n  }\n\n- WebSocket / push event types\n  When websockets are enabled the WebSocket message envelope should be narrow; each message contains a type/discriminant and payload.\n\n  export type WebSocketEvent =\n    | { type: 'notification'; payload: { id: string; title: string; body?: string; url?: string } }\n    | { type: 'appointment:update'; payload: Appointment }\n    | { type: 'lab:result'; payload: LabResult }\n    | { type: 'presence'; payload: { userId: string; online: boolean } }\n    | { type: 'custom'; payload: any };\n\n  export type WebSocketEventMap = Record<string, any>; // used for typed buses or adapters\n\n- UI state helpers\n\n  export type LoadingState = 'idle' | 'loading' | 'success' | 'error';\n\n  export interface FormState<T = Record<string, any>> {\n    values: T;\n    errors: Partial<Record<keyof T, string | undefined>>;\n    touched: Partial<Record<keyof T, boolean>>;\n    isSubmitting: boolean;\n  }\n\n  export type FetchState<T> = {\n    data?: T;\n    error?: ApiError;\n    loading: boolean;\n  };\n\nPatterns and examples\n- Reuse these types in services and hooks:\n\n  import { Appointment, ApiResult } from '@/core/contracts';\n\n  async function getAppointments(): Promise<ApiResult<Appointment[]>> {\n    // implementation in src/services/apiClient.ts will return ApiResult<Appointment[]>\n  }\n\n- Use discriminated unions to narrow by event type from WebSocket payloads.\n\nIntegration points\n- src/services/apiClient.ts should use ApiResult / ApiError types for typed responses.\n- src/services/authService.ts returns User and AuthTokens that align with User type definitions here.\n- src/core/events.ts can publish WebSocketEvent payloads using the WebSocketEvent union.\n\nMocks\n- Because mock data is generated by the config layer, mock user objects should conform to User/Patient/Doctor interfaces above. The app's tests should import these types to assert shape correctness."
    },
    {
      "id": "core-di",
      "file_path": "src/core/di.ts",
      "description": "Minimal dependency injection container to register and resolve services for easier testing / swapping implementations.",
      "dependencies": [
        "src/core/contracts.ts"
      ],
      "exports": [
        "Container",
        "registerService",
        "resolveService"
      ],
      "priority": 1,
      "purpose": "A minimal, type-safe dependency injection container (token-based) to register and resolve services. Useful for swapping implementations in tests or environment-specific wiring.",
      "content": "Goals\n- Provide a small, explicit token-based container for registering and resolving services. Avoid magic \u2014 tokens are explicit values (symbols) and typed so TypeScript can infer resolved types.\n- Support registering singletons and factories.\n\nCore types and helpers\n  export interface InjectionToken<T> {\n    readonly key: symbol;\n    readonly name?: string;\n  }\n\n  export function createToken<T>(name?: string): InjectionToken<T> {\n    return { key: Symbol(name), name };\n  }\n\nContainer class\n- API\n  - register<T>(token: InjectionToken<T>, provider: { useValue?: T; useFactory?: (c: Container) => T; singleton?: boolean }): void\n  - resolve<T>(token: InjectionToken<T>): T\n  - unregister(token: InjectionToken<any>): void\n  - has(token): boolean\n\n- Behavior\n  - If useValue is provided, resolve returns that value.\n  - If useFactory is provided and singleton=true, container caches the resulting instance and returns the same instance on subsequent resolves.\n  - Factory receives the container to resolve other dependencies lazily.\n  - Throw an error on resolve if token not registered.\n\nPredefined tokens\n- Export commonly used tokens to reduce duplication across the app:\n  export const ApiClientToken = createToken<ApiClient>('ApiClient');\n  export const AuthServiceToken = createToken<AuthService>('AuthService');\n  export const StorageServiceToken = createToken<StorageService>('StorageService');\n  export const WebSocketServiceToken = createToken<WebSocketService>('WebSocketService');\n\n  // The concrete interfaces (ApiClient/AuthService/StorageService) are defined in services layer; here we only refer to them by generic type parameters.\n\nConvenience functions\n- registerService(token, provider): alias to defaultContainer.register.\n- resolveService(token): alias to defaultContainer.resolve.\n\ndefaultContainer singleton\n- Export a defaultContainer used by the application bootstrap (Providers.tsx or main.tsx) to register concrete implementations.\n\nUsage pattern\n- At app startup (src/main.tsx or src/providers/Providers.tsx) register services:\n\n  import { defaultContainer, ApiClientToken } from '@/core/di';\n  import { apiClient } from '@/services/apiClient';\n\n  defaultContainer.register(ApiClientToken, { useValue: apiClient });\n\n- In services/components that need dependencies, resolve them lazily for testability:\n\n  const api = defaultContainer.resolve(ApiClientToken);\n  api.get('/patients');\n\n- For unit tests, create a test container or temporarily register a mock before the test runs and restore after.\n\nType safety and guidance\n- Using InjectionToken<T> ensures resolve<T> returns the correct static type. Keep tokens exported from this module to avoid creating accidental duplicates.\n- Prefer register with factories when initialization requires other services (factory receives the container).\n- Avoid global mutable singletons for application logic \u2014 prefer DI so tests can swap implementations easily.\n\nExample register factory with singleton\n  defaultContainer.register(AuthServiceToken, {\n    useFactory: (c) => new AuthService(c.resolve(ApiClientToken)),\n    singleton: true\n  });\n\nNotes\n- Keep this container intentionally small; it is not a full-blown DI framework. Its goal is testability and clear wiring, not reflection or decorators."
    },
    {
      "id": "core-events",
      "file_path": "src/core/events.ts",
      "description": "Lightweight event bus for decoupled cross-cutting events (toast notifications, analytics hooks, global errors).",
      "dependencies": [],
      "exports": [
        "EventBus",
        "globalEventBus",
        "EventCallback"
      ],
      "priority": 1,
      "purpose": "Typed, lightweight event bus for decoupled cross-cutting communication (toasts, analytics, global errors, websocket messages). Supports sync and async handlers and safe unsubscribe.",
      "content": "Goals\n- Provide a generic, typed event bus that other modules can import and subscribe to without tight coupling.\n- Support synchronous handlers and asynchronous handlers (that return Promise). The emitter returns a Promise that resolves when all handlers finish (useful for instrumentation).\n- Allow once/unsubscribe and allow handler priority when needed.\n\nTypes\n  export type EventCallback<T = any> = (payload: T) => void | Promise<void>;\n\n  export interface DomainEventMap {\n    'toast:show': { id?: string; type: 'success' | 'error' | 'info' | 'warning'; title: string; body?: string; durationMs?: number };\n    'analytics:event': { name: string; properties?: Record<string, any> };\n    'auth:login': { userId: string };\n    'auth:logout': { userId?: string };\n    'error:global': { error: Error | string; context?: string };\n    'ws:message': { raw: any }; // generic envelope for websocket wire messages\n    // App can augment this map by intersecting types in their own extension files.\n  }\n\nEventBus class\n- Generic class EventBus<E> where E is the event map type.\n- Methods:\n  - on<K extends keyof E>(event: K, handler: EventCallback<E[K]>, opts?: { priority?: number }): () => void\n    returns an unsubscribe function.\n  - off<K extends keyof E>(event: K, handler: EventCallback<E[K]>): void\n  - once<K extends keyof E>(event: K, handler: EventCallback<E[K]>): () => void\n  - emit<K extends keyof E>(event: K, payload: E[K]): Promise<void>\n    calls handlers in priority order (highest priority first). If handlers are synchronous, emit resolves synchronously; if any handler returns a Promise, emit returns a Promise that awaits all handlers.\n\nImplementation details\n- Internally maintain a Map<eventName, Array<{handler, priority}>>.\n- Provide safe iteration snapshot on emit to handle handlers registering/unregistering during iteration.\n- Ensure unhandled exceptions from handlers are caught and emitted as 'error:global' event (but avoid infinite loops).\n\nSingleton instance\n- Export a global singleton typed with DomainEventMap called globalEventBus.\n\nUsage examples\n  import { globalEventBus } from '@/core/events';\n\n  // subscribe\n  const off = globalEventBus.on('toast:show', payload => {\n    // show toast UI\n  });\n\n  // emit\n  await globalEventBus.emit('analytics:event', { name: 'page_view', properties: { path: '/dashboard' } });\n\n  // once\n  globalEventBus.once('auth:login', payload => console.log('user logged in', payload.userId));\n\nIntegration points\n- src/providers/ToastProvider.tsx should subscribe to 'toast:show' to enqueue visual toasts.\n- src/services/analytics.ts should both emit and subscribe to 'analytics:event' if forwarding to multiple providers.\n- src/services/websocket service can emit 'ws:message' when messages arrive.\n\nExtensibility\n- Projects can augment DomainEventMap by declaring module augmentation for '@/core/events' to add new keyed events and payloads for stricter typing."
    },
    {
      "id": "core-hooks-registry",
      "file_path": "src/core/hooks.ts",
      "description": "Hook registry API for runtime extensions/plugins and a typed hook registration/consumption system.",
      "dependencies": [
        "src/core/events.ts"
      ],
      "exports": [
        "registerHook",
        "useHook",
        "HookRegistration"
      ],
      "priority": 1,
      "purpose": "A small hook registry / plugin system to register application extension points and run hooks. Hook points are typed; run order supports priority and synchronous/async execution.",
      "content": "Goals\n- Provide a minimal runtime hook registry used by services to allow runtime extensions (e.g., A/B hooks, instrumentation, modifying requests/responses).\n- Typed HookPoints for common extension spots: beforeApiRequest, afterApiResponse, onLogin, onLogout, onRouteChange.\n- Make it easy for later features or plugins to register behavior without touching service code.\n\nTypes\n  export type HookPoint = 'beforeApiRequest' | 'afterApiResponse' | 'onLogin' | 'onLogout' | 'onRouteChange';\n\n  export interface HookContext {\n    // Common fields that different hook points may use. Not all fields are required by all hooks but this shape keeps hooks adaptable.\n    request?: { url: string; method: string; headers?: Record<string, string>; body?: any };\n    response?: { status: number; body?: any };\n    user?: { id: string };\n    route?: { from?: string; to?: string };\n    extra?: Record<string, any>;\n  }\n\n  export type HookHandler<T extends HookContext = HookContext> = (ctx: T) => void | Promise<void> | Partial<T>;\n\n  export interface HookRegistration {\n    id: string; // stable id for unregistering\n    point: HookPoint;\n    handler: HookHandler;\n    priority?: number; // higher executes earlier\n    once?: boolean;\n  }\n\nHookRegistry class\n- Responsibilities:\n  - register(point, handler, opts): HookRegistration\n  - unregister(id)\n  - run(point, ctx): Promise<HookContext>\n\n- register returns the registration object and adds it to internal storage keyed by point.\n- run executes registered handlers in priority order. If a handler returns a Partial<HookContext>, merge it into ctx (shallow merge). If a handler throws, capture and forward to globalEventBus.emit('error:global') for logging.\n- run returns the final merged context when all handlers have executed.\n\nHelper functions to export\n- registerHook(point, handler, opts?): convenience to register on the global registry and return an unregister function.\n- useHook(point, handler, deps?): a React hook helper for components to register a hook during lifecycle and auto-unregister on unmount. (This will depend on React; this module should export a non-React implementation and a separate small React hook module can import and wrap it. Nonetheless provide a small typed useHook signature here as a convention.)\n\nExample usage\n  import { registerHook } from '@/core/hooks';\n  // modify headers before requests\n  const reg = registerHook('beforeApiRequest', async ctx => {\n    ctx.request = ctx.request || { url: '', method: 'GET' };\n    // add instrumentation header\n    ctx.request.headers = { ...(ctx.request.headers || {}), 'x-app-trace': 'trace-id-123' };\n  }, { priority: 10 });\n\n  // running hooks inside the API client\n  const ctx = await hookRegistry.run('beforeApiRequest', { request: { url: '/patients', method: 'GET' } });\n  // use ctx.request to perform fetch\n\nIntegration points\n- src/services/apiClient.ts should call hookRegistry.run('beforeApiRequest', ctx) before executing the HTTP call and hookRegistry.run('afterApiResponse', ctx) after.\n- Auth service should run 'onLogin' and 'onLogout' hooks when authentication state changes.\n- Route changes can be wrapped to run 'onRouteChange' so analytics plugins can hook in.\n\nPatterns\n- Keep hook handlers idempotent and fast; heavy work should be delegated to background async paths where appropriate.\n- Use priority for core behaviors (auth, instrumentation) and register plugin-level hooks with lower priority by default.\n\nNotes\n- The HookRegistry should be a singleton exported as hookRegistry.\n- Because handlers may be async, run should always return a Promise. If no handlers run, it should resolve immediately with the input context.\n- Provide a simple typed registration ID (string based on timestamp + counter) to make tests deterministic when needed."
    },
    {
      "id": "core-utils",
      "file_path": "src/core/utils.ts",
      "description": "General-purpose utilities: classNames, formatDate, clamp, sleep, safeParseJSON and accessibility helpers.",
      "dependencies": [],
      "exports": [
        "classNames",
        "formatDate",
        "clamp",
        "sleep",
        "safeParseJSON",
        "focusTrapHelpers"
      ],
      "priority": 1,
      "purpose": "General-purpose utilities used across the application: classNames, date formatting, clamp, sleep, safe JSON parsing, debug logging and low-level accessibility helpers like focus-trap utilities.",
      "content": "Purpose\n- Provide small, dependency-free helpers that are used in both components and services.\n- Keep implementations tiny and dependency-free so they are easy to reason about in tests.\n\nFunctions and behavior\n- classNames(...parts: Array<string | false | null | undefined | Record<string, boolean>>): string\n  - Concatenates class names and supports conditional objects. Example:\n    classNames('btn', { 'btn-primary': isPrimary }, maybeClass)\n\n- formatDate(dateInput: string | number | Date, opts?: { dateStyle?: Intl.DateTimeFormatOptions; timeZone?: string }): string\n  - Uses Intl.DateTimeFormat with reasonable defaults. Returns empty string for falsy input.\n  - Example: formatDate('2024-03-01T12:00:00Z', { dateStyle: 'medium' }) -> 'Mar 1, 2024'\n\n- clamp(value: number, min: number, max: number): number\n  - Returns value bounded by the inclusive [min, max].\n\n- sleep(ms: number): Promise<void>\n  - Returns a promise that resolves after ms. Useful for small delays in dev/test.\n\n- safeParseJSON<T = any>(raw: string | undefined, fallback?: T): T\n  - Try/catch JSON.parse, returns fallback on parse error. Useful for parsing env vars.\n\n- debugLog(...args: any[]): void\n  - Wrapper around console.log that is no-op in production. Detect production via import.meta.env.MODE or import.meta.env.VITE_ENV. Keep output prefixed for easier filtering.\n\n- assertNever(x: never, message?: string): never\n  - Useful for exhaustive switch checks in TypeScript.\n\n- focusTrapHelpers\n  - Small utilities to trap focus inside a container element and restore focus on release. Not a full-blown focus-trap library but a minimal, accessible helper used by Modal and other overlays.\n  - API:\n      const { trapFocus, releaseFocus } = focusTrapHelpers(containerElement, initialFocusSelector?)\n      trapFocus(); // sets keydown handlers and moves focus\n      releaseFocus(); // removes handlers and restores previously focused element\n\n  Implementation details for trapFocus\n  - Remember previouslyFocusedElement = document.activeElement as HTMLElement | null\n  - Query all focusable elements inside container using a small selector list\n  - On Tab key press, cycle focus between first and last element\n  - Add keydown handler to listen for Escape for optional close semantics (handler should be provided by modal code)\n  - Provide releaseFocus to remove listeners and restore focus\n\nExamples\n- classNames example\n\n  import { classNames } from '@/core/utils';\n  const cls = classNames('card', isActive && 'card--active', { 'card--disabled': disabled });\n\n- date formatting example\n\n  import { formatDate } from '@/core/utils';\n  const pretty = formatDate(record.createdAt, { dateStyle: 'medium' });\n\n- safe JSON parsing for config\n\n  import { safeParseJSON } from '@/core/utils';\n  const features = safeParseJSON<string[]>(import.meta.env.VITE_FEATURES, []);\n\nTesting guidance\n- All utilities are pure functions (except focusTrapHelpers which manipulates DOM). Tests should validate edge cases (null/undefined, wrong types) and ensure debugLog is suppressed in production.\n\nIntegration points\n- src/app/config.ts uses safeParseJSON and debugLog.\n- src/shared/components/Modal/Modal.tsx uses focusTrapHelpers.\n- src/shared/components/Button/Button.tsx uses classNames for variant selection.\n\nNotes\n- Keep utils dependency-free and well-documented. If a helper grows complex (e.g., focus trapping), consider moving to a dedicated small package later, but keep this implementation sufficient for the app's initial needs."
    },
    {
      "id": "providers-authprovider",
      "file_path": "src/providers/AuthProvider.tsx",
      "description": "Auth context provider that wraps authentication state, token refresh, and exposes useAuth. Uses authService for persistence & API interactions.",
      "dependencies": [
        "src/services/authService.ts",
        "src/core/contracts.ts"
      ],
      "exports": [
        "AuthProvider",
        "useAuthContext"
      ],
      "priority": 1
    },
    {
      "id": "providers-queryprovider",
      "file_path": "src/providers/QueryProvider.tsx",
      "description": "React Query client provider with default configurations (error handling, retry policies) wired to app config.",
      "dependencies": [
        "src/app/config.ts"
      ],
      "exports": [
        "QueryProvider"
      ],
      "priority": 1
    },
    {
      "id": "providers-root",
      "file_path": "src/providers/Providers.tsx",
      "description": "Composes all top-level providers (Theme, Query, Auth, Toast) in the correct order for the app root.",
      "dependencies": [
        "src/providers/ThemeProvider.tsx",
        "src/providers/QueryProvider.tsx",
        "src/providers/AuthProvider.tsx",
        "src/providers/ToastProvider.tsx"
      ],
      "exports": [
        "AppProviders"
      ],
      "priority": 1
    },
    {
      "id": "providers-themeprovider",
      "file_path": "src/providers/ThemeProvider.tsx",
      "description": "App Theme context and provider (light/dark), connects tokens to CSS variables and exposes useTheme hook.",
      "dependencies": [
        "src/theme/index.ts"
      ],
      "exports": [
        "ThemeProvider",
        "useTheme"
      ],
      "priority": 1
    },
    {
      "id": "providers-toastprovider",
      "file_path": "src/providers/ToastProvider.tsx",
      "description": "Top-level Toast provider and context. Subscribes to globalEventBus to show toasts from anywhere. Handles stacking, animations and accessibility.",
      "dependencies": [
        "src/core/events.ts",
        "src/shared/components/Toast/ToastProvider.tsx",
        "src/theme/animations.ts"
      ],
      "exports": [
        "ToastRootProvider",
        "useToast"
      ],
      "priority": 1
    },
    {
      "id": "styles-global",
      "file_path": "src/styles/global.css",
      "description": "Global styles, CSS resets, utility classes and base layout rules. Includes variables fallback for tokens and prefers-reduced-motion.",
      "dependencies": [],
      "exports": [
        "global styles (side-effect file)"
      ],
      "priority": 1
    },
    {
      "id": "theme-animations",
      "file_path": "src/theme/animations.ts",
      "description": "Animation presets and Framer Motion transition helpers (e.g., spring, fade, stagger) to ensure consistent micro-interactions.",
      "dependencies": [],
      "exports": [
        "motionPresets",
        "fadeVariant",
        "staggerChildren"
      ],
      "priority": 1
    },
    {
      "id": "theme-index",
      "file_path": "src/theme/index.ts",
      "description": "Design tokens (colors, spacing, typography scales), theme utilities and helpers to be consumed by components and CSS-in-JS.",
      "dependencies": [
        "src/theme/animations.ts"
      ],
      "exports": [
        "tokens",
        "theme",
        "useThemeToken"
      ],
      "priority": 1
    },
    {
      "id": "component-avatar",
      "file_path": "src/shared/components/Avatar/Avatar.tsx",
      "description": "Avatar component that renders user initials or image with an accessible alt attribute and fallback behavior.",
      "dependencies": [],
      "exports": [
        "Avatar"
      ],
      "priority": 2
    },
    {
      "id": "component-button",
      "file_path": "src/shared/components/Button/Button.tsx",
      "description": "Accessible Button component with variants (primary, ghost, subtle), loading state, and built-in micro-interactions (scale on press).",
      "dependencies": [
        "src/theme/index.ts",
        "src/core/utils.ts"
      ],
      "exports": [
        "Button"
      ],
      "priority": 2
    },
    {
      "id": "component-card",
      "file_path": "src/shared/components/Card/Card.tsx",
      "description": "Card component supporting elevation, gradients and glass morphism variants.",
      "dependencies": [
        "src/theme/index.ts",
        "src/shared/components/Glass/GlassCard.tsx"
      ],
      "exports": [
        "Card"
      ],
      "priority": 2
    },
    {
      "id": "component-glasscard",
      "file_path": "src/shared/components/Glass/GlassCard.tsx",
      "description": "Glass morphism container with backdrop-filter, gradient border options, and subtle shadows for depth.",
      "dependencies": [
        "src/theme/index.ts"
      ],
      "exports": [
        "GlassCard"
      ],
      "priority": 2
    },
    {
      "id": "component-icon",
      "file_path": "src/shared/components/Icon/Icon.tsx",
      "description": "Small SVG icon system that maps semantic names to vector icons and supports size/color props.",
      "dependencies": [],
      "exports": [
        "Icon",
        "IconMap"
      ],
      "priority": 2
    },
    {
      "id": "component-input",
      "file_path": "src/shared/components/Input/Input.tsx",
      "description": "Accessible Input component with label, validation state, icons and debounced onChange support. Includes skeleton/placeholder state.",
      "dependencies": [
        "src/theme/index.ts",
        "src/shared/components/Icon/Icon.tsx",
        "src/hooks/useDebounce.ts"
      ],
      "exports": [
        "Input"
      ],
      "priority": 2
    },
    {
      "id": "component-linechart",
      "file_path": "src/shared/components/Chart/LineChart.tsx",
      "description": "Reusable LineChart wrapper using a charting library (Recharts/Chart.js) with responsive behavior and minimal props.",
      "dependencies": [
        "src/core/contracts.ts",
        "src/theme/index.ts"
      ],
      "exports": [
        "LineChart"
      ],
      "priority": 2
    },
    {
      "id": "component-modal",
      "file_path": "src/shared/components/Modal/Modal.tsx",
      "description": "Accessible Modal component with backdrop blur, focus trap helpers, ESC to close, and entrance/exit animations.",
      "dependencies": [
        "src/core/utils.ts",
        "src/theme/animations.ts"
      ],
      "exports": [
        "Modal"
      ],
      "priority": 2
    },
    {
      "id": "component-navbar",
      "file_path": "src/shared/components/Nav/NavBar.tsx",
      "description": "Top navigation bar with responsive collapse, user avatar menu and accessible keyboard navigation.",
      "dependencies": [
        "src/shared/components/Icon/Icon.tsx",
        "src/shared/components/Avatar/Avatar.tsx",
        "src/hooks/useAuth.ts",
        "src/theme/index.ts"
      ],
      "exports": [
        "NavBar"
      ],
      "priority": 2
    },
    {
      "id": "component-sidebar",
      "file_path": "src/shared/components/Sidebar/Sidebar.tsx",
      "description": "Left-side navigation Sidebar with collapsible groups, keyboard focus management and responsive auto-collapse on small screens.",
      "dependencies": [
        "src/shared/components/Nav/NavBar.tsx",
        "src/theme/index.ts"
      ],
      "exports": [
        "Sidebar"
      ],
      "priority": 2
    },
    {
      "id": "component-skeleton",
      "file_path": "src/shared/components/Skeleton/Skeleton.tsx",
      "description": "Skeleton loading primitives (line, avatar, card) with shimmer animation to show placeholders during data fetch.",
      "dependencies": [
        "src/theme/animations.ts"
      ],
      "exports": [
        "Skeleton"
      ],
      "priority": 2
    },
    {
      "id": "component-spinner",
      "file_path": "src/shared/components/Spinner/Spinner.tsx",
      "description": "Lightweight accessible spinner used for blocking and inline loading states.",
      "dependencies": [],
      "exports": [
        "Spinner"
      ],
      "priority": 2
    },
    {
      "id": "component-table",
      "file_path": "src/shared/components/Table/Table.tsx",
      "description": "Composable data table with sorting, row virtualization hook points, and graceful mobile layout fallback.",
      "dependencies": [
        "src/core/utils.ts",
        "src/theme/index.ts"
      ],
      "exports": [
        "Table"
      ],
      "priority": 2
    },
    {
      "id": "component-toast-provider",
      "file_path": "src/shared/components/Toast/ToastProvider.tsx",
      "description": "Visual toast container and toast item renderer. Supports stacking, auto-dismiss, pause on hover, keyboard dismiss and a11y announcements.",
      "dependencies": [
        "src/core/events.ts",
        "src/theme/animations.ts"
      ],
      "exports": [
        "ToastProvider",
        "useToastContext"
      ],
      "priority": 2
    },
    {
      "id": "component-tooltip",
      "file_path": "src/shared/components/Tooltip/Tooltip.tsx",
      "description": "Accessible tooltip primitive with delay, positioning and support for custom content; used by small controls and charts.",
      "dependencies": [
        "src/theme/animations.ts"
      ],
      "exports": [
        "Tooltip"
      ],
      "priority": 2
    },
    {
      "id": "hooks-useauth",
      "file_path": "src/hooks/useAuth.ts",
      "description": "Convenience hook around Auth context and authService to expose login/logout, isAuthenticated and currentUser in components.",
      "dependencies": [
        "src/providers/AuthProvider.tsx",
        "src/services/authService.ts",
        "src/core/contracts.ts"
      ],
      "exports": [
        "useAuth"
      ],
      "priority": 2
    },
    {
      "id": "hooks-usedebounce",
      "file_path": "src/hooks/useDebounce.ts",
      "description": "Generic debounce hook for inputs and search interactions.",
      "dependencies": [],
      "exports": [
        "useDebounce"
      ],
      "priority": 2
    },
    {
      "id": "hooks-usefetch",
      "file_path": "src/hooks/useFetch.ts",
      "description": "Small wrapper hooking React Query to apiClient.fetcher for typed GET/POST queries and mutations.",
      "dependencies": [
        "src/services/apiClient.ts"
      ],
      "exports": [
        "useQueryFetch",
        "useMutationFetch"
      ],
      "priority": 2
    },
    {
      "id": "hooks-useresponsive",
      "file_path": "src/hooks/useResponsive.ts",
      "description": "Hook to provide responsive breakpoints and an easy 'isMobile' toggle; uses matchMedia and cleans up on unmount.",
      "dependencies": [
        "src/theme/index.ts"
      ],
      "exports": [
        "useResponsive"
      ],
      "priority": 2
    },
    {
      "id": "hooks-uset-toast",
      "file_path": "src/hooks/useToast.ts",
      "description": "Hook helper to push toasts (success, error, info) that delegates to global event bus or Toast context.",
      "dependencies": [
        "src/core/events.ts"
      ],
      "exports": [
        "useToast"
      ],
      "priority": 2
    },
    {
      "id": "layouts-authlayout",
      "file_path": "src/shared/layouts/AuthLayout.tsx",
      "description": "Centered authentication layout with subtle background gradient and glass card for auth forms (Login/Register).",
      "dependencies": [
        "src/shared/components/Glass/GlassCard.tsx"
      ],
      "exports": [
        "AuthLayout"
      ],
      "priority": 2
    },
    {
      "id": "layouts-mainlayout",
      "file_path": "src/shared/layouts/MainLayout.tsx",
      "description": "Global app shell: Top NavBar, left Sidebar (collapsible), main content area. Handles layout responsiveness and skip-to-content link.",
      "dependencies": [
        "src/shared/components/Nav/NavBar.tsx",
        "src/shared/components/Sidebar/Sidebar.tsx"
      ],
      "exports": [
        "MainLayout"
      ],
      "priority": 2
    },
    {
      "id": "layouts-responsivegrid",
      "file_path": "src/shared/layouts/ResponsiveGrid.tsx",
      "description": "Responsive grid wrapper for dashboard widgets that reflows columns depending on breakpoints.",
      "dependencies": [
        "src/hooks/useResponsive.ts"
      ],
      "exports": [
        "ResponsiveGrid"
      ],
      "priority": 2
    },
    {
      "id": "services-analytics",
      "file_path": "src/services/analytics.ts",
      "description": "Analytics facade that emits events via core/events and optionally forwards to external providers. Lightweight and test-friendly.",
      "dependencies": [
        "src/core/events.ts"
      ],
      "exports": [
        "analytics",
        "trackEvent"
      ],
      "priority": 2
    },
    {
      "id": "services-apiclient",
      "file_path": "src/services/apiClient.ts",
      "description": "Fetch wrapper and API client using fetch + JSON handling, default headers, timeouts; uses src/app/config.ts for baseURL. Exposes typed request helper.",
      "dependencies": [
        "src/app/config.ts",
        "src/core/contracts.ts",
        "src/core/utils.ts"
      ],
      "exports": [
        "apiClient",
        "fetcher",
        "ApiError"
      ],
      "priority": 2
    },
    {
      "id": "services-authservice",
      "file_path": "src/services/authService.ts",
      "description": "Authentication service responsible for login/logout, token storage/refresh, current user retrieval. Built on top of apiClient.",
      "dependencies": [
        "src/services/apiClient.ts",
        "src/core/contracts.ts"
      ],
      "exports": [
        "authService",
        "persistAuth",
        "clearAuth"
      ],
      "priority": 2
    },
    {
      "id": "shared-components-index",
      "file_path": "src/shared/components/index.ts",
      "description": "Barrel file re-exporting primary shared components for simpler imports across the app.",
      "dependencies": [
        "src/shared/components/Button/Button.tsx",
        "src/shared/components/Input/Input.tsx",
        "src/shared/components/Icon/Icon.tsx",
        "src/shared/components/Card/Card.tsx",
        "src/shared/components/Modal/Modal.tsx",
        "src/shared/components/Toast/ToastProvider.tsx",
        "src/shared/components/Skeleton/Skeleton.tsx",
        "src/shared/components/Spinner/Spinner.tsx",
        "src/shared/components/Glass/GlassCard.tsx",
        "src/shared/components/Chart/LineChart.tsx"
      ],
      "exports": [
        "Button",
        "Input",
        "Icon",
        "Card",
        "Modal",
        "ToastProvider",
        "Skeleton",
        "Spinner",
        "GlassCard",
        "LineChart"
      ],
      "priority": 2
    },
    {
      "id": "app-root",
      "file_path": "src/App.tsx",
      "description": "Top-level App component that composes AppProviders and AppRouter; also handles high-level error boundaries and suspense fallbacks.",
      "dependencies": [
        "src/providers/Providers.tsx",
        "src/routes/AppRouter.tsx",
        "src/shared/components/Skeleton/Skeleton.tsx"
      ],
      "exports": [
        "App"
      ],
      "priority": 3
    },
    {
      "id": "features-dashboard-activitychart",
      "file_path": "src/features/dashboard/widgets/ActivityChart.tsx",
      "description": "Larger dashboard chart component showing activity trends and interactive tooltips.",
      "dependencies": [
        "src/shared/components/Chart/LineChart.tsx",
        "src/theme/index.ts"
      ],
      "exports": [
        "ActivityChart"
      ],
      "priority": 3
    },
    {
      "id": "features-dashboard-metriccard",
      "file_path": "src/features/dashboard/widgets/MetricCard.tsx",
      "description": "Small dashboard metric widget showing a value, delta, and sparkline; used on the Dashboard page.",
      "dependencies": [
        "src/shared/components/Card/Card.tsx",
        "src/shared/components/Chart/LineChart.tsx",
        "src/core/contracts.ts"
      ],
      "exports": [
        "MetricCard"
      ],
      "priority": 3
    },
    {
      "id": "main-entry",
      "file_path": "src/main.tsx",
      "description": "Vite entrypoint that mounts the App into the DOM. Imports global styles and registers service worker or dev tools if needed.",
      "dependencies": [
        "src/App.tsx",
        "src/styles/global.css"
      ],
      "exports": [
        "application bootstrap (side-effect)"
      ],
      "priority": 3
    },
    {
      "id": "pages-dashboard",
      "file_path": "src/pages/Dashboard/DashboardPage.tsx",
      "description": "Authenticated dashboard page composed from MetricCard and ActivityChart, loads metrics via useFetch/useQueryFetch.",
      "dependencies": [
        "src/features/dashboard/widgets/MetricCard.tsx",
        "src/features/dashboard/widgets/ActivityChart.tsx",
        "src/hooks/useFetch.ts",
        "src/shared/layouts/MainLayout.tsx"
      ],
      "exports": [
        "DashboardPage"
      ],
      "priority": 3
    },
    {
      "id": "pages-login",
      "file_path": "src/pages/Login/LoginPage.tsx",
      "description": "Login page with AuthLayout, controlled inputs, client-side validation and delegated login via useAuth.",
      "dependencies": [
        "src/shared/layouts/AuthLayout.tsx",
        "src/shared/components/Input/Input.tsx",
        "src/shared/components/Button/Button.tsx",
        "src/hooks/useAuth.ts",
        "src/shared/components/Skeleton/Skeleton.tsx"
      ],
      "exports": [
        "LoginPage"
      ],
      "priority": 3
    },
    {
      "id": "pages-notfound",
      "file_path": "src/pages/NotFound/NotFoundPage.tsx",
      "description": "Simple accessible 404 page shown for unmatched routes with a CTA back to dashboard or login.",
      "dependencies": [
        "src/shared/components/Button/Button.tsx",
        "src/shared/layouts/MainLayout.tsx"
      ],
      "exports": [
        "NotFoundPage"
      ],
      "priority": 3
    },
    {
      "id": "pages-settings",
      "file_path": "src/pages/Settings/SettingsPage.tsx",
      "description": "User settings page demonstrating controlled forms, theme toggles, and saving via services.",
      "dependencies": [
        "src/shared/layouts/MainLayout.tsx",
        "src/shared/components/Card/Card.tsx",
        "src/providers/ThemeProvider.tsx",
        "src/hooks/useAuth.ts"
      ],
      "exports": [
        "SettingsPage"
      ],
      "priority": 3
    },
    {
      "id": "routes-approuter",
      "file_path": "src/routes/AppRouter.tsx",
      "description": "Application router setup using React Router with route guards for authenticated routes and lazy loading for pages.",
      "dependencies": [
        "src/pages/Dashboard/DashboardPage.tsx",
        "src/pages/Login/LoginPage.tsx",
        "src/pages/Settings/SettingsPage.tsx",
        "src/pages/NotFound/NotFoundPage.tsx",
        "src/hooks/useAuth.ts"
      ],
      "exports": [
        "AppRouter"
      ],
      "priority": 3
    }
  ],
  "file_paths": [
    "src/app/config.ts",
    "src/core/contracts.ts",
    "src/core/di.ts",
    "src/core/events.ts",
    "src/core/hooks.ts",
    "src/core/utils.ts",
    "src/providers/AuthProvider.tsx",
    "src/providers/QueryProvider.tsx",
    "src/providers/Providers.tsx",
    "src/providers/ThemeProvider.tsx",
    "src/providers/ToastProvider.tsx",
    "src/styles/global.css",
    "src/theme/animations.ts",
    "src/theme/index.ts",
    "src/shared/components/Avatar/Avatar.tsx",
    "src/shared/components/Button/Button.tsx",
    "src/shared/components/Card/Card.tsx",
    "src/shared/components/Glass/GlassCard.tsx",
    "src/shared/components/Icon/Icon.tsx",
    "src/shared/components/Input/Input.tsx",
    "src/shared/components/Chart/LineChart.tsx",
    "src/shared/components/Modal/Modal.tsx",
    "src/shared/components/Nav/NavBar.tsx",
    "src/shared/components/Sidebar/Sidebar.tsx",
    "src/shared/components/Skeleton/Skeleton.tsx",
    "src/shared/components/Spinner/Spinner.tsx",
    "src/shared/components/Table/Table.tsx",
    "src/shared/components/Toast/ToastProvider.tsx",
    "src/shared/components/Tooltip/Tooltip.tsx",
    "src/hooks/useAuth.ts",
    "src/hooks/useDebounce.ts",
    "src/hooks/useFetch.ts",
    "src/hooks/useResponsive.ts",
    "src/hooks/useToast.ts",
    "src/shared/layouts/AuthLayout.tsx",
    "src/shared/layouts/MainLayout.tsx",
    "src/shared/layouts/ResponsiveGrid.tsx",
    "src/services/analytics.ts",
    "src/services/apiClient.ts",
    "src/services/authService.ts",
    "src/shared/components/index.ts",
    "src/App.tsx",
    "src/features/dashboard/widgets/ActivityChart.tsx",
    "src/features/dashboard/widgets/MetricCard.tsx",
    "src/main.tsx",
    "src/pages/Dashboard/DashboardPage.tsx",
    "src/pages/Login/LoginPage.tsx",
    "src/pages/NotFound/NotFoundPage.tsx",
    "src/pages/Settings/SettingsPage.tsx",
    "src/routes/AppRouter.tsx"
  ],
  "descriptions": [
    "Materialized runtime configuration using import.meta.env; central source for base URLs, feature flags, and timeouts.",
    "Domain types, DTOs, and API contract TypeScript interfaces used across services and UI.",
    "Minimal dependency injection container to register and resolve services for easier testing / swapping implementations.",
    "Lightweight event bus for decoupled cross-cutting events (toast notifications, analytics hooks, global errors).",
    "Hook registry API for runtime extensions/plugins and a typed hook registration/consumption system.",
    "General-purpose utilities: classNames, formatDate, clamp, sleep, safeParseJSON and accessibility helpers.",
    "Auth context provider that wraps authentication state, token refresh, and exposes useAuth. Uses authService for persistence & API interactions.",
    "React Query client provider with default configurations (error handling, retry policies) wired to app config.",
    "Composes all top-level providers (Theme, Query, Auth, Toast) in the correct order for the app root.",
    "App Theme context and provider (light/dark), connects tokens to CSS variables and exposes useTheme hook.",
    "Top-level Toast provider and context. Subscribes to globalEventBus to show toasts from anywhere. Handles stacking, animations and accessibility.",
    "Global styles, CSS resets, utility classes and base layout rules. Includes variables fallback for tokens and prefers-reduced-motion.",
    "Animation presets and Framer Motion transition helpers (e.g., spring, fade, stagger) to ensure consistent micro-interactions.",
    "Design tokens (colors, spacing, typography scales), theme utilities and helpers to be consumed by components and CSS-in-JS.",
    "Avatar component that renders user initials or image with an accessible alt attribute and fallback behavior.",
    "Accessible Button component with variants (primary, ghost, subtle), loading state, and built-in micro-interactions (scale on press).",
    "Card component supporting elevation, gradients and glass morphism variants.",
    "Glass morphism container with backdrop-filter, gradient border options, and subtle shadows for depth.",
    "Small SVG icon system that maps semantic names to vector icons and supports size/color props.",
    "Accessible Input component with label, validation state, icons and debounced onChange support. Includes skeleton/placeholder state.",
    "Reusable LineChart wrapper using a charting library (Recharts/Chart.js) with responsive behavior and minimal props.",
    "Accessible Modal component with backdrop blur, focus trap helpers, ESC to close, and entrance/exit animations.",
    "Top navigation bar with responsive collapse, user avatar menu and accessible keyboard navigation.",
    "Left-side navigation Sidebar with collapsible groups, keyboard focus management and responsive auto-collapse on small screens.",
    "Skeleton loading primitives (line, avatar, card) with shimmer animation to show placeholders during data fetch.",
    "Lightweight accessible spinner used for blocking and inline loading states.",
    "Composable data table with sorting, row virtualization hook points, and graceful mobile layout fallback.",
    "Visual toast container and toast item renderer. Supports stacking, auto-dismiss, pause on hover, keyboard dismiss and a11y announcements.",
    "Accessible tooltip primitive with delay, positioning and support for custom content; used by small controls and charts.",
    "Convenience hook around Auth context and authService to expose login/logout, isAuthenticated and currentUser in components.",
    "Generic debounce hook for inputs and search interactions.",
    "Small wrapper hooking React Query to apiClient.fetcher for typed GET/POST queries and mutations.",
    "Hook to provide responsive breakpoints and an easy 'isMobile' toggle; uses matchMedia and cleans up on unmount.",
    "Hook helper to push toasts (success, error, info) that delegates to global event bus or Toast context.",
    "Centered authentication layout with subtle background gradient and glass card for auth forms (Login/Register).",
    "Global app shell: Top NavBar, left Sidebar (collapsible), main content area. Handles layout responsiveness and skip-to-content link.",
    "Responsive grid wrapper for dashboard widgets that reflows columns depending on breakpoints.",
    "Analytics facade that emits events via core/events and optionally forwards to external providers. Lightweight and test-friendly.",
    "Fetch wrapper and API client using fetch + JSON handling, default headers, timeouts; uses src/app/config.ts for baseURL. Exposes typed request helper.",
    "Authentication service responsible for login/logout, token storage/refresh, current user retrieval. Built on top of apiClient.",
    "Barrel file re-exporting primary shared components for simpler imports across the app.",
    "Top-level App component that composes AppProviders and AppRouter; also handles high-level error boundaries and suspense fallbacks.",
    "Larger dashboard chart component showing activity trends and interactive tooltips.",
    "Small dashboard metric widget showing a value, delta, and sparkline; used on the Dashboard page.",
    "Vite entrypoint that mounts the App into the DOM. Imports global styles and registers service worker or dev tools if needed.",
    "Authenticated dashboard page composed from MetricCard and ActivityChart, loads metrics via useFetch/useQueryFetch.",
    "Login page with AuthLayout, controlled inputs, client-side validation and delegated login via useAuth.",
    "Simple accessible 404 page shown for unmatched routes with a CTA back to dashboard or login.",
    "User settings page demonstrating controlled forms, theme toggles, and saving via services.",
    "Application router setup using React Router with route guards for authenticated routes and lazy loading for pages."
  ],
  "total_files": 50
}
