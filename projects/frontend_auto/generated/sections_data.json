{
  "architecture": {
    "overview": "Ultra-Premium Landing for \"Absolutely Nothing\u2122\" built with React 18+, TypeScript, Vite and Tailwind. The app is a single-page landing experience composed of feature-focused modules (hero, void animation, pricing, testimonials, simulator, etc.). Business logic is organized into a lightweight core (contracts, events, DI, utils), foundation providers (theme, Query, Auth, stores), feature modules (each exposing data/service + presentational composition of Radix primitives and Tailwind), and page compositions. Heavy animation and 3D effects (Framer Motion, Three.js, GSAP), data fetching (React Query + MSW in dev), local state (Zustand) and forms (React Hook Form + Zod) are used.",
    "patterns": [
      "Feature-sliced architecture: core \u2192 providers \u2192 features \u2192 pages",
      "Container/Presentational: feature containers hold logic, compose presentational UI (Radix + Tailwind)",
      "Domain-oriented services: service layer for APIs, analytics, chat, pricing rules",
      "React Query for server state + caching; Zustand for ephemeral client state",
      "Hook-first APIs: reusable hooks for business behaviors (useVoidParticles, useSimulator, useABTest)",
      "Extension points via event bus and hooks registry for easter eggs and A/B testing"
    ],
    "data_flow": "UI components call feature hooks/services which use React Query for remote data and Zustand for local persisted state. Services emit/subscribe to core events. Providers (QueryProvider, AuthProvider) initialize contexts (React Query client, Auth). MSW provides mock endpoints in development. Analytics service collects events and pushes to a reporting store. A/B ExperimentManager can swap feature variants. Forms use React Hook Form + Zod for validation. import.meta.env variables are read from src/app/config.ts.",
    "folder_structure": "src/\n  app/\n    config.ts\n  core/\n    contracts.ts\n    events.ts\n    hooks.ts\n    di.ts\n    utils.ts\n  mocks/\n    server.ts\n    handlers.ts\n  providers/\n    QueryProvider.tsx\n    AuthProvider.tsx\n  theme/\n    index.ts\n    animations.ts\n  state/\n    use-nothing-store.ts\n  shared/\n    layouts/\n      LandingLayout.tsx\n      CenterStageLayout.tsx\n  features/\n    hero/\n      existential-hero.tsx\n    void/\n      void-animation-system.tsx\n      use-void-particles.ts\n    pricing/\n      pricing.service.ts\n      pricing-tiers.tsx\n    testimonials/\n      testimonial.service.ts\n      testimonial-generator.tsx\n    counter/\n      animated-zero-counter.tsx\n    faq/\n      faq-section.tsx\n    team/\n      team-showcase.tsx\n    simulator/\n      void-simulator.tsx\n      use-simulator.ts\n    newsletter/\n      newsletter.service.ts\n      newsletter-form.tsx\n    chat/\n      chat.service.ts\n      live-chat-bot.tsx\n    comparison/\n      product-comparison-chart.tsx\n    casestudies/\n      case-studies.tsx\n    roadmap/\n      roadmap-timeline.tsx\n    showcase/\n      rotating-showcase-3d.tsx\n    reviews/\n      reviews-widget.tsx\n    moneyback/\n      moneyback-badge.tsx\n    affiliate/\n      affiliate-program.tsx\n    press/\n      press-kit-provider.tsx\n    apidocs/\n      api-docs.tsx\n    status/\n      status-page.tsx\n    cookies/\n      cookie-banner.tsx\n    analytics/\n      analytics.service.ts\n      analytics-dashboard.tsx\n    easter-eggs/\n      easter-egg-manager.tsx\n    experiments/\n      experiment-manager.ts\n    sound/\n      silence-audio.ts\n  pages/\n    landing.tsx\n    docs.tsx\n    status.tsx\n    404.tsx\n  generated/ <-- output dir for build artifacts and mocks",
    "tech_stack": [
      "React 18+ (Suspense, Error Boundaries, Context API)",
      "TypeScript",
      "Vite (use import.meta.env)",
      "Tailwind CSS (dark mode enabled)",
      "Radix UI primitives via @/components/ui/*",
      "CVA (class-variance-authority) for Tailwind variants",
      "Framer Motion for UI animations",
      "Three.js for 3D showcase",
      "GSAP for advanced timeline animations",
      "Recharts for charts",
      "React Query for server state",
      "Zustand for local client state",
      "React Hook Form + Zod for forms",
      "Sonner for toasts",
      "TanStack Table (for product comparison table if needed)",
      "MSW for dev API mocks",
      "Lucide React for icons"
    ]
  },
  "kernel_specs": {
    "overview": "The Core Kernel glues together React Query, Zustand, React Hook Form + Zod, MSW, Radix UI, Sonner toasts and i18n for the Nothing landing app. It provides typed contracts (Zod + TS), a typed QueryClient with sensible defaults and toast-integrated error handling, a development MSW bootstrap with handlers driven by runtime config, a central library re-export/wrapper layer (typed useQuery/useMutation, typed useForm), and a Sonner toast wrapper with typed convenience functions. All runtime configuration uses import.meta.env and appConfig flags to control mocks, analytics, persistence and feature toggles."
  },
  "sections": [
    {
      "id": "app-config",
      "file_path": "src/app/config.ts",
      "description": "Materialized runtime configuration using import.meta.env with typed wrappers. Exposes feature flags, API base, mock toggles, analytics keys and app meta (title, target audience).",
      "dependencies": [],
      "exports": [
        "AppConfig",
        "appConfig",
        "isDev",
        "enableMocks"
      ],
      "priority": 1,
      "purpose": "Materialized runtime config using import.meta.env. Exposes a typed appConfig used by providers, services and MSW. Contains flags for mocks, analytics keys, API base URL, React Query defaults and i18n settings.",
      "content": "/* src/app/config.ts\n\nThis module reads environment variables via import.meta.env and composes a typed `appConfig` object used across the app. It also exposes React Query default options used to configure the QueryClient. Use import.meta.env (Vite) only.\n*/\n\nimport { DefaultOptions } from '@tanstack/react-query';\n\nexport type AppConfig = {\n  env: 'development' | 'production' | 'test';\n  appName: string;\n  apiBase: string;\n  enableMocks: boolean;\n  enableDevTools: boolean;\n  analyticsKey?: string;\n  defaultLanguage: string;\n  supportedLanguages: string[];\n  theme: {\n    default: 'light' | 'dark' | 'system';\n    enableSystemToggle: boolean;\n  };\n  development_mode: {\n    enable_mock_data: boolean;\n    mock_auth_users: Array<{ email: string; password: string; role: string }>;\n    mock_api_endpoints: string[];\n    disable_websocket_in_dev: boolean;\n    use_localstorage_persistence: boolean;\n  };\n};\n\nconst raw = import.meta.env;\n\nexport const isDev = (raw.MODE === 'development' || raw.VITE_ENABLE_DEV === 'true');\n\nexport const appConfig: AppConfig = {\n  env: (raw.MODE as 'development' | 'production' | 'test') ?? 'development',\n  appName: raw.VITE_APP_NAME ?? 'Absolutely Nothing\u2122',\n  apiBase: raw.VITE_API_BASE ?? '/api',\n  enableMocks: (raw.VITE_ENABLE_MOCKS ?? 'true') === 'true',\n  enableDevTools: (raw.VITE_ENABLE_DEVTOOLS ?? 'false') === 'true',\n  analyticsKey: raw.VITE_ANALYTICS_KEY ?? undefined,\n  defaultLanguage: raw.VITE_DEFAULT_LOCALE ?? 'en',\n  supportedLanguages: (raw.VITE_SUPPORTED_LOCALES ?? 'en').split(',').map(s => s.trim()),\n  theme: {\n    default: (raw.VITE_THEME_DEFAULT as any) ?? 'system',\n    enableSystemToggle: (raw.VITE_ENABLE_THEME_TOGGLE ?? 'true') === 'true'\n  },\n  development_mode: {\n    enable_mock_data: (raw.VITE_ENABLE_MOCK_DATA ?? 'true') === 'true',\n    mock_auth_users: JSON.parse(raw.VITE_MOCK_AUTH_USERS ?? '[{\"email\":\"nothing@void.com\",\"password\":\"nothing123\",\"role\":\"nothing_user\"}]'),\n    mock_api_endpoints: JSON.parse(raw.VITE_MOCK_API_ENDPOINTS ?? '[\"/api/nothing\",\"/api/testimonials/nothing\",\"/api/pricing/nothing\",\"/api/support/nothing\",\"/api/newsletter/nothing\",\"/api/analytics/nothing\",\"/api/checkout/nothing\"]'),\n    disable_websocket_in_dev: (raw.VITE_DISABLE_WEBSOCKET_IN_DEV ?? 'false') === 'true',\n    use_localstorage_persistence: (raw.VITE_USE_LOCALSTORAGE_PERSISTENCE ?? 'true') === 'true'\n  }\n};\n\n// React Query default options exposed here so QueryProvider can import them\nexport const defaultQueryOptions: DefaultOptions = {\n  queries: {\n    retry: (failureCount, error) => {\n      // fail fast for 4xx client errors\n      const status = (error as any)?.response?.status;\n      if (status && status >= 400 && status < 500) return false;\n      return failureCount < 2;\n    },\n    cacheTime: 1000 * 60 * 5, // 5 minutes\n    staleTime: 1000 * 60, // 1 minute\n    refetchOnWindowFocus: false,\n    suspense: true\n  },\n  mutations: {\n    retry: false\n  }\n};\n\n// i18n configuration object (consumed by i18next initialization elsewhere)\nexport const i18nConfig = {\n  lng: appConfig.defaultLanguage,\n  fallbackLng: 'en',\n  supportedLngs: appConfig.supportedLanguages,\n  ns: ['common', 'hero', 'pricing', 'testimonials'] as const,\n  defaultNS: 'common'\n};\n\n// Theme configuration (consumed by ThemeProvider)\nexport const themeConfig = {\n  default: appConfig.theme.default,\n  enableSystemToggle: appConfig.theme.enableSystemToggle,\n  // Tailwind dark-mode strategy used in app: 'class'\n  tailwindDarkClass: 'dark'\n};\n\n// Example usage:\n// import { appConfig, defaultQueryOptions } from '@/app/config'\n// if (appConfig.enableMocks) { startMockServer() }\n"
    },
    {
      "id": "core-contracts",
      "file_path": "src/core/contracts.ts",
      "description": "Domain types, API contract interfaces, shared enums and models used throughout the app (PricingTier, Testimonial, CaseStudy, RoadmapItem, SimulationState, AuthUser, AnalyticsEvent). Central single source of truth for shape of business data.",
      "dependencies": [],
      "exports": [
        "PricingTier",
        "Testimonial",
        "CaseStudy",
        "RoadmapItem",
        "SimulationState",
        "AuthUser",
        "AnalyticsEvent",
        "PricingLevel"
      ],
      "priority": 1,
      "purpose": "Domain types, API contracts, and Zod runtime schemas. Exports TypeScript interfaces together with their Zod schemas for runtime validation. These are the canonical shapes used by services, mock handlers and forms.",
      "content": "/* src/core/contracts.ts\n\nThis file exports both Zod schemas and TypeScript types for all core domain entities. Exported names are used across MSW handlers, React Query services, form validation and state persistence. Keep schemas canonical so MSW and services can import for runtime validation.\n\nNotes:\n- Use Zod for runtime validation and to infer TS types via z.infer.\n- Export a grouped `schemas` and `types` object for convenience imports.\n*/\n\nimport { z } from 'zod';\n\n// Enums / simple types\nexport const PricingLevel = z.enum(['basic', 'pro', 'enterprise']);\nexport type PricingLevel = z.infer<typeof PricingLevel>;\n\n// Pricing tier schema + TS type\nexport const PricingTierSchema = z.object({\n  id: z.string(),\n  level: PricingLevel,\n  title: z.string(),\n  priceCents: z.number().int().nonnegative(),\n  interval: z.enum(['monthly', 'yearly']),\n  features: z.array(z.string()),\n  tagline: z.string().optional(),\n  meta: z.record(z.any()).optional()\n});\nexport type PricingTier = z.infer<typeof PricingTierSchema>;\n\n// Testimonials\nexport const TestimonialSchema = z.object({\n  id: z.string(),\n  author: z.string(),\n  role: z.string().optional(),\n  content: z.string(),\n  rating: z.number().min(0).max(5).int(),\n  date: z.string(),\n  meta: z.record(z.any()).optional()\n});\nexport type Testimonial = z.infer<typeof TestimonialSchema>;\n\n// Case study\nexport const CaseStudySchema = z.object({\n  id: z.string(),\n  title: z.string(),\n  summary: z.string(),\n  highlights: z.array(z.string()).optional(),\n  publishedAt: z.string(),\n  assets: z.array(z.string()).optional()\n});\nexport type CaseStudy = z.infer<typeof CaseStudySchema>;\n\n// Roadmap item\nexport const RoadmapItemSchema = z.object({\n  id: z.string(),\n  title: z.string(),\n  description: z.string(),\n  quarter: z.string(),\n  completed: z.boolean()\n});\nexport type RoadmapItem = z.infer<typeof RoadmapItemSchema>;\n\n// Simulation state for the void simulator\nexport const SimulationStateSchema = z.object({\n  running: z.boolean(),\n  depth: z.number().min(0).max(100),\n  density: z.number().min(0).max(100),\n  silence: z.number().min(0).max(1),\n  seed: z.string().optional()\n});\nexport type SimulationState = z.infer<typeof SimulationStateSchema>;\n\n// Auth user\nexport const AuthUserSchema = z.object({\n  id: z.string(),\n  email: z.string().email(),\n  role: z.string(),\n  displayName: z.string().optional(),\n  createdAt: z.string().optional()\n});\nexport type AuthUser = z.infer<typeof AuthUserSchema>;\n\n// Analytics event\nexport const AnalyticsEventSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  payload: z.record(z.any()).optional(),\n  ts: z.string()\n});\nexport type AnalyticsEvent = z.infer<typeof AnalyticsEventSchema>;\n\n// Generic API response container\nexport const ApiResultSchema = <T extends z.ZodTypeAny>(dataSchema: T) =>\n  z.object({\n    success: z.boolean(),\n    data: dataSchema.optional(),\n    error: z.string().optional()\n  });\nexport type ApiResult<T> = { success: boolean; data?: T; error?: string };\n\n// Paginated response\nexport const PaginatedResponseSchema = <T extends z.ZodTypeAny>(itemSchema: T) =>\n  z.object({\n    items: z.array(itemSchema),\n    total: z.number().int(),\n    page: z.number().int(),\n    pageSize: z.number().int()\n  });\nexport type PaginatedResponse<T> = { items: T[]; total: number; page: number; pageSize: number };\n\n// Form schemas (example: newsletter signup, faq search)\nexport const NewsletterSignupSchema = z.object({\n  email: z.string().email(),\n  consent: z.boolean().optional().default(true)\n});\nexport type NewsletterSignup = z.infer<typeof NewsletterSignupSchema>;\n\nexport const FaqSearchSchema = z.object({\n  query: z.string().min(0).max(200).optional()\n});\nexport type FaqSearch = z.infer<typeof FaqSearchSchema>;\n\n// Export grouped objects for convenience\nexport const schemas = {\n  PricingTierSchema,\n  TestimonialSchema,\n  CaseStudySchema,\n  RoadmapItemSchema,\n  SimulationStateSchema,\n  AuthUserSchema,\n  AnalyticsEventSchema,\n  NewsletterSignupSchema,\n  FaqSearchSchema,\n  ApiResultSchema,\n  PaginatedResponseSchema,\n  PricingLevel\n};\n\nexport const types = {\n  PricingTier: undefined as unknown as PricingTier,\n  Testimonial: undefined as unknown as Testimonial,\n  CaseStudy: undefined as unknown as CaseStudy,\n  RoadmapItem: undefined as unknown as RoadmapItem,\n  SimulationState: undefined as unknown as SimulationState,\n  AuthUser: undefined as unknown as AuthUser,\n  AnalyticsEvent: undefined as unknown as AnalyticsEvent\n};\n\n// Example usage (for documentation):\n// import { PricingTierSchema } from '@/core/contracts'\n// const validated = PricingTierSchema.parse(apiResponse)\n"
    },
    {
      "id": "core-di",
      "file_path": "src/core/di.ts",
      "description": "Simple dependency injection container used for wiring services in the app (analytics, pricing, chat). Supports override for tests/mocks and lazy resolution.",
      "dependencies": [
        "src/app/config.ts"
      ],
      "exports": [
        "container",
        "registerService",
        "resolveService"
      ],
      "priority": 1
    },
    {
      "id": "core-events",
      "file_path": "src/core/events.ts",
      "description": "Lightweight event bus for cross-feature communication (e.g., 'purchase:nothing', 'analytics:event', 'easter:found'). Supports typed payloads from core/contracts and allows plugin subscriptions.",
      "dependencies": [
        "src/core/contracts.ts"
      ],
      "exports": [
        "EventBus",
        "emitEvent",
        "onEvent",
        "offEvent"
      ],
      "priority": 1
    },
    {
      "id": "core-hooks-registry",
      "file_path": "src/core/hooks.ts",
      "description": "Hooks registry and extension API: allows features and A/B experiments to register lifecycle hooks, UI injections, and side-effect handlers (used by EasterEggManager and ExperimentManager).",
      "dependencies": [
        "src/core/events.ts",
        "src/core/contracts.ts"
      ],
      "exports": [
        "registerHook",
        "unregisterHook",
        "useRegisteredHooks"
      ],
      "priority": 1
    },
    {
      "id": "core-utils",
      "file_path": "src/core/utils.ts",
      "description": "General-purpose utilities: formatters, random generators for mock content, safe localStorage helpers (with import.meta.env toggle), debounce/throttle, progressive reveal helpers used by animations.",
      "dependencies": [
        "src/app/config.ts"
      ],
      "exports": [
        "noop",
        "storage",
        "randomChoice",
        "formatCurrency",
        "sleep"
      ],
      "priority": 1
    },
    {
      "id": "mocks-handlers",
      "file_path": "src/mocks/handlers.ts",
      "description": "MSW request handlers that implement the mock API surface defined in development_mode.mock_api_endpoints. Returns realistic mock payloads for pricing, testimonials, newsletter, analytics, checkout and nothing resource endpoints.",
      "dependencies": [
        "src/core/contracts.ts",
        "src/app/config.ts"
      ],
      "exports": [
        "handlers"
      ],
      "priority": 1
    },
    {
      "id": "mocks-server",
      "file_path": "src/mocks/server.ts",
      "description": "MSW server bootstrapping used in development. Exposes start/stop hooks and ensures handlers are registered when appConfig enables mocks.",
      "dependencies": [
        "src/mocks/handlers.ts",
        "src/app/config.ts"
      ],
      "exports": [
        "startMockServer",
        "stopMockServer"
      ],
      "priority": 1
    },
    {
      "id": "providers-auth",
      "file_path": "src/providers/AuthProvider.tsx",
      "description": "Auth context providing mock authentication flow per development_mode.mock_auth_users. Exposes login/logout, current user and role-based helpers. Persists to localStorage when enabled.",
      "dependencies": [
        "src/app/config.ts",
        "src/core/contracts.ts",
        "src/core/events.ts"
      ],
      "exports": [
        "AuthProvider",
        "useAuth"
      ],
      "priority": 2
    },
    {
      "id": "providers-query",
      "file_path": "src/providers/QueryProvider.tsx",
      "description": "React Query client provider configured with sensible defaults, retry behavior, suspense integration and devtools toggle. Initializes based on appConfig.",
      "dependencies": [
        "src/app/config.ts"
      ],
      "exports": [
        "QueryProvider"
      ],
      "priority": 2
    },
    {
      "id": "shared-layout-centerstage",
      "file_path": "src/shared/layouts/CenterStageLayout.tsx",
      "description": "Centered showcase layout used for hero, rotating 3D showcase and simulator pages; handles responsive stage sizing and parallax anchor.",
      "dependencies": [
        "src/theme/animations.ts",
        "src/state/use-nothing-store.ts"
      ],
      "exports": [
        "CenterStageLayout"
      ],
      "priority": 2
    },
    {
      "id": "shared-layout-landing",
      "file_path": "src/shared/layouts/LandingLayout.tsx",
      "description": "Main landing layout composing header, footer and content slots. Provides background layers (void canvas) and handles dark-mode class toggles and scroll container for smooth reveals.",
      "dependencies": [
        "src/theme/index.ts",
        "src/features/void/void-animation-system.tsx",
        "src/state/use-nothing-store.ts"
      ],
      "exports": [
        "LandingLayout"
      ],
      "priority": 2
    },
    {
      "id": "state-nothing-store",
      "file_path": "src/state/use-nothing-store.ts",
      "description": "Zustand store for ephemeral UI state and persistent flags (newsletter subscribed, cookie banner dismissed, active simulation params, AB test enrollment). Supports localStorage persistence based on appConfig.",
      "dependencies": [
        "src/app/config.ts",
        "src/core/contracts.ts"
      ],
      "exports": [
        "useNothingStore",
        "persistor"
      ],
      "priority": 2
    },
    {
      "id": "theme-animations",
      "file_path": "src/theme/animations.ts",
      "description": "Shared Framer Motion presets, animation variants, motion utilities and timing curves used across hero, testimonials and counters. Also exports helper types for complex sequences (glitch, reverse-progress).",
      "dependencies": [
        "src/core/utils.ts"
      ],
      "exports": [
        "fadeIn",
        "parallaxVoid",
        "glitchHover",
        "reverseProgress",
        "floatyBubble"
      ],
      "priority": 2
    },
    {
      "id": "theme-index",
      "file_path": "src/theme/index.ts",
      "description": "Theme provider integration: tailwind + dark-mode context, system preference detection, and CVA variants glue for shared theme tokens. Exposes ThemeProvider component and useTheme hook.",
      "dependencies": [
        "src/core/utils.ts"
      ],
      "exports": [
        "ThemeProvider",
        "useTheme"
      ],
      "priority": 2
    },
    {
      "id": "affiliate-program",
      "file_path": "src/features/affiliate/affiliate-program.tsx",
      "description": "Affiliate program business rules: generates affiliate codes (all worthless), tracks referrals, and exposes integration endpoints for signup and payouts (mocked).",
      "dependencies": [
        "src/core/contracts.ts",
        "src/core/di.ts",
        "src/app/config.ts"
      ],
      "exports": [
        "AffiliateProgram",
        "generateAffiliateCode"
      ],
      "priority": 3
    },
    {
      "id": "analytics-dashboard",
      "file_path": "src/features/analytics/analytics-dashboard.tsx",
      "description": "Feature: Analytics Dashboard for Nothing (admin view) using Recharts. Business logic composes analytics.service outputs and offers mock-filters for sessions and events showing 'time spent contemplating existence'.",
      "dependencies": [
        "src/features/analytics/analytics.service.ts",
        "src/core/contracts.ts",
        "src/features/reviews/reviews-widget.tsx"
      ],
      "exports": [
        "AnalyticsDashboard"
      ],
      "priority": 3
    },
    {
      "id": "analytics-service",
      "file_path": "src/features/analytics/analytics.service.ts",
      "description": "Analytics service that records UI events, mocks remote post in dev, and provides a React Query-backed dashboard data source. Also exposes a small in-memory store for rapid inspection.",
      "dependencies": [
        "src/core/contracts.ts",
        "src/app/config.ts",
        "src/core/di.ts"
      ],
      "exports": [
        "trackEvent",
        "useAnalyticsEvents",
        "analyticsStore"
      ],
      "priority": 3
    },
    {
      "id": "animated-zero-counter",
      "file_path": "src/features/counter/animated-zero-counter.tsx",
      "description": "Animated counter component that always shows '0 features delivered' with elaborate typing & erase timing, reverse-progress bar, and recursive loading bar that never completes. Exposes control props for speed and glitch intensity.",
      "dependencies": [
        "src/theme/animations.ts",
        "src/core/events.ts"
      ],
      "exports": [
        "AnimatedZeroCounter"
      ],
      "priority": 3
    },
    {
      "id": "api-docs",
      "file_path": "src/features/apidocs/api-docs.tsx",
      "description": "API documentation viewer for the Nothing API. Generates interactive examples (that return nothing), includes try-it calls via pricing.service and analytics hooks, and provides code snippets.",
      "dependencies": [
        "src/features/pricing/pricing.service.ts",
        "src/core/contracts.ts"
      ],
      "exports": [
        "ApiDocs"
      ],
      "priority": 3
    },
    {
      "id": "case-studies",
      "file_path": "src/features/casestudies/case-studies.tsx",
      "description": "Loads and composes case studies of successful nothing implementations, handles filtering, and triggers deep-link analytics for each case study.",
      "dependencies": [
        "src/core/contracts.ts",
        "src/app/config.ts"
      ],
      "exports": [
        "CaseStudies"
      ],
      "priority": 3
    },
    {
      "id": "chat-service",
      "file_path": "src/features/chat/chat.service.ts",
      "description": "Service layer for live chat support (that provides no help). Simulates responses, integrates with MSW endpoint in dev, records conversation to analytics, and exposes hooks for LiveChatBot.",
      "dependencies": [
        "src/app/config.ts",
        "src/core/contracts.ts",
        "src/core/events.ts"
      ],
      "exports": [
        "useChat",
        "sendChatMessage"
      ],
      "priority": 3
    },
    {
      "id": "cookie-banner",
      "file_path": "src/features/cookies/cookie-banner.tsx",
      "description": "Cookie consent business logic specialized for 'nothing cookies': handles consent persistence, shows playful consent text, and integrates with analytics toggles.",
      "dependencies": [
        "src/state/use-nothing-store.ts",
        "src/core/events.ts"
      ],
      "exports": [
        "CookieBanner"
      ],
      "priority": 3
    },
    {
      "id": "easter-egg-manager",
      "file_path": "src/features/easter-eggs/easter-egg-manager.tsx",
      "description": "Manages easter eggs across the app: registers hooks, watches for secret sequences (click patterns), and triggers deep-nothing reveals. Integrates with EventBus and Hook registry.",
      "dependencies": [
        "src/core/hooks.ts",
        "src/core/events.ts",
        "src/state/use-nothing-store.ts"
      ],
      "exports": [
        "EasterEggManager",
        "registerEasterEgg"
      ],
      "priority": 3
    },
    {
      "id": "experiment-manager",
      "file_path": "src/features/experiments/experiment-manager.ts",
      "description": "A/B testing manager: enrolls users into experiments, serves variant config (e.g., hero variant A/B), and exposes helper hooks used in feature components. Persists enrollment in Zustand.",
      "dependencies": [
        "src/state/use-nothing-store.ts",
        "src/core/di.ts",
        "src/app/config.ts"
      ],
      "exports": [
        "ExperimentManager",
        "useExperiment"
      ],
      "priority": 3
    },
    {
      "id": "faq-section",
      "file_path": "src/features/faq/faq-section.tsx",
      "description": "FAQ business logic: loads FAQ items (with A/B variants), tracks which answers are revealed (for analytics), and supports question search that returns no useful results. Uses React Hook Form for search input with Zod validation.",
      "dependencies": [
        "src/core/contracts.ts",
        "src/features/experiments/experiment-manager.ts"
      ],
      "exports": [
        "FaqSection",
        "useFaqSearch"
      ],
      "priority": 3
    },
    {
      "id": "hero-existential-hero",
      "file_path": "src/features/hero/existential-hero.tsx",
      "description": "Hero section component with epic headline, parallax void animation integration, glitch-hover for the word 'nothing', typing/erase animations, and CTA that triggers simulated checkout for nothing. Uses Framer Motion and ties into EventBus and A/B experiments.",
      "dependencies": [
        "src/theme/animations.ts",
        "src/features/void/void-animation-system.tsx",
        "src/core/events.ts",
        "src/features/experiments/experiment-manager.ts",
        "src/features/sound/silence-audio.ts",
        "src/core/contracts.ts"
      ],
      "exports": [
        "ExistentialHero"
      ],
      "priority": 3
    },
    {
      "id": "live-chat-bot",
      "file_path": "src/features/chat/live-chat-bot.tsx",
      "description": "Chat UI container that uses chat.service. Contains business logic to present intentionally unhelpful replies, donut-loading silence effects, and escalation to 'no support'. Emits analytics events and supports mocked websocket toggles.",
      "dependencies": [
        "src/features/chat/chat.service.ts",
        "src/features/sound/silence-audio.ts",
        "src/core/events.ts"
      ],
      "exports": [
        "LiveChatBot"
      ],
      "priority": 3
    },
    {
      "id": "moneyback-badge",
      "file_path": "src/features/moneyback/moneyback-badge.tsx",
      "description": "Money-back guarantee business logic: conditions for refund, claim flow, and mock refund API integration. Exposes UI props for badges and claim status.",
      "dependencies": [
        "src/features/pricing/pricing.service.ts",
        "src/app/config.ts"
      ],
      "exports": [
        "MoneyBackBadge",
        "claimRefund"
      ],
      "priority": 3
    },
    {
      "id": "newsletter-form",
      "file_path": "src/features/newsletter/newsletter-form.tsx",
      "description": "Form wiring using React Hook Form + Zod for the newsletter signup; triggers newsletter.service and records analytics event on submission. UI uses Radix Input/Button.",
      "dependencies": [
        "src/features/newsletter/newsletter.service.ts",
        "src/core/contracts.ts",
        "src/features/sound/silence-audio.ts"
      ],
      "exports": [
        "NewsletterForm"
      ],
      "priority": 3
    },
    {
      "id": "newsletter-service",
      "file_path": "src/features/newsletter/newsletter.service.ts",
      "description": "Handles newsletter signup flows: client-side validation, API call via React Query, optimistic UI, and toast notifications. Includes mock-friendly behavior when appConfig.enableMocks is true.",
      "dependencies": [
        "src/core/contracts.ts",
        "src/app/config.ts"
      ],
      "exports": [
        "useNewsletterSignup",
        "subscribeToNewsletter"
      ],
      "priority": 3
    },
    {
      "id": "pages-404",
      "file_path": "src/pages/404.tsx",
      "description": "404 page that redirects to more nothing (auto-redirects to landing). Contains animation logic and a playful CTA to embrace nothingness.",
      "dependencies": [
        "src/shared/layouts/LandingLayout.tsx",
        "src/theme/animations.ts"
      ],
      "exports": [
        "NotFoundPage"
      ],
      "priority": 3
    },
    {
      "id": "pages-docs",
      "file_path": "src/pages/docs.tsx",
      "description": "Documentation page composition that renders ApiDocs and PressKitProvider. Includes routing metadata and search indexing for docs pages.",
      "dependencies": [
        "src/features/apidocs/api-docs.tsx",
        "src/features/press/press-kit-provider.tsx"
      ],
      "exports": [
        "DocsPage"
      ],
      "priority": 3
    },
    {
      "id": "pages-landing",
      "file_path": "src/pages/landing.tsx",
      "description": "Landing page composition: assembles LandingLayout with ExistentialHero, PricingTiers, TestimonialGenerator, AnimatedZeroCounter, VoidSimulator, NewsletterForm, LiveChatBot and all feature sections into a polished flow. Orchestrates lazy loading via React.Suspense.",
      "dependencies": [
        "src/shared/layouts/LandingLayout.tsx",
        "src/features/hero/existential-hero.tsx",
        "src/features/pricing/pricing-tiers.tsx",
        "src/features/testimonials/testimonial-generator.tsx",
        "src/features/counter/animated-zero-counter.tsx",
        "src/features/simulator/void-simulator.tsx",
        "src/features/newsletter/newsletter-form.tsx",
        "src/features/chat/live-chat-bot.tsx",
        "src/features/cookies/cookie-banner.tsx",
        "src/features/easter-eggs/easter-egg-manager.tsx"
      ],
      "exports": [
        "LandingPage"
      ],
      "priority": 3
    },
    {
      "id": "pages-status",
      "file_path": "src/pages/status.tsx",
      "description": "Public status page route composing StatusPage and AnalyticsDashboard summary. Designed to always show 100% uptime and quirky messaging.",
      "dependencies": [
        "src/features/status/status-page.tsx",
        "src/features/analytics/analytics-dashboard.tsx"
      ],
      "exports": [
        "StatusRoute"
      ],
      "priority": 3
    },
    {
      "id": "press-kit-provider",
      "file_path": "src/features/press/press-kit-provider.tsx",
      "description": "Provides press kit assets and metadata (logos, SVGs, brand guidelines for nothing). Business logic to package downloads and serve variants for printing/web.",
      "dependencies": [
        "src/app/config.ts"
      ],
      "exports": [
        "PressKitProvider",
        "usePressAssets"
      ],
      "priority": 3
    },
    {
      "id": "pricing-service",
      "file_path": "src/features/pricing/pricing.service.ts",
      "description": "Business rules and remote API integration for pricing tiers. Computes prices (Basic Nothing, Pro Nothing, Enterprise Nothing), handles promotions (reverse-progress discounts), and exposes React Query hooks for pricing data and checkout flow.",
      "dependencies": [
        "src/core/contracts.ts",
        "src/core/di.ts",
        "src/app/config.ts"
      ],
      "exports": [
        "getPricingTiers",
        "usePricingQuery",
        "checkoutNothing"
      ],
      "priority": 3
    },
    {
      "id": "pricing-tiers",
      "file_path": "src/features/pricing/pricing-tiers.tsx",
      "description": "UI container that composes pricing.service outputs into presentational tiers (uses Radix Card primitives), handles tier selection and starts checkout via pricing.service. Contains business logic for tier comparison and gating enterprise flow.",
      "dependencies": [
        "src/features/pricing/pricing.service.ts",
        "src/core/events.ts",
        "src/features/experiments/experiment-manager.ts"
      ],
      "exports": [
        "PricingTiers"
      ],
      "priority": 3
    },
    {
      "id": "product-comparison-chart",
      "file_path": "src/features/comparison/product-comparison-chart.tsx",
      "description": "Comparison component that creates a product comparison chart (Nothing vs Something vs Everything) using Recharts. Contains logic to assemble comparison metrics and to generate a printable press-friendly CSV.",
      "dependencies": [
        "src/core/contracts.ts",
        "src/features/press/press-kit-provider.tsx"
      ],
      "exports": [
        "ProductComparisonChart",
        "exportComparisonCSV"
      ],
      "priority": 3
    },
    {
      "id": "reviews-widget",
      "file_path": "src/features/reviews/reviews-widget.tsx",
      "description": "Aggregates customer reviews and computes humorous 5-star average for nothing. Business logic for paginated loading, moderation (auto-approve), and review submission via React Query.",
      "dependencies": [
        "src/core/contracts.ts",
        "src/app/config.ts"
      ],
      "exports": [
        "ReviewsWidget"
      ],
      "priority": 3
    },
    {
      "id": "roadmap-timeline",
      "file_path": "src/features/roadmap/roadmap-timeline.tsx",
      "description": "Timeline component showing future releases of nothing. Handles progressive reveal animations and supports timeline events that can be toggled by A/B experiments.",
      "dependencies": [
        "src/core/contracts.ts",
        "src/features/experiments/experiment-manager.ts",
        "src/theme/animations.ts"
      ],
      "exports": [
        "RoadmapTimeline"
      ],
      "priority": 3
    },
    {
      "id": "rotating-showcase-3d",
      "file_path": "src/features/showcase/rotating-showcase-3d.tsx",
      "description": "3D rotating nothing showcase built with Three.js: loads assets (logos/brands from PressKitProvider), orchestrates rotation animations and integrates with VoidAnimationSystem.",
      "dependencies": [
        "src/features/void/void-animation-system.tsx",
        "src/features/press/press-kit-provider.tsx",
        "src/theme/animations.ts"
      ],
      "exports": [
        "RotatingShowcase3D"
      ],
      "priority": 3
    },
    {
      "id": "silence-audio",
      "file_path": "src/features/sound/silence-audio.ts",
      "description": "Utility to play 'silence' sound effects or intentionally absent audio. Exposes noop audio controllers used by buttons, chat and simulator to comply with prompt's sound interactions.",
      "dependencies": [
        "src/app/config.ts"
      ],
      "exports": [
        "playSilence",
        "stopSilence",
        "useSilence"
      ],
      "priority": 3
    },
    {
      "id": "status-page",
      "file_path": "src/features/status/status-page.tsx",
      "description": "Status page showing 100% nothing uptime. Business logic polls a mocked status endpoint, reconciles incidents (none), and exposes health-check hooks for embed use.",
      "dependencies": [
        "src/app/config.ts",
        "src/core/contracts.ts"
      ],
      "exports": [
        "StatusPage",
        "useStatus"
      ],
      "priority": 3
    },
    {
      "id": "team-showcase",
      "file_path": "src/features/team/team-showcase.tsx",
      "description": "Presents a stylized team of experts in nothing with bios (tongue-in-cheek). Business logic for rotating bios, link tracking, and easter-egg reveal when interacting with avatars.",
      "dependencies": [
        "src/core/events.ts",
        "src/features/easter-eggs/easter-egg-manager.ts"
      ],
      "exports": [
        "TeamShowcase"
      ],
      "priority": 3
    },
    {
      "id": "testimonial-generator",
      "file_path": "src/features/testimonials/testimonial-generator.tsx",
      "description": "Generates floating testimonial bubbles (drifting into nothingness), handles lazy loading of more testimonials (infinite load of nothing), and maps to UI with motion effects. Uses useVoidParticles for physics.",
      "dependencies": [
        "src/features/testimonials/testimonial.service.ts",
        "src/features/void/use-void-particles.ts",
        "src/theme/animations.ts"
      ],
      "exports": [
        "TestimonialGenerator"
      ],
      "priority": 3
    },
    {
      "id": "testimonial-service",
      "file_path": "src/features/testimonials/testimonial.service.ts",
      "description": "Retrieves testimonials, aggregates sentiment (always positive about nothing), generates synthetic floating bubble content for the TestimonialGenerator. Provides React Query hooks and mock-fallback data.",
      "dependencies": [
        "src/core/contracts.ts",
        "src/app/config.ts"
      ],
      "exports": [
        "useTestimonials",
        "fetchTestimonials",
        "generateFloatingBubbles"
      ],
      "priority": 3
    },
    {
      "id": "use-simulator",
      "file_path": "src/features/simulator/use-simulator.ts",
      "description": "Hook implementing the simulator state machine: start/stop, parameter updates, metrics (nothingness index), and event emissions. Controls audio silence and recursive progress behaviors.",
      "dependencies": [
        "src/core/events.ts",
        "src/core/utils.ts",
        "src/state/use-nothing-store.ts"
      ],
      "exports": [
        "useSimulator",
        "SimulatorControls"
      ],
      "priority": 3
    },
    {
      "id": "use-void-particles",
      "file_path": "src/features/void/use-void-particles.ts",
      "description": "Hook managing particle physics for the void: spawning logic, lifecycle, drift behaviors for floating testimonial bubbles and infinite zero rain. Supports deterministic seeds for A/B tests.",
      "dependencies": [
        "src/core/utils.ts",
        "src/core/contracts.ts"
      ],
      "exports": [
        "useVoidParticles",
        "ParticleConfig"
      ],
      "priority": 3
    },
    {
      "id": "void-animation-system",
      "file_path": "src/features/void/void-animation-system.tsx",
      "description": "High-level orchestrator for void visuals: composes Three.js canvas, particle system, matrix-of-zeros rain, parallax layers and Framer Motion hooks. Exposes programmatic controls to start/stop special effects and provides context for children (bubbles, 3D showcase).",
      "dependencies": [
        "src/theme/animations.ts",
        "src/features/void/use-void-particles.ts",
        "src/core/events.ts"
      ],
      "exports": [
        "VoidAnimationSystem",
        "VoidVisualsContext",
        "useVoidVisuals"
      ],
      "priority": 3
    },
    {
      "id": "void-simulator",
      "file_path": "src/features/simulator/void-simulator.tsx",
      "description": "Interactive void simulator responsible for user-configurable parameters (depth, density, silence) that run a visual simulation. Contains the core simulation loop logic via useSimulator hook and persistence to Zustand store.",
      "dependencies": [
        "src/features/simulator/use-simulator.ts",
        "src/state/use-nothing-store.ts",
        "src/features/void/void-animation-system.tsx"
      ],
      "exports": [
        "VoidSimulator"
      ],
      "priority": 3
    }
  ],
  "file_paths": [
    "src/app/config.ts",
    "src/core/contracts.ts",
    "src/core/di.ts",
    "src/core/events.ts",
    "src/core/hooks.ts",
    "src/core/utils.ts",
    "src/mocks/handlers.ts",
    "src/mocks/server.ts",
    "src/providers/AuthProvider.tsx",
    "src/providers/QueryProvider.tsx",
    "src/shared/layouts/CenterStageLayout.tsx",
    "src/shared/layouts/LandingLayout.tsx",
    "src/state/use-nothing-store.ts",
    "src/theme/animations.ts",
    "src/theme/index.ts",
    "src/features/affiliate/affiliate-program.tsx",
    "src/features/analytics/analytics-dashboard.tsx",
    "src/features/analytics/analytics.service.ts",
    "src/features/counter/animated-zero-counter.tsx",
    "src/features/apidocs/api-docs.tsx",
    "src/features/casestudies/case-studies.tsx",
    "src/features/chat/chat.service.ts",
    "src/features/cookies/cookie-banner.tsx",
    "src/features/easter-eggs/easter-egg-manager.tsx",
    "src/features/experiments/experiment-manager.ts",
    "src/features/faq/faq-section.tsx",
    "src/features/hero/existential-hero.tsx",
    "src/features/chat/live-chat-bot.tsx",
    "src/features/moneyback/moneyback-badge.tsx",
    "src/features/newsletter/newsletter-form.tsx",
    "src/features/newsletter/newsletter.service.ts",
    "src/pages/404.tsx",
    "src/pages/docs.tsx",
    "src/pages/landing.tsx",
    "src/pages/status.tsx",
    "src/features/press/press-kit-provider.tsx",
    "src/features/pricing/pricing.service.ts",
    "src/features/pricing/pricing-tiers.tsx",
    "src/features/comparison/product-comparison-chart.tsx",
    "src/features/reviews/reviews-widget.tsx",
    "src/features/roadmap/roadmap-timeline.tsx",
    "src/features/showcase/rotating-showcase-3d.tsx",
    "src/features/sound/silence-audio.ts",
    "src/features/status/status-page.tsx",
    "src/features/team/team-showcase.tsx",
    "src/features/testimonials/testimonial-generator.tsx",
    "src/features/testimonials/testimonial.service.ts",
    "src/features/simulator/use-simulator.ts",
    "src/features/void/use-void-particles.ts",
    "src/features/void/void-animation-system.tsx",
    "src/features/simulator/void-simulator.tsx"
  ],
  "descriptions": [
    "Materialized runtime configuration using import.meta.env with typed wrappers. Exposes feature flags, API base, mock toggles, analytics keys and app meta (title, target audience).",
    "Domain types, API contract interfaces, shared enums and models used throughout the app (PricingTier, Testimonial, CaseStudy, RoadmapItem, SimulationState, AuthUser, AnalyticsEvent). Central single source of truth for shape of business data.",
    "Simple dependency injection container used for wiring services in the app (analytics, pricing, chat). Supports override for tests/mocks and lazy resolution.",
    "Lightweight event bus for cross-feature communication (e.g., 'purchase:nothing', 'analytics:event', 'easter:found'). Supports typed payloads from core/contracts and allows plugin subscriptions.",
    "Hooks registry and extension API: allows features and A/B experiments to register lifecycle hooks, UI injections, and side-effect handlers (used by EasterEggManager and ExperimentManager).",
    "General-purpose utilities: formatters, random generators for mock content, safe localStorage helpers (with import.meta.env toggle), debounce/throttle, progressive reveal helpers used by animations.",
    "MSW request handlers that implement the mock API surface defined in development_mode.mock_api_endpoints. Returns realistic mock payloads for pricing, testimonials, newsletter, analytics, checkout and nothing resource endpoints.",
    "MSW server bootstrapping used in development. Exposes start/stop hooks and ensures handlers are registered when appConfig enables mocks.",
    "Auth context providing mock authentication flow per development_mode.mock_auth_users. Exposes login/logout, current user and role-based helpers. Persists to localStorage when enabled.",
    "React Query client provider configured with sensible defaults, retry behavior, suspense integration and devtools toggle. Initializes based on appConfig.",
    "Centered showcase layout used for hero, rotating 3D showcase and simulator pages; handles responsive stage sizing and parallax anchor.",
    "Main landing layout composing header, footer and content slots. Provides background layers (void canvas) and handles dark-mode class toggles and scroll container for smooth reveals.",
    "Zustand store for ephemeral UI state and persistent flags (newsletter subscribed, cookie banner dismissed, active simulation params, AB test enrollment). Supports localStorage persistence based on appConfig.",
    "Shared Framer Motion presets, animation variants, motion utilities and timing curves used across hero, testimonials and counters. Also exports helper types for complex sequences (glitch, reverse-progress).",
    "Theme provider integration: tailwind + dark-mode context, system preference detection, and CVA variants glue for shared theme tokens. Exposes ThemeProvider component and useTheme hook.",
    "Affiliate program business rules: generates affiliate codes (all worthless), tracks referrals, and exposes integration endpoints for signup and payouts (mocked).",
    "Feature: Analytics Dashboard for Nothing (admin view) using Recharts. Business logic composes analytics.service outputs and offers mock-filters for sessions and events showing 'time spent contemplating existence'.",
    "Analytics service that records UI events, mocks remote post in dev, and provides a React Query-backed dashboard data source. Also exposes a small in-memory store for rapid inspection.",
    "Animated counter component that always shows '0 features delivered' with elaborate typing & erase timing, reverse-progress bar, and recursive loading bar that never completes. Exposes control props for speed and glitch intensity.",
    "API documentation viewer for the Nothing API. Generates interactive examples (that return nothing), includes try-it calls via pricing.service and analytics hooks, and provides code snippets.",
    "Loads and composes case studies of successful nothing implementations, handles filtering, and triggers deep-link analytics for each case study.",
    "Service layer for live chat support (that provides no help). Simulates responses, integrates with MSW endpoint in dev, records conversation to analytics, and exposes hooks for LiveChatBot.",
    "Cookie consent business logic specialized for 'nothing cookies': handles consent persistence, shows playful consent text, and integrates with analytics toggles.",
    "Manages easter eggs across the app: registers hooks, watches for secret sequences (click patterns), and triggers deep-nothing reveals. Integrates with EventBus and Hook registry.",
    "A/B testing manager: enrolls users into experiments, serves variant config (e.g., hero variant A/B), and exposes helper hooks used in feature components. Persists enrollment in Zustand.",
    "FAQ business logic: loads FAQ items (with A/B variants), tracks which answers are revealed (for analytics), and supports question search that returns no useful results. Uses React Hook Form for search input with Zod validation.",
    "Hero section component with epic headline, parallax void animation integration, glitch-hover for the word 'nothing', typing/erase animations, and CTA that triggers simulated checkout for nothing. Uses Framer Motion and ties into EventBus and A/B experiments.",
    "Chat UI container that uses chat.service. Contains business logic to present intentionally unhelpful replies, donut-loading silence effects, and escalation to 'no support'. Emits analytics events and supports mocked websocket toggles.",
    "Money-back guarantee business logic: conditions for refund, claim flow, and mock refund API integration. Exposes UI props for badges and claim status.",
    "Form wiring using React Hook Form + Zod for the newsletter signup; triggers newsletter.service and records analytics event on submission. UI uses Radix Input/Button.",
    "Handles newsletter signup flows: client-side validation, API call via React Query, optimistic UI, and toast notifications. Includes mock-friendly behavior when appConfig.enableMocks is true.",
    "404 page that redirects to more nothing (auto-redirects to landing). Contains animation logic and a playful CTA to embrace nothingness.",
    "Documentation page composition that renders ApiDocs and PressKitProvider. Includes routing metadata and search indexing for docs pages.",
    "Landing page composition: assembles LandingLayout with ExistentialHero, PricingTiers, TestimonialGenerator, AnimatedZeroCounter, VoidSimulator, NewsletterForm, LiveChatBot and all feature sections into a polished flow. Orchestrates lazy loading via React.Suspense.",
    "Public status page route composing StatusPage and AnalyticsDashboard summary. Designed to always show 100% uptime and quirky messaging.",
    "Provides press kit assets and metadata (logos, SVGs, brand guidelines for nothing). Business logic to package downloads and serve variants for printing/web.",
    "Business rules and remote API integration for pricing tiers. Computes prices (Basic Nothing, Pro Nothing, Enterprise Nothing), handles promotions (reverse-progress discounts), and exposes React Query hooks for pricing data and checkout flow.",
    "UI container that composes pricing.service outputs into presentational tiers (uses Radix Card primitives), handles tier selection and starts checkout via pricing.service. Contains business logic for tier comparison and gating enterprise flow.",
    "Comparison component that creates a product comparison chart (Nothing vs Something vs Everything) using Recharts. Contains logic to assemble comparison metrics and to generate a printable press-friendly CSV.",
    "Aggregates customer reviews and computes humorous 5-star average for nothing. Business logic for paginated loading, moderation (auto-approve), and review submission via React Query.",
    "Timeline component showing future releases of nothing. Handles progressive reveal animations and supports timeline events that can be toggled by A/B experiments.",
    "3D rotating nothing showcase built with Three.js: loads assets (logos/brands from PressKitProvider), orchestrates rotation animations and integrates with VoidAnimationSystem.",
    "Utility to play 'silence' sound effects or intentionally absent audio. Exposes noop audio controllers used by buttons, chat and simulator to comply with prompt's sound interactions.",
    "Status page showing 100% nothing uptime. Business logic polls a mocked status endpoint, reconciles incidents (none), and exposes health-check hooks for embed use.",
    "Presents a stylized team of experts in nothing with bios (tongue-in-cheek). Business logic for rotating bios, link tracking, and easter-egg reveal when interacting with avatars.",
    "Generates floating testimonial bubbles (drifting into nothingness), handles lazy loading of more testimonials (infinite load of nothing), and maps to UI with motion effects. Uses useVoidParticles for physics.",
    "Retrieves testimonials, aggregates sentiment (always positive about nothing), generates synthetic floating bubble content for the TestimonialGenerator. Provides React Query hooks and mock-fallback data.",
    "Hook implementing the simulator state machine: start/stop, parameter updates, metrics (nothingness index), and event emissions. Controls audio silence and recursive progress behaviors.",
    "Hook managing particle physics for the void: spawning logic, lifecycle, drift behaviors for floating testimonial bubbles and infinite zero rain. Supports deterministic seeds for A/B tests.",
    "High-level orchestrator for void visuals: composes Three.js canvas, particle system, matrix-of-zeros rain, parallax layers and Framer Motion hooks. Exposes programmatic controls to start/stop special effects and provides context for children (bubbles, 3D showcase).",
    "Interactive void simulator responsible for user-configurable parameters (depth, density, silence) that run a visual simulation. Contains the core simulation loop logic via useSimulator hook and persistence to Zustand store."
  ],
  "dependencies": [
    [],
    [],
    [
      "src/app/config.ts"
    ],
    [
      "src/core/contracts.ts"
    ],
    [
      "src/core/events.ts",
      "src/core/contracts.ts"
    ],
    [
      "src/app/config.ts"
    ],
    [
      "src/core/contracts.ts",
      "src/app/config.ts"
    ],
    [
      "src/mocks/handlers.ts",
      "src/app/config.ts"
    ],
    [
      "src/app/config.ts",
      "src/core/contracts.ts",
      "src/core/events.ts"
    ],
    [
      "src/app/config.ts"
    ],
    [
      "src/theme/animations.ts",
      "src/state/use-nothing-store.ts"
    ],
    [
      "src/theme/index.ts",
      "src/features/void/void-animation-system.tsx",
      "src/state/use-nothing-store.ts"
    ],
    [
      "src/app/config.ts",
      "src/core/contracts.ts"
    ],
    [
      "src/core/utils.ts"
    ],
    [
      "src/core/utils.ts"
    ],
    [
      "src/core/contracts.ts",
      "src/core/di.ts",
      "src/app/config.ts"
    ],
    [
      "src/features/analytics/analytics.service.ts",
      "src/core/contracts.ts",
      "src/features/reviews/reviews-widget.tsx"
    ],
    [
      "src/core/contracts.ts",
      "src/app/config.ts",
      "src/core/di.ts"
    ],
    [
      "src/theme/animations.ts",
      "src/core/events.ts"
    ],
    [
      "src/features/pricing/pricing.service.ts",
      "src/core/contracts.ts"
    ],
    [
      "src/core/contracts.ts",
      "src/app/config.ts"
    ],
    [
      "src/app/config.ts",
      "src/core/contracts.ts",
      "src/core/events.ts"
    ],
    [
      "src/state/use-nothing-store.ts",
      "src/core/events.ts"
    ],
    [
      "src/core/hooks.ts",
      "src/core/events.ts",
      "src/state/use-nothing-store.ts"
    ],
    [
      "src/state/use-nothing-store.ts",
      "src/core/di.ts",
      "src/app/config.ts"
    ],
    [
      "src/core/contracts.ts",
      "src/features/experiments/experiment-manager.ts"
    ],
    [
      "src/theme/animations.ts",
      "src/features/void/void-animation-system.tsx",
      "src/core/events.ts",
      "src/features/experiments/experiment-manager.ts",
      "src/features/sound/silence-audio.ts",
      "src/core/contracts.ts"
    ],
    [
      "src/features/chat/chat.service.ts",
      "src/features/sound/silence-audio.ts",
      "src/core/events.ts"
    ],
    [
      "src/features/pricing/pricing.service.ts",
      "src/app/config.ts"
    ],
    [
      "src/features/newsletter/newsletter.service.ts",
      "src/core/contracts.ts",
      "src/features/sound/silence-audio.ts"
    ],
    [
      "src/core/contracts.ts",
      "src/app/config.ts"
    ],
    [
      "src/shared/layouts/LandingLayout.tsx",
      "src/theme/animations.ts"
    ],
    [
      "src/features/apidocs/api-docs.tsx",
      "src/features/press/press-kit-provider.tsx"
    ],
    [
      "src/shared/layouts/LandingLayout.tsx",
      "src/features/hero/existential-hero.tsx",
      "src/features/pricing/pricing-tiers.tsx",
      "src/features/testimonials/testimonial-generator.tsx",
      "src/features/counter/animated-zero-counter.tsx",
      "src/features/simulator/void-simulator.tsx",
      "src/features/newsletter/newsletter-form.tsx",
      "src/features/chat/live-chat-bot.tsx",
      "src/features/cookies/cookie-banner.tsx",
      "src/features/easter-eggs/easter-egg-manager.tsx"
    ],
    [
      "src/features/status/status-page.tsx",
      "src/features/analytics/analytics-dashboard.tsx"
    ],
    [
      "src/app/config.ts"
    ],
    [
      "src/core/contracts.ts",
      "src/core/di.ts",
      "src/app/config.ts"
    ],
    [
      "src/features/pricing/pricing.service.ts",
      "src/core/events.ts",
      "src/features/experiments/experiment-manager.ts"
    ],
    [
      "src/core/contracts.ts",
      "src/features/press/press-kit-provider.tsx"
    ],
    [
      "src/core/contracts.ts",
      "src/app/config.ts"
    ],
    [
      "src/core/contracts.ts",
      "src/features/experiments/experiment-manager.ts",
      "src/theme/animations.ts"
    ],
    [
      "src/features/void/void-animation-system.tsx",
      "src/features/press/press-kit-provider.tsx",
      "src/theme/animations.ts"
    ],
    [
      "src/app/config.ts"
    ],
    [
      "src/app/config.ts",
      "src/core/contracts.ts"
    ],
    [
      "src/core/events.ts",
      "src/features/easter-eggs/easter-egg-manager.ts"
    ],
    [
      "src/features/testimonials/testimonial.service.ts",
      "src/features/void/use-void-particles.ts",
      "src/theme/animations.ts"
    ],
    [
      "src/core/contracts.ts",
      "src/app/config.ts"
    ],
    [
      "src/core/events.ts",
      "src/core/utils.ts",
      "src/state/use-nothing-store.ts"
    ],
    [
      "src/core/utils.ts",
      "src/core/contracts.ts"
    ],
    [
      "src/theme/animations.ts",
      "src/features/void/use-void-particles.ts",
      "src/core/events.ts"
    ],
    [
      "src/features/simulator/use-simulator.ts",
      "src/state/use-nothing-store.ts",
      "src/features/void/void-animation-system.tsx"
    ]
  ],
  "total_files": 51
}
