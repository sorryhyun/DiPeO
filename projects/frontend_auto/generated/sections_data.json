{
  "architecture": {
    "overview": "Patient Healthcare Portal built with React 18+, TypeScript and Tailwind CSS. The app is modular and feature-driven: providers and core services form the foundation, shared UI components provide consistent building blocks, feature folders contain domain UI and hooks, and pages & router wire everything together. In development mode the app runs standalone using a mock API + mock WebSocket server, mocked users, and localStorage persistence so backend is not required.",
    "patterns": [
      "Provider Pattern (Auth, Query, I18n, Theme, Socket)",
      "Feature Folders (each feature has components + hooks + service usage)",
      "Container/Presentational split for components",
      "React Query for server-state with custom service layer",
      "Context API for auth and theming",
      "Mock Server (MSW-style) for dev-mode endpoints and mock WebSocket",
      "Atomic UI (Button/Input/Modal/Table) with Tailwind utility classes",
      "Progressive Enhancement: Suspense + Error Boundaries"
    ],
    "data_flow": "UI components call custom hooks (useAppointments, useMedicalRecords, etc). Hooks use React Query which uses a single apiClient service to call endpoints. In development, apiClient routes calls to the mock server/handlers; in production it points to real API endpoints. AuthProvider manages tokens and user state persisted to localStorage when enable_mock_data/use_localstorage_persistence is set. SocketProvider provides a WebSocket-like event stream (mock in dev) for real-time updates (e.g., appointment changes). I18nProvider supplies translation strings to UI. ErrorBoundary wraps pages to show recoverable error UI.",
    "folder_structure": "src/\n  main.tsx\n  index.css\n  App.tsx\n  config/\n    appConfig.ts\n  providers/\n    QueryProvider.tsx\n    AuthProvider.tsx\n    I18nProvider.tsx\n    ThemeProvider.tsx\n    SocketProvider.tsx\n  lib/\n    apiClient.ts\n    localStorage.ts\n    mockMode.ts\n    fallback.ts\n  services/\n    auth.service.ts\n    appointments.service.ts\n    medicalRecords.service.ts\n    prescriptions.service.ts\n    labResults.service.ts\n    insurance.service.ts\n    medications.service.ts\n    websocket.service.ts\n    mockServer.ts\n  hooks/\n    useAuth.ts\n    useLocalStorage.ts\n    useDebounce.ts\n    useAppointments.ts\n    useMedicalRecords.ts\n    usePrescriptions.ts\n    useLabResults.ts\n    useInsurance.ts\n    useMedications.ts\n  i18n/\n    i18n.ts\n    locales/\n      en.json\n      ko.json\n  mocks/\n    server.ts\n    handlers.ts\n    mockUsers.ts\n    data/\n      appointments.ts\n      medicalRecords.ts\n      prescriptions.ts\n      labResults.ts\n      insurance.ts\n      medications.ts\n      websocket.ts\n  components/\n    ErrorBoundary.tsx\n    SuspenseFallback.tsx\n    ProtectedRoute.tsx\n    layout/\n      AppLayout.tsx\n      Header.tsx\n      Sidebar.tsx\n    ui/\n      Button.tsx\n      Input.tsx\n      Modal.tsx\n      Toast.tsx\n      Table.tsx\n      Spinner.tsx\n  features/\n    dashboard/\n      HealthDashboard.tsx\n    appointments/\n      AppointmentList.tsx\n      AppointmentForm.tsx\n    medicalRecords/\n      MedicalRecordViewer.tsx\n    prescriptions/\n      PrescriptionList.tsx\n      PrescriptionForm.tsx\n    telemedicine/\n      TelemedicineRoom.tsx\n    labResults/\n      LabResultsTable.tsx\n    insurance/\n      InsuranceTracker.tsx\n    medications/\n      MedicationReminders.tsx\n  pages/\n    LoginPage.tsx\n    DashboardPage.tsx\n    AppointmentsPage.tsx\n    MedicalRecordsPage.tsx\n    PrescriptionsPage.tsx\n    TelemedicinePage.tsx\n    LabResultsPage.tsx\n    InsurancePage.tsx\n    MedicationsPage.tsx\n    SettingsPage.tsx\n    NotFoundPage.tsx\n  routes/\n    AppRouter.tsx\ntailwind.config.js\npostcss.config.js",
    "tech_stack": [
      "React 18+ (Suspense, concurrent-safe patterns)",
      "TypeScript",
      "React Router v6",
      "React Query (TanStack Query) for server-state",
      "Tailwind CSS with dark mode",
      "React Context API for Auth & Theme",
      "i18next for internationalization (Korean locales included)",
      "MSW-style mock server for dev API endpoints and mock WebSocket",
      "LocalStorage for persistence in dev",
      "Zod + React Hook Form (recommended for forms/validation)",
      "Vite (recommended) or CRA for bundling"
    ]
  },
  "sections": [
    {
      "id": "app-config",
      "dependencies": [],
      "exports": [
        "appConfig object"
      ],
      "priority": 1
    },
    {
      "id": "local-storage-util",
      "dependencies": [],
      "exports": [
        "getItem",
        "setItem",
        "removeItem"
      ],
      "priority": 1
    },
    {
      "id": "mock-mode-flag",
      "dependencies": [
        "src/config/appConfig.ts"
      ],
      "exports": [
        "isDevMockMode boolean"
      ],
      "priority": 1
    },
    {
      "id": "api-client",
      "dependencies": [
        "src/config/appConfig.ts",
        "src/lib/mockMode.ts",
        "src/mocks/server.ts"
      ],
      "exports": [
        "apiClient (fetch wrapper)",
        "setAuthToken helper"
      ],
      "priority": 1
    },
    {
      "id": "auth-service",
      "dependencies": [
        "src/lib/apiClient.ts",
        "src/lib/localStorage.ts",
        "src/mocks/mockUsers.ts",
        "src/config/appConfig.ts",
        "src/lib/mockMode.ts"
      ],
      "exports": [
        "login",
        "logout",
        "getCurrentUser",
        "refreshToken"
      ],
      "priority": 1
    },
    {
      "id": "appointments-service",
      "dependencies": [
        "src/lib/apiClient.ts"
      ],
      "exports": [
        "fetchAppointments",
        "createAppointment",
        "updateAppointment",
        "cancelAppointment"
      ],
      "priority": 1
    },
    {
      "id": "medical-records-service",
      "dependencies": [
        "src/lib/apiClient.ts"
      ],
      "exports": [
        "fetchMedicalRecords",
        "fetchRecordById"
      ],
      "priority": 1
    },
    {
      "id": "prescriptions-service",
      "dependencies": [
        "src/lib/apiClient.ts"
      ],
      "exports": [
        "fetchPrescriptions",
        "createPrescription",
        "renewPrescription"
      ],
      "priority": 1
    },
    {
      "id": "lab-results-service",
      "dependencies": [
        "src/lib/apiClient.ts"
      ],
      "exports": [
        "fetchLabResults",
        "fetchLabResultById"
      ],
      "priority": 1
    },
    {
      "id": "insurance-service",
      "dependencies": [
        "src/lib/apiClient.ts"
      ],
      "exports": [
        "fetchClaims",
        "submitClaim"
      ],
      "priority": 1
    },
    {
      "id": "medications-service",
      "dependencies": [
        "src/lib/apiClient.ts"
      ],
      "exports": [
        "fetchMedications",
        "scheduleReminder",
        "cancelReminder"
      ],
      "priority": 1
    },
    {
      "id": "websocket-service",
      "dependencies": [
        "src/lib/mockMode.ts",
        "src/mocks/mockWebsocket.ts"
      ],
      "exports": [
        "connect",
        "disconnect",
        "on",
        "off",
        "emit (mock)"
      ],
      "priority": 1
    },
    {
      "id": "mock-server-entry",
      "dependencies": [
        "src/mocks/handlers.ts",
        "src/mocks/mockUsers.ts",
        "src/mocks/data/appointments.ts",
        "src/mocks/data/medicalRecords.ts",
        "src/mocks/data/prescriptions.ts",
        "src/mocks/data/labResults.ts",
        "src/mocks/data/insurance.ts",
        "src/mocks/data/medications.ts",
        "src/mocks/websocket.ts"
      ],
      "exports": [
        "startMockServer",
        "stopMockServer"
      ],
      "priority": 1
    },
    {
      "id": "query-provider",
      "dependencies": [
        "src/lib/apiClient.ts"
      ],
      "exports": [
        "ReactQueryProvider (wrapper component)"
      ],
      "priority": 1
    },
    {
      "id": "auth-provider",
      "dependencies": [
        "src/services/auth.service.ts",
        "src/lib/localStorage.ts",
        "src/lib/mockMode.ts",
        "src/mocks/mockUsers.ts"
      ],
      "exports": [
        "AuthProvider component",
        "useAuthContext hook"
      ],
      "priority": 1
    },
    {
      "id": "i18n-provider",
      "dependencies": [
        "src/i18n/i18n.ts",
        "src/i18n/locales/en.json",
        "src/i18n/locales/ko.json"
      ],
      "exports": [
        "I18nProvider (initializes i18next)"
      ],
      "priority": 1
    },
    {
      "id": "theme-provider",
      "dependencies": [
        "src/lib/localStorage.ts"
      ],
      "exports": [
        "ThemeProvider component",
        "useTheme hook"
      ],
      "priority": 1
    },
    {
      "id": "socket-provider",
      "dependencies": [
        "src/services/websocket.service.ts",
        "src/lib/mockMode.ts"
      ],
      "exports": [
        "SocketProvider component",
        "useSocket hook"
      ],
      "priority": 1
    },
    {
      "id": "use-auth-hook",
      "dependencies": [
        "src/providers/AuthProvider.tsx",
        "src/services/auth.service.ts"
      ],
      "exports": [
        "useAuth hook (login/logout, currentUser)"
      ],
      "priority": 1
    },
    {
      "id": "use-local-storage-hook",
      "dependencies": [
        "src/lib/localStorage.ts"
      ],
      "exports": [
        "useLocalStorage hook"
      ],
      "priority": 1
    },
    {
      "id": "use-debounce-hook",
      "dependencies": [],
      "exports": [
        "useDebounce hook"
      ],
      "priority": 1
    },
    {
      "id": "use-appointments-hook",
      "dependencies": [
        "src/services/appointments.service.ts",
        "src/providers/QueryProvider.tsx"
      ],
      "exports": [
        "useAppointments hook (react-query)"
      ],
      "priority": 1
    },
    {
      "id": "use-medical-records-hook",
      "dependencies": [
        "src/services/medicalRecords.service.ts",
        "src/providers/QueryProvider.tsx"
      ],
      "exports": [
        "useMedicalRecords hook"
      ],
      "priority": 1
    },
    {
      "id": "use-prescriptions-hook",
      "dependencies": [
        "src/services/prescriptions.service.ts",
        "src/providers/QueryProvider.tsx"
      ],
      "exports": [
        "usePrescriptions hook"
      ],
      "priority": 1
    },
    {
      "id": "use-lab-results-hook",
      "dependencies": [
        "src/services/labResults.service.ts",
        "src/providers/QueryProvider.tsx"
      ],
      "exports": [
        "useLabResults hook"
      ],
      "priority": 1
    },
    {
      "id": "use-insurance-hook",
      "dependencies": [
        "src/services/insurance.service.ts",
        "src/providers/QueryProvider.tsx"
      ],
      "exports": [
        "useInsurance hook"
      ],
      "priority": 1
    },
    {
      "id": "use-medications-hook",
      "dependencies": [
        "src/services/medications.service.ts",
        "src/providers/QueryProvider.tsx"
      ],
      "exports": [
        "useMedications hook"
      ],
      "priority": 1
    },
    {
      "id": "i18n-init",
      "dependencies": [
        "src/i18n/locales/en.json",
        "src/i18n/locales/ko.json"
      ],
      "exports": [
        "i18n initialization"
      ],
      "priority": 1
    },
    {
      "id": "mock-handlers",
      "dependencies": [
        "src/mocks/data/appointments.ts",
        "src/mocks/data/medicalRecords.ts",
        "src/mocks/data/prescriptions.ts",
        "src/mocks/data/labResults.ts",
        "src/mocks/data/insurance.ts",
        "src/mocks/data/medications.ts",
        "src/mocks/mockUsers.ts"
      ],
      "exports": [
        "handlers array for mock server"
      ],
      "priority": 1
    },
    {
      "id": "mock-users",
      "dependencies": [],
      "exports": [
        "mock users list"
      ],
      "priority": 1
    },
    {
      "id": "mock-appointments-data",
      "dependencies": [],
      "exports": [
        "appointments mock data"
      ],
      "priority": 1
    },
    {
      "id": "mock-medical-records-data",
      "dependencies": [],
      "exports": [
        "medical records mock data"
      ],
      "priority": 1
    },
    {
      "id": "mock-prescriptions-data",
      "dependencies": [],
      "exports": [
        "prescriptions mock data"
      ],
      "priority": 1
    },
    {
      "id": "mock-lab-results-data",
      "dependencies": [],
      "exports": [
        "lab results mock data"
      ],
      "priority": 1
    },
    {
      "id": "mock-insurance-data",
      "dependencies": [],
      "exports": [
        "insurance mock data"
      ],
      "priority": 1
    },
    {
      "id": "mock-medications-data",
      "dependencies": [],
      "exports": [
        "medications mock data"
      ],
      "priority": 1
    },
    {
      "id": "error-boundary-component",
      "dependencies": [],
      "exports": [
        "ErrorBoundary React component"
      ],
      "priority": 2
    },
    {
      "id": "suspense-fallback-component",
      "dependencies": [],
      "exports": [
        "SuspenseFallback component"
      ],
      "priority": 2
    },
    {
      "id": "protected-route-component",
      "dependencies": [
        "src/providers/AuthProvider.tsx",
        "src/routes/AppRouter.tsx"
      ],
      "exports": [
        "ProtectedRoute component"
      ],
      "priority": 2
    },
    {
      "id": "app-layout",
      "dependencies": [
        "src/components/layout/Header.tsx",
        "src/components/layout/Sidebar.tsx"
      ],
      "exports": [
        "AppLayout component"
      ],
      "priority": 2
    },
    {
      "id": "header-component",
      "dependencies": [
        "src/providers/AuthProvider.tsx",
        "src/providers/ThemeProvider.tsx"
      ],
      "exports": [
        "Header component"
      ],
      "priority": 2
    },
    {
      "id": "sidebar-component",
      "dependencies": [
        "src/providers/AuthProvider.tsx",
        "src/i18n/i18n.ts"
      ],
      "exports": [
        "Sidebar component"
      ],
      "priority": 2
    },
    {
      "id": "ui-button",
      "dependencies": [],
      "exports": [
        "Button component"
      ],
      "priority": 2
    },
    {
      "id": "ui-input",
      "dependencies": [],
      "exports": [
        "Input component"
      ],
      "priority": 2
    },
    {
      "id": "ui-modal",
      "dependencies": [
        "src/components/ui/Button.tsx"
      ],
      "exports": [
        "Modal component"
      ],
      "priority": 2
    },
    {
      "id": "ui-toast",
      "dependencies": [],
      "exports": [
        "Toast component and API"
      ],
      "priority": 2
    },
    {
      "id": "ui-table",
      "dependencies": [],
      "exports": [
        "Table component"
      ],
      "priority": 2
    },
    {
      "id": "ui-spinner",
      "dependencies": [],
      "exports": [
        "Spinner component"
      ],
      "priority": 2
    },
    {
      "id": "appointments-list-component",
      "dependencies": [
        "src/hooks/useAppointments.ts",
        "src/components/ui/Table.tsx",
        "src/components/ui/Spinner.tsx"
      ],
      "exports": [
        "AppointmentList component"
      ],
      "priority": 2
    },
    {
      "id": "appointment-form-component",
      "dependencies": [
        "src/components/ui/Input.tsx",
        "src/components/ui/Button.tsx",
        "src/services/appointments.service.ts",
        "src/hooks/useAppointments.ts"
      ],
      "exports": [
        "AppointmentForm component"
      ],
      "priority": 2
    },
    {
      "id": "medical-record-viewer-component",
      "dependencies": [
        "src/hooks/useMedicalRecords.ts",
        "src/components/ui/Spinner.tsx",
        "src/components/ui/Table.tsx"
      ],
      "exports": [
        "MedicalRecordViewer component"
      ],
      "priority": 2
    },
    {
      "id": "prescription-list-component",
      "dependencies": [
        "src/hooks/usePrescriptions.ts",
        "src/components/ui/Table.tsx"
      ],
      "exports": [
        "PrescriptionList component"
      ],
      "priority": 2
    },
    {
      "id": "prescription-form-component",
      "dependencies": [
        "src/components/ui/Input.tsx",
        "src/components/ui/Button.tsx",
        "src/hooks/usePrescriptions.ts",
        "src/services/prescriptions.service.ts"
      ],
      "exports": [
        "PrescriptionForm component"
      ],
      "priority": 2
    },
    {
      "id": "telemedicine-room-component",
      "dependencies": [
        "src/providers/SocketProvider.tsx",
        "src/components/ui/Modal.tsx"
      ],
      "exports": [
        "TelemedicineRoom component"
      ],
      "priority": 2
    },
    {
      "id": "health-dashboard-component",
      "dependencies": [
        "src/hooks/useMedicalRecords.ts",
        "src/hooks/useLabResults.ts",
        "src/components/ui/Table.tsx",
        "src/components/ui/Spinner.tsx"
      ],
      "exports": [
        "HealthDashboard component"
      ],
      "priority": 2
    },
    {
      "id": "lab-results-table-component",
      "dependencies": [
        "src/hooks/useLabResults.ts",
        "src/components/ui/Table.tsx"
      ],
      "exports": [
        "LabResultsTable component"
      ],
      "priority": 2
    },
    {
      "id": "insurance-tracker-component",
      "dependencies": [
        "src/hooks/useInsurance.ts",
        "src/components/ui/Table.tsx"
      ],
      "exports": [
        "InsuranceTracker component"
      ],
      "priority": 2
    },
    {
      "id": "medication-reminders-component",
      "dependencies": [
        "src/hooks/useMedications.ts",
        "src/components/ui/Toast.tsx"
      ],
      "exports": [
        "MedicationReminders component"
      ],
      "priority": 2
    },
    {
      "id": "app-router",
      "dependencies": [
        "src/pages/LoginPage.tsx",
        "src/pages/DashboardPage.tsx",
        "src/pages/AppointmentsPage.tsx",
        "src/pages/MedicalRecordsPage.tsx",
        "src/pages/PrescriptionsPage.tsx",
        "src/pages/TelemedicinePage.tsx",
        "src/pages/LabResultsPage.tsx",
        "src/pages/InsurancePage.tsx",
        "src/pages/MedicationsPage.tsx",
        "src/pages/SettingsPage.tsx"
      ],
      "exports": [
        "AppRouter component (react-router config)"
      ],
      "priority": 3
    },
    {
      "id": "login-page",
      "dependencies": [
        "src/providers/AuthProvider.tsx",
        "src/components/ui/Input.tsx",
        "src/components/ui/Button.tsx",
        "src/hooks/useAuth.ts",
        "src/i18n/i18n.ts"
      ],
      "exports": [
        "LoginPage component"
      ],
      "priority": 3
    },
    {
      "id": "dashboard-page",
      "dependencies": [
        "src/features/dashboard/HealthDashboard.tsx",
        "src/components/layout/AppLayout.tsx",
        "src/providers/SocketProvider.tsx"
      ],
      "exports": [
        "DashboardPage component"
      ],
      "priority": 3
    },
    {
      "id": "appointments-page",
      "dependencies": [
        "src/features/appointments/AppointmentList.tsx",
        "src/features/appointments/AppointmentForm.tsx",
        "src/components/layout/AppLayout.tsx"
      ],
      "exports": [
        "AppointmentsPage component"
      ],
      "priority": 3
    },
    {
      "id": "medical-records-page",
      "dependencies": [
        "src/features/medicalRecords/MedicalRecordViewer.tsx",
        "src/components/layout/AppLayout.tsx"
      ],
      "exports": [
        "MedicalRecordsPage component"
      ],
      "priority": 3
    },
    {
      "id": "prescriptions-page",
      "dependencies": [
        "src/features/prescriptions/PrescriptionList.tsx",
        "src/features/prescriptions/PrescriptionForm.tsx",
        "src/components/layout/AppLayout.tsx"
      ],
      "exports": [
        "PrescriptionsPage component"
      ],
      "priority": 3
    },
    {
      "id": "telemedicine-page",
      "dependencies": [
        "src/features/telemedicine/TelemedicineRoom.tsx",
        "src/components/layout/AppLayout.tsx"
      ],
      "exports": [
        "TelemedicinePage component"
      ],
      "priority": 3
    },
    {
      "id": "lab-results-page",
      "dependencies": [
        "src/features/labResults/LabResultsTable.tsx",
        "src/components/layout/AppLayout.tsx"
      ],
      "exports": [
        "LabResultsPage component"
      ],
      "priority": 3
    },
    {
      "id": "insurance-page",
      "dependencies": [
        "src/features/insurance/InsuranceTracker.tsx",
        "src/components/layout/AppLayout.tsx"
      ],
      "exports": [
        "InsurancePage component"
      ],
      "priority": 3
    },
    {
      "id": "medications-page",
      "dependencies": [
        "src/features/medications/MedicationReminders.tsx",
        "src/components/layout/AppLayout.tsx"
      ],
      "exports": [
        "MedicationsPage component"
      ],
      "priority": 3
    },
    {
      "id": "settings-page",
      "dependencies": [
        "src/providers/AuthProvider.tsx",
        "src/providers/ThemeProvider.tsx",
        "src/i18n/i18n.ts",
        "src/components/layout/AppLayout.tsx"
      ],
      "exports": [
        "SettingsPage component"
      ],
      "priority": 3
    },
    {
      "id": "not-found-page",
      "dependencies": [
        "src/components/layout/AppLayout.tsx"
      ],
      "exports": [
        "NotFoundPage component"
      ],
      "priority": 3
    },
    {
      "id": "app-root",
      "dependencies": [
        "src/providers/QueryProvider.tsx",
        "src/providers/AuthProvider.tsx",
        "src/providers/I18nProvider.tsx",
        "src/providers/ThemeProvider.tsx",
        "src/providers/SocketProvider.tsx",
        "src/components/ErrorBoundary.tsx",
        "src/components/SuspenseFallback.tsx",
        "src/routes/AppRouter.tsx",
        "src/mocks/server.ts"
      ],
      "exports": [
        "App component (root)"
      ],
      "priority": 1
    },
    {
      "id": "main-entry",
      "dependencies": [
        "src/App.tsx",
        "src/index.css",
        "src/config/appConfig.ts"
      ],
      "exports": [
        "main.tsx entry"
      ],
      "priority": 1
    },
    {
      "id": "index-css",
      "dependencies": [],
      "exports": [
        "Tailwind CSS imports and base app styles"
      ],
      "priority": 1
    },
    {
      "id": "i18n-en-locale",
      "dependencies": [],
      "exports": [
        "en.json"
      ],
      "priority": 1
    },
    {
      "id": "i18n-ko-locale",
      "dependencies": [],
      "exports": [
        "ko.json (Korean translation)"
      ],
      "priority": 1
    },
    {
      "id": "tailwind-config",
      "dependencies": [
        "src/index.css"
      ],
      "exports": [
        "tailwind.config.js"
      ],
      "priority": 1
    },
    {
      "id": "postcss-config",
      "dependencies": [],
      "exports": [
        "postcss.config.js"
      ],
      "priority": 1
    },
    {
      "id": "mock-websocket-impl",
      "dependencies": [
        "src/mocks/data/appointments.ts",
        "src/mocks/mockUsers.ts"
      ],
      "exports": [
        "mock websocket messages & helpers"
      ],
      "priority": 1
    },
    {
      "id": "utils-fallback",
      "dependencies": [],
      "exports": [
        "helpers for fallback UI and error message formatting"
      ],
      "priority": 1
    }
  ],
  "file_paths": [
    "src/config/appConfig.ts",
    "src/lib/localStorage.ts",
    "src/lib/mockMode.ts",
    "src/lib/apiClient.ts",
    "src/services/auth.service.ts",
    "src/services/appointments.service.ts",
    "src/services/medicalRecords.service.ts",
    "src/services/prescriptions.service.ts",
    "src/services/labResults.service.ts",
    "src/services/insurance.service.ts",
    "src/services/medications.service.ts",
    "src/services/websocket.service.ts",
    "src/services/mockServer.ts",
    "src/providers/QueryProvider.tsx",
    "src/providers/AuthProvider.tsx",
    "src/providers/I18nProvider.tsx",
    "src/providers/ThemeProvider.tsx",
    "src/providers/SocketProvider.tsx",
    "src/hooks/useAuth.ts",
    "src/hooks/useLocalStorage.ts",
    "src/hooks/useDebounce.ts",
    "src/hooks/useAppointments.ts",
    "src/hooks/useMedicalRecords.ts",
    "src/hooks/usePrescriptions.ts",
    "src/hooks/useLabResults.ts",
    "src/hooks/useInsurance.ts",
    "src/hooks/useMedications.ts",
    "src/i18n/i18n.ts",
    "src/mocks/server.ts",
    "src/mocks/handlers.ts",
    "src/mocks/mockUsers.ts",
    "src/mocks/data/appointments.ts",
    "src/mocks/data/medicalRecords.ts",
    "src/mocks/data/prescriptions.ts",
    "src/mocks/data/labResults.ts",
    "src/mocks/data/insurance.ts",
    "src/mocks/data/medications.ts",
    "src/mocks/websocket.ts",
    "src/components/ErrorBoundary.tsx",
    "src/components/SuspenseFallback.tsx",
    "src/components/ProtectedRoute.tsx",
    "src/components/layout/AppLayout.tsx",
    "src/components/layout/Header.tsx",
    "src/components/layout/Sidebar.tsx",
    "src/components/ui/Button.tsx",
    "src/components/ui/Input.tsx",
    "src/components/ui/Modal.tsx",
    "src/components/ui/Toast.tsx",
    "src/components/ui/Table.tsx",
    "src/components/ui/Spinner.tsx",
    "src/features/appointments/AppointmentList.tsx",
    "src/features/appointments/AppointmentForm.tsx",
    "src/features/medicalRecords/MedicalRecordViewer.tsx",
    "src/features/prescriptions/PrescriptionList.tsx",
    "src/features/prescriptions/PrescriptionForm.tsx",
    "src/features/telemedicine/TelemedicineRoom.tsx",
    "src/features/dashboard/HealthDashboard.tsx",
    "src/features/labResults/LabResultsTable.tsx",
    "src/features/insurance/InsuranceTracker.tsx",
    "src/features/medications/MedicationReminders.tsx",
    "src/routes/AppRouter.tsx",
    "src/pages/LoginPage.tsx",
    "src/pages/DashboardPage.tsx",
    "src/pages/AppointmentsPage.tsx",
    "src/pages/MedicalRecordsPage.tsx",
    "src/pages/PrescriptionsPage.tsx",
    "src/pages/TelemedicinePage.tsx",
    "src/pages/LabResultsPage.tsx",
    "src/pages/InsurancePage.tsx",
    "src/pages/MedicationsPage.tsx",
    "src/pages/SettingsPage.tsx",
    "src/pages/NotFoundPage.tsx",
    "src/App.tsx",
    "src/main.tsx",
    "src/index.css",
    "src/i18n/locales/en.json",
    "src/i18n/locales/ko.json",
    "tailwind.config.js",
    "postcss.config.js",
    "src/mocks/mockWebsocket.ts",
    "src/lib/fallback.ts"
  ],
  "descriptions": [
    "Centralized runtime config: endpoints, dev flags (enable_mock_data, disable_websocket_in_dev, use_localstorage_persistence).",
    "Small wrapper around window.localStorage with JSON serialization and safe access.",
    "Helper to check if the app should run in internal mock mode (reads appConfig).",
    "Generic fetch wrapper which applies auth token, handles offline/fallback logic, routes to mock server in dev.",
    "Auth service: login/logout, token storage, current user retrieval. Uses localStorage in mock mode and apiClient for requests.",
    "Appointments service: CRUD operations for appointments endpoints.",
    "Medical records service: fetch lists and record details.",
    "Prescriptions service: fetch and mutate prescriptions.",
    "Lab results service: fetch lab result lists and details.",
    "Insurance service: fetch claims and submit claims.",
    "Medications service: fetch medication list and manage reminders.",
    "WebSocket service abstraction. In dev this wire-ups to mock WebSocket implementation; in prod uses browser WebSocket/Socket.IO adapter.",
    "Starts/stops the mock API server (MSW or lightweight fetch interceptors) used only when enable_mock_data is true.",
    "React Query provider wrapper to supply QueryClient and default settings.",
    "AuthProvider: React Context managing currentUser and auth token, persisting to localStorage in dev mode. Provides route-protection helpers.",
    "I18nProvider bootstrap (i18next) and language switcher factory.",
    "ThemeProvider: manages dark/light mode, persists selection, exposes useTheme hook.",
    "SocketProvider: provides a mocked socket connection in dev and a real one in prod; exposes subscribe/unsubscribe methods.",
    "Hook exposing auth actions and current user from AuthProvider.",
    "Hook that mirrors localStorage but is reactive and SSR-safe.",
    "Hook for debounced values for search inputs and autosave features.",
    "React Query hooks for appointments; handles loading/error states and caching.",
    "React Query hooks for medical records.",
    "React Query hooks for prescriptions.",
    "React Query hooks for lab results.",
    "React Query hooks for insurance/claims.",
    "React Query hooks for medications/reminders.",
    "i18n initialization wrapper using i18next; loads en and ko resources and sets defaults.",
    "Entrypoint to start MSW-style mock server when in dev. Exposes start/stop.",
    "Handlers that map configured endpoints (/api/appointments, /api/medical-records, etc.) to mock data/responses.",
    "List of mocked auth users (doctor, patient, nurse) used for dev-mode login.",
    "Seed mock data for appointments endpoint with sample entries for different roles.",
    "Seed mock medical records used in the Medical Records viewer.",
    "Seed mock prescriptions used by prescriptions pages.",
    "Seed mock lab results used by lab results display.",
    "Seed mock insurance claim items used by insurance tracker.",
    "Seed mock medications and reminders used by medication reminders feature.",
    "Simple in-memory mock WebSocket implementation used to simulate real-time events.",
    "Global error boundary to catch rendering errors and display friendly UI with a retry option.",
    "Visual fallback used with React.Suspense showing spinner and skeletons.",
    "Route guard component that redirects unauthenticated users to login and enforces role-based access.",
    "Top-level layout that structures header, sidebar and content region and supports responsive/dark mode.",
    "Header with search, user menu, language selector (i18n) and theme toggle.",
    "Sidebar navigation for main features; uses i18n strings and keyboard accessible markup.",
    "Accessible Button primitive styled with Tailwind; supports variants, aria props and keyboard focus.",
    "Accessible Input primitive with label support and error display; used in forms.",
    "Modal primitive for dialogs and telemedicine popups; composes Button.",
    "Toast system for user notifications and reminders (e.g., medication alerts).",
    "Generic Table component with keyboard navigation and ARIA roles for lists (used across features).",
    "Small spinner component used in loading states and SuspenseFallback.",
    "Feature: appointment list view that renders appointments via useAppointments and exposes actions.",
    "Feature: appointment form to create/update appointments with client-side validation and form states.",
    "Feature: medical record viewer, supports paginated records, attachments and accessibility concerns.",
    "Feature: prescription list view for patients/providers.",
    "Feature: prescription creation/renewal form integrated with prescriptions service.",
    "Feature: telemedicine room component that connects to SocketProvider, supports audio/video placeholders and chat.",
    "Feature: health metrics dashboard combining records and lab results to surface trends.",
    "Feature: tabular view of lab test results with drill-down support.",
    "Feature: insurance claim tracker, status labels and submission helper.",
    "Feature: medication reminders component that schedules local reminders and displays upcoming doses.",
    "React Router v6 route definitions and route-level code-splitting (Suspense).",
    "Login page with mock auth support, social login placeholders, 'remember me' and accessibility support.",
    "Dashboard page combining HealthDashboard and realtime updates; protected route.",
    "Appointments page showing list and form editors; role-aware UI.",
    "Medical records page exposing MedicalRecordViewer and filters.",
    "Prescriptions page for list and creation flows.",
    "Telemedicine page which opens TelemedicineRoom and handles session join/leave flows.",
    "Lab results page showing LabResultsTable and detail drawers.",
    "Insurance page showing InsuranceTracker and claim submission flows.",
    "Medications page where users manage reminders and view active meds.",
    "Settings page for profile, language (i18n) and theme preferences.",
    "Fallback Not Found page for unknown routes.",
    "Root App component that combines providers and mounts AppRouter inside ErrorBoundary + Suspense. It conditionally starts mock server in dev mode.",
    "Main entry file that bootstraps React, renders App into DOM and imports index.css.",
    "Global stylesheet that imports Tailwind base/components/utilities, sets CSS variables for dark mode and app-level accessibility rules.",
    "English translation resource file used by i18next.",
    "Korean translation resource file used by i18next with required prompt-specified translations.",
    "Tailwind configuration enabling JIT, dark mode (class), and theme customizations.",
    "PostCSS config for Tailwind processing.",
    "Mock WebSocket helpers that emit appointment/notification messages in dev.",
    "Reusable helpers for formatting errors and providing user-friendly fallback text and ARIA-friendly labels."
  ]
}