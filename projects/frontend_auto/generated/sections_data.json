{
  "architecture": {
    "overview": "Single-page React 18+ application (Vite) implemented in TypeScript. Core provides domain contracts, events and utilities. Providers wire cross-cutting concerns (React Query, auth, theme, mock-server, websocket). Design system is token-driven (Tailwind + tokens) with accessible, composable UI primitives. Features are organized as domain folders (dashboard, reports, builder, alerts, exports, predictions) exposing components, hooks and service adapters. App supports development-only mock API and WebSocket feeds so it can run standalone.",
    "patterns": [
      "Container/Presentational separation for feature components",
      "Atomic Design for shared UI primitives (atoms/molecules/organisms)",
      "Feature-sliced folders: src/features/<feature>/{components,hooks,services}",
      "Provider pattern for global services (Auth, Query, Theme, MockServer, WebSocket)",
      "React Query for server state, Suspense + Error Boundaries for UX",
      "Context API + lightweight zustand store for UI/local state where needed",
      "Dependency inversion via src/core/di for test/mock substitution"
    ],
    "data_flow": "User interactions dispatch local UI state (zustand) and call feature hooks which use React Query to fetch or mutate data through services/api clients. Services use the DI registry to resolve implementations (production API client or mock client). Real-time updates come through WebSocket provider and update React Query caches (queryClient.setQueryData) or push to zustand local store for ephemeral metrics. Auth tokens stored via secure storage abstraction; in development they persist to localStorage. Caching and background refresh handled by React Query; optimistic updates supported for mutations.",
    "folder_structure": "src/\n  app/\n    config.ts\n    App.tsx\n    main.tsx\n  core/\n    contracts.ts\n    events.ts\n    hooks.ts\n    di.ts\n    utils.ts\n  theme/\n    index.ts\n    animations.ts\n    tokens.ts\n  styles/\n    tailwind.css\n    globals.css\n  i18n/\n    index.ts\n    locales/\n      en.ts\n      es.ts\n  providers/\n    ThemeProvider.tsx\n    AuthProvider.tsx\n    QueryProvider.tsx\n    MockServerProvider.tsx\n    WebsocketProvider.tsx\n    ErrorBoundary.tsx\n    ToastProvider.tsx\n  shared/\n    components/\n      Button.tsx\n      Icon.tsx\n      IconButton.tsx\n      Input.tsx\n      Select.tsx\n      Checkbox.tsx\n      Switch.tsx\n      Card.tsx\n      Modal.tsx\n      Tooltip.tsx\n      Spinner.tsx\n      Skeleton.tsx\n      Toast.tsx\n      Table.tsx\n      DateRangePicker.tsx\n      DataExportButton.tsx\n    layouts/\n      MainLayout.tsx\n      DashboardLayout.tsx\n      AuthLayout.tsx\n    hooks/\n      useLocalStorage.ts\n      useDebounce.ts\n      useKeyboardNav.ts\n      useAuth.ts\n      useWebsocket.ts\n      useToast.ts\n    icons/\n      index.ts\n    a11y/\n      focusManager.ts\n    utils/\n      date.ts\n      formatters.ts\n      csvExport.ts\n  services/\n    api/\n      client.ts\n      analytics.ts\n      reports.ts\n      dashboards.ts\n      predictions.ts\n      alerts.ts\n      exports.ts\n    socket/\n      socket.ts\n    mock/\n      mockServer.ts\n      handlers/\n        metrics.ts\n        reports.ts\n        dashboards.ts\n        predictions.ts\n        alerts.ts\n        exports.ts\n      data/\n        sample-metrics.json\n        sample-dashboards.json\n        sample-reports.json\n  state/\n    ui.ts\n  features/\n    dashboard/\n      DashboardPage.tsx\n      components/\n        MetricCard.tsx\n        KPIWidget.tsx\n        RealTimeTicker.tsx\n        DrillDownModal.tsx\n      hooks/\n        useMetrics.ts\n    reports/\n      ReportsPage.tsx\n      components/\n        ReportTable.tsx\n        ReportFilters.tsx\n      hooks/\n        useReports.ts\n    builder/\n      BuilderPage.tsx\n      components/\n        ReportBuilderForm.tsx\n        FieldPalette.tsx\n      hooks/\n        useReportBuilder.ts\n    alerts/\n      AlertsPage.tsx\n      components/\n        AlertList.tsx\n        AlertConfigPanel.tsx\n      hooks/\n        useAlerts.ts\n    exports/\n      ExportsPage.tsx\n      components/\n        ExportForm.tsx\n      hooks/\n        useExports.ts\n    predictions/\n      PredictionsPage.tsx\n      components/\n        PredictiveChart.tsx\n      hooks/\n        usePredictions.ts\n  routes/\n    index.tsx\n    ProtectedRoute.tsx\n  pages/\n    LoginPage.tsx\n    NotFoundPage.tsx\n  mocks/\n    index.ts\n    websocketMock.ts\n  utils/\n    errorResponses.ts\n",
    "tech_stack": [
      "React 18+ (Suspense, concurrent-safe patterns)",
      "TypeScript with strict mode",
      "Vite (import.meta.env)",
      "TailwindCSS with token-driven design + dark mode",
      "React Query (TanStack Query) for data fetching & caching",
      "Zustand (small) for local UI state where useful",
      "React Router v6 for client routing",
      "i18next for i18n",
      "Charting: Recharts or Chart.js wrapper (encapsulated behind Chart component)",
      "Framer Motion for micro-interactions and page transitions",
      "msw (Mock Service Worker) abstracted in src/services/mock for dev-mode",
      "native WebSocket API with mock fallback"
    ]
  },
  "kernel_specs": {
    "overview": "The core kernel provides a single source of truth for domain types, runtime configuration, eventing, extension hooks, dependency injection tokens and common utilities. All features and providers should import types, tokens and helpers from these files. The kernel is small, framework-agnostic (but Vite-aware via import.meta.env), strictly typed, and designed to support easy mocking and test-time overrides via the DI container and hook registry."
  },
  "sections": [
    {
      "id": "app-config",
      "file_path": "src/app/config.ts",
      "description": "Materialized runtime configuration using import.meta.env. Exposes app constants, feature flags (enable_mock_data), API base URL, websocket URL and environment flags for development mode.",
      "dependencies": [
        "src/core/contracts.ts"
      ],
      "exports": [
        "AppConfig object",
        "isDev, enableMockData, apiBaseUrl, websocketUrl"
      ],
      "priority": 1,
      "purpose": "Materializes runtime configuration using import.meta.env. Exposes typed application configuration, computed flags, feature toggles, API & websocket URLs and development-mode mock data.",
      "content": "/* src/app/config.ts\n\nRuntime materialized app configuration. Uses Vite's import.meta.env. Avoid accessing process.env.\nProvide safe defaults so app can run standalone in development with mock data.\n*/\n\nimport type { User } from '@/core/contracts';\n\n// Define the shape of the materialized configuration\nexport interface AppConfigShape {\n  appType: 'analytics' | string;\n  framework: 'react' | string;\n  stylingApproach: 'tailwind' | string;\n  objective: string;\n  features: string[];\n  targetAudience: string;\n  outputDir: string;\n  developmentMode: {\n    enableMockData: boolean;\n    mockAuthUsers: User[];\n    mockApiEndpoints: string[];\n    disableWebsocketInDev: boolean;\n    useLocalstoragePersistence: boolean;\n  };\n  // runtime environment variables from Vite\n  env: Record<string, string | boolean | undefined>;\n}\n\n// Read raw environment values from Vite (import.meta.env)\nconst VITE_API_BASE = (import.meta.env.VITE_API_BASE as string | undefined) ?? '/api';\nconst VITE_WS_URL = (import.meta.env.VITE_WS_URL as string | undefined) ?? (location.protocol === 'https:' ? 'wss://' : 'ws://') + location.host + '/ws';\nconst MODE = (import.meta.env.MODE as string | undefined) ?? 'development';\n\n// Static application defaults derived from the product specification\nconst DEFAULT_APP_SPEC = {\n  appType: 'analytics',\n  framework: 'react',\n  stylingApproach: 'tailwind',\n  objective: 'Business Intelligence Analytics Platform',\n  features: [\n    'interactive data dashboards',\n    'custom report builder',\n    'real-time metrics display',\n    'data export functionality',\n    'predictive analytics charts',\n    'KPI monitoring widgets',\n    'drill-down capabilities',\n    'alert configuration panel'\n  ],\n  targetAudience: 'Business Analysts and Executives',\n  outputDir: './generated'\n};\n\n// Development-mode defaults (seeded mock users from product config)\nconst DEV_MOCK_USERS: User[] = [\n  { id: 'u-analyst', email: 'analyst@corp.com', name: 'Analyst', role: 'analyst' },\n  { id: 'u-exec', email: 'executive@corp.com', name: 'Executive', role: 'executive' },\n  { id: 'u-viewer', email: 'viewer@corp.com', name: 'Viewer', role: 'viewer' }\n];\n\n// Compose the runtime AppConfig\nexport const AppConfig: AppConfigShape = {\n  ...DEFAULT_APP_SPEC,\n  developmentMode: {\n    enableMockData: ((import.meta.env.VITE_ENABLE_MOCK_DATA as string) === 'true') ?? (MODE === 'development'),\n    mockAuthUsers: DEV_MOCK_USERS,\n    mockApiEndpoints: [\n      '/api/analytics/metrics',\n      '/api/analytics/reports',\n      '/api/analytics/dashboards',\n      '/api/analytics/predictions',\n      '/api/analytics/alerts',\n      '/api/analytics/exports'\n    ],\n    disableWebsocketInDev: ((import.meta.env.VITE_DISABLE_WS_IN_DEV as string) === 'true') ?? false,\n    useLocalstoragePersistence: ((import.meta.env.VITE_USE_LOCALSTORAGE as string) === 'true') ?? true\n  },\n  env: {\n    MODE,\n    VITE_API_BASE,\n    VITE_WS_URL,\n    VITE_ENABLE_MOCK_DATA: import.meta.env.VITE_ENABLE_MOCK_DATA as string | undefined,\n    VITE_DISABLE_WS_IN_DEV: import.meta.env.VITE_DISABLE_WS_IN_DEV as string | undefined\n  }\n};\n\n// Computed helpers exported for convenience\nexport const isDevelopment = import.meta.env.MODE === 'development' || MODE === 'development';\nexport const shouldUseMockData = Boolean(AppConfig.developmentMode.enableMockData) || isDevelopment;\nexport const apiBaseUrl = (import.meta.env.VITE_API_BASE as string | undefined) ?? VITE_API_BASE;\nexport const websocketUrl = (import.meta.env.VITE_WS_URL as string | undefined) ?? VITE_WS_URL;\n\n// Feature flags map derived from features array for quick checks\nexport const FEATURE_FLAGS = Object.fromEntries(AppConfig.features.map(f => [f, true])) as Record<string, boolean>;\n\n// Export mock users (only exported so providers can seed auth in dev)\nexport const MOCK_USERS: User[] = shouldUseMockData ? AppConfig.developmentMode.mockAuthUsers : [];\n\n/* Example usage:\n\nimport { apiBaseUrl, shouldUseMockData, MOCK_USERS } from '@/app/config';\n\nif (shouldUseMockData) {\n  // seed mock server with MOCK_USERS\n}\n\nfetch(`${apiBaseUrl}/analytics/metrics`)\n\n*/"
    },
    {
      "id": "core-contracts",
      "file_path": "src/core/contracts.ts",
      "description": "Domain types, DTOs, API response contracts and shared enums for analytics domain (Metric, Dashboard, Report, Prediction, Alert, ExportJob, User, Roles). Central place for cross-file TypeScript types.",
      "dependencies": [],
      "exports": [
        "types: User, Role, Metric, Dashboard, Report, Prediction, Alert, ExportJob, ApiError",
        "API request/response contract interfaces"
      ],
      "priority": 1,
      "purpose": "Domain types, DTOs, API response contracts and shared enums for both analytics and healthcare domain models. This file centralizes cross-cutting TypeScript interfaces used across features, services and providers.",
      "content": "/* src/core/contracts.ts\n\nCentralized domain contracts used across the app. This file intentionally contains BOTH analytics domain models (for the BI product) and a small set of healthcare domain models required by product requirements. Keep contracts stable and backward-compatible: add fields as optional where necessary.\n*/\n\n// Generic utility types\nexport type Nullable<T> = T | null | undefined;\n\n// Roles used across the app (from config) - extend if new roles are needed\nexport type Role = 'analyst' | 'executive' | 'viewer' | 'admin' | 'patient' | 'doctor' | 'nurse';\n\n// Core User model used by AuthProvider and sections\nexport interface User {\n  id: string;\n  email: string;\n  name?: string;\n  avatarUrl?: string;\n  role: Role;\n  // token is optional in contracts; token storage is handled by AuthService\n  token?: string;\n  metadata?: Record<string, unknown>;\n}\n\n// Healthcare domain (kept compact and serializable)\nexport interface Patient extends User {\n  role: 'patient';\n  dateOfBirth?: string; // ISO\n  medicalRecordId?: string;\n}\n\nexport interface Doctor extends User {\n  role: 'doctor';\n  specialty?: string;\n  licenseNumber?: string;\n}\n\nexport interface Nurse extends User {\n  role: 'nurse';\n  ward?: string;\n}\n\nexport interface Appointment {\n  id: string;\n  patientId: string;\n  doctorId?: string;\n  nurseId?: string;\n  scheduledAt: string; // ISO\n  status: 'scheduled' | 'cancelled' | 'completed' | 'no-show';\n  notes?: string;\n}\n\nexport interface MedicalRecord {\n  id: string;\n  patientId: string;\n  diagnoses?: string[];\n  allergies?: string[];\n  notes?: string;\n  updatedAt?: string;\n}\n\nexport interface Prescription {\n  id: string;\n  patientId: string;\n  prescribedBy: string; // doctorId\n  medication: string;\n  dose?: string;\n  instructions?: string;\n  issuedAt: string;\n}\n\nexport interface LabResult {\n  id: string;\n  patientId: string;\n  type: string;\n  value: string | number;\n  unit?: string;\n  measuredAt: string;\n}\n\n// Analytics domain models\nexport interface MetricPoint {\n  timestamp: string; // ISO\n  value: number;\n}\n\nexport interface Metric {\n  id: string;\n  key: string;\n  title: string;\n  description?: string;\n  unit?: string;\n  current?: number;\n  trend?: number; // % change\n  series?: MetricPoint[];\n}\n\nexport type WidgetType = 'kpi' | 'timeseries' | 'table' | 'custom';\n\nexport interface DashboardWidget {\n  id: string;\n  type: WidgetType;\n  metricKey?: string;\n  title?: string;\n  config?: Record<string, unknown>;\n}\n\nexport interface Dashboard {\n  id: string;\n  title: string;\n  description?: string;\n  widgets: DashboardWidget[];\n  ownerId?: string;\n  updatedAt?: string;\n}\n\nexport interface Report {\n  id: string;\n  title: string;\n  description?: string;\n  ownerId?: string;\n  createdAt?: string;\n  columns?: string[];\n  rows?: Record<string, unknown>[];\n}\n\nexport interface Prediction {\n  id: string;\n  metricKey: string;\n  horizonDays: number;\n  generatedAt: string;\n  series: MetricPoint[];\n  confidenceLow?: MetricPoint[];\n  confidenceHigh?: MetricPoint[];\n}\n\nexport interface Alert {\n  id: string;\n  name: string;\n  enabled: boolean;\n  targetMetric: string;\n  threshold: number;\n  comparator: 'gt' | 'lt' | 'gte' | 'lte';\n  lastFiredAt?: string;\n}\n\nexport interface ExportJob {\n  id: string;\n  status: 'queued' | 'running' | 'completed' | 'failed';\n  requestedBy: string;\n  createdAt: string;\n  completedAt?: string;\n  artifactUrl?: string;\n  format?: 'csv' | 'xlsx' | 'json';\n}\n\n// Generic API response contracts\nexport interface ApiError {\n  code: string;\n  message: string;\n  status?: number;\n  details?: Record<string, unknown>;\n}\n\nexport interface ApiResult<T> {\n  data?: T;\n  error?: ApiError;\n}\n\nexport interface PaginatedResponse<T> {\n  items: T[];\n  total: number;\n  page: number;\n  pageSize: number;\n}\n\n// WebSocket event types used by the SocketClient and WebsocketProvider\nexport type WsEventType =\n  | 'ws:metrics:update'\n  | 'ws:alerts:fired'\n  | 'ws:reports:run'\n  | 'ws:export:status';\n\nexport interface WsEvent<T = unknown> {\n  type: WsEventType;\n  payload: T;\n  receivedAt?: string;\n}\n\nexport interface WsPayloadMap {\n  'ws:metrics:update': { metricKey: string; point: MetricPoint };\n  'ws:alerts:fired': { alertId: string; triggeredAt: string; values?: Record<string, unknown> };\n  'ws:reports:run': { reportId: string; status: 'started' | 'completed' | 'failed' };\n  'ws:export:status': { exportId: string; status: ExportJob['status']; artifactUrl?: string };\n}\n\n// UI helper types\nexport type LoadingState = 'idle' | 'loading' | 'success' | 'error';\n\nexport interface FormState {\n  values: Record<string, unknown>;\n  touched: Record<string, boolean>;\n  errors: Record<string, string | undefined>;\n  isSubmitting: boolean;\n}\n\n/* Example usage:\n\nimport type { Dashboard, ApiResult } from '@/core/contracts';\n\nasync function loadDashboard(): Promise<ApiResult<Dashboard>> {\n  // service returns ApiResult<Dashboard>\n}\n\n*/"
    },
    {
      "id": "core-di",
      "file_path": "src/core/di.ts",
      "description": "Simple dependency injection container for resolving service implementations (e.g., API client, socket). Allows replacing implementations in tests or mock mode.",
      "dependencies": [
        "src/core/contracts.ts"
      ],
      "exports": [
        "DIContainer, register, resolve"
      ],
      "priority": 1,
      "purpose": "A minimal type-safe dependency injection container. Define tokens for services (ApiClient, AuthService, StorageService, SocketService), register implementations and resolve dependencies. Enables test-time/mocking overrides.\n",
      "content": "/* src/core/di.ts\n\nTiny DI container for front-end usage. Tokens are created via createToken<T>(description) which returns a unique symbol typed to T.\n\nConsumers should import tokens and register implementations early (e.g., in App bootstrap or in MockServerProvider in dev).\n*/\n\nexport type InjectionToken<T> = symbol & { __type?: T };\n\nexport function createToken<T = unknown>(desc: string): InjectionToken<T> {\n  return Symbol(desc) as InjectionToken<T>;\n}\n\nexport class DIContainer {\n  private registry = new Map<InjectionToken<any>, any>();\n\n  register<T>(token: InjectionToken<T>, impl: T): void {\n    this.registry.set(token, impl);\n  }\n\n  resolve<T>(token: InjectionToken<T>): T {\n    if (!this.registry.has(token)) {\n      throw new Error(`DI: no implementation registered for token ${String(token)}`);\n    }\n    return this.registry.get(token) as T;\n  }\n\n  has(token: InjectionToken<any>): boolean {\n    return this.registry.has(token);\n  }\n\n  // convenience: registerIfAbsent\n  registerIfAbsent<T>(token: InjectionToken<T>, impl: T): void {\n    if (!this.has(token)) this.register(token, impl);\n  }\n\n  clear() {\n    this.registry.clear();\n  }\n}\n\nexport const defaultContainer = new DIContainer();\n\nexport const register = <T>(token: InjectionToken<T>, impl: T) => defaultContainer.register(token, impl);\nexport const resolve = <T>(token: InjectionToken<T>) => defaultContainer.resolve(token);\n\n/* Predefined tokens used by core providers and services. Implementations should follow the implied shape documented below. */\n\nexport const ApiClientToken = createToken<{ fetch: (input: RequestInfo, init?: RequestInit) => Promise<Response> }>('ApiClient');\nexport const AuthServiceToken = createToken<{\n  login: (email: string, password: string) => Promise<{ userId: string; token?: string }>; \n  logout: () => Promise<void>;\n  getCurrentUser: () => Promise<unknown | null>;\n}>('AuthService');\n\nexport const StorageServiceToken = createToken<{\n  getItem<T = unknown>(key: string): Promise<T | null> | (T | null);\n  setItem<T = unknown>(key: string, value: T): Promise<void> | void;\n  removeItem(key: string): Promise<void> | void;\n}>('StorageService');\n\nexport const SocketServiceToken = createToken<{\n  connect: () => void;\n  disconnect: () => void;\n  subscribe: (topic: string, handler: (payload: unknown) => void) => () => void;\n  send?: (topic: string, payload: unknown) => void;\n}>('SocketService');\n\n/* Example registration in bootstrap (App main):\n\nimport { register } from '@/core/di';\nimport { ApiClientToken } from '@/core/di';\n\nregister(ApiClientToken, { fetch: window.fetch.bind(window) });\n\n// In tests or mock provider override:\nregister(ApiClientToken, mockApiClient);\n\n*/"
    },
    {
      "id": "core-events",
      "file_path": "src/core/events.ts",
      "description": "Lightweight typed event bus for decoupled components (subscribe/publish). Used for cross-cutting events like 'auth:logout', 'toast:show', 'ws:update'.",
      "dependencies": [
        "src/core/contracts.ts"
      ],
      "exports": [
        "EventBus class instance",
        "on, off, emit helpers"
      ],
      "priority": 1,
      "purpose": "Typed lightweight event bus for decoupled communication between providers, components and services. Supports synchronous and asynchronous handlers and returns an unsubscribe function when registering handlers.",
      "content": "/* src/core/events.ts\n\nA tiny typed event bus used for cross-cutting events like 'auth:logout', 'toast:show', 'ws:update'. Handlers can be sync or async. The EventBus is intentionally minimal and suitable for front-end usage inside browser.\n*/\n\nimport type { ApiError, ExportJob, MetricPoint } from '@/core/contracts';\n\n// Define the event map used across the app. Extend as new events are introduced.\nexport interface AppEventMap {\n  'auth:login': { userId: string };\n  'auth:logout': { userId?: string };\n  'toast:show': { id?: string; level: 'info' | 'success' | 'error' | 'warning'; title?: string; message: string; duration?: number };\n  'ws:metrics:update': { metricKey: string; point: MetricPoint };\n  'ws:alerts:fired': { alertId: string; triggeredAt: string };\n  'export:job:started': { jobId: string };\n  'export:job:updated': { jobId: string; status: ExportJob['status'] };\n  'api:error': { error: ApiError };\n  'route:change': { path: string };\n}\n\nexport type AppEventKey = keyof AppEventMap;\nexport type AppEventHandler<K extends AppEventKey = AppEventKey> = (payload: AppEventMap[K]) => void | Promise<void>;\n\nexport class EventBus {\n  private handlers: Map<string, Set<AppEventHandler<any>>> = new Map();\n\n  on<K extends AppEventKey>(event: K, handler: AppEventHandler<K>): () => void {\n    const key = String(event);\n    const set = this.handlers.get(key) ?? new Set<AppEventHandler<any>>();\n    set.add(handler as AppEventHandler<any>);\n    this.handlers.set(key, set);\n    return () => this.off(event, handler);\n  }\n\n  off<K extends AppEventKey>(event: K, handler?: AppEventHandler<K>): void {\n    const key = String(event);\n    const set = this.handlers.get(key);\n    if (!set) return;\n    if (!handler) {\n      set.clear();\n      this.handlers.delete(key);\n      return;\n    }\n    set.delete(handler as AppEventHandler<any>);\n    if (set.size === 0) this.handlers.delete(key);\n  }\n\n  async emit<K extends AppEventKey>(event: K, payload: AppEventMap[K]): Promise<void> {\n    const key = String(event);\n    const set = this.handlers.get(key);\n    if (!set) return;\n    // call handlers in registration order; await each in sequence to keep predictable ordering\n    for (const handler of Array.from(set)) {\n      try {\n        // handler may be sync or async\n        const res = handler(payload);\n        if (res instanceof Promise) await res;\n      } catch (err) {\n        // swallow by default, optionally emit api:error or log\n        // avoid recursive emit of api:error to prevent loops\n        // eslint-disable-next-line no-console\n        console.error('EventBus handler error for', event, err);\n      }\n    }\n  }\n\n  // convenience: once - register a one-time handler\n  once<K extends AppEventKey>(event: K, handler: AppEventHandler<K>): () => void {\n    const wrapper: AppEventHandler<K> = async (payload) => {\n      try {\n        await handler(payload);\n      } finally {\n        this.off(event, wrapper);\n      }\n    };\n    return this.on(event, wrapper);\n  }\n}\n\n// singleton bus used throughout the application\nexport const eventBus = new EventBus();\n\n// thin helpers to make import sites concise\nexport const on = <K extends AppEventKey>(event: K, handler: AppEventHandler<K>) => eventBus.on(event, handler);\nexport const off = <K extends AppEventKey>(event: K, handler?: AppEventHandler<K>) => eventBus.off(event, handler as AppEventHandler<K> | undefined);\nexport const emit = <K extends AppEventKey>(event: K, payload: AppEventMap[K]) => eventBus.emit(event, payload);\n\n/* Example usage:\n\nimport { on, emit } from '@/core/events';\n\nconst unsub = on('toast:show', payload => console.log('toast', payload));\nemit('toast:show', { level: 'info', message: 'Hello' });\n\n*/"
    },
    {
      "id": "core-hooks-registry",
      "file_path": "src/core/hooks.ts",
      "description": "Extension hook registry for runtime-registered hooks (analytics plugins, custom widgets). Lightweight API to register and retrieve hooks.",
      "dependencies": [
        "src/core/events.ts"
      ],
      "exports": [
        "registerHook, getHook, useRegisteredHook"
      ],
      "priority": 1,
      "purpose": "Registry for runtime extension hooks. Plugins and features can register callbacks for lifecycle events (beforeApiRequest, afterApiResponse, onLogin, onLogout, onRouteChange). Hooks run sequentially and can be async. Hooks receive a typed context object and may mutate it where allowed.",
      "content": "/* src/core/hooks.ts\n\nA lightweight hook registry for extension points. Hooks are organized by HookPoint and are executed in registration order. Useful for plugins, analytics, logging, auth side-effects and api augmentation.\n*/\n\nimport { eventBus } from '@/core/events';\nimport type { ApiError, ApiResult } from '@/core/contracts';\n\nexport type HookPoint =\n  | 'beforeApiRequest'\n  | 'afterApiResponse'\n  | 'onLogin'\n  | 'onLogout'\n  | 'onRouteChange';\n\nexport interface BeforeApiRequestContext {\n  url: string;\n  init: RequestInit;\n  meta?: Record<string, unknown>;\n}\n\nexport interface AfterApiResponseContext<T = unknown> {\n  url: string;\n  response?: Response;\n  result?: ApiResult<T>;\n  error?: ApiError | null;\n  meta?: Record<string, unknown>;\n}\n\nexport interface OnLoginContext {\n  userId: string;\n  user?: Record<string, unknown>;\n}\n\nexport interface OnLogoutContext {\n  userId?: string;\n}\n\nexport interface OnRouteChangeContext {\n  path: string;\n  from?: string;\n  to?: string;\n}\n\nexport type HookContextMap = {\n  beforeApiRequest: BeforeApiRequestContext;\n  afterApiResponse: AfterApiResponseContext;\n  onLogin: OnLoginContext;\n  onLogout: OnLogoutContext;\n  onRouteChange: OnRouteChangeContext;\n};\n\nexport type HookHandler<K extends HookPoint> = (ctx: HookContextMap[K]) => void | Promise<void>;\n\nexport class HookRegistry {\n  private registry: Map<HookPoint, Set<HookHandler<any>>> = new Map();\n\n  register<K extends HookPoint>(point: K, handler: HookHandler<K>): () => void {\n    const set = this.registry.get(point) ?? new Set();\n    set.add(handler as HookHandler<any>);\n    this.registry.set(point, set);\n    return () => this.unregister(point, handler);\n  }\n\n  unregister<K extends HookPoint>(point: K, handler?: HookHandler<K>): void {\n    const set = this.registry.get(point);\n    if (!set) return;\n    if (!handler) {\n      set.clear();\n      this.registry.delete(point);\n      return;\n    }\n    set.delete(handler as HookHandler<any>);\n    if (set.size === 0) this.registry.delete(point);\n  }\n\n  async run<K extends HookPoint>(point: K, ctx: HookContextMap[K]): Promise<void> {\n    const set = this.registry.get(point);\n    if (!set) return;\n    for (const handler of Array.from(set)) {\n      try {\n        const res = handler(ctx);\n        if (res instanceof Promise) await res;\n      } catch (err) {\n        // Hook errors should not break host flow. Fire an event to surface to telemetry if needed.\n        try {\n          // best-effort: emit an api:error type event\n          // @ts-ignore \u2014 payload shape may differ per app\n          eventBus.emit('api:error', { error: { code: 'hook_error', message: String(err) } });\n        } catch {}\n        // eslint-disable-next-line no-console\n        console.warn('HookRegistry handler error on', point, err);\n      }\n    }\n  }\n}\n\nexport const hooks = new HookRegistry();\n\n// convenience helpers\nexport const registerHook = <K extends HookPoint>(point: K, handler: HookHandler<K>) => hooks.register(point, handler);\nexport const runHooks = <K extends HookPoint>(point: K, ctx: HookContextMap[K]) => hooks.run(point, ctx);\n\n/* Standard hook usage examples:\n\nimport { registerHook, runHooks } from '@/core/hooks';\n\n// augment outgoing api requests with a correlation id\nregisterHook('beforeApiRequest', ctx => {\n  ctx.init = ctx.init || {};\n  ctx.init.headers = { ...(ctx.init.headers as Record<string, string>), 'x-correlation-id': 'cid-' + Date.now() };\n});\n\n// in api client, call:\n// await runHooks('beforeApiRequest', { url, init });\n\n*/"
    },
    {
      "id": "core-utils",
      "file_path": "src/core/utils.ts",
      "description": "Common utility helpers used across the app (safeParse, sleep, guard helpers, typed localStorage helpers).",
      "dependencies": [],
      "exports": [
        "safeJsonParse, sleep, invariant, storage helpers"
      ],
      "priority": 1,
      "purpose": "Common utility helpers used across the app: safe JSON parse/stringify, sleep, invariant/assertion helpers and a typed localStorage wrapper. Small, dependency-free helpers intended for broad reuse across providers and features.",
      "content": "/* src/core/utils.ts\n\nGeneral utilities used by many modules. Keep zero runtime dependencies. All functions are small and well-typed.\n*/\n\nexport function safeJsonParse<T = unknown>(input: string | null | undefined, fallback: T | null = null): T | null {\n  if (!input) return fallback;\n  try {\n    return JSON.parse(input) as T;\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.warn('safeJsonParse failed', err);\n    return fallback;\n  }\n}\n\nexport function safeJsonStringify(value: unknown): string | null {\n  try {\n    return JSON.stringify(value);\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.warn('safeJsonStringify failed', err);\n    return null;\n  }\n}\n\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nexport function nowISO(): string {\n  return new Date().toISOString();\n}\n\nexport function invariant(condition: unknown, message?: string): asserts condition {\n  if (!condition) throw new Error(message || 'Invariant failed');\n}\n\n// Typed localStorage helpers with JSON serialization and graceful fallback for SSR or disabled storage\nexport const createStorage = (storage: Storage | null) => ({\n  getItem<T = unknown>(key: string): T | null {\n    if (!storage) return null;\n    const raw = storage.getItem(key);\n    return safeJsonParse<T>(raw, null);\n  },\n  setItem<T = unknown>(key: string, value: T | null): void {\n    if (!storage) return;\n    if (value === null) {\n      storage.removeItem(key);\n      return;\n    }\n    const raw = safeJsonStringify(value);\n    if (raw !== null) storage.setItem(key, raw);\n  },\n  removeItem(key: string) {\n    if (!storage) return;\n    storage.removeItem(key);\n  }\n});\n\nexport const localStorageWrapper = typeof window !== 'undefined' && window.localStorage ? createStorage(window.localStorage) : createStorage(null);\n\n/* Example usage:\n\nimport { localStorageWrapper, sleep } from '@/core/utils';\n\nlocalStorageWrapper.setItem('lastSync', { ts: nowISO() });\nconst last = localStorageWrapper.getItem<{ ts: string }>('lastSync');\n\nawait sleep(200);\n\n*/"
    },
    {
      "id": "i18n-index",
      "file_path": "src/i18n/index.ts",
      "description": "i18n bootstrap using i18next. Loads locales and exports translator hooks and init function. Sets default language and fallback.",
      "dependencies": [
        "src/i18n/locales/en.ts",
        "src/i18n/locales/es.ts"
      ],
      "exports": [
        "i18n instance, t, useTranslation"
      ],
      "priority": 1
    },
    {
      "id": "locale-en",
      "file_path": "src/i18n/locales/en.ts",
      "description": "English translations for the app strings used by UI (dashboard, reports, auth labels, errors).",
      "dependencies": [],
      "exports": [
        "en translation namespace"
      ],
      "priority": 1
    },
    {
      "id": "locale-es",
      "file_path": "src/i18n/locales/es.ts",
      "description": "Spanish translations (partial) - used to demonstrate i18n capability.",
      "dependencies": [],
      "exports": [
        "es translation namespace"
      ],
      "priority": 1
    },
    {
      "id": "mocks-data-dashboards",
      "file_path": "src/mocks/data/sample-dashboards.json",
      "description": "Sample dashboards dataset (layout + widget configs) used in development mode.",
      "dependencies": [],
      "exports": [
        "JSON dataset (import)"
      ],
      "priority": 1
    },
    {
      "id": "mocks-data-metrics",
      "file_path": "src/mocks/data/sample-metrics.json",
      "description": "Sample metrics and time-series JSON used by mock handlers.",
      "dependencies": [],
      "exports": [
        "JSON dataset (import)"
      ],
      "priority": 1
    },
    {
      "id": "mocks-data-reports",
      "file_path": "src/mocks/data/sample-reports.json",
      "description": "Sample reports metadata and rows used by mock report endpoint.",
      "dependencies": [],
      "exports": [
        "JSON dataset (import)"
      ],
      "priority": 1
    },
    {
      "id": "mocks-handler-alerts",
      "file_path": "src/mocks/handlers/alerts.ts",
      "description": "Handler for alerts CRUD endpoints with persisted mock state in memory (for dev).",
      "dependencies": [
        "src/core/contracts.ts"
      ],
      "exports": [
        "alertsHandler"
      ],
      "priority": 1
    },
    {
      "id": "mocks-handler-dashboards",
      "file_path": "src/mocks/handlers/dashboards.ts",
      "description": "Handler for dashboards endpoints using sample dashboards dataset.",
      "dependencies": [
        "src/mocks/data/sample-dashboards.json",
        "src/core/contracts.ts"
      ],
      "exports": [
        "dashboardsHandler"
      ],
      "priority": 1
    },
    {
      "id": "mocks-handler-exports",
      "file_path": "src/mocks/handlers/exports.ts",
      "description": "Handler that simulates export job creation and status polling for /api/analytics/exports.",
      "dependencies": [
        "src/core/contracts.ts"
      ],
      "exports": [
        "exportsHandler"
      ],
      "priority": 1
    },
    {
      "id": "mocks-handler-metrics",
      "file_path": "src/mocks/handlers/metrics.ts",
      "description": "Handler that returns sample metrics and time-series data for /api/analytics/metrics. Uses sample data file and supports query params (range, granularity).",
      "dependencies": [
        "src/mocks/data/sample-metrics.json",
        "src/core/contracts.ts"
      ],
      "exports": [
        "metricsHandler"
      ],
      "priority": 1
    },
    {
      "id": "mocks-handler-predictions",
      "file_path": "src/mocks/handlers/predictions.ts",
      "description": "Handler for /api/analytics/predictions returning predictive series and model metadata.",
      "dependencies": [
        "src/mocks/data/sample-metrics.json",
        "src/core/contracts.ts"
      ],
      "exports": [
        "predictionsHandler"
      ],
      "priority": 1
    },
    {
      "id": "mocks-handler-reports",
      "file_path": "src/mocks/handlers/reports.ts",
      "description": "Handler for /api/analytics/reports returning mock report list and run results.",
      "dependencies": [
        "src/mocks/data/sample-reports.json",
        "src/core/contracts.ts"
      ],
      "exports": [
        "reportsHandler"
      ],
      "priority": 1
    },
    {
      "id": "mocks-websocket",
      "file_path": "src/mocks/websocketMock.ts",
      "description": "Mock WebSocket broadcaster used in dev to emit periodic metric updates and alerts. Exposes subscribe/emit interface compatible with SocketClient.",
      "dependencies": [
        "src/mocks/data/sample-metrics.json"
      ],
      "exports": [
        "createMockWebsocket, startMockTicker"
      ],
      "priority": 1
    },
    {
      "id": "providers-auth",
      "file_path": "src/providers/AuthProvider.tsx",
      "description": "Auth context and hooks handling login/logout, token storage (localStorage in dev), role checks and protected-route helper. Supports mock auth when enable_mock_data is true.",
      "dependencies": [
        "src/core/contracts.ts",
        "src/app/config.ts",
        "src/services/mock/mockServer.ts",
        "src/core/di.ts",
        "src/shared/hooks/useLocalStorage.ts"
      ],
      "exports": [
        "AuthProvider component, useAuth hook, requireRole helper"
      ],
      "priority": 1
    },
    {
      "id": "providers-errorboundary",
      "file_path": "src/providers/ErrorBoundary.tsx",
      "description": "React Error Boundary that logs errors to service and renders fallback UI. Works with Suspense to provide robust error handling.",
      "dependencies": [
        "src/core/events.ts"
      ],
      "exports": [
        "ErrorBoundary component"
      ],
      "priority": 1
    },
    {
      "id": "providers-mockserver",
      "file_path": "src/providers/MockServerProvider.tsx",
      "description": "Sets up MSW or an in-app fetch interceptor in dev mode to return mock responses for listed endpoints. Registers handlers for analytics endpoints and exposes controls to seed/mock data.",
      "dependencies": [
        "src/app/config.ts",
        "src/services/mock/mockServer.ts"
      ],
      "exports": [
        "MockServerProvider component"
      ],
      "priority": 1
    },
    {
      "id": "providers-query",
      "file_path": "src/providers/QueryProvider.tsx",
      "description": "Sets up React Query QueryClient with default options, error handling, and devtools. Exposes QueryClientProvider wrapper component.",
      "dependencies": [
        "src/core/events.ts",
        "src/app/config.ts"
      ],
      "exports": [
        "React component: QueryProvider (wraps children)"
      ],
      "priority": 1
    },
    {
      "id": "providers-theme",
      "file_path": "src/providers/ThemeProvider.tsx",
      "description": "React context provider that uses tokens and theme utilities to manage and persist theme choice (dark/light). Integrates with Tailwind dark class and respects system preference.",
      "dependencies": [
        "src/theme/index.ts",
        "src/shared/hooks/useLocalStorage.ts"
      ],
      "exports": [
        "ThemeProvider component, useTheme hook (re-export)"
      ],
      "priority": 1
    },
    {
      "id": "providers-toast",
      "file_path": "src/providers/ToastProvider.tsx",
      "description": "Global toast/notifications provider. Provides API via context and listens to 'toast:show' events. Accessible by any component to show non-blocking alerts.",
      "dependencies": [
        "src/core/events.ts",
        "src/shared/components/Toast.tsx"
      ],
      "exports": [
        "ToastProvider component, useToast hook"
      ],
      "priority": 1
    },
    {
      "id": "providers-websocket",
      "file_path": "src/providers/WebsocketProvider.tsx",
      "description": "WebSocket provider abstraction. Connects to real WS in prod, and to a mock socket in dev; exposes hooks to subscribe to channels and emits events into React Query or event bus.",
      "dependencies": [
        "src/app/config.ts",
        "src/services/socket/socket.ts",
        "src/core/events.ts"
      ],
      "exports": [
        "WebsocketProvider component, useWebsocket hook (re-export)"
      ],
      "priority": 1
    },
    {
      "id": "services-api-client",
      "file_path": "src/services/api/client.ts",
      "description": "Thin API client built on fetch. Handles base URL from config, JSON parsing, common error wrapping and token injection. Uses DI to allow mock replacement.",
      "dependencies": [
        "src/app/config.ts",
        "src/core/contracts.ts",
        "src/core/di.ts"
      ],
      "exports": [
        "apiFetch helper, createApiClient"
      ],
      "priority": 1
    },
    {
      "id": "services-mock-mockserver",
      "file_path": "src/services/mock/mockServer.ts",
      "description": "Mock server registration: sets up handlers for all listed mock API endpoints in development mode. Seeds mock data and exports a start/stop API. Uses MSW or simple fetch override if MSW unavailable.",
      "dependencies": [
        "src/mocks/handlers/metrics.ts",
        "src/mocks/handlers/reports.ts",
        "src/mocks/handlers/dashboards.ts",
        "src/mocks/handlers/predictions.ts",
        "src/mocks/handlers/alerts.ts",
        "src/mocks/handlers/exports.ts",
        "src/app/config.ts"
      ],
      "exports": [
        "startMockServer, stopMockServer, seedMockData"
      ],
      "priority": 1
    },
    {
      "id": "shared-hooks-uselocalstorage",
      "file_path": "src/shared/hooks/useLocalStorage.ts",
      "description": "Typed localStorage hook with JSON serialization and fallback. Used by ThemeProvider and AuthProvider for persistence (dev mode).",
      "dependencies": [
        "src/core/utils.ts"
      ],
      "exports": [
        "useLocalStorage hook",
        "setItem, getItem helpers"
      ],
      "priority": 1
    },
    {
      "id": "shared-icons-index",
      "file_path": "src/shared/icons/index.ts",
      "description": "Exports a set of SVG icon React components used across the app (SearchIcon, BellIcon, ChartIcon, ExportIcon, UserIcon).",
      "dependencies": [],
      "exports": [
        "named icon components"
      ],
      "priority": 1
    },
    {
      "id": "styles-tailwind",
      "file_path": "src/styles/tailwind.css",
      "description": "Tailwind base imports and custom utilities. Contains dark mode roots and design token CSS variables derived from tokens.",
      "dependencies": [
        "src/theme/tokens.ts"
      ],
      "exports": [
        "global tailwind CSS (import only)"
      ],
      "priority": 1
    },
    {
      "id": "theme-animations",
      "file_path": "src/theme/animations.ts",
      "description": "Animation presets and Framer Motion variants used across app for transitions, micro-interactions, and chart animations.",
      "dependencies": [],
      "exports": [
        "pageTransition, fadeIn, subtlePop variants"
      ],
      "priority": 1
    },
    {
      "id": "theme-index",
      "file_path": "src/theme/index.ts",
      "description": "Theme utilities and runtime theme provider values. Provides functions to read system preference, toggle dark mode and map tokens to className values. Exposes ThemeContext types.",
      "dependencies": [
        "src/theme/tokens.ts"
      ],
      "exports": [
        "ThemeContext, useTheme, theme classes and helpers"
      ],
      "priority": 1
    },
    {
      "id": "theme-tokens",
      "file_path": "src/theme/tokens.ts",
      "description": "Design tokens: color palette (light/dark), spacing, radii, elevations, font sizes, breakpoints. Used to generate Tailwind theme and to share with CSS-in-JS if needed.",
      "dependencies": [],
      "exports": [
        "tokens object (colors, spacing, typography, radii, shadows)"
      ],
      "priority": 1
    },
    {
      "id": "a11y-focusmanager",
      "file_path": "src/a11y/focusManager.ts",
      "description": "Utilities for focus trapping, restoring focus and programmatic focus management used by modals and overlays.",
      "dependencies": [],
      "exports": [
        "trapFocus, restoreFocus helpers"
      ],
      "priority": 2
    },
    {
      "id": "features-alerts-components-alertconfigpanel",
      "file_path": "src/features/alerts/components/AlertConfigPanel.tsx",
      "description": "Panel to create or edit alert rules: condition builder, threshold inputs, notification targets and test trigger.",
      "dependencies": [
        "src/shared/components/Input.tsx",
        "src/shared/components/Select.tsx",
        "src/shared/hooks/useToast.ts",
        "src/features/alerts/hooks/useAlerts.ts"
      ],
      "exports": [
        "AlertConfigPanel component"
      ],
      "priority": 2
    },
    {
      "id": "features-alerts-components-alertlist",
      "file_path": "src/features/alerts/components/AlertList.tsx",
      "description": "List of configured alerts with quick enable/disable toggles and test action. Accessible keyboard list.",
      "dependencies": [
        "src/features/alerts/hooks/useAlerts.ts",
        "src/shared/components/Switch.tsx",
        "src/shared/components/Table.tsx"
      ],
      "exports": [
        "AlertList component"
      ],
      "priority": 2
    },
    {
      "id": "features-alerts-hooks-usealerts",
      "file_path": "src/features/alerts/hooks/useAlerts.ts",
      "description": "React Query hooks for listing alerts, subscribing to alert triggers and updating alert config.",
      "dependencies": [
        "src/services/api/alerts.ts",
        "src/providers/QueryProvider.tsx"
      ],
      "exports": [
        "useAlertsQuery, useCreateAlertMutation, useUpdateAlertMutation"
      ],
      "priority": 2
    },
    {
      "id": "features-builder-components-reportbuilderform",
      "file_path": "src/features/builder/components/ReportBuilderForm.tsx",
      "description": "Primary form for creating and editing custom reports: fields palette, grouping, aggregations and preview pane.",
      "dependencies": [
        "src/features/builder/hooks/useReportBuilder.ts",
        "src/shared/components/Button.tsx",
        "src/shared/components/Input.tsx",
        "src/shared/components/Select.tsx"
      ],
      "exports": [
        "ReportBuilderForm component"
      ],
      "priority": 2
    },
    {
      "id": "features-builder-hooks-usereportbuilder",
      "file_path": "src/features/builder/hooks/useReportBuilder.ts",
      "description": "Stateful hook used by the report builder to manage canvas state, drag/drop fields and preview queries. Saves drafts to localStorage in dev.",
      "dependencies": [
        "src/shared/hooks/useLocalStorage.ts",
        "src/core/contracts.ts"
      ],
      "exports": [
        "useReportBuilder hook"
      ],
      "priority": 2
    },
    {
      "id": "features-dashboard-components-drilldownmodal",
      "file_path": "src/features/dashboard/components/DrillDownModal.tsx",
      "description": "Modal that shows detailed drill-down view for a metric including a larger chart and row-level table. Integrates with Modal primitive and accessible focus trap.",
      "dependencies": [
        "src/shared/components/Modal.tsx",
        "src/features/dashboard/hooks/useMetrics.ts",
        "src/shared/components/Table.tsx"
      ],
      "exports": [
        "DrillDownModal component"
      ],
      "priority": 2
    },
    {
      "id": "features-dashboard-components-kiwidget",
      "file_path": "src/features/dashboard/components/KPIWidget.tsx",
      "description": "Composable KPI widget with threshold indicators, small trend sparkline and optional drill-down trigger.",
      "dependencies": [
        "src/shared/components/Card.tsx",
        "src/shared/utils/formatters.ts",
        "src/shared/components/IconButton.tsx",
        "src/core/events.ts"
      ],
      "exports": [
        "KPIWidget component"
      ],
      "priority": 2
    },
    {
      "id": "features-dashboard-components-metriccard",
      "file_path": "src/features/dashboard/components/MetricCard.tsx",
      "description": "Presentational KPI/metric card used in dashboards with animation transitions, value formatting and inline sparkline chart.",
      "dependencies": [
        "src/shared/components/Card.tsx",
        "src/shared/components/Skeleton.tsx",
        "src/shared/utils/formatters.ts",
        "src/features/dashboard/hooks/useMetrics.ts",
        "src/shared/components/Spinner.tsx"
      ],
      "exports": [
        "MetricCard component"
      ],
      "priority": 2
    },
    {
      "id": "features-dashboard-components-realtimeticker",
      "file_path": "src/features/dashboard/components/RealTimeTicker.tsx",
      "description": "Small component that subscribes to websocket topic for real-time metric updates and shows animated transitions for incoming values.",
      "dependencies": [
        "src/shared/components/Spinner.tsx",
        "src/shared/components/Skeleton.tsx",
        "src/shared/hooks/useWebsocket.ts",
        "src/core/events.ts"
      ],
      "exports": [
        "RealTimeTicker component"
      ],
      "priority": 2
    },
    {
      "id": "features-dashboard-hooks-usemetrics",
      "file_path": "src/features/dashboard/hooks/useMetrics.ts",
      "description": "React Query hooks to fetch metrics and timeseries data. Exposes useMetricsQuery and useMetricSeriesQuery with built-in caching, staleTime and error handling.",
      "dependencies": [
        "src/services/api/analytics.ts",
        "src/providers/QueryProvider.tsx",
        "src/core/contracts.ts"
      ],
      "exports": [
        "useMetricsQuery, useMetricSeriesQuery"
      ],
      "priority": 2
    },
    {
      "id": "features-exports-components-exportform",
      "file_path": "src/features/exports/components/ExportForm.tsx",
      "description": "Form to configure export options (format, fields, schedule) and start an export job. Provides job status feedback.",
      "dependencies": [
        "src/shared/components/Select.tsx",
        "src/shared/components/Button.tsx",
        "src/features/exports/hooks/useExports.ts"
      ],
      "exports": [
        "ExportForm component"
      ],
      "priority": 2
    },
    {
      "id": "features-exports-hooks-useexports",
      "file_path": "src/features/exports/hooks/useExports.ts",
      "description": "Hooks to initiate exports, poll export job status and download completed artifacts.",
      "dependencies": [
        "src/services/api/exports.ts",
        "src/providers/QueryProvider.tsx",
        "src/shared/hooks/useToast.ts"
      ],
      "exports": [
        "useExportJob hook"
      ],
      "priority": 2
    },
    {
      "id": "features-predictions-components-predictivechart",
      "file_path": "src/features/predictions/components/PredictiveChart.tsx",
      "description": "Chart component wrapping chosen chart library. Displays historical + predicted series and confidence intervals. Accessible SVG with title/desc for screen readers.",
      "dependencies": [
        "src/shared/utils/formatters.ts",
        "src/theme/animations.ts"
      ],
      "exports": [
        "PredictiveChart component"
      ],
      "priority": 2
    },
    {
      "id": "features-predictions-hooks-usepredictions",
      "file_path": "src/features/predictions/hooks/usePredictions.ts",
      "description": "Hooks for fetching predictive analytics data and model metadata. Provides caching and background refetch behavior.",
      "dependencies": [
        "src/services/api/predictions.ts",
        "src/providers/QueryProvider.tsx"
      ],
      "exports": [
        "usePredictionsQuery"
      ],
      "priority": 2
    },
    {
      "id": "features-reports-components-reportfilters",
      "file_path": "src/features/reports/components/ReportFilters.tsx",
      "description": "Form used to filter reports (date range, owner, tags) with validation and error display. Uses React Hook Form (note: the actual RHF dependency exists in package but not listed here as a file).",
      "dependencies": [
        "src/shared/components/DateRangePicker.tsx",
        "src/shared/components/Select.tsx",
        "src/shared/hooks/useDebounce.ts"
      ],
      "exports": [
        "ReportFilters component"
      ],
      "priority": 2
    },
    {
      "id": "features-reports-components-reporttable",
      "file_path": "src/features/reports/components/ReportTable.tsx",
      "description": "Report listing table with server-side pagination, column filters and export action per row.",
      "dependencies": [
        "src/shared/components/Table.tsx",
        "src/shared/components/DataExportButton.tsx",
        "src/features/reports/hooks/useReports.ts"
      ],
      "exports": [
        "ReportTable component"
      ],
      "priority": 2
    },
    {
      "id": "features-reports-hooks-usereports",
      "file_path": "src/features/reports/hooks/useReports.ts",
      "description": "React Query hooks to fetch and run reports, with pagination and filter support and optimistic updates for report bookmarking.",
      "dependencies": [
        "src/services/api/reports.ts",
        "src/providers/QueryProvider.tsx"
      ],
      "exports": [
        "useReportsQuery, useRunReportMutation"
      ],
      "priority": 2
    },
    {
      "id": "services-api-alerts",
      "file_path": "src/services/api/alerts.ts",
      "description": "Alert management endpoints: list alerts, create/update alerts, test alert triggers.",
      "dependencies": [
        "src/services/api/client.ts",
        "src/core/contracts.ts"
      ],
      "exports": [
        "listAlerts, createAlert, updateAlert, deleteAlert"
      ],
      "priority": 2
    },
    {
      "id": "services-api-analytics",
      "file_path": "src/services/api/analytics.ts",
      "description": "Analytics-specific API wrappers: fetch metrics, time series, aggregations. Returns typed responses using contracts.",
      "dependencies": [
        "src/services/api/client.ts",
        "src/core/contracts.ts"
      ],
      "exports": [
        "fetchMetrics, fetchMetricSeries, fetchKpis"
      ],
      "priority": 2
    },
    {
      "id": "services-api-dashboards",
      "file_path": "src/services/api/dashboards.ts",
      "description": "Dashboard CRUD and layout APIs. Fetch dashboards and their widget configurations.",
      "dependencies": [
        "src/services/api/client.ts",
        "src/core/contracts.ts"
      ],
      "exports": [
        "listDashboards, getDashboardById"
      ],
      "priority": 2
    },
    {
      "id": "services-api-exports",
      "file_path": "src/services/api/exports.ts",
      "description": "Export endpoints for scheduling/export jobs and retrieving export artifacts.",
      "dependencies": [
        "src/services/api/client.ts",
        "src/core/contracts.ts"
      ],
      "exports": [
        "startExportJob, getExportStatus, downloadExport"
      ],
      "priority": 2
    },
    {
      "id": "services-api-predictions",
      "file_path": "src/services/api/predictions.ts",
      "description": "Prediction/predictive-analytics endpoints wrappers (fetch predictions, model metadata).",
      "dependencies": [
        "src/services/api/client.ts",
        "src/core/contracts.ts"
      ],
      "exports": [
        "fetchPredictions, getModelInfo"
      ],
      "priority": 2
    },
    {
      "id": "services-api-reports",
      "file_path": "src/services/api/reports.ts",
      "description": "Report-related API wrappers: list reports, create report, run report, download report snapshot.",
      "dependencies": [
        "src/services/api/client.ts",
        "src/core/contracts.ts"
      ],
      "exports": [
        "listReports, createReport, runReport"
      ],
      "priority": 2
    },
    {
      "id": "services-socket",
      "file_path": "src/services/socket/socket.ts",
      "description": "WebSocket wrapper implementing reconnection, backoff, topic subscription and event dispatch. Provides an interface compatible with mock socket implementation.",
      "dependencies": [
        "src/app/config.ts",
        "src/core/events.ts"
      ],
      "exports": [
        "SocketClient class, createSocketClient helper"
      ],
      "priority": 2
    },
    {
      "id": "shared-components-button",
      "file_path": "src/shared/components/Button.tsx",
      "description": "Accessible button primitive with variants (primary, secondary, ghost). Uses Tailwind classes, supports icon slot, loading state and proper ARIA attributes.",
      "dependencies": [
        "src/shared/icons/index.ts",
        "src/theme/index.ts"
      ],
      "exports": [
        "Button component (props: variant, size, loading, iconLeft, iconRight)"
      ],
      "priority": 2
    },
    {
      "id": "shared-components-card",
      "file_path": "src/shared/components/Card.tsx",
      "description": "Card primitive with glassmorphism styles (backdrop blur, gradient) and elevation tokens. Used for KPI cards and panels.",
      "dependencies": [
        "src/theme/tokens.ts"
      ],
      "exports": [
        "Card component"
      ],
      "priority": 2
    },
    {
      "id": "shared-components-dataexportbutton",
      "file_path": "src/shared/components/DataExportButton.tsx",
      "description": "Button to export current dataset to CSV/Excel. Integrates with csvExport helper and shows success/failure toasts.",
      "dependencies": [
        "src/shared/utils/csvExport.ts",
        "src/core/events.ts",
        "src/shared/components/Button.tsx"
      ],
      "exports": [
        "DataExportButton component"
      ],
      "priority": 2
    },
    {
      "id": "shared-components-daterangepicker",
      "file_path": "src/shared/components/DateRangePicker.tsx",
      "description": "Date range picker control used by filters. Uses accessible ARIA patterns and supports quick ranges.",
      "dependencies": [
        "src/shared/components/Input.tsx",
        "src/shared/utils/date.ts"
      ],
      "exports": [
        "DateRangePicker component"
      ],
      "priority": 2
    },
    {
      "id": "shared-components-iconbutton",
      "file_path": "src/shared/components/IconButton.tsx",
      "description": "Round icon button with focus rings and keyboard accessible behavior.",
      "dependencies": [
        "src/shared/icons/index.ts"
      ],
      "exports": [
        "IconButton component"
      ],
      "priority": 2
    },
    {
      "id": "shared-components-input",
      "file_path": "src/shared/components/Input.tsx",
      "description": "Accessible text input with label, error message and keyboard support. Integrates with React Hook Form via forwarding ref.",
      "dependencies": [
        "src/theme/index.ts"
      ],
      "exports": [
        "Input component (forwardRef)"
      ],
      "priority": 2
    },
    {
      "id": "shared-components-modal",
      "file_path": "src/shared/components/Modal.tsx",
      "description": "Accessible modal dialog with backdrop blur, focus trap, keyboard close and portal rendering.",
      "dependencies": [
        "src/shared/components/Button.tsx",
        "src/a11y/focusManager.ts"
      ],
      "exports": [
        "Modal component, useModal hook"
      ],
      "priority": 2
    },
    {
      "id": "shared-components-select",
      "file_path": "src/shared/components/Select.tsx",
      "description": "Accessible select control with keyboard navigation and ARIA attributes.",
      "dependencies": [
        "src/shared/components/Input.tsx"
      ],
      "exports": [
        "Select component"
      ],
      "priority": 2
    },
    {
      "id": "shared-components-select-checkbox",
      "file_path": "src/shared/components/Checkbox.tsx",
      "description": "Accessible checkbox used in forms and filter UIs.",
      "dependencies": [
        "src/theme/index.ts"
      ],
      "exports": [
        "Checkbox component"
      ],
      "priority": 2
    },
    {
      "id": "shared-components-skeleton",
      "file_path": "src/shared/components/Skeleton.tsx",
      "description": "Skeleton UI primitive for loading placeholders with accessible ARIA attributes.",
      "dependencies": [
        "src/theme/animations.ts"
      ],
      "exports": [
        "Skeleton component"
      ],
      "priority": 2
    },
    {
      "id": "shared-components-spinner",
      "file_path": "src/shared/components/Spinner.tsx",
      "description": "Small animated spinner used in loading states.",
      "dependencies": [
        "src/theme/animations.ts"
      ],
      "exports": [
        "Spinner component"
      ],
      "priority": 2
    },
    {
      "id": "shared-components-switch",
      "file_path": "src/shared/components/Switch.tsx",
      "description": "Accessible switch/toggle component used for enabling/disabling alerts or widgets.",
      "dependencies": [
        "src/theme/index.ts"
      ],
      "exports": [
        "Switch component"
      ],
      "priority": 2
    },
    {
      "id": "shared-components-table",
      "file_path": "src/shared/components/Table.tsx",
      "description": "Accessible data table with keyboard navigation, sortable columns and virtualized rows hook support placeholder.",
      "dependencies": [
        "src/shared/components/Skeleton.tsx",
        "src/shared/hooks/useDebounce.ts"
      ],
      "exports": [
        "Table component"
      ],
      "priority": 2
    },
    {
      "id": "shared-components-toast",
      "file_path": "src/shared/components/Toast.tsx",
      "description": "Toast notification item used by ToastProvider. Handles enter/exit animation and ARIA-live regions.",
      "dependencies": [
        "src/theme/animations.ts"
      ],
      "exports": [
        "Toast component"
      ],
      "priority": 2
    },
    {
      "id": "shared-components-tooltip",
      "file_path": "src/shared/components/Tooltip.tsx",
      "description": "Tooltip primitive with accessible ARIA attributes and keyboard support.",
      "dependencies": [
        "src/theme/animations.ts"
      ],
      "exports": [
        "Tooltip component"
      ],
      "priority": 2
    },
    {
      "id": "shared-hooks-useauth",
      "file_path": "src/shared/hooks/useAuth.ts",
      "description": "Convenience hook that uses AuthProvider context for login/logout and role discovery. Re-exports auth state and helpers.",
      "dependencies": [
        "src/providers/AuthProvider.tsx"
      ],
      "exports": [
        "useAuth hook"
      ],
      "priority": 2
    },
    {
      "id": "shared-hooks-usedebounce",
      "file_path": "src/shared/hooks/useDebounce.ts",
      "description": "Common debounce hook for search inputs and filter updates.",
      "dependencies": [],
      "exports": [
        "useDebounce hook"
      ],
      "priority": 2
    },
    {
      "id": "shared-hooks-usekeydown",
      "file_path": "src/shared/hooks/useKeyboardNav.ts",
      "description": "Hook for keyboard navigation management and accessible list navigation (ArrowUp/Down, Enter, Escape).",
      "dependencies": [
        "src/a11y/focusManager.ts"
      ],
      "exports": [
        "useKeyboardNav hook"
      ],
      "priority": 2
    },
    {
      "id": "shared-hooks-usetoast",
      "file_path": "src/shared/hooks/useToast.ts",
      "description": "Hook to show toast notifications via events or context API.",
      "dependencies": [
        "src/providers/ToastProvider.tsx",
        "src/core/events.ts"
      ],
      "exports": [
        "useToast hook (show, success, error helpers)"
      ],
      "priority": 2
    },
    {
      "id": "shared-hooks-usewebsocket",
      "file_path": "src/shared/hooks/useWebsocket.ts",
      "description": "Hook to subscribe to websocket topics and receive streaming updates; integrates with provider.",
      "dependencies": [
        "src/providers/WebsocketProvider.tsx",
        "src/core/events.ts"
      ],
      "exports": [
        "useWebsocket hook"
      ],
      "priority": 2
    },
    {
      "id": "shared-layouts-authlayout",
      "file_path": "src/shared/layouts/AuthLayout.tsx",
      "description": "Layout used for authentication pages (Login). Centered card, responsive and accessible.",
      "dependencies": [
        "src/shared/components/Card.tsx"
      ],
      "exports": [
        "AuthLayout component"
      ],
      "priority": 2
    },
    {
      "id": "shared-layouts-dashboardlayout",
      "file_path": "src/shared/layouts/DashboardLayout.tsx",
      "description": "Specialized layout for dashboard pages offering widget grid, widget editor controls, and drill-down handling.",
      "dependencies": [
        "src/shared/layouts/MainLayout.tsx",
        "src/features/dashboard/components/MetricCard.tsx",
        "src/features/dashboard/components/KPIWidget.tsx"
      ],
      "exports": [
        "DashboardLayout component"
      ],
      "priority": 2
    },
    {
      "id": "shared-layouts-mainlayout",
      "file_path": "src/shared/layouts/MainLayout.tsx",
      "description": "Main application layout with sidebar, topbar, content area and responsive collapse behavior. Handles keyboard shortcuts and focus management.",
      "dependencies": [
        "src/shared/components/IconButton.tsx",
        "src/shared/icons/index.ts",
        "src/state/ui.ts",
        "src/providers/ThemeProvider.tsx"
      ],
      "exports": [
        "MainLayout component"
      ],
      "priority": 2
    },
    {
      "id": "shared-utils-csvexport",
      "file_path": "src/shared/utils/csvExport.ts",
      "description": "Utility to convert arrays of records to CSV/Excel blobs and trigger download in browser.",
      "dependencies": [],
      "exports": [
        "exportToCsv, exportToXlsx helpers"
      ],
      "priority": 2
    },
    {
      "id": "shared-utils-date",
      "file_path": "src/shared/utils/date.ts",
      "description": "Date utilities and formatting helpers used by charts, filters and tables. Uses Intl.DateTimeFormat and UTC-safe helpers.",
      "dependencies": [],
      "exports": [
        "formatDate, parseISO, startOfDay helpers"
      ],
      "priority": 2
    },
    {
      "id": "shared-utils-formatters",
      "file_path": "src/shared/utils/formatters.ts",
      "description": "Number and currency formatters, compact notation and percentage helpers for KPI display.",
      "dependencies": [],
      "exports": [
        "formatNumber, formatCurrency, formatPercentage"
      ],
      "priority": 2
    },
    {
      "id": "state-ui",
      "file_path": "src/state/ui.ts",
      "description": "Zustand store for UI-level state such as sidebar collapsed, activeDashboardId, filter presets and ephemeral drill-down selection.",
      "dependencies": [
        "src/core/contracts.ts",
        "src/shared/hooks/useLocalStorage.ts"
      ],
      "exports": [
        "useUiStore hook"
      ],
      "priority": 2
    },
    {
      "id": "utils-errorresponses",
      "file_path": "src/utils/errorResponses.ts",
      "description": "Standardized error-response mapping for UI: maps ApiError to user-friendly messages and i18n keys.",
      "dependencies": [
        "src/core/contracts.ts",
        "src/i18n/index.ts"
      ],
      "exports": [
        "getErrorMessage helper"
      ],
      "priority": 2
    },
    {
      "id": "app-app",
      "file_path": "src/app/App.tsx",
      "description": "Root app component. Composes providers (QueryProvider, AuthProvider, ThemeProvider, MockServerProvider, WebsocketProvider, ToastProvider, ErrorBoundary) and renders Routes inside Suspense with fallback skeletons.",
      "dependencies": [
        "src/providers/QueryProvider.tsx",
        "src/providers/AuthProvider.tsx",
        "src/providers/ThemeProvider.tsx",
        "src/providers/MockServerProvider.tsx",
        "src/providers/WebsocketProvider.tsx",
        "src/providers/ToastProvider.tsx",
        "src/providers/ErrorBoundary.tsx",
        "src/routes/index.tsx",
        "src/styles/tailwind.css"
      ],
      "exports": [
        "App component (default export)"
      ],
      "priority": 3
    },
    {
      "id": "app-main",
      "file_path": "src/app/main.tsx",
      "description": "Application bootstrap entry that mounts React into DOM. Invokes i18n init and conditionally registers service worker. Reads import.meta.env via config.",
      "dependencies": [
        "src/app/App.tsx",
        "src/i18n/index.ts",
        "src/app/config.ts"
      ],
      "exports": [
        "mount function (default exported by main file - typical entry)"
      ],
      "priority": 3
    },
    {
      "id": "features-alerts-page",
      "file_path": "src/features/alerts/AlertsPage.tsx",
      "description": "Alerts management page where users configure alert rules, view firing alerts and test triggers. Uses AlertList and AlertConfigPanel.",
      "dependencies": [
        "src/shared/layouts/MainLayout.tsx",
        "src/features/alerts/components/AlertList.tsx",
        "src/features/alerts/components/AlertConfigPanel.tsx"
      ],
      "exports": [
        "AlertsPage component"
      ],
      "priority": 3
    },
    {
      "id": "features-builder-page",
      "file_path": "src/features/builder/BuilderPage.tsx",
      "description": "Custom report builder page with canvas, field palette and save/run controls. Integrates useReportBuilder for state management and draft persistence.",
      "dependencies": [
        "src/shared/layouts/MainLayout.tsx",
        "src/features/builder/components/ReportBuilderForm.tsx"
      ],
      "exports": [
        "BuilderPage component"
      ],
      "priority": 3
    },
    {
      "id": "features-dashboard-page",
      "file_path": "src/features/dashboard/DashboardPage.tsx",
      "description": "High-level dashboard page composed of KPI widgets, charts and real-time ticker. Uses DashboardLayout and React Query hooks to load data. Supports drill-down via DrillDownModal.",
      "dependencies": [
        "src/shared/layouts/DashboardLayout.tsx",
        "src/features/dashboard/hooks/useMetrics.ts",
        "src/features/dashboard/components/MetricCard.tsx",
        "src/features/dashboard/components/DrillDownModal.tsx",
        "src/shared/hooks/useWebsocket.ts"
      ],
      "exports": [
        "DashboardPage component"
      ],
      "priority": 3
    },
    {
      "id": "features-exports-page",
      "file_path": "src/features/exports/ExportsPage.tsx",
      "description": "Exports page to create and monitor export jobs; shows status and links to download artifacts.",
      "dependencies": [
        "src/shared/layouts/MainLayout.tsx",
        "src/features/exports/components/ExportForm.tsx",
        "src/features/exports/hooks/useExports.ts"
      ],
      "exports": [
        "ExportsPage component"
      ],
      "priority": 3
    },
    {
      "id": "features-predictions-page",
      "file_path": "src/features/predictions/PredictionsPage.tsx",
      "description": "Page showcasing predictive charts and model metadata with controls for horizon and scenario selection.",
      "dependencies": [
        "src/shared/layouts/MainLayout.tsx",
        "src/features/predictions/components/PredictiveChart.tsx",
        "src/features/predictions/hooks/usePredictions.ts"
      ],
      "exports": [
        "PredictionsPage component"
      ],
      "priority": 3
    },
    {
      "id": "features-reports-page",
      "file_path": "src/features/reports/ReportsPage.tsx",
      "description": "Reports listing page that shows available reports with filters and actions to run/export. Uses ReportTable and ReportFilters.",
      "dependencies": [
        "src/shared/layouts/MainLayout.tsx",
        "src/features/reports/components/ReportTable.tsx",
        "src/features/reports/components/ReportFilters.tsx"
      ],
      "exports": [
        "ReportsPage component"
      ],
      "priority": 3
    },
    {
      "id": "pages-login",
      "file_path": "src/pages/LoginPage.tsx",
      "description": "Login page with mock auth support in dev, form validation, error handling and accessibility. Uses AuthProvider to perform login and persists user in localStorage when mock is enabled.",
      "dependencies": [
        "src/providers/AuthProvider.tsx",
        "src/shared/layouts/AuthLayout.tsx",
        "src/shared/components/Input.tsx",
        "src/shared/components/Button.tsx",
        "src/shared/hooks/useToast.ts",
        "react-hook-form"
      ],
      "exports": [
        "LoginPage component"
      ],
      "priority": 3
    },
    {
      "id": "pages-notfound",
      "file_path": "src/pages/NotFoundPage.tsx",
      "description": "404 page with a call-to-action to navigate back to dashboard or login.",
      "dependencies": [
        "src/shared/components/Button.tsx"
      ],
      "exports": [
        "NotFoundPage component"
      ],
      "priority": 3
    },
    {
      "id": "routes-index",
      "file_path": "src/routes/index.tsx",
      "description": "Application route definitions using React Router v6. Declares public routes (login), protected routes (dashboard, reports, builder, alerts, exports, predictions) and a 404 page. Integrates Suspense boundaries for data-loading routes.",
      "dependencies": [
        "react-router-dom",
        "src/pages/LoginPage.tsx",
        "src/pages/NotFoundPage.tsx",
        "src/features/dashboard/DashboardPage.tsx",
        "src/features/reports/ReportsPage.tsx",
        "src/features/builder/BuilderPage.tsx",
        "src/features/alerts/AlertsPage.tsx",
        "src/features/exports/ExportsPage.tsx",
        "src/features/predictions/PredictionsPage.tsx",
        "src/providers/ErrorBoundary.tsx"
      ],
      "exports": [
        "Routes component (AppRoutes)"
      ],
      "priority": 3
    },
    {
      "id": "routes-indexpage",
      "file_path": "src/pages/IndexPage.tsx",
      "description": "Optional landing or redirect page; small wrapper to redirect to /dashboard when authenticated.",
      "dependencies": [
        "react-router-dom",
        "src/shared/hooks/useAuth.ts"
      ],
      "exports": [
        "IndexPage component"
      ],
      "priority": 3
    },
    {
      "id": "routes-protectedroute",
      "file_path": "src/routes/ProtectedRoute.tsx",
      "description": "Route wrapper that ensures user is authenticated and optionally enforces role-based access. Redirects to login for unauthorized users.",
      "dependencies": [
        "src/shared/hooks/useAuth.ts",
        "react-router-dom",
        "src/pages/LoginPage.tsx"
      ],
      "exports": [
        "ProtectedRoute component"
      ],
      "priority": 3
    }
  ],
  "file_paths": [
    "src/app/config.ts",
    "src/core/contracts.ts",
    "src/core/di.ts",
    "src/core/events.ts",
    "src/core/hooks.ts",
    "src/core/utils.ts",
    "src/i18n/index.ts",
    "src/i18n/locales/en.ts",
    "src/i18n/locales/es.ts",
    "src/mocks/data/sample-dashboards.json",
    "src/mocks/data/sample-metrics.json",
    "src/mocks/data/sample-reports.json",
    "src/mocks/handlers/alerts.ts",
    "src/mocks/handlers/dashboards.ts",
    "src/mocks/handlers/exports.ts",
    "src/mocks/handlers/metrics.ts",
    "src/mocks/handlers/predictions.ts",
    "src/mocks/handlers/reports.ts",
    "src/mocks/websocketMock.ts",
    "src/providers/AuthProvider.tsx",
    "src/providers/ErrorBoundary.tsx",
    "src/providers/MockServerProvider.tsx",
    "src/providers/QueryProvider.tsx",
    "src/providers/ThemeProvider.tsx",
    "src/providers/ToastProvider.tsx",
    "src/providers/WebsocketProvider.tsx",
    "src/services/api/client.ts",
    "src/services/mock/mockServer.ts",
    "src/shared/hooks/useLocalStorage.ts",
    "src/shared/icons/index.ts",
    "src/styles/tailwind.css",
    "src/theme/animations.ts",
    "src/theme/index.ts",
    "src/theme/tokens.ts",
    "src/a11y/focusManager.ts",
    "src/features/alerts/components/AlertConfigPanel.tsx",
    "src/features/alerts/components/AlertList.tsx",
    "src/features/alerts/hooks/useAlerts.ts",
    "src/features/builder/components/ReportBuilderForm.tsx",
    "src/features/builder/hooks/useReportBuilder.ts",
    "src/features/dashboard/components/DrillDownModal.tsx",
    "src/features/dashboard/components/KPIWidget.tsx",
    "src/features/dashboard/components/MetricCard.tsx",
    "src/features/dashboard/components/RealTimeTicker.tsx",
    "src/features/dashboard/hooks/useMetrics.ts",
    "src/features/exports/components/ExportForm.tsx",
    "src/features/exports/hooks/useExports.ts",
    "src/features/predictions/components/PredictiveChart.tsx",
    "src/features/predictions/hooks/usePredictions.ts",
    "src/features/reports/components/ReportFilters.tsx",
    "src/features/reports/components/ReportTable.tsx",
    "src/features/reports/hooks/useReports.ts",
    "src/services/api/alerts.ts",
    "src/services/api/analytics.ts",
    "src/services/api/dashboards.ts",
    "src/services/api/exports.ts",
    "src/services/api/predictions.ts",
    "src/services/api/reports.ts",
    "src/services/socket/socket.ts",
    "src/shared/components/Button.tsx",
    "src/shared/components/Card.tsx",
    "src/shared/components/DataExportButton.tsx",
    "src/shared/components/DateRangePicker.tsx",
    "src/shared/components/IconButton.tsx",
    "src/shared/components/Input.tsx",
    "src/shared/components/Modal.tsx",
    "src/shared/components/Select.tsx",
    "src/shared/components/Checkbox.tsx",
    "src/shared/components/Skeleton.tsx",
    "src/shared/components/Spinner.tsx",
    "src/shared/components/Switch.tsx",
    "src/shared/components/Table.tsx",
    "src/shared/components/Toast.tsx",
    "src/shared/components/Tooltip.tsx",
    "src/shared/hooks/useAuth.ts",
    "src/shared/hooks/useDebounce.ts",
    "src/shared/hooks/useKeyboardNav.ts",
    "src/shared/hooks/useToast.ts",
    "src/shared/hooks/useWebsocket.ts",
    "src/shared/layouts/AuthLayout.tsx",
    "src/shared/layouts/DashboardLayout.tsx",
    "src/shared/layouts/MainLayout.tsx",
    "src/shared/utils/csvExport.ts",
    "src/shared/utils/date.ts",
    "src/shared/utils/formatters.ts",
    "src/state/ui.ts",
    "src/utils/errorResponses.ts",
    "src/app/App.tsx",
    "src/app/main.tsx",
    "src/features/alerts/AlertsPage.tsx",
    "src/features/builder/BuilderPage.tsx",
    "src/features/dashboard/DashboardPage.tsx",
    "src/features/exports/ExportsPage.tsx",
    "src/features/predictions/PredictionsPage.tsx",
    "src/features/reports/ReportsPage.tsx",
    "src/pages/LoginPage.tsx",
    "src/pages/NotFoundPage.tsx",
    "src/routes/index.tsx",
    "src/pages/IndexPage.tsx",
    "src/routes/ProtectedRoute.tsx"
  ],
  "descriptions": [
    "Materialized runtime configuration using import.meta.env. Exposes app constants, feature flags (enable_mock_data), API base URL, websocket URL and environment flags for development mode.",
    "Domain types, DTOs, API response contracts and shared enums for analytics domain (Metric, Dashboard, Report, Prediction, Alert, ExportJob, User, Roles). Central place for cross-file TypeScript types.",
    "Simple dependency injection container for resolving service implementations (e.g., API client, socket). Allows replacing implementations in tests or mock mode.",
    "Lightweight typed event bus for decoupled components (subscribe/publish). Used for cross-cutting events like 'auth:logout', 'toast:show', 'ws:update'.",
    "Extension hook registry for runtime-registered hooks (analytics plugins, custom widgets). Lightweight API to register and retrieve hooks.",
    "Common utility helpers used across the app (safeParse, sleep, guard helpers, typed localStorage helpers).",
    "i18n bootstrap using i18next. Loads locales and exports translator hooks and init function. Sets default language and fallback.",
    "English translations for the app strings used by UI (dashboard, reports, auth labels, errors).",
    "Spanish translations (partial) - used to demonstrate i18n capability.",
    "Sample dashboards dataset (layout + widget configs) used in development mode.",
    "Sample metrics and time-series JSON used by mock handlers.",
    "Sample reports metadata and rows used by mock report endpoint.",
    "Handler for alerts CRUD endpoints with persisted mock state in memory (for dev).",
    "Handler for dashboards endpoints using sample dashboards dataset.",
    "Handler that simulates export job creation and status polling for /api/analytics/exports.",
    "Handler that returns sample metrics and time-series data for /api/analytics/metrics. Uses sample data file and supports query params (range, granularity).",
    "Handler for /api/analytics/predictions returning predictive series and model metadata.",
    "Handler for /api/analytics/reports returning mock report list and run results.",
    "Mock WebSocket broadcaster used in dev to emit periodic metric updates and alerts. Exposes subscribe/emit interface compatible with SocketClient.",
    "Auth context and hooks handling login/logout, token storage (localStorage in dev), role checks and protected-route helper. Supports mock auth when enable_mock_data is true.",
    "React Error Boundary that logs errors to service and renders fallback UI. Works with Suspense to provide robust error handling.",
    "Sets up MSW or an in-app fetch interceptor in dev mode to return mock responses for listed endpoints. Registers handlers for analytics endpoints and exposes controls to seed/mock data.",
    "Sets up React Query QueryClient with default options, error handling, and devtools. Exposes QueryClientProvider wrapper component.",
    "React context provider that uses tokens and theme utilities to manage and persist theme choice (dark/light). Integrates with Tailwind dark class and respects system preference.",
    "Global toast/notifications provider. Provides API via context and listens to 'toast:show' events. Accessible by any component to show non-blocking alerts.",
    "WebSocket provider abstraction. Connects to real WS in prod, and to a mock socket in dev; exposes hooks to subscribe to channels and emits events into React Query or event bus.",
    "Thin API client built on fetch. Handles base URL from config, JSON parsing, common error wrapping and token injection. Uses DI to allow mock replacement.",
    "Mock server registration: sets up handlers for all listed mock API endpoints in development mode. Seeds mock data and exports a start/stop API. Uses MSW or simple fetch override if MSW unavailable.",
    "Typed localStorage hook with JSON serialization and fallback. Used by ThemeProvider and AuthProvider for persistence (dev mode).",
    "Exports a set of SVG icon React components used across the app (SearchIcon, BellIcon, ChartIcon, ExportIcon, UserIcon).",
    "Tailwind base imports and custom utilities. Contains dark mode roots and design token CSS variables derived from tokens.",
    "Animation presets and Framer Motion variants used across app for transitions, micro-interactions, and chart animations.",
    "Theme utilities and runtime theme provider values. Provides functions to read system preference, toggle dark mode and map tokens to className values. Exposes ThemeContext types.",
    "Design tokens: color palette (light/dark), spacing, radii, elevations, font sizes, breakpoints. Used to generate Tailwind theme and to share with CSS-in-JS if needed.",
    "Utilities for focus trapping, restoring focus and programmatic focus management used by modals and overlays.",
    "Panel to create or edit alert rules: condition builder, threshold inputs, notification targets and test trigger.",
    "List of configured alerts with quick enable/disable toggles and test action. Accessible keyboard list.",
    "React Query hooks for listing alerts, subscribing to alert triggers and updating alert config.",
    "Primary form for creating and editing custom reports: fields palette, grouping, aggregations and preview pane.",
    "Stateful hook used by the report builder to manage canvas state, drag/drop fields and preview queries. Saves drafts to localStorage in dev.",
    "Modal that shows detailed drill-down view for a metric including a larger chart and row-level table. Integrates with Modal primitive and accessible focus trap.",
    "Composable KPI widget with threshold indicators, small trend sparkline and optional drill-down trigger.",
    "Presentational KPI/metric card used in dashboards with animation transitions, value formatting and inline sparkline chart.",
    "Small component that subscribes to websocket topic for real-time metric updates and shows animated transitions for incoming values.",
    "React Query hooks to fetch metrics and timeseries data. Exposes useMetricsQuery and useMetricSeriesQuery with built-in caching, staleTime and error handling.",
    "Form to configure export options (format, fields, schedule) and start an export job. Provides job status feedback.",
    "Hooks to initiate exports, poll export job status and download completed artifacts.",
    "Chart component wrapping chosen chart library. Displays historical + predicted series and confidence intervals. Accessible SVG with title/desc for screen readers.",
    "Hooks for fetching predictive analytics data and model metadata. Provides caching and background refetch behavior.",
    "Form used to filter reports (date range, owner, tags) with validation and error display. Uses React Hook Form (note: the actual RHF dependency exists in package but not listed here as a file).",
    "Report listing table with server-side pagination, column filters and export action per row.",
    "React Query hooks to fetch and run reports, with pagination and filter support and optimistic updates for report bookmarking.",
    "Alert management endpoints: list alerts, create/update alerts, test alert triggers.",
    "Analytics-specific API wrappers: fetch metrics, time series, aggregations. Returns typed responses using contracts.",
    "Dashboard CRUD and layout APIs. Fetch dashboards and their widget configurations.",
    "Export endpoints for scheduling/export jobs and retrieving export artifacts.",
    "Prediction/predictive-analytics endpoints wrappers (fetch predictions, model metadata).",
    "Report-related API wrappers: list reports, create report, run report, download report snapshot.",
    "WebSocket wrapper implementing reconnection, backoff, topic subscription and event dispatch. Provides an interface compatible with mock socket implementation.",
    "Accessible button primitive with variants (primary, secondary, ghost). Uses Tailwind classes, supports icon slot, loading state and proper ARIA attributes.",
    "Card primitive with glassmorphism styles (backdrop blur, gradient) and elevation tokens. Used for KPI cards and panels.",
    "Button to export current dataset to CSV/Excel. Integrates with csvExport helper and shows success/failure toasts.",
    "Date range picker control used by filters. Uses accessible ARIA patterns and supports quick ranges.",
    "Round icon button with focus rings and keyboard accessible behavior.",
    "Accessible text input with label, error message and keyboard support. Integrates with React Hook Form via forwarding ref.",
    "Accessible modal dialog with backdrop blur, focus trap, keyboard close and portal rendering.",
    "Accessible select control with keyboard navigation and ARIA attributes.",
    "Accessible checkbox used in forms and filter UIs.",
    "Skeleton UI primitive for loading placeholders with accessible ARIA attributes.",
    "Small animated spinner used in loading states.",
    "Accessible switch/toggle component used for enabling/disabling alerts or widgets.",
    "Accessible data table with keyboard navigation, sortable columns and virtualized rows hook support placeholder.",
    "Toast notification item used by ToastProvider. Handles enter/exit animation and ARIA-live regions.",
    "Tooltip primitive with accessible ARIA attributes and keyboard support.",
    "Convenience hook that uses AuthProvider context for login/logout and role discovery. Re-exports auth state and helpers.",
    "Common debounce hook for search inputs and filter updates.",
    "Hook for keyboard navigation management and accessible list navigation (ArrowUp/Down, Enter, Escape).",
    "Hook to show toast notifications via events or context API.",
    "Hook to subscribe to websocket topics and receive streaming updates; integrates with provider.",
    "Layout used for authentication pages (Login). Centered card, responsive and accessible.",
    "Specialized layout for dashboard pages offering widget grid, widget editor controls, and drill-down handling.",
    "Main application layout with sidebar, topbar, content area and responsive collapse behavior. Handles keyboard shortcuts and focus management.",
    "Utility to convert arrays of records to CSV/Excel blobs and trigger download in browser.",
    "Date utilities and formatting helpers used by charts, filters and tables. Uses Intl.DateTimeFormat and UTC-safe helpers.",
    "Number and currency formatters, compact notation and percentage helpers for KPI display.",
    "Zustand store for UI-level state such as sidebar collapsed, activeDashboardId, filter presets and ephemeral drill-down selection.",
    "Standardized error-response mapping for UI: maps ApiError to user-friendly messages and i18n keys.",
    "Root app component. Composes providers (QueryProvider, AuthProvider, ThemeProvider, MockServerProvider, WebsocketProvider, ToastProvider, ErrorBoundary) and renders Routes inside Suspense with fallback skeletons.",
    "Application bootstrap entry that mounts React into DOM. Invokes i18n init and conditionally registers service worker. Reads import.meta.env via config.",
    "Alerts management page where users configure alert rules, view firing alerts and test triggers. Uses AlertList and AlertConfigPanel.",
    "Custom report builder page with canvas, field palette and save/run controls. Integrates useReportBuilder for state management and draft persistence.",
    "High-level dashboard page composed of KPI widgets, charts and real-time ticker. Uses DashboardLayout and React Query hooks to load data. Supports drill-down via DrillDownModal.",
    "Exports page to create and monitor export jobs; shows status and links to download artifacts.",
    "Page showcasing predictive charts and model metadata with controls for horizon and scenario selection.",
    "Reports listing page that shows available reports with filters and actions to run/export. Uses ReportTable and ReportFilters.",
    "Login page with mock auth support in dev, form validation, error handling and accessibility. Uses AuthProvider to perform login and persists user in localStorage when mock is enabled.",
    "404 page with a call-to-action to navigate back to dashboard or login.",
    "Application route definitions using React Router v6. Declares public routes (login), protected routes (dashboard, reports, builder, alerts, exports, predictions) and a 404 page. Integrates Suspense boundaries for data-loading routes.",
    "Optional landing or redirect page; small wrapper to redirect to /dashboard when authenticated.",
    "Route wrapper that ensures user is authenticated and optionally enforces role-based access. Redirects to login for unauthorized users."
  ],
  "dependencies": [
    [
      "src/core/contracts.ts"
    ],
    [],
    [
      "src/core/contracts.ts"
    ],
    [
      "src/core/contracts.ts"
    ],
    [
      "src/core/events.ts"
    ],
    [],
    [
      "src/i18n/locales/en.ts",
      "src/i18n/locales/es.ts"
    ],
    [],
    [],
    [],
    [],
    [],
    [
      "src/core/contracts.ts"
    ],
    [
      "src/mocks/data/sample-dashboards.json",
      "src/core/contracts.ts"
    ],
    [
      "src/core/contracts.ts"
    ],
    [
      "src/mocks/data/sample-metrics.json",
      "src/core/contracts.ts"
    ],
    [
      "src/mocks/data/sample-metrics.json",
      "src/core/contracts.ts"
    ],
    [
      "src/mocks/data/sample-reports.json",
      "src/core/contracts.ts"
    ],
    [
      "src/mocks/data/sample-metrics.json"
    ],
    [
      "src/core/contracts.ts",
      "src/app/config.ts",
      "src/services/mock/mockServer.ts",
      "src/core/di.ts",
      "src/shared/hooks/useLocalStorage.ts"
    ],
    [
      "src/core/events.ts"
    ],
    [
      "src/app/config.ts",
      "src/services/mock/mockServer.ts"
    ],
    [
      "src/core/events.ts",
      "src/app/config.ts"
    ],
    [
      "src/theme/index.ts",
      "src/shared/hooks/useLocalStorage.ts"
    ],
    [
      "src/core/events.ts",
      "src/shared/components/Toast.tsx"
    ],
    [
      "src/app/config.ts",
      "src/services/socket/socket.ts",
      "src/core/events.ts"
    ],
    [
      "src/app/config.ts",
      "src/core/contracts.ts",
      "src/core/di.ts"
    ],
    [
      "src/mocks/handlers/metrics.ts",
      "src/mocks/handlers/reports.ts",
      "src/mocks/handlers/dashboards.ts",
      "src/mocks/handlers/predictions.ts",
      "src/mocks/handlers/alerts.ts",
      "src/mocks/handlers/exports.ts",
      "src/app/config.ts"
    ],
    [
      "src/core/utils.ts"
    ],
    [],
    [
      "src/theme/tokens.ts"
    ],
    [],
    [
      "src/theme/tokens.ts"
    ],
    [],
    [],
    [
      "src/shared/components/Input.tsx",
      "src/shared/components/Select.tsx",
      "src/shared/hooks/useToast.ts",
      "src/features/alerts/hooks/useAlerts.ts"
    ],
    [
      "src/features/alerts/hooks/useAlerts.ts",
      "src/shared/components/Switch.tsx",
      "src/shared/components/Table.tsx"
    ],
    [
      "src/services/api/alerts.ts",
      "src/providers/QueryProvider.tsx"
    ],
    [
      "src/features/builder/hooks/useReportBuilder.ts",
      "src/shared/components/Button.tsx",
      "src/shared/components/Input.tsx",
      "src/shared/components/Select.tsx"
    ],
    [
      "src/shared/hooks/useLocalStorage.ts",
      "src/core/contracts.ts"
    ],
    [
      "src/shared/components/Modal.tsx",
      "src/features/dashboard/hooks/useMetrics.ts",
      "src/shared/components/Table.tsx"
    ],
    [
      "src/shared/components/Card.tsx",
      "src/shared/utils/formatters.ts",
      "src/shared/components/IconButton.tsx",
      "src/core/events.ts"
    ],
    [
      "src/shared/components/Card.tsx",
      "src/shared/components/Skeleton.tsx",
      "src/shared/utils/formatters.ts",
      "src/features/dashboard/hooks/useMetrics.ts",
      "src/shared/components/Spinner.tsx"
    ],
    [
      "src/shared/components/Spinner.tsx",
      "src/shared/components/Skeleton.tsx",
      "src/shared/hooks/useWebsocket.ts",
      "src/core/events.ts"
    ],
    [
      "src/services/api/analytics.ts",
      "src/providers/QueryProvider.tsx",
      "src/core/contracts.ts"
    ],
    [
      "src/shared/components/Select.tsx",
      "src/shared/components/Button.tsx",
      "src/features/exports/hooks/useExports.ts"
    ],
    [
      "src/services/api/exports.ts",
      "src/providers/QueryProvider.tsx",
      "src/shared/hooks/useToast.ts"
    ],
    [
      "src/shared/utils/formatters.ts",
      "src/theme/animations.ts"
    ],
    [
      "src/services/api/predictions.ts",
      "src/providers/QueryProvider.tsx"
    ],
    [
      "src/shared/components/DateRangePicker.tsx",
      "src/shared/components/Select.tsx",
      "src/shared/hooks/useDebounce.ts"
    ],
    [
      "src/shared/components/Table.tsx",
      "src/shared/components/DataExportButton.tsx",
      "src/features/reports/hooks/useReports.ts"
    ],
    [
      "src/services/api/reports.ts",
      "src/providers/QueryProvider.tsx"
    ],
    [
      "src/services/api/client.ts",
      "src/core/contracts.ts"
    ],
    [
      "src/services/api/client.ts",
      "src/core/contracts.ts"
    ],
    [
      "src/services/api/client.ts",
      "src/core/contracts.ts"
    ],
    [
      "src/services/api/client.ts",
      "src/core/contracts.ts"
    ],
    [
      "src/services/api/client.ts",
      "src/core/contracts.ts"
    ],
    [
      "src/services/api/client.ts",
      "src/core/contracts.ts"
    ],
    [
      "src/app/config.ts",
      "src/core/events.ts"
    ],
    [
      "src/shared/icons/index.ts",
      "src/theme/index.ts"
    ],
    [
      "src/theme/tokens.ts"
    ],
    [
      "src/shared/utils/csvExport.ts",
      "src/core/events.ts",
      "src/shared/components/Button.tsx"
    ],
    [
      "src/shared/components/Input.tsx",
      "src/shared/utils/date.ts"
    ],
    [
      "src/shared/icons/index.ts"
    ],
    [
      "src/theme/index.ts"
    ],
    [
      "src/shared/components/Button.tsx",
      "src/a11y/focusManager.ts"
    ],
    [
      "src/shared/components/Input.tsx"
    ],
    [
      "src/theme/index.ts"
    ],
    [
      "src/theme/animations.ts"
    ],
    [
      "src/theme/animations.ts"
    ],
    [
      "src/theme/index.ts"
    ],
    [
      "src/shared/components/Skeleton.tsx",
      "src/shared/hooks/useDebounce.ts"
    ],
    [
      "src/theme/animations.ts"
    ],
    [
      "src/theme/animations.ts"
    ],
    [
      "src/providers/AuthProvider.tsx"
    ],
    [],
    [
      "src/a11y/focusManager.ts"
    ],
    [
      "src/providers/ToastProvider.tsx",
      "src/core/events.ts"
    ],
    [
      "src/providers/WebsocketProvider.tsx",
      "src/core/events.ts"
    ],
    [
      "src/shared/components/Card.tsx"
    ],
    [
      "src/shared/layouts/MainLayout.tsx",
      "src/features/dashboard/components/MetricCard.tsx",
      "src/features/dashboard/components/KPIWidget.tsx"
    ],
    [
      "src/shared/components/IconButton.tsx",
      "src/shared/icons/index.ts",
      "src/state/ui.ts",
      "src/providers/ThemeProvider.tsx"
    ],
    [],
    [],
    [],
    [
      "src/core/contracts.ts",
      "src/shared/hooks/useLocalStorage.ts"
    ],
    [
      "src/core/contracts.ts",
      "src/i18n/index.ts"
    ],
    [
      "src/providers/QueryProvider.tsx",
      "src/providers/AuthProvider.tsx",
      "src/providers/ThemeProvider.tsx",
      "src/providers/MockServerProvider.tsx",
      "src/providers/WebsocketProvider.tsx",
      "src/providers/ToastProvider.tsx",
      "src/providers/ErrorBoundary.tsx",
      "src/routes/index.tsx",
      "src/styles/tailwind.css"
    ],
    [
      "src/app/App.tsx",
      "src/i18n/index.ts",
      "src/app/config.ts"
    ],
    [
      "src/shared/layouts/MainLayout.tsx",
      "src/features/alerts/components/AlertList.tsx",
      "src/features/alerts/components/AlertConfigPanel.tsx"
    ],
    [
      "src/shared/layouts/MainLayout.tsx",
      "src/features/builder/components/ReportBuilderForm.tsx"
    ],
    [
      "src/shared/layouts/DashboardLayout.tsx",
      "src/features/dashboard/hooks/useMetrics.ts",
      "src/features/dashboard/components/MetricCard.tsx",
      "src/features/dashboard/components/DrillDownModal.tsx",
      "src/shared/hooks/useWebsocket.ts"
    ],
    [
      "src/shared/layouts/MainLayout.tsx",
      "src/features/exports/components/ExportForm.tsx",
      "src/features/exports/hooks/useExports.ts"
    ],
    [
      "src/shared/layouts/MainLayout.tsx",
      "src/features/predictions/components/PredictiveChart.tsx",
      "src/features/predictions/hooks/usePredictions.ts"
    ],
    [
      "src/shared/layouts/MainLayout.tsx",
      "src/features/reports/components/ReportTable.tsx",
      "src/features/reports/components/ReportFilters.tsx"
    ],
    [
      "src/providers/AuthProvider.tsx",
      "src/shared/layouts/AuthLayout.tsx",
      "src/shared/components/Input.tsx",
      "src/shared/components/Button.tsx",
      "src/shared/hooks/useToast.ts",
      "react-hook-form"
    ],
    [
      "src/shared/components/Button.tsx"
    ],
    [
      "react-router-dom",
      "src/pages/LoginPage.tsx",
      "src/pages/NotFoundPage.tsx",
      "src/features/dashboard/DashboardPage.tsx",
      "src/features/reports/ReportsPage.tsx",
      "src/features/builder/BuilderPage.tsx",
      "src/features/alerts/AlertsPage.tsx",
      "src/features/exports/ExportsPage.tsx",
      "src/features/predictions/PredictionsPage.tsx",
      "src/providers/ErrorBoundary.tsx"
    ],
    [
      "react-router-dom",
      "src/shared/hooks/useAuth.ts"
    ],
    [
      "src/shared/hooks/useAuth.ts",
      "react-router-dom",
      "src/pages/LoginPage.tsx"
    ]
  ],
  "total_files": 100
}
