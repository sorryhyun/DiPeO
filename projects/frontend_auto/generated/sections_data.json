{
  "architecture": {
    "overview": "A modular React 18+ TypeScript messaging app focused on real-time team collaboration. The app is split into composable features and shared UI primitives. Core responsibilities are separated into: UI (shared/components), domain services (services/*), type definitions (types/*), hooks & context providers (shared/hooks and shared/context), pages & routing (pages/* and routes/*), utilities (utils/*), and development-only mocks (mocks/*). React Query handles server state and caching; Contexts provide auth, theme, and socket access; a mock HTTP server and a mock WebSocket implement real-time behavior in dev mode. Tailwind CSS provides styling with dark mode utilities. The app runs fully standalone in development mode using localStorage for persistence and mock endpoints for all API routes. Protected routes and token management are implemented via AuthContext and useAuth hook.",
    "patterns": [
      "Container / Presentational: pages/containers orchestrate data & pass props to presentational shared/components",
      "Domain-based foldering: services/* model API surface per domain (messages, channels, users, files, presence, reactions, threads)",
      "Provider Composition: QueryProvider, AuthProvider, SocketProvider, ThemeProvider wrap the app root",
      "Single Source of Types: src/types/index.ts exports domain interfaces and utility types",
      "Feature-slice: pages and feature-specific hooks/services collocated under their domain"
    ],
    "data_flow": "UI components call domain services (via React Query) to read/write data. React Query provides caching, background refresh, and optimistic updates. AuthProvider exposes current user and tokens; useAuth hook provides mutation helpers. SocketProvider exposes a websocket instance and emits/receives events; incoming socket events update React Query caches (using queryClient.invalidateQueries or setQueryData). LocalStorage persists auth tokens and user profile in development mode. Mock server handlers return deterministic responses and also emit mock websocket events via mockWebSocket to simulate real-time updates.",
    "folder_structure": "src/\n  main.tsx\n  App.tsx\n  config.ts\n  index.css\n  types/\n    index.ts\n  pages/\n    LoginPage.tsx\n    ChatPage.tsx\n    ChannelsPage.tsx\n    DirectMessagePage.tsx\n    SettingsPage.tsx\n    NotFoundPage.tsx\n  routes/\n    Routes.tsx\n  shared/\n    components/\n      Button.tsx\n      Input.tsx\n      Textarea.tsx\n      Icon.tsx\n      Avatar.tsx\n      Spinner.tsx\n      Modal.tsx\n      Sidebar.tsx\n      Header.tsx\n      MessageBubble.tsx\n      FileUpload.tsx\n      EmojiPicker.tsx\n      ThreadView.tsx\n      PresenceIndicator.tsx\n      SearchBar.tsx\n    hooks/\n      useAuth.ts\n      useLocalStorage.ts\n      useWebSocket.ts\n      useDebounce.ts\n      useI18n.ts\n    context/\n      AuthContext.tsx\n      SocketProvider.tsx\n      ThemeProvider.tsx\n      QueryProvider.tsx\n      ErrorBoundary.tsx\n  services/\n    apiClient.ts\n    authService.ts\n    messageService.ts\n    channelService.ts\n    fileService.ts\n    presenceService.ts\n    reactionService.ts\n    threadService.ts\n  utils/\n    formatDate.ts\n    generateId.ts\n  mocks/\n    mockServer.ts\n    mockWebSocket.ts\n  i18n/\n    i18n.ts\n  hooks/\n    useInfiniteMessages.tsx\n  pages-layouts/\n    ChatLayout.tsx\n  styles/\n    tailwind.css\n  assets/\n    icons.tsx\n",
    "tech_stack": [
      "React 18+ (functional components, Suspense, Error Boundaries)",
      "TypeScript (strict mode recommended)",
      "Tailwind CSS with dark mode support",
      "React Query (server-state management, caching, optimistic updates)",
      "Axios for HTTP client (wrapped in services/apiClient.ts)",
      "Mock server (dev-mode) \u2014 simple in-project mockServer using fetch interception or MSW-style handlers",
      "Mock WebSocket implementation for development (mockWebSocket.ts)",
      "Context API for Auth, Theme, Socket providers",
      "localStorage for persistence in development",
      "React Router v6 for routing",
      "i18next for i18n (minimal setup)",
      "ARIA attributes and keyboard handlers for accessibility"
    ]
  },
  "sections": [
    {
      "id": "main-entry",
      "title": "Application entry (main.tsx)",
      "description": "Root entry that renders the React application, composes providers (QueryProvider, AuthProvider, SocketProvider, ThemeProvider), loads mock server in development, and mounts App component.",
      "file_to_implement": "src/main.tsx",
      "acceptance": [
        "Renders <App /> into #root",
        "Wraps App with QueryProvider, AuthProvider, SocketProvider, ThemeProvider and ErrorBoundary",
        "Starts mock server when config.developmentMode.enable_mock_data is true",
        "Imports only files present in sections list"
      ],
      "implementation_steps": [
        "Import React, createRoot from react-dom/client, App from './App', QueryProvider from './shared/context/QueryProvider', AuthProvider from './shared/context/AuthContext', SocketProvider from './shared/context/SocketProvider', ThemeProvider from './shared/context/ThemeProvider', ErrorBoundary from './shared/context/ErrorBoundary', and config from './config'.",
        "If config.development_mode.enable_mock_data is true, import and call startMockServer() from './mocks/mockServer' (dynamic import allowed).",
        "Get the DOM element with id 'root'. Create root and render providers in composition order: ErrorBoundary > QueryProvider > AuthProvider > ThemeProvider > SocketProvider > <App />.",
        "Ensure export nothing else; file is only responsible for mounting."
      ],
      "integration_points": [
        "Depends on App.tsx which contains the routes and pages",
        "Uses QueryProvider, AuthProvider, SocketProvider, ThemeProvider, ErrorBoundary",
        "Starts mocks defined in mocks/mockServer.ts"
      ],
      "prompt_context": {
        "component_type": "entry",
        "data_model": null,
        "interactions": [
          "mount"
        ],
        "styling_approach": "tailwind",
        "dependencies": [
          "src/App.tsx",
          "src/shared/context/QueryProvider.tsx",
          "src/shared/context/AuthContext.tsx",
          "src/shared/context/SocketProvider.tsx",
          "src/shared/context/ThemeProvider.tsx",
          "src/shared/context/ErrorBoundary.tsx",
          "src/mocks/mockServer.ts",
          "src/config.ts"
        ]
      },
      "priority": 1
    },
    {
      "id": "app-root",
      "title": "App component (App.tsx)",
      "description": "Top-level application component responsible for routing composition, Suspense boundaries, global layout and fallback UI.",
      "file_to_implement": "src/App.tsx",
      "acceptance": [
        "Renders Routes from routes/Routes.tsx inside React.Suspense with a Spinner fallback",
        "Applies a global layout wrapper and sets up i18n initialization via useI18n hook",
        "Includes keyboard shortcut to open search (e.g., Cmd/Ctrl+K) and toggles search state"
      ],
      "implementation_steps": [
        "Import React, Suspense, lazy if needed, useEffect from 'react', Routes component from './routes/Routes', Spinner from './shared/components/Spinner', useI18n from './shared/hooks/useI18n', Header from './shared/components/Header'.",
        "Call useI18n() at top of component to initialize translations.",
        "Render a container with Header at top and a main area where <Suspense fallback={<Spinner />}><Routes /></Suspense> is mounted.",
        "Add a useEffect to add a global keydown listener for Cmd/Ctrl+K to open an accessible search (implementation can call a custom event or set a state \u2014 keep simple and documented).",
        "Export default App."
      ],
      "integration_points": [
        "Uses routes defined in src/routes/Routes.tsx",
        "Uses shared Header and Spinner components",
        "Calls useI18n hook",
        "Mounted by src/main.tsx"
      ],
      "prompt_context": {
        "component_type": "app",
        "data_model": null,
        "interactions": [
          "routing",
          "global shortcuts",
          "suspense"
        ],
        "styling_approach": "tailwind",
        "dependencies": [
          "src/routes/Routes.tsx",
          "src/shared/components/Spinner.tsx",
          "src/shared/components/Header.tsx",
          "src/shared/hooks/useI18n.ts"
        ]
      },
      "priority": 1
    },
    {
      "id": "config",
      "title": "Runtime config (config.ts)",
      "description": "Application-level configuration including development flags, API base URL, and localStorage keys. Single source for toggles used by mock server and providers.",
      "file_to_implement": "src/config.ts",
      "acceptance": [
        "Exports a config object matching the app's development_mode parameters in the provided app config",
        "Provides exported constants: API_BASE_URL, ENABLE_MOCKS, LOCALSTORAGE_KEYS",
        "Used by mocks and providers"
      ],
      "implementation_steps": [
        "Export a typed config object with fields: apiBaseUrl (string), development_mode matching input (enable_mock_data, disable_websocket_in_dev, use_localstorage_persistence), and localStorage keys object.",
        "Set defaults: apiBaseUrl = '/api', enable_mock_data from the provided JSON, disable_websocket_in_dev from provided JSON, use_localstorage_persistence from provided JSON.",
        "Export constants: API_BASE_URL, ENABLE_MOCKS, LOCALSTORAGE_KEYS for common use."
      ],
      "integration_points": [
        "Imported by mocks/mockServer.ts, shared/context/AuthContext.tsx, services/apiClient.ts",
        "Single source of truth for dev-mode toggles"
      ],
      "prompt_context": {
        "component_type": "utility",
        "data_model": null,
        "interactions": [],
        "styling_approach": null,
        "dependencies": []
      },
      "priority": 1
    },
    {
      "id": "types-index",
      "title": "Type definitions (src/types/index.ts)",
      "description": "Centralized TypeScript type and interface definitions for Domain models (User, Message, Channel, File, Reaction, Thread, Presence, AuthTokens, API response shapes).",
      "file_to_implement": "src/types/index.ts",
      "acceptance": [
        "Exports interfaces: User, AuthTokens, Message, Channel, FileItem, Reaction, Thread, Presence, ApiResponse<T>",
        "Types are comprehensive enough for service and component implementations",
        "No dependencies on other files"
      ],
      "implementation_steps": [
        "Define and export interface User { id, name, email, avatarUrl?, role }.",
        "Define and export AuthTokens { accessToken, refreshToken, expiresAt }.",
        "Define and export Message { id, channelId, threadId?, author: User, content, attachments?: FileItem[], reactions?: Reaction[], createdAt }.",
        "Define and export Channel { id, name, description?, isPrivate?: boolean, members: User[], createdAt }.",
        "Define and export FileItem { id, fileName, url, size, mimeType, uploadedBy: User, createdAt }.",
        "Define and export Reaction { id, emoji, user: User, createdAt } and Thread { id, parentMessageId, messages: Message[] }.",
        "Define and export Presence { userId, status: 'online' | 'offline' | 'away' | 'dnd', lastActiveAt? }.",
        "Define generic ApiResponse<T> { data: T, meta?: Record<string, any> }.",
        "Export all types as named exports."
      ],
      "integration_points": [
        "Imported by services/*, shared/hooks/*, shared/components/*",
        "Single schema surface for type-safety across the app"
      ],
      "prompt_context": {
        "component_type": "types",
        "data_model": null,
        "interactions": [],
        "styling_approach": null,
        "dependencies": []
      },
      "priority": 1
    },
    {
      "id": "api-client",
      "title": "HTTP API client wrapper (services/apiClient.ts)",
      "description": "Axios wrapper configured with base URL, request/response interceptors to attach auth tokens, and fallback logic for offline/mock mode.",
      "file_to_implement": "src/services/apiClient.ts",
      "acceptance": [
        "Exports a configured axios instance named apiClient",
        "Attaches Authorization header when token available from localStorage key in config",
        "Provides a safe request wrapper that catches network errors and returns a consistent error shape"
      ],
      "implementation_steps": [
        "Import axios and AxiosInstance from 'axios', config from '../config', and LOCALSTORAGE_KEYS from config if exported separately.",
        "Create axios instance with baseURL = config.apiBaseUrl and timeout 10000.",
        "Add request interceptor: read accessToken from localStorage (if use_localstorage_persistence) and set Authorization header 'Bearer <token>' if present.",
        "Add response interceptor: pass through data or throw an Error with standardized { message, status } shape.",
        "Export the axios instance as apiClient and additionally export a safeRequest helper wrapping apiClient.request in try/catch returning { data, error }. Keep types generic.",
        "Avoid importing services that would cause circular dependencies."
      ],
      "integration_points": [
        "Used by all domain services: authService, messageService, channelService, fileService, presenceService, reactionService, threadService",
        "Relies on config.ts and LOCALSTORAGE_KEYS"
      ],
      "prompt_context": {
        "component_type": "service",
        "data_model": null,
        "interactions": [
          "http requests",
          "token injection"
        ],
        "styling_approach": null,
        "dependencies": [
          "src/config.ts",
          "src/types/index.ts"
        ]
      },
      "priority": 1
    },
    {
      "id": "auth-service",
      "title": "Authentication service (services/authService.ts)",
      "description": "Domain service that handles login, logout, token refresh, and mock-auth behavior in development mode.",
      "file_to_implement": "src/services/authService.ts",
      "acceptance": [
        "Exports functions: login(email, password), logout(), getCurrentUser(), refreshToken()",
        "login persists tokens and user to localStorage when dev-mode persistence enabled",
        "Works with mock server endpoints in development"
      ],
      "implementation_steps": [
        "Import apiClient from './apiClient', config from '../config', and types User/AuthTokens from '../types'.",
        "Export async function login(email, password) that posts to '/auth/login' via apiClient and on success stores tokens and user to localStorage (if enabled) using keys from config, returning user and tokens.",
        "Export logout() to remove tokens and user from localStorage and optionally post to '/auth/logout'.",
        "Export getCurrentUser() that reads user JSON from localStorage and returns typed User | null.",
        "Export refreshToken() that posts to '/auth/refresh' and updates stored tokens.",
        "Include in-code comments about mock behavior; do not import mock files here to avoid circular imports."
      ],
      "integration_points": [
        "Used by AuthContext and pages/LoginPage.tsx",
        "Relies on apiClient and config"
      ],
      "prompt_context": {
        "component_type": "service",
        "data_model": "user, auth tokens",
        "interactions": [
          "login",
          "logout",
          "refresh"
        ],
        "styling_approach": null,
        "dependencies": [
          "src/services/apiClient.ts",
          "src/config.ts",
          "src/types/index.ts"
        ]
      },
      "priority": 1
    },
    {
      "id": "message-service",
      "title": "Message service (services/messageService.ts)",
      "description": "CRUD and query operations for messages, including sending, editing, deleting, fetching by channel, and searching.",
      "file_to_implement": "src/services/messageService.ts",
      "acceptance": [
        "Exports functions: fetchMessages(channelId, params), sendMessage(payload), editMessage(id, content), deleteMessage(id), searchMessages(query)",
        "Uses apiClient to call '/messages' endpoints",
        "Returns typed ApiResponse<Message[]> or single Message as appropriate"
      ],
      "implementation_steps": [
        "Import apiClient from './apiClient' and types Message, ApiResponse from '../types'.",
        "Implement fetchMessages(channelId, { page, pageSize }) that GETs `/messages?channelId=${channelId}` with pagination params.",
        "Implement sendMessage({ channelId, content, attachments, threadId }) POSTing to '/messages'.",
        "Implement editMessage(id, content) PATCH to `/messages/${id}` and deleteMessage(id) DELETE `/messages/${id}`.",
        "Implement searchMessages(query) GET `/messages/search?q=${encodeURIComponent(query)}`.",
        "Export all functions."
      ],
      "integration_points": [
        "Used by message-related hooks (useInfiniteMessages) and components (MessageBubble, ChatPage)",
        "Mocks provided by mocks/mockServer.ts will handle these endpoints"
      ],
      "prompt_context": {
        "component_type": "service",
        "data_model": "message",
        "interactions": [
          "fetch",
          "create",
          "update",
          "delete",
          "search"
        ],
        "styling_approach": null,
        "dependencies": [
          "src/services/apiClient.ts",
          "src/types/index.ts"
        ]
      },
      "priority": 1
    },
    {
      "id": "channel-service",
      "title": "Channel service (services/channelService.ts)",
      "description": "Operations for channels: list, create, update, delete, join/leave.",
      "file_to_implement": "src/services/channelService.ts",
      "acceptance": [
        "Exports: fetchChannels(), createChannel(payload), updateChannel(id, payload), deleteChannel(id), getChannel(id)",
        "Uses apiClient and returns typed responses"
      ],
      "implementation_steps": [
        "Import apiClient and types Channel, ApiResponse.",
        "Implement fetchChannels() GET '/channels'.",
        "Implement getChannel(id) GET `/channels/${id}`.",
        "Implement createChannel(payload) POST '/channels'.",
        "Implement updateChannel(id, payload) PATCH `/channels/${id}` and deleteChannel(id) DELETE `/channels/${id}`.",
        "Export functions."
      ],
      "integration_points": [
        "Used by ChannelsPage and Sidebar to list channels",
        "Mock server provides endpoints defined in app config"
      ],
      "prompt_context": {
        "component_type": "service",
        "data_model": "channel",
        "interactions": [
          "list",
          "create",
          "update",
          "delete"
        ],
        "styling_approach": null,
        "dependencies": [
          "src/services/apiClient.ts",
          "src/types/index.ts"
        ]
      },
      "priority": 1
    },
    {
      "id": "file-service",
      "title": "File service (services/fileService.ts)",
      "description": "File upload/listing service that supports multipart upload endpoints and returns file metadata.",
      "file_to_implement": "src/services/fileService.ts",
      "acceptance": [
        "Exports uploadFile(file, channelId) which POSTs formData to '/files' and returns FileItem",
        "Exports fetchFiles(channelId) GET '/files?channelId='",
        "Handles progress callback optionally"
      ],
      "implementation_steps": [
        "Import apiClient and types FileItem, ApiResponse.",
        "Implement uploadFile(file, channelId, onProgress?) constructing FormData with file and channelId and posting to '/files' with axios config onUploadProgress forwarded to onProgress.",
        "Implement fetchFiles(channelId) GET '/files?channelId=${channelId}'.",
        "Export functions."
      ],
      "integration_points": [
        "Used by FileUpload component and message sending flows to attach files",
        "Mocks will provide /api/files"
      ],
      "prompt_context": {
        "component_type": "service",
        "data_model": "file",
        "interactions": [
          "upload",
          "list"
        ],
        "styling_approach": null,
        "dependencies": [
          "src/services/apiClient.ts",
          "src/types/index.ts"
        ]
      },
      "priority": 2
    },
    {
      "id": "presence-service",
      "title": "Presence service (services/presenceService.ts)",
      "description": "Service to get and update user presence via REST (used for initial load) and via Socket events for live updates.",
      "file_to_implement": "src/services/presenceService.ts",
      "acceptance": [
        "Exports fetchPresence(userIds?) GET '/presence' optionally with query param",
        "Exports updatePresence(userId, status) PATCH '/presence/:userId'",
        "Works with mock endpoints"
      ],
      "implementation_steps": [
        "Import apiClient and types Presence.",
        "Implement fetchPresence(userIds?) which builds a query string and GETs '/presence'.",
        "Implement updatePresence(userId, status) PATCH `/presence/${userId}` with { status } payload.",
        "Export functions."
      ],
      "integration_points": [
        "Used by PresenceIndicator component and SocketProvider to bootstrap presence state",
        "Mock server provides endpoints"
      ],
      "prompt_context": {
        "component_type": "service",
        "data_model": "presence",
        "interactions": [
          "fetch",
          "update"
        ],
        "styling_approach": null,
        "dependencies": [
          "src/services/apiClient.ts",
          "src/types/index.ts"
        ]
      },
      "priority": 2
    },
    {
      "id": "reaction-service",
      "title": "Reaction service (services/reactionService.ts)",
      "description": "Service to add/remove reactions to messages and fetch aggregated reactions.",
      "file_to_implement": "src/services/reactionService.ts",
      "acceptance": [
        "Exports addReaction(messageId, emoji), removeReaction(reactionId), fetchReactions(messageId)",
        "Uses '/reactions' endpoints and returns typed Reaction[]"
      ],
      "implementation_steps": [
        "Import apiClient and types Reaction.",
        "Implement addReaction(messageId, emoji) POST '/reactions' with payload and return created Reaction.",
        "Implement removeReaction(reactionId) DELETE `/reactions/${reactionId}`.",
        "Implement fetchReactions(messageId) GET `/reactions?messageId=${messageId}`.",
        "Export functions."
      ],
      "integration_points": [
        "Used by MessageBubble component and reaction UI",
        "Mock endpoints in mockServer handle the requests"
      ],
      "prompt_context": {
        "component_type": "service",
        "data_model": "reaction",
        "interactions": [
          "create",
          "delete",
          "list"
        ],
        "styling_approach": null,
        "dependencies": [
          "src/services/apiClient.ts",
          "src/types/index.ts"
        ]
      },
      "priority": 3
    },
    {
      "id": "thread-service",
      "title": "Thread service (services/threadService.ts)",
      "description": "Service to manage threaded conversations: fetch thread, post message to thread.",
      "file_to_implement": "src/services/threadService.ts",
      "acceptance": [
        "Exports fetchThread(threadId), postToThread(threadId, messagePayload)",
        "Uses '/threads' endpoints and returns typed Thread or Message"
      ],
      "implementation_steps": [
        "Import apiClient and types Thread, Message.",
        "Implement fetchThread(threadId) GET `/threads/${threadId}`.",
        "Implement postToThread(threadId, payload) POST `/threads/${threadId}/messages`.",
        "Export functions."
      ],
      "integration_points": [
        "Used by ThreadView component and message composition for replying in threads",
        "Mock server supports /api/threads"
      ],
      "prompt_context": {
        "component_type": "service",
        "data_model": "thread",
        "interactions": [
          "fetch",
          "create message"
        ],
        "styling_approach": null,
        "dependencies": [
          "src/services/apiClient.ts",
          "src/types/index.ts"
        ]
      },
      "priority": 3
    },
    {
      "id": "mock-server",
      "title": "Mock HTTP server (mocks/mockServer.ts)",
      "description": "Development-only in-process mock server implementing the listed API endpoints and returning mock data. Also exposes startMockServer() to initialize handlers and seed localStorage with mock users.",
      "file_to_implement": "src/mocks/mockServer.ts",
      "acceptance": [
        "Exports startMockServer() which installs fetch interception handlers or a lightweight MSW-like handler",
        "Handles endpoints: /api/messages, /api/channels, /api/users, /api/files, /api/presence, /api/reactions, /api/threads, and auth endpoints (/auth/login, /auth/refresh)",
        "Uses the mock_auth_users from the provided config for login behavior and persists session tokens to localStorage when requested"
      ],
      "implementation_steps": [
        "Export a function startMockServer() that registers global fetch interception (patch window.fetch) or provides a simple route switch when requests start with '/api'.",
        "Implement in-memory stores for users, channels, messages, files, presence, reactions, threads matching types in src/types/index.ts.",
        "Implement /auth/login that validates email/password against mock_auth_users and returns user and fake tokens (expiresAt timestamp).",
        "Implement list/fetch/create/update/delete handlers for the routes specified in app config returning JSON matching ApiResponse<T> shapes.",
        "Provide a function to seed initial channels, a default 'general' channel, and a couple of messages.",
        "Expose stopMockServer() if useful, but at minimum startMockServer() must be callable from main.tsx.",
        "Document how to extend the in-memory stores for more messages."
      ],
      "integration_points": [
        "Called by main.tsx to start mock server in development",
        "Mocks endpoints consumed by services/* via apiClient"
      ],
      "prompt_context": {
        "component_type": "mock",
        "data_model": null,
        "interactions": [
          "http interception",
          "seed data"
        ],
        "styling_approach": null,
        "dependencies": [
          "src/config.ts",
          "src/types/index.ts"
        ]
      },
      "priority": 1
    },
    {
      "id": "mock-websocket",
      "title": "Mock WebSocket (mocks/mockWebSocket.ts)",
      "description": "A dev-mode minimal EventEmitter-based mock WebSocket that can be used by SocketProvider to broadcast real-time events to the app.",
      "file_to_implement": "src/mocks/mockWebSocket.ts",
      "acceptance": [
        "Exports a class MockWebSocket with on(event, handler), off, emit methods and connect/disconnect",
        "Simulates presence updates and new messages at intervals",
        "Provides a createMockSocket() helper that returns a connected MockWebSocket instance"
      ],
      "implementation_steps": [
        "Implement a simple event emitter class with a Map of event->Set<handler> and methods on/off/emit.",
        "Implement connect() which starts timers that every 10s emits 'message:new' with a generated message using generateId() and the mock users; also emit 'presence:update' occasionally.",
        "Implement disconnect() which clears timers.",
        "Export createMockSocket() returning an instance with connect called.",
        "Ensure type signatures are generic (use types Message, Presence from ../types)."
      ],
      "integration_points": [
        "Used by shared/context/SocketProvider to provide a socket instance when config.disable_websocket_in_dev is false",
        "Emits events consumed by React Query via queryClient updates"
      ],
      "prompt_context": {
        "component_type": "mock",
        "data_model": "message, presence",
        "interactions": [
          "emit",
          "subscribe"
        ],
        "styling_approach": null,
        "dependencies": [
          "src/types/index.ts",
          "src/utils/generateId.ts",
          "src/config.ts"
        ]
      },
      "priority": 1
    },
    {
      "id": "query-provider",
      "title": "React Query provider wrapper (shared/context/QueryProvider.tsx)",
      "description": "Sets up React Query's QueryClient, devtools option (dev-mode), default options and exposes QueryClientProvider for the app.",
      "file_to_implement": "src/shared/context/QueryProvider.tsx",
      "acceptance": [
        "Creates QueryClient with sensible defaults and React Query error boundaries (retry logic)",
        "Provides <QueryProvider>{children}</QueryProvider> component wrapper exporting the queryClient instance if needed",
        "Integrates with mock server behavior if needed"
      ],
      "implementation_steps": [
        "Import QueryClient and QueryClientProvider from 'react-query' (or '@tanstack/react-query' depending on chosen version), React, and config.",
        "Create QueryClient with defaultOptions: queries: { retry: 1, staleTime: 10000, refetchOnWindowFocus: false } and mutations configured as needed.",
        "Export function QueryProvider({ children }) that returns <QueryClientProvider client={client}>{children}</QueryClientProvider>.",
        "Also export queryClient for use by SocketProvider to invalidate queries upon socket events.",
        "Avoid importing any UI modules to keep this provider purely for data."
      ],
      "integration_points": [
        "Used in src/main.tsx to wrap the App",
        "queryClient is imported by SocketProvider to update caches on real-time events"
      ],
      "prompt_context": {
        "component_type": "provider",
        "data_model": null,
        "interactions": [
          "caching",
          "mutations"
        ],
        "styling_approach": null,
        "dependencies": [
          "src/config.ts"
        ]
      },
      "priority": 1
    },
    {
      "id": "auth-context",
      "title": "Auth provider and context (shared/context/AuthContext.tsx)",
      "description": "AuthContext that provides currentUser, tokens, login/logout functions, and route protection helpers. Uses localStorage for persistence in dev mode and authService for flows.",
      "file_to_implement": "src/shared/context/AuthContext.tsx",
      "acceptance": [
        "Exports AuthProvider that wraps children and exports useAuth hook (or context object)",
        "Persists user & token to localStorage when config.use_localstorage_persistence is true",
        "Provides login(email,password), logout(), and currentUser in context",
        "Protects routes through helper RequireAuth component"
      ],
      "implementation_steps": [
        "Import createContext, useContext, useState, useEffect, ReactNode from 'react', authService from '../../services/authService', config from '../../config', types User and AuthTokens.",
        "Create an AuthContext with shape { user: User | null, tokens: AuthTokens | null, login: async, logout: () => void }.",
        "Implement AuthProvider reading initial state from localStorage if enabled and exposing functions that call authService and update localStorage accordingly.",
        "Export a useAuth() hook that returns context and a RequireAuth component that checks user and redirects to '/login' if not authenticated (use react-router navigate or a placeholder return).",
        "Ensure tokens are stored under keys from config.LOCALSTORAGE_KEYS or similar."
      ],
      "integration_points": [
        "Used by pages that need authentication (ChatPage, ChannelsPage, DirectMessagePage)",
        "Relies on services/authService.ts and config.ts"
      ],
      "prompt_context": {
        "component_type": "provider",
        "data_model": "user, auth tokens",
        "interactions": [
          "login",
          "logout",
          "persist"
        ],
        "styling_approach": null,
        "dependencies": [
          "src/services/authService.ts",
          "src/config.ts",
          "src/types/index.ts"
        ]
      },
      "priority": 1
    },
    {
      "id": "socket-provider",
      "title": "Socket provider (shared/context/SocketProvider.tsx)",
      "description": "Provides a socket instance to the app; in dev-mode uses mocks/mockWebSocket.ts and forwards socket events to React Query to update caches.",
      "file_to_implement": "src/shared/context/SocketProvider.tsx",
      "acceptance": [
        "Exports SocketProvider that connects to a socket (real WebSocket in prod or MockWebSocket in dev)",
        "Subscribes to events like 'message:new', 'presence:update' and updates queryClient via setQueryData or invalidateQueries",
        "Provides useSocket hook or context with on/emit methods"
      ],
      "implementation_steps": [
        "Import React, createContext, useContext, useEffect, useRef from 'react', queryClient from '../context/QueryProvider' (or import a getter), config from '../../config', and createMockSocket from '../../mocks/mockWebSocket'.",
        "Create SocketContext exposing on/off/emit and the connected flag.",
        "In SocketProvider, if config.disable_websocket_in_dev is false and config.enable_mock_data true, create the mock socket createMockSocket(), connect it, and subscribe to 'message:new' and 'presence:update'.",
        "On 'message:new' event, call queryClient.setQueryData for messages for the appropriate channel or call invalidateQueries('messages'). Similarly handle presence updates.",
        "Cleanup subscriptions on unmount and disconnect socket.",
        "Export useSocket() hook to access context."
      ],
      "integration_points": [
        "Mounted in src/main.tsx, used by components/hook to subscribe to real-time events",
        "Integrates with mockWebSocket to simulate real-time"
      ],
      "prompt_context": {
        "component_type": "provider",
        "data_model": "message, presence",
        "interactions": [
          "subscribe",
          "broadcast"
        ],
        "styling_approach": null,
        "dependencies": [
          "src/mocks/mockWebSocket.ts",
          "src/shared/context/QueryProvider.tsx",
          "src/config.ts"
        ]
      },
      "priority": 1
    },
    {
      "id": "theme-provider",
      "title": "Theme provider (shared/context/ThemeProvider.tsx)",
      "description": "Provides dark mode toggle and stores preference in localStorage; integrates with Tailwind's dark class on document element.",
      "file_to_implement": "src/shared/context/ThemeProvider.tsx",
      "acceptance": [
        "Exports ThemeProvider that applies 'dark' class to document.documentElement when theme = 'dark'",
        "Persists preference to localStorage (if config.use_localstorage_persistence)",
        "Provides useTheme hook to toggle theme"
      ],
      "implementation_steps": [
        "Create React context that exposes theme: 'light'|'dark' and toggleTheme function.",
        "On mount, read preference from localStorage if enabled, fall back to system preference if not present.",
        "When theme changes, add or remove 'dark' class to document.documentElement.",
        "Export ThemeProvider and useTheme hook."
      ],
      "integration_points": [
        "Wrapped by main.tsx to enable dark mode across UI components (Tailwind CSS)",
        "Used by Header (theme toggle) and any component that needs theme info"
      ],
      "prompt_context": {
        "component_type": "provider",
        "data_model": null,
        "interactions": [
          "toggle theme",
          "persist"
        ],
        "styling_approach": "tailwind",
        "dependencies": [
          "src/config.ts"
        ]
      },
      "priority": 2
    },
    {
      "id": "error-boundary",
      "title": "Error boundary (shared/context/ErrorBoundary.tsx)",
      "description": "React Error Boundary component providing a fallback UI and logging. Ensures the app doesn't crash entirely on runtime errors.",
      "file_to_implement": "src/shared/context/ErrorBoundary.tsx",
      "acceptance": [
        "Exports ErrorBoundary React component that wraps children and displays a user-friendly fallback with retry button",
        "Logs errors to console and provides a reset handler"
      ],
      "implementation_steps": [
        "Implement a class component extending React.Component with componentDidCatch to log error and set state hasError true.",
        "Render children when no error; render fallback with message, Retry button that resets state to attempt re-render.",
        "Export default ErrorBoundary component."
      ],
      "integration_points": [
        "Used at top-level in src/main.tsx",
        "Provides meaningful fallback around provider stack"
      ],
      "prompt_context": {
        "component_type": "error boundary",
        "data_model": null,
        "interactions": [
          "render fallback",
          "reset"
        ],
        "styling_approach": "tailwind",
        "dependencies": []
      },
      "priority": 1
    },
    {
      "id": "use-localstorage",
      "title": "useLocalStorage hook (shared/hooks/useLocalStorage.ts)",
      "description": "A typed hook for reading/writing JSON-serializable values to localStorage with SSR-safe guards.",
      "file_to_implement": "src/shared/hooks/useLocalStorage.ts",
      "acceptance": [
        "Exports useLocalStorage<T>(key, initialValue) returning [value, setValue, remove]",
        "Handles JSON serialization, errors, and falls back to initialValue if parsing fails"
      ],
      "implementation_steps": [
        "Implement function that on initial render tries to read from localStorage; if missing returns initialValue.",
        "Expose setValue function that updates state and writes JSON to localStorage, and remove function to clear key.",
        "Type the hook generically and export default.",
        "Add safety checks for window availability."
      ],
      "integration_points": [
        "Used by AuthContext, ThemeProvider, and any component needing persistence",
        "No external dependencies"
      ],
      "prompt_context": {
        "component_type": "hook",
        "data_model": null,
        "interactions": [
          "persist",
          "read"
        ],
        "styling_approach": null,
        "dependencies": []
      },
      "priority": 1
    },
    {
      "id": "use-auth-hook",
      "title": "useAuth hook (shared/hooks/useAuth.ts)",
      "description": "Convenient hook re-exporting AuthContext to be used throughout components. Provides helpers to check roles and protect actions.",
      "file_to_implement": "src/shared/hooks/useAuth.ts",
      "acceptance": [
        "Exports useAuth() that returns { user, tokens, login, logout, hasRole }",
        "hasRole(role) returns boolean if user has that role"
      ],
      "implementation_steps": [
        "Import useContext from react and AuthContext from '../context/AuthContext'.",
        "Implement and export function useAuth() that returns the context and augments it with hasRole(role) helper.",
        "Throw when used outside AuthProvider for developer clarity."
      ],
      "integration_points": [
        "Used by pages and components that require auth (Header, ChatPage, ChannelsPage)",
        "Depends on AuthContext implementation"
      ],
      "prompt_context": {
        "component_type": "hook",
        "data_model": "user",
        "interactions": [
          "check role",
          "login/logout"
        ],
        "styling_approach": null,
        "dependencies": [
          "src/shared/context/AuthContext.tsx"
        ]
      },
      "priority": 1
    },
    {
      "id": "use-websocket-hook",
      "title": "useWebSocket hook (shared/hooks/useWebSocket.ts)",
      "description": "Hook that provides a simple typed subscription API to socket events exposed by SocketProvider.",
      "file_to_implement": "src/shared/hooks/useWebSocket.ts",
      "acceptance": [
        "Exports useWebSocket() returning { on(event, handler), off(event, handler), emit(event, payload) }",
        "Internally uses SocketContext created in SocketProvider"
      ],
      "implementation_steps": [
        "Import useContext from react and SocketContext from '../context/SocketProvider'.",
        "Return the context object; if not present throw error for developer feedback.",
        "Type generically with known event names 'message:new' | 'presence:update' etc."
      ],
      "integration_points": [
        "Used by components that want to listen to custom socket events (optional)",
        "Relies on SocketProvider"
      ],
      "prompt_context": {
        "component_type": "hook",
        "data_model": "message, presence",
        "interactions": [
          "subscribe",
          "emit"
        ],
        "styling_approach": null,
        "dependencies": [
          "src/shared/context/SocketProvider.tsx"
        ]
      },
      "priority": 2
    },
    {
      "id": "use-debounce",
      "title": "useDebounce hook (shared/hooks/useDebounce.ts)",
      "description": "Utility hook for debouncing a value with cleanup on unmount.",
      "file_to_implement": "src/shared/hooks/useDebounce.ts",
      "acceptance": [
        "Exports useDebounce<T>(value, delay) returning debounced value",
        "Clears timer on unmount or when value changes"
      ],
      "implementation_steps": [
        "Implement hook using useState and useEffect storing a timer via window.setTimeout and clearing on cleanup.",
        "Generic typing so works with any value type.",
        "Export default."
      ],
      "integration_points": [
        "Used by SearchBar and message search features",
        "No other dependencies"
      ],
      "prompt_context": {
        "component_type": "hook",
        "data_model": null,
        "interactions": [
          "debounce"
        ],
        "styling_approach": null,
        "dependencies": []
      },
      "priority": 3
    },
    {
      "id": "use-i18n",
      "title": "i18n initializer hook (shared/hooks/useI18n.ts)",
      "description": "Sets up i18next minimal configuration and returns t function or readiness flag for Suspense.",
      "file_to_implement": "src/shared/hooks/useI18n.ts",
      "acceptance": [
        "Initializes i18next with at least English translations and provides a useI18n hook that returns a t function",
        "Supports lazy loading via Suspense in App"
      ],
      "implementation_steps": [
        "Import i18next and react-i18next initialization helpers. Provide minimal en translation resources for common UI strings.",
        "Initialize i18n only once (guard with a module-scoped flag).",
        "Export a useI18n hook that calls useTranslation() and returns t.",
        "Keep implementation simple but typed."
      ],
      "integration_points": [
        "Used by App.tsx and shared components to localize UI strings",
        "Independent from mock server"
      ],
      "prompt_context": {
        "component_type": "hook",
        "data_model": null,
        "interactions": [
          "init i18n"
        ],
        "styling_approach": null,
        "dependencies": [
          "i18next"
        ]
      },
      "priority": 3
    },
    {
      "id": "generate-id",
      "title": "ID generator util (src/utils/generateId.ts)",
      "description": "Utility that generates short unique ids for mock data.",
      "file_to_implement": "src/utils/generateId.ts",
      "acceptance": [
        "Exports generateId(prefix?) returning a string unique enough for mock purposes",
        "No external dependencies"
      ],
      "implementation_steps": [
        "Implement a function that returns `${prefix ?? ''}${Date.now().toString(36)}-${Math.random().toString(36).slice(2,9)}`.",
        "Export default generateId.",
        "Add JSDoc type annotation for readability."
      ],
      "integration_points": [
        "Used by mockWebSocket, mockServer, services when creating local objects"
      ],
      "prompt_context": {
        "component_type": "utility",
        "data_model": null,
        "interactions": [],
        "styling_approach": null,
        "dependencies": []
      },
      "priority": 4
    },
    {
      "id": "format-date",
      "title": "Date formatting util (src/utils/formatDate.ts)",
      "description": "Small utility to format ISO timestamps into relative or human-friendly strings.",
      "file_to_implement": "src/utils/formatDate.ts",
      "acceptance": [
        "Exports formatDate(isoString) returning 'HH:MM' for same-day messages and 'MMM dd' for older",
        "Handles invalid inputs gracefully"
      ],
      "implementation_steps": [
        "Implement parsing of ISO string to Date, compare to now, and return formatted strings using Intl.DateTimeFormat or manual logic.",
        "Export default formatDate.",
        "Add tests in comments or examples of expected outputs."
      ],
      "integration_points": [
        "Used by MessageBubble and MessageList components"
      ],
      "prompt_context": {
        "component_type": "utility",
        "data_model": null,
        "interactions": [
          "format"
        ],
        "styling_approach": null,
        "dependencies": []
      },
      "priority": 4
    },
    {
      "id": "header-component",
      "title": "Header (shared/components/Header.tsx)",
      "description": "Top application header containing app title, search button, theme toggle, and current user avatar/menu.",
      "file_to_implement": "src/shared/components/Header.tsx",
      "acceptance": [
        "Displays app title/logo, search icon (accessible), theme toggle and user Avatar",
        "Calls useAuth for current user and displays their avatar with accessible menu (aria attributes)",
        "Uses Tailwind for responsive layout and supports dark mode"
      ],
      "implementation_steps": [
        "Import React, useState, Link from react-router-dom (or anchor placeholder), useAuth from '../../shared/hooks/useAuth', Avatar from './Avatar', Icon from './Icon', useTheme from '../context/ThemeProvider' or hook.",
        "Render a responsive header with left-aligned logo/title (Link to '/'), center search button (button with aria-label 'Search (Ctrl/Cmd+K)'), right side has theme toggle button and Avatar that when clicked shows a small dropdown with 'Profile' and 'Logout' buttons calling useAuth.logout.",
        "Ensure keyboard accessibility for dropdown and aria attributes present.",
        "Export default Header component."
      ],
      "integration_points": [
        "Used in App.tsx and pages layouts",
        "Depends on Avatar, Icon, useAuth, ThemeProvider"
      ],
      "prompt_context": {
        "component_type": "component",
        "data_model": "user",
        "interactions": [
          "open menu",
          "logout",
          "toggle theme"
        ],
        "styling_approach": "tailwind",
        "dependencies": [
          "src/shared/hooks/useAuth.ts",
          "src/shared/components/Avatar.tsx",
          "src/shared/components/Icon.tsx",
          "src/shared/context/ThemeProvider.tsx"
        ]
      },
      "priority": 2
    },
    {
      "id": "avatar-component",
      "title": "Avatar component (shared/components/Avatar.tsx)",
      "description": "Small avatar presentational component that renders an image or initials fallback and supports accessible sizes.",
      "file_to_implement": "src/shared/components/Avatar.tsx",
      "acceptance": [
        "Accepts props: src?, name?, size ('sm'|'md'|'lg'), alt, onClick optional",
        "Renders initials when no src and uses accessible <img> alt text",
        "Applies Tailwind classes for rounded and shadow"
      ],
      "implementation_steps": [
        "Define props interface and default props; compute initials from name if no src.",
        "Render a button or div containing <img> when src present with alt text, otherwise a colored div with initials.",
        "Expose onClick for interactive avatars and ensure role/button semantics when clickable.",
        "Export default Avatar."
      ],
      "integration_points": [
        "Used in Header, MessageBubble, Sidebar user lists",
        "No external dependencies beyond types"
      ],
      "prompt_context": {
        "component_type": "component",
        "data_model": "user",
        "interactions": [
          "click"
        ],
        "styling_approach": "tailwind",
        "dependencies": [
          "src/types/index.ts"
        ]
      },
      "priority": 3
    },
    {
      "id": "icon-component",
      "title": "Icon set (shared/components/Icon.tsx)",
      "description": "Small icon component exporting a few inline SVG icons used across the app: Search, Send, Theme, File, Emoji.",
      "file_to_implement": "src/shared/components/Icon.tsx",
      "acceptance": [
        "Exports named icons: SearchIcon, SendIcon, ThemeIcon, FileIcon, EmojiIcon and a generic Icon component that returns requested icon",
        "Icons accept className for sizing and color"
      ],
      "implementation_steps": [
        "Implement simple functional components returning SVG for each icon and typed props { className?: string, 'aria-hidden'?: boolean }.",
        "Export them as named exports and provide a default Icon dispatcher if useful.",
        "Keep icon SVG lightweight and accessible with role='img' and focusable='false'."
      ],
      "integration_points": [
        "Imported by Header, FileUpload, EmojiPicker and other small components",
        "Self-contained, no external dependencies"
      ],
      "prompt_context": {
        "component_type": "component",
        "data_model": null,
        "interactions": [
          "visual"
        ],
        "styling_approach": "tailwind",
        "dependencies": []
      },
      "priority": 4
    },
    {
      "id": "button-component",
      "title": "Button (shared/components/Button.tsx)",
      "description": "Accessible button primitive used across the app (variants: primary, secondary, ghost).",
      "file_to_implement": "src/shared/components/Button.tsx",
      "acceptance": [
        "Accepts props: children, variant, size, disabled, onClick, type",
        "Applies Tailwind classes per variant and size, handles aria-disabled and keyboard",
        "Export default Button and named variants if needed"
      ],
      "implementation_steps": [
        "Create a props interface with variant union and size union, forwardRef to native button element.",
        "Map variant/size to Tailwind class strings and apply them to button element along with passed className.",
        "Ensure proper aria-disabled attribute when disabled and prevent onClick when disabled.",
        "Export default Button."
      ],
      "integration_points": [
        "Used by almost every UI including Header, Modal, forms and pages",
        "No external dependencies beyond tailwind css classes"
      ],
      "prompt_context": {
        "component_type": "component",
        "data_model": null,
        "interactions": [
          "click",
          "disabled"
        ],
        "styling_approach": "tailwind",
        "dependencies": []
      },
      "priority": 2
    },
    {
      "id": "input-component",
      "title": "Input (shared/components/Input.tsx)",
      "description": "Accessible input primitive used for forms and search with validation states.",
      "file_to_implement": "src/shared/components/Input.tsx",
      "acceptance": [
        "Accepts props: value, onChange, placeholder, name, aria-label, error state",
        "Renders label when provided, shows error message when error prop passed, supports forwarded ref"
      ],
      "implementation_steps": [
        "Define props interface and forwardRef to input element.",
        "Render an input with Tailwind classes that change on focus/invalid via props.",
        "If an error string prop is passed render a small <p> with role='alert' explaining the error.",
        "Export default Input."
      ],
      "integration_points": [
        "Used by LoginPage, SearchBar, FileUpload forms",
        "No other file-level dependencies"
      ],
      "prompt_context": {
        "component_type": "component",
        "data_model": null,
        "interactions": [
          "type",
          "validation"
        ],
        "styling_approach": "tailwind",
        "dependencies": []
      },
      "priority": 2
    },
    {
      "id": "textarea-component",
      "title": "Textarea (shared/components/Textarea.tsx)",
      "description": "Multiline text input used for composing messages; supports auto-resize and submission on Cmd/Ctrl+Enter.",
      "file_to_implement": "src/shared/components/Textarea.tsx",
      "acceptance": [
        "Accepts props: value, onChange, onSubmit, placeholder, rows, aria-label",
        "Handles Ctrl/Cmd+Enter to call onSubmit, supports auto-resize to content",
        "Accessible with proper labels"
      ],
      "implementation_steps": [
        "Implement a textarea that adjusts height based on scrollHeight using ref and style adjustments on input event.",
        "Listen for keydown for submit combination and call onSubmit if provided.",
        "Export default Textarea."
      ],
      "integration_points": [
        "Used by ChatPage message composer and ThreadView reply box",
        "No additional external dependencies"
      ],
      "prompt_context": {
        "component_type": "component",
        "data_model": "message",
        "interactions": [
          "compose",
          "submit"
        ],
        "styling_approach": "tailwind",
        "dependencies": []
      },
      "priority": 2
    },
    {
      "id": "spinner-component",
      "title": "Spinner (shared/components/Spinner.tsx)",
      "description": "Small loading spinner used as Suspense fallback and loaders across the app.",
      "file_to_implement": "src/shared/components/Spinner.tsx",
      "acceptance": [
        "Renders an accessible spinning SVG with aria-busy or role='status'",
        "Allows size prop and className override"
      ],
      "implementation_steps": [
        "Implement a functional component returning an SVG circle with animation via Tailwind 'animate-spin' class and appropriate accessibility attributes.",
        "Export default Spinner.",
        "Keep component lightweight and reusable."
      ],
      "integration_points": [
        "Used by App.tsx Suspense fallback and loading states in pages",
        "No additional dependencies"
      ],
      "prompt_context": {
        "component_type": "component",
        "data_model": null,
        "interactions": [
          "visual"
        ],
        "styling_approach": "tailwind",
        "dependencies": []
      },
      "priority": 3
    },
    {
      "id": "modal-component",
      "title": "Modal (shared/components/Modal.tsx)",
      "description": "Accessible modal component with focus trap and keyboard escape handling.",
      "file_to_implement": "src/shared/components/Modal.tsx",
      "acceptance": [
        "Renders children in a centered dialog with backdrop, traps focus while open, closes on ESC, and returns focus to trigger",
        "Accessible markup (role='dialog', aria-modal)",
        "Supports controlled open prop and onClose callback"
      ],
      "implementation_steps": [
        "Create Modal component with props { isOpen, onClose, title, children } and use portal to append to document.body.",
        "Implement trap focus by saving previously focused element and returning focus on close; add keydown handler for Escape key to call onClose.",
        "Render backdrop and dialog with aria attributes and ensure clicking backdrop triggers onClose.",
        "Export default Modal."
      ],
      "integration_points": [
        "Used by settings dialogs, file preview, and channel creation flows",
        "No circular dependencies"
      ],
      "prompt_context": {
        "component_type": "component",
        "data_model": null,
        "interactions": [
          "open",
          "close",
          "trap focus"
        ],
        "styling_approach": "tailwind",
        "dependencies": []
      },
      "priority": 3
    },
    {
      "id": "sidebar-component",
      "title": "Sidebar (shared/components/Sidebar.tsx)",
      "description": "Left side navigation listing channels and direct messages with presence indicators.",
      "file_to_implement": "src/shared/components/Sidebar.tsx",
      "acceptance": [
        "Renders a list of channels (from props or via useQuery) with accessible links to channels, show unread badges placeholder",
        "Shows direct messages / contacts with PresenceIndicator next to avatars",
        "Responsive: collapses to icon-only on small screens"
      ],
      "implementation_steps": [
        "Create Sidebar component that optionally accepts channels prop; if none provided uses channelService.fetchChannels via React Query (documented in comments).",
        "Render channel items as accessible Links to `/channels/:id` and DM entries to `/dm/:userId`.",
        "Use Avatar and PresenceIndicator components alongside names; add keyboard navigation (arrow keys) to move focus between items.",
        "Export default Sidebar."
      ],
      "integration_points": [
        "Used in ChatLayout and ChatPage",
        "Depends on Avatar, PresenceIndicator, channelService (via React Query) if not passed as props"
      ],
      "prompt_context": {
        "component_type": "component",
        "data_model": "channel, user, presence",
        "interactions": [
          "navigate",
          "focus"
        ],
        "styling_approach": "tailwind",
        "dependencies": [
          "src/shared/components/Avatar.tsx",
          "src/shared/components/PresenceIndicator.tsx",
          "src/services/channelService.ts"
        ]
      },
      "priority": 2
    },
    {
      "id": "presence-indicator-component",
      "title": "Presence indicator (shared/components/PresenceIndicator.tsx)",
      "description": "Small colored dot indicating user presence with accessible tooltip.",
      "file_to_implement": "src/shared/components/PresenceIndicator.tsx",
      "acceptance": [
        "Accepts status prop and renders green/yellow/gray/red dot with aria-label describing status",
        "Supports small/medium sizes"
      ],
      "implementation_steps": [
        "Implement functional component mapping status to Tailwind bg colors and accessible label.",
        "Use title attribute or a tooltip accessible via aria-describedby.",
        "Export default PresenceIndicator."
      ],
      "integration_points": [
        "Used by Sidebar, Avatar, and Header user lists",
        "No external dependencies"
      ],
      "prompt_context": {
        "component_type": "component",
        "data_model": "presence",
        "interactions": [
          "display"
        ],
        "styling_approach": "tailwind",
        "dependencies": [
          "src/types/index.ts"
        ]
      },
      "priority": 4
    },
    {
      "id": "message-bubble",
      "title": "Message bubble (shared/components/MessageBubble.tsx)",
      "description": "Displays message content, attachments, reactions, and provides controls for reply/edit/delete with accessible interactions.",
      "file_to_implement": "src/shared/components/MessageBubble.tsx",
      "acceptance": [
        "Renders author avatar & name, message content, attachments list, timestamp using formatDate util",
        "Allows reacting (opens EmojiPicker), replying (open ThreadView), editing (if author) and deleting (if author/admin)",
        "Accessible: aria-labels on controls and keyboard support"
      ],
      "implementation_steps": [
        "Import types Message, Avatar, formatDate util, EmojiPicker, ReactionService functions via hooks or services as documented.",
        "Render a container with left Avatar, right content with name, content text, attachments rendered as links using FileUpload preview, and a small footer with timestamp and action buttons (Reply, React, More menu).",
        "Wire action buttons to props callbacks (onReply, onReact, onEdit, onDelete) passed from parent; do not implement network calls inside this file to keep component presentational.",
        "Export default MessageBubble and typed props interface.",
        "Document integration expectations: parent will handle optimistic updates and permissions."
      ],
      "integration_points": [
        "Used by ChatPage message list and ThreadView",
        "Parent components must provide callback handlers that connect to services/messageService and reactionService"
      ],
      "prompt_context": {
        "component_type": "component",
        "data_model": "message",
        "interactions": [
          "reply",
          "react",
          "edit",
          "delete"
        ],
        "styling_approach": "tailwind",
        "dependencies": [
          "src/types/index.ts",
          "src/utils/formatDate.ts",
          "src/shared/components/Avatar.tsx",
          "src/shared/components/EmojiPicker.tsx"
        ]
      },
      "priority": 2
    },
    {
      "id": "emoji-picker",
      "title": "Emoji picker (shared/components/EmojiPicker.tsx)",
      "description": "Lightweight emoji selection UI that returns selected emoji via callback. Supports keyboard navigation.",
      "file_to_implement": "src/shared/components/EmojiPicker.tsx",
      "acceptance": [
        "Shows grid of emoji options, accepts onSelect(emoji) callback",
        "Keyboard navigable and accessible with role='listbox' or buttons",
        "Small and fast; no heavy external emoji libs"
      ],
      "implementation_steps": [
        "Create a small list/array of emoji strings to show (e.g., \ud83d\udc4d, \u2764\ufe0f, \ud83d\ude02, \ud83c\udf89, \ud83d\ude2e).",
        "Render a grid of buttons; each button has aria-label with emoji name and calls onSelect when clicked.",
        "Handle arrow keys to move focus inside grid and Enter/Space to select.",
        "Export default EmojiPicker."
      ],
      "integration_points": [
        "Used by MessageBubble and reaction flows",
        "No external dependencies"
      ],
      "prompt_context": {
        "component_type": "component",
        "data_model": "reaction",
        "interactions": [
          "select"
        ],
        "styling_approach": "tailwind",
        "dependencies": []
      },
      "priority": 3
    },
    {
      "id": "file-upload-component",
      "title": "FileUpload component (shared/components/FileUpload.tsx)",
      "description": "File input UI that supports drag-and-drop, shows previews, and calls fileService.uploadFile to upload attachments.",
      "file_to_implement": "src/shared/components/FileUpload.tsx",
      "acceptance": [
        "Supports selecting files via dialog and drag-and-drop, shows list of selected files with progress bars",
        "Calls provided onUploadComplete callback with uploaded FileItem(s)",
        "Accessible dropzone with proper ARIA and keyboard fallback"
      ],
      "implementation_steps": [
        "Implement a component maintaining local state for queued files and progress; use input type='file' hidden with button to trigger.",
        "Handle dragover/drop events to add files to queue; prevent default behaviors.",
        "For each queued file call fileService.uploadFile(file, channelId, onProgress) and update progress; on success call onUploadComplete with returned FileItem.",
        "Render visual progress bars and allow cancelling queued uploads.",
        "Export default FileUpload component."
      ],
      "integration_points": [
        "Used by message composer in ChatPage, utilizes services/fileService.ts",
        "Relies on mockServer upload endpoints in dev"
      ],
      "prompt_context": {
        "component_type": "component",
        "data_model": "file",
        "interactions": [
          "upload",
          "drag-drop"
        ],
        "styling_approach": "tailwind",
        "dependencies": [
          "src/services/fileService.ts",
          "src/types/index.ts"
        ]
      },
      "priority": 2
    },
    {
      "id": "thread-view",
      "title": "Thread view (shared/components/ThreadView.tsx)",
      "description": "Displays threaded conversation for a parent message; allows posting replies and viewing replies in context.",
      "file_to_implement": "src/shared/components/ThreadView.tsx",
      "acceptance": [
        "Accepts threadId and parentMessage props and uses onPostReply callback to submit reply",
        "Renders parent message at top, list of replies chronologically, and a Textarea to compose reply",
        "Keyboard accessible and responsive"
      ],
      "implementation_steps": [
        "Define props interface (threadId, parentMessage, replies optional, onPostReply).",
        "Render parentMessage using MessageBubble (read-only), render replies map to MessageBubble components, and include a Textarea to compose a reply and send via onPostReply.",
        "Ensure reply submit clears textarea and focuses focus management correctly.",
        "Export default ThreadView."
      ],
      "integration_points": [
        "Used in ChatPage when user clicks 'Reply' to open thread pane/modal",
        "Parent coordinates posting via threadService and React Query"
      ],
      "prompt_context": {
        "component_type": "component",
        "data_model": "thread",
        "interactions": [
          "view",
          "post reply"
        ],
        "styling_approach": "tailwind",
        "dependencies": [
          "src/shared/components/MessageBubble.tsx",
          "src/shared/components/Textarea.tsx",
          "src/types/index.ts"
        ]
      },
      "priority": 3
    },
    {
      "id": "search-bar",
      "title": "Search bar (shared/components/SearchBar.tsx)",
      "description": "Search input with debounce that queries messages and channels; accessible and keyboard-focused when opened via shortcut.",
      "file_to_implement": "src/shared/components/SearchBar.tsx",
      "acceptance": [
        "Debounces input via useDebounce, calls onSearch(query) callback or internally triggers React Query searchMessages via messageService",
        "Accessible: labelled input, supports opening/closing via props"
      ],
      "implementation_steps": [
        "Implement controlled input using Input component, use useDebounce hook to produce debouncedQuery, and when debouncedQuery changes call onSearch or use messageService.searchMessages and present results in a small dropdown.",
        "Ensure keyboard navigation through results and ESC to close behavior.",
        "Export default SearchBar."
      ],
      "integration_points": [
        "Used by Header and ChatPage for message search",
        "Depends on useDebounce and messageService.searchMessages"
      ],
      "prompt_context": {
        "component_type": "component",
        "data_model": "message",
        "interactions": [
          "search",
          "keyboard navigation"
        ],
        "styling_approach": "tailwind",
        "dependencies": [
          "src/shared/hooks/useDebounce.ts",
          "src/services/messageService.ts"
        ]
      },
      "priority": 3
    },
    {
      "id": "login-page",
      "title": "Login page (pages/LoginPage.tsx)",
      "description": "Login route that supports mock authentication for development, form validation and error handling using basic custom validation.",
      "file_to_implement": "src/pages/LoginPage.tsx",
      "acceptance": [
        "Renders form with email and password inputs, submit button",
        "Validates required fields and shows inline error messages",
        "Calls authService.login and on success navigates to '/channels' or previous protected route",
        "Supports mock users defined in config when running in dev mode"
      ],
      "implementation_steps": [
        "Import React, useState, useNavigate from react-router-dom, Input and Button components, useAuth hook or call authService directly (better to use useAuth), and config.",
        "Implement controlled form with client-side validation (email presence and password length), show errors inline using Input error props.",
        "On submit call auth.login(email,password) from AuthContext and handle errors (set error message displayed in an alert region with role='alert').",
        "On success navigate to '/channels'.",
        "Export default LoginPage component."
      ],
      "integration_points": [
        "Uses AuthContext (login), Input, Button; route mapped in routes/Routes.tsx",
        "Relies on services/authService.ts and mocks/mockServer in dev"
      ],
      "prompt_context": {
        "component_type": "page",
        "data_model": "user",
        "interactions": [
          "login",
          "validate"
        ],
        "styling_approach": "tailwind",
        "dependencies": [
          "src/shared/hooks/useAuth.ts",
          "src/shared/components/Input.tsx",
          "src/shared/components/Button.tsx",
          "src/config.ts"
        ]
      },
      "priority": 1
    },
    {
      "id": "routes",
      "title": "Routes (src/routes/Routes.tsx)",
      "description": "React Router v6 routes mapping pages, includes protected routes using RequireAuth from AuthContext and lazy-loaded pages with Suspense.",
      "file_to_implement": "src/routes/Routes.tsx",
      "acceptance": [
        "Defines routes: '/', '/login', '/channels', '/channels/:id', '/dm/:userId', '/settings', and a catch-all 404 route",
        "Protects '/channels*' and '/dm*' routes using RequireAuth",
        "Uses lazy to code-split heavy pages"
      ],
      "implementation_steps": [
        "Import React, lazy, Suspense from react, BrowserRouter, Routes, Route from react-router-dom, Spinner, RequireAuth from AuthContext, and page components with lazy (LoginPage, ChannelsPage, ChatPage, DirectMessagePage, SettingsPage, NotFoundPage).",
        "Define <BrowserRouter><Routes> mapping specified paths to components with protection for certain routes using <RequireAuth> wrapper.",
        "Fallback Suspense should be a Spinner.",
        "Export default Routes component."
      ],
      "integration_points": [
        "Used by App.tsx; pages imported here must exist as separate sections",
        "Requires RequireAuth from AuthContext to function"
      ],
      "prompt_context": {
        "component_type": "routing",
        "data_model": null,
        "interactions": [
          "navigation",
          "protection"
        ],
        "styling_approach": null,
        "dependencies": [
          "src/pages/LoginPage.tsx",
          "src/pages/ChannelsPage.tsx",
          "src/pages/ChatPage.tsx",
          "src/pages/DirectMessagePage.tsx",
          "src/pages/SettingsPage.tsx",
          "src/pages/NotFoundPage.tsx",
          "src/shared/context/AuthContext.tsx"
        ]
      },
      "priority": 1
    },
    {
      "id": "channels-page",
      "title": "Channels page (pages/ChannelsPage.tsx)",
      "description": "Page displaying the list of channels and a button to create a new channel (opens Modal).",
      "file_to_implement": "src/pages/ChannelsPage.tsx",
      "acceptance": [
        "Lists channels fetched via channelService (React Query), shows create channel button that opens Modal with a form using Input and Button",
        "Form validates required channel name and on submit calls channelService.createChannel and invalidates channels query to refresh list",
        "Accessible modal and form focus management"
      ],
      "implementation_steps": [
        "Use React Query's useQuery('channels', channelService.fetchChannels) to fetch channels.",
        "Render Sidebar optionally and center content with channel cards listing name and member count.",
        "Implement Create Channel modal toggled by state; the modal contains a form with Input for name and optional description. On submit call createChannel and on success close modal and invalidate 'channels' query (hint to use queryClient).",
        "Export default ChannelsPage."
      ],
      "integration_points": [
        "Uses channelService, Modal, Input, Button, QueryProvider's queryClient invalidation",
        "Route declared in routes/Routes.tsx"
      ],
      "prompt_context": {
        "component_type": "page",
        "data_model": "channel",
        "interactions": [
          "list",
          "create"
        ],
        "styling_approach": "tailwind",
        "dependencies": [
          "src/services/channelService.ts",
          "src/shared/components/Modal.tsx",
          "src/shared/components/Input.tsx",
          "src/shared/components/Button.tsx"
        ]
      },
      "priority": 2
    },
    {
      "id": "chat-page",
      "title": "Chat page (pages/ChatPage.tsx)",
      "description": "Main chat UI for a given channel: messages list with infinite scroll, composer with file upload & emoji reactions, thread panel, and presence list.",
      "file_to_implement": "src/pages/ChatPage.tsx",
      "acceptance": [
        "Fetches messages for a channel via messageService using React Query with pagination/infinite scroll",
        "Renders MessageBubble components, supports sending messages via composer (Textarea), attaches files via FileUpload, and triggers optimistic UI updates",
        "Subscribes to socket events to append incoming messages",
        "Accessible keyboard interactions for composer and message actions"
      ],
      "implementation_steps": [
        "Use useParams to get channelId, useQuery or useInfiniteQuery to fetch messages from messageService.fetchMessages with page param.",
        "Render messages in a scrollable container; implement an intersection observer to load older messages when reaching top (or a 'Load more' button for simplicity).",
        "Implement composer with Textarea, FileUpload, and Send Button; on send call messageService.sendMessage and optimistically add message to query cache then invalidate or update on success.",
        "Subscribe to socket events via useWebSocket or useSocket for 'message:new' to append messages if channel matches, using queryClient.setQueryData.",
        "Expose thread view toggling when reply clicked; use ThreadView component in a right-side panel or modal.",
        "Export default ChatPage."
      ],
      "integration_points": [
        "Depends on messageService, fileService, useWebSocket, MessageBubble, ThreadView, FileUpload; uses queryClient from QueryProvider",
        "Protected route under RequireAuth in routes"
      ],
      "prompt_context": {
        "component_type": "page",
        "data_model": "message",
        "interactions": [
          "send",
          "receive realtime",
          "infinite scroll",
          "attach files"
        ],
        "styling_approach": "tailwind",
        "dependencies": [
          "src/services/messageService.ts",
          "src/services/fileService.ts",
          "src/shared/hooks/useWebSocket.ts",
          "src/shared/components/MessageBubble.tsx",
          "src/shared/components/FileUpload.tsx",
          "src/shared/components/ThreadView.tsx"
        ]
      },
      "priority": 1
    },
    {
      "id": "direct-message-page",
      "title": "Direct Message page (pages/DirectMessagePage.tsx)",
      "description": "Direct 1:1 conversation view similar to ChatPage but scoped to private conversation between two users.",
      "file_to_implement": "src/pages/DirectMessagePage.tsx",
      "acceptance": [
        "Loads DM conversation by userId param and supports sending/receiving messages similar to ChatPage",
        "Shows the recipient's name and presence indicator in header"
      ],
      "implementation_steps": [
        "Use useParams to extract userId, fetch conversation messages via messageService.fetchMessages with conversationId or channelId derived, render messages list and composer similar to ChatPage, but scope file uploads and replies to DM semantics.",
        "Display recipient details using userService or mock users from mockServer.",
        "Export default DirectMessagePage."
      ],
      "integration_points": [
        "Routes declared in routes/Routes.tsx, uses messageService and presenceService and shared components like MessageBubble",
        "Protected via RequireAuth"
      ],
      "prompt_context": {
        "component_type": "page",
        "data_model": "message, user",
        "interactions": [
          "send",
          "presence"
        ],
        "styling_approach": "tailwind",
        "dependencies": [
          "src/services/messageService.ts",
          "src/services/presenceService.ts",
          "src/shared/components/MessageBubble.tsx"
        ]
      },
      "priority": 2
    },
    {
      "id": "settings-page",
      "title": "Settings page (pages/SettingsPage.tsx)",
      "description": "User settings page for profile editing, privacy toggles and call/notification preferences (UI only).",
      "file_to_implement": "src/pages/SettingsPage.tsx",
      "acceptance": [
        "Displays a form to edit user display name and avatar URL, saves to localStorage via AuthContext or authService",
        "Accessible form with validation and success/error toast",
        "Includes toggles for presence visibility and sound notifications (UI-only toggles stored in localStorage)"
      ],
      "implementation_steps": [
        "Use useAuth to get current user and a function to update user (or call authService), render a form with Input fields for name and avatar URL, a Save button, and toggles for presence & notifications using checkboxes.",
        "On submit validate and call authService or directly persist to localStorage via useLocalStorage helper; display a small success message.",
        "Export default SettingsPage."
      ],
      "integration_points": [
        "Accesses AuthContext and useLocalStorage; route listed in routes/Routes.tsx",
        "Minimal dependency on services"
      ],
      "prompt_context": {
        "component_type": "page",
        "data_model": "user",
        "interactions": [
          "update profile",
          "persist toggles"
        ],
        "styling_approach": "tailwind",
        "dependencies": [
          "src/shared/hooks/useAuth.ts",
          "src/shared/hooks/useLocalStorage.ts",
          "src/shared/components/Input.tsx",
          "src/shared/components/Button.tsx"
        ]
      },
      "priority": 4
    },
    {
      "id": "notfound-page",
      "title": "NotFound page (pages/NotFoundPage.tsx)",
      "description": "404 page to render when no route matches.",
      "file_to_implement": "src/pages/NotFoundPage.tsx",
      "acceptance": [
        "Displays accessible 404 message and a link/button to navigate back home",
        "Uses Tailwind responsive styles"
      ],
      "implementation_steps": [
        "Implement functional component rendering an illustrative message and a Button or Link to '/' to return home.",
        "Export default NotFoundPage.",
        "Keep simple and accessible."
      ],
      "integration_points": [
        "Used by routes/Routes.tsx catch-all route"
      ],
      "prompt_context": {
        "component_type": "page",
        "data_model": null,
        "interactions": [
          "navigate"
        ],
        "styling_approach": "tailwind",
        "dependencies": []
      },
      "priority": 5
    },
    {
      "id": "use-infinite-messages",
      "title": "useInfiniteMessages hook (hooks/useInfiniteMessages.tsx)",
      "description": "Hook that wraps React Query's useInfiniteQuery to fetch paginated messages for a channel and provides helpers to append/prepend messages.",
      "file_to_implement": "src/hooks/useInfiniteMessages.tsx",
      "acceptance": [
        "Implements useInfiniteQuery keyed by ['messages', channelId] using messageService.fetchMessages with page param",
        "Exposes sendMessage helper that performs optimistic update to the cache and calls messageService.sendMessage",
        "Exposes loadMore function to fetch previous pages"
      ],
      "implementation_steps": [
        "Import useInfiniteQuery, useQueryClient from React Query, messageService, types Message, and implement hook with getNextPageParam logic based on returned meta or page count.",
        "Implement sendMessage that uses queryClient.setQueryData to prepend message in cache (optimistic) and then calls messageService.sendMessage; on error rollback cache update.",
        "Return { data, isLoading, isFetchingNextPage, fetchNextPage: loadMore, sendMessage } from the hook.",
        "Export default useInfiniteMessages."
      ],
      "integration_points": [
        "Used by ChatPage to power the messages list and composer optimistic updates",
        "Relies on messageService and QueryProvider's queryClient"
      ],
      "prompt_context": {
        "component_type": "hook",
        "data_model": "message",
        "interactions": [
          "infinite fetch",
          "optimistic update"
        ],
        "styling_approach": null,
        "dependencies": [
          "src/services/messageService.ts",
          "src/shared/context/QueryProvider.tsx"
        ]
      },
      "priority": 1
    },
    {
      "id": "assets-icons",
      "title": "App icons/asset exports (src/assets/icons.tsx)",
      "description": "Shared small icon exports for logos and app-branding used by Header and other UI.",
      "file_to_implement": "src/assets/icons.tsx",
      "acceptance": [
        "Exports AppLogo component and any small SVG icons used for branding",
        "No external dependencies"
      ],
      "implementation_steps": [
        "Implement a simple AppLogo functional component returning an SVG with accessible title prop, export default or named export.",
        "Add any helper icon exports as needed for branding.",
        "Keep minimal and reusable."
      ],
      "integration_points": [
        "Used by Header and App for branding",
        "No circular dependencies"
      ],
      "prompt_context": {
        "component_type": "asset",
        "data_model": null,
        "interactions": [],
        "styling_approach": "tailwind",
        "dependencies": []
      },
      "priority": 5
    },
    {
      "id": "i18n-init",
      "title": "i18n config (src/i18n/i18n.ts)",
      "description": "i18next initialization file with English strings and React integration.",
      "file_to_implement": "src/i18n/i18n.ts",
      "acceptance": [
        "Initializes i18next with en resource containing common UI labels",
        "Exports an initialization promise or call to be used by useI18n hook"
      ],
      "implementation_steps": [
        "Import i18n from 'i18next' and initReactI18next, set resources for 'en' with common keys like 'login.email', 'login.password', 'header.search', 'button.send'.",
        "Call i18n.use(initReactI18next).init({ resources, lng: 'en', fallbackLng: 'en', interpolation: { escapeValue: false } }).",
        "Export default i18n instance.",
        "Keep code minimal and safe for re-initialization guard in useI18n."
      ],
      "integration_points": [
        "Used by useI18n hook and components that call useTranslation",
        "No dependencies on mock server"
      ],
      "prompt_context": {
        "component_type": "i18n",
        "data_model": null,
        "interactions": [
          "translate"
        ],
        "styling_approach": null,
        "dependencies": []
      },
      "priority": 4
    },
    {
      "id": "messages-page-layout",
      "title": "Chat layout (pages-layouts/ChatLayout.tsx)",
      "description": "Layout composing Sidebar, Header and main chat area for pages like ChatPage and DirectMessagePage making responsive layout consistent.",
      "file_to_implement": "src/pages-layouts/ChatLayout.tsx",
      "acceptance": [
        "Accepts props: sidebar (component), children, shows Header and responsive grid with sidebar and main area",
        "Handles mobile collapse logic via state passed to Sidebar"
      ],
      "implementation_steps": [
        "Render a two-column layout using Tailwind where left column holds Sidebar and right column holds main content with Header on top.",
        "Accept a prop to hide/show sidebar on mobile and a toggle function to control it.",
        "Export default ChatLayout."
      ],
      "integration_points": [
        "Used by ChatPage and DirectMessagePage for consistent layout",
        "Depends on Sidebar and Header components"
      ],
      "prompt_context": {
        "component_type": "layout",
        "data_model": null,
        "interactions": [
          "responsive"
        ],
        "styling_approach": "tailwind",
        "dependencies": [
          "src/shared/components/Sidebar.tsx",
          "src/shared/components/Header.tsx"
        ]
      },
      "priority": 3
    }
  ]
}