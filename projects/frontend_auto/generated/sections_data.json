{
  "architecture": {
    "overview": "This is a modern React 18 + TypeScript single-page application scaffolded for Vite. It separates core kernel contracts/utilities, design system & theme, shared UI primitives, providers & stores, feature components and pages. The app uses a provider composition at the root, React Router for routing, React Query for server state, and a small client store (Zustand) for lightweight UI state. Animation and motion use Framer Motion presets while charts are wrapped adapters for chart libraries. Accessibility, responsive layouts, and polished visual design (glass-morphism, gradients, depth shadows, skeletons, and accessible modals/toasts) are baked into the foundations.",
    "patterns": [
      "Domain layers: core (contracts/utils/events), services, providers, features/pages",
      "Container/Presentational: pages/feature containers orchestrate services/hooks and pass data to presentational components",
      "Atomic design for UI: shared/components (atoms -> molecules -> organisms)",
      "Provider composition at root: Providers.tsx composes ThemeProvider, QueryProvider, AuthProvider, ModalProvider, ToastProvider",
      "Data fetching: React Query for server cache + lightweight Zustand for ephemeral UI state",
      "DI/Event Bus: small DI container + event bus for decoupling cross-cutting concerns and plugin hooks"
    ],
    "data_flow": "UI components call hooks (useFetch/useAuth/useModal etc.) which call service layer (services/*) that use a central apiClient. React Query manages server state, caching and background refetch. UI-only state (drawer open, theme mode, toast queue) lives in Zustand stores (stores/*). The event bus broadcasts domain events (auth:login, auth:logout, toast:add). Providers compose cross-cutting concerns and expose context/hooks to the tree. Router loads pages lazily; charts/components receive sanitized data via services or React Query hooks.",
    "folder_structure": "src/\n  app/\n    config.ts\n    router.tsx\n  core/\n    contracts.ts\n    events.ts\n    hooks.ts\n    di.ts\n    utils.ts\n  providers/\n    Providers.tsx\n    AuthProvider.tsx\n    QueryProvider.tsx\n    ModalProvider.tsx\n  theme/\n    index.ts\n    animations.ts\n    ThemeProvider.tsx\n  shared/\n    layouts/\n      AppLayout.tsx\n      AuthLayout.tsx\n    components/\n      Button.tsx\n      Input.tsx\n      Card.tsx\n      GlassCard.tsx\n      GradientBackground.tsx\n      Modal.tsx\n      Toast.tsx\n      ToastProvider.tsx\n      Skeleton.tsx\n      Spinner.tsx\n      Tooltip.tsx\n      NavBar.tsx\n      Sidebar.tsx\n    charts/\n      LineChart.tsx\n      BarChart.tsx\n  hooks/\n    useAuth.ts\n    useFetch.ts\n    useModal.ts\n    useDebounce.ts\n    useWindowSize.ts\n  services/\n    apiClient.ts\n    authService.ts\n    dataService.ts\n  stores/\n    uiStore.ts\n  features/\n    dashboard/\n      MetricCard.tsx\n      DashboardPanel.tsx\n  pages/\n    HomePage.tsx\n    DashboardPage.tsx\n    LoginPage.tsx\n    NotFoundPage.tsx\n  styles/\n    global.css\n  App.tsx\n  main.tsx",
    "tech_stack": [
      "React 18+ (functional components, hooks, Suspense, concurrent-safe patterns)",
      "TypeScript (strict mode recommended)",
      "Vite (use import.meta.env for env vars)",
      "React Router v6+",
      "React Query (server state + caching)",
      "Zustand (lightweight client store for UI state)",
      "Framer Motion (animations & micro-interactions)",
      "Recharts or Chart.js adapter wrappers for charts",
      "Tailwind/vanilla CSS modules allowed (project includes tailwind.config.js externally)",
      "Accessibility-first patterns (ARIA, keyboard navigation, focus management)"
    ]
  },
  "kernel_specs": {
    "overview": "The Core Kernel provides the single source of truth for types, runtime configuration, utilities, an event bus, hook registry, and a tiny dependency-injection container. These contracts and utilities are intentionally small, strongly typed and framework-agnostic so every section (services, providers, features, and UI components) can rely on the same primitives. Use these files to import domain types, read computed runtime config, emit/listen domain events, register/execute runtime hooks, and register/resolve implementations for test swapping or runtime overrides."
  },
  "sections": [
    {
      "id": "app-config",
      "file_path": "src/app/config.ts",
      "description": "Materialized runtime configuration. Reads Vite env via import.meta.env and exports a typed config object (API base URL, feature flags, app name).",
      "dependencies": [],
      "exports": [
        "AppConfig"
      ],
      "priority": 1,
      "purpose": "Materialized runtime configuration. Reads Vite environment variables via import.meta.env and exports a typed AppConfig object with computed flags and optional mock data for development.",
      "content": "This file provides a typed runtime configuration object built from import.meta.env (Vite). It materializes defaults and computed flags, and exposes helpers for feature flags and mock data.\n\nWhat to include (TypeScript-ready plan):\n\n- AppConfig type\n  export interface AppConfig {\n    appName: string;\n    env: 'development' | 'staging' | 'production' | string;\n    isDevelopment: boolean;\n    apiBaseUrl: string;\n    socketUrl?: string | null;\n    featureFlags: Record<string, boolean>;\n    features: string[]; // canonical list of feature toggles\n    buildTimestamp?: string;\n    dev: {\n      enableMockData: boolean;\n      mockUser?: {\n        id: string;\n        name: string;\n        email: string;\n        role: string;\n      } | null;\n    };\n  }\n\n- Materialize values from import.meta.env\n  - Use import.meta.env.VITE_API_BASE || window.location.origin + '/api'\n  - env from import.meta.env.MODE || 'development'\n  - parse VITE_FEATURES as comma-separated list if present\n  - buildTimestamp from import.meta.env.VITE_BUILD_TS\n\n- Computed flags and helpers\n  - isDevelopment: env === 'development'\n  - shouldUseMockData: dev.enableMockData === true && isDevelopment\n  - isFeatureEnabled(name: string): boolean => featureFlags[name] === true\n\n- Example mock user injection (only when shouldUseMockData true)\n  - Provide a default small Patient/Doctor mock object shaped according to '@/core/contracts'\n\nExample code sketch (usage):\n  import { appConfig, isFeatureEnabled } from '@/app/config';\n  if (appConfig.shouldUseMockData) { /* wire mocks into di or services */ }\n  if (isFeatureEnabled('new-dashboard')) { /* conditional route */ }\n\nIntegration points\n- services/apiClient.ts reads apiBaseUrl and socketUrl to construct endpoints.\n- di.ts default registrations read appConfig to register a mock or real service implementation.\n- hooks or providers may use dev.mockUser to bootstrap an authenticated session in development.\n\nImportant: Use import.meta.env (Vite) - example:\n  const rawApiBase = import.meta.env.VITE_API_BASE as string | undefined;\n\nEnsure all values are typed and provide safe fallbacks so code consumer never sees undefined at runtime unless intentionally allowed."
    },
    {
      "id": "app-main",
      "file_path": "src/main.tsx",
      "description": "Vite entry file: renders App inside root element, wraps with AppProviders, hydrates global CSS, and initializes global event listeners. Uses import.meta.env values from app/config.",
      "dependencies": [
        "src/App.tsx",
        "src/providers/Providers.tsx",
        "src/app/config.ts",
        "src/styles/global.css"
      ],
      "exports": [
        "mountApp"
      ],
      "priority": 1
    },
    {
      "id": "app-root",
      "file_path": "src/App.tsx",
      "description": "Top-level App component that mounts AppRouter and top-level Suspense/ErrorBoundary. Sets up page transitions and route-level motion wrappers.",
      "dependencies": [
        "src/app/router.tsx",
        "src/theme/animations.ts",
        "src/shared/components/ToastProvider.tsx"
      ],
      "exports": [
        "App"
      ],
      "priority": 1
    },
    {
      "id": "app-router",
      "file_path": "src/app/router.tsx",
      "description": "React Router v6 route configuration, lazy-loaded pages and route guards (protected routes using useAuth).",
      "dependencies": [
        "src/pages/HomePage.tsx",
        "src/pages/DashboardPage.tsx",
        "src/pages/LoginPage.tsx",
        "src/pages/NotFoundPage.tsx",
        "src/providers/AuthProvider.tsx"
      ],
      "exports": [
        "AppRouter"
      ],
      "priority": 1
    },
    {
      "id": "core-contracts",
      "file_path": "src/core/contracts.ts",
      "description": "Domain types, DTOs and API contracts (shared type definitions used across services and components). Contains interfaces for User, Auth responses, generic API shapes and chart data contracts.",
      "dependencies": [],
      "exports": [
        "User",
        "AuthTokens",
        "ApiResponse<T>",
        "ChartSeries",
        "Paginated<T>"
      ],
      "priority": 1,
      "purpose": "Domain types, DTOs and API contracts shared across services, providers and UI components (healthcare domain + UI shapes + API response envelopes). This file is the canonical type library for strong typing across the app.",
      "content": "Contents and recommended types to include in this file (copy/paste-ready TypeScript declarations):\n\n- Enums & basic primitives\n  - Role: 'admin' | 'doctor' | 'nurse' | 'patient' | 'staff'\n  - Gender: 'male' | 'female' | 'other' | 'unknown'\n\n- User family of types\n  - User: base profile shared across actors (id, email, name, role(s), avatarUrl, lastSeen)\n  - Patient extends User: contains patientId, dob, primaryPhysicianId, medicalRecordSummary\n  - Doctor extends User: specialty, licenseNumber, clinicIds\n  - Nurse extends User: department, shiftPattern\n\n- Healthcare domain models\n  - Appointment: id, patientId, practitionerId, startAt (ISO string), endAt, status (enum), reason, location\n  - MedicalRecord: id, patientId, createdAt, entries: { id, type, data, recordedBy, recordedAt }\n  - Prescription: id, patientId, prescriberId, medications: [{ name, dose, frequency, duration }], issuedAt, notes\n  - LabResult: id, patientId, type, value, unit, referenceRange, collectedAt, reportedAt, attachments?\n\n- API response envelopes\n  - ApiResult<T>: success: boolean, data?: T, error?: ApiError\n  - ApiError: code: string, message: string, details?: Record<string, unknown>\n  - PaginatedResponse<T>: items: T[], total: number, page: number, pageSize: number\n\n- WebSocket events (typed)\n  - WebSocketEvent union for real-time notifications (e.g., 'appointment:created', 'labresult:available', 'chat:message') with typed payloads\n\n- Chart + UI shapes\n  - ChartSeries: { id: string; name?: string; points: Array<{ x: string | number | Date; y: number }>; color?: string }\n  - LoadingState: 'idle' | 'loading' | 'success' | 'error'\n  - FormState<T>: { values: T; errors: Partial<Record<keyof T, string>>; dirty: boolean }\n\nPatterns & conventions\n- Keep DTOs narrow and immutable where possible: prefer readonly fields for data returned from APIs.\n- All timestamps are ISO 8601 strings (string) in contracts. Services may map to Date if needed at the boundary.\n- Use discriminated unions for event types (e.g., { type: 'appointment:created'; payload: Appointment }).\n\nExample usage\n- Importing a type in a hook or service:\n  import { User, ApiResult, Appointment } from '@/core/contracts';\n\n- Using ApiResult in a fetch hook:\n  async function getAppointment(id: string): Promise<ApiResult<Appointment>> { /*...*/ }\n\nIntegration points\n- services/apiClient.ts returns ApiResult<T> shapes described here.\n- events.ts uses the domain event types for strongly typed emit/on handlers.\n- hooks.ts uses User/Appointment types in hook payloads (onLogin, onRouteChange, etc.).\n\nThis file must be the single authoritative place for these domain contracts so all features/components import from '@/core/contracts'."
    },
    {
      "id": "core-di",
      "file_path": "src/core/di.ts",
      "description": "Simple dependency-injection container for swapping implementations in tests or during runtime. Registers singletons (apiClient, services) and exposes a resolver.",
      "dependencies": [
        "src/core/utils.ts",
        "src/app/config.ts"
      ],
      "exports": [
        "container",
        "register",
        "resolve"
      ],
      "priority": 1,
      "purpose": "A minimal, type-safe service container used to register and resolve singleton implementations. Useful for swapping implementations in tests, registering mock services in development, and decoupling modules from concrete classes.",
      "content": "Design goals\n- Keep the API tiny and typesafe.\n- Use Token<T> objects (wrapping Symbols) to track types.\n- Support register(token, implementation) and resolve<T>(token) returning T.\n- Allow registering factories (() => instance) for lazy singletons and constant values.\n\nType primitives & API\n1) Token<T>\n  - export interface Token<T> { readonly key: symbol; readonly name?: string }\n  - export function createToken<T>(name?: string): Token<T> { return { key: Symbol(name), name } }\n\n2) Container class\n  - class Container {\n      register<T>(token: Token<T>, provider: T | (() => T)): void;\n      resolve<T>(token: Token<T>): T;\n      has(token): boolean;\n      clear(): void; // useful in tests\n    }\n\n3) Predefined tokens (example types left generic so they can describe an interface shape elsewhere)\n  - export const ApiClientToken = createToken<{ fetchJson: <T>(path: string, opts?: RequestInit) => Promise<T> }>('ApiClient');\n  - export const AuthServiceToken = createToken<{ login: (u:p:any)=>Promise<any>; logout: ()=>Promise<void> }>('AuthService');\n  - export const StorageServiceToken = createToken<{ getItem: (k:string)=>any; setItem: (k:string,v:any):void }>('StorageService');\n  - export const WebSocketServiceToken = createToken<{ connect: ()=>void; disconnect: ()=>void }>('WebSocketService');\n\n4) container singleton + convenience helpers\n  - export const container = new Container();\n  - export function register<T>(token: Token<T>, provider: T | (() => T)) { container.register(token, provider); }\n  - export function resolve<T>(token: Token<T>): T { return container.resolve(token); }\n\nImplementation notes\n- register should allow override (replace existing) but log a warning in dev via debugLog.\n- resolve should throw a clear error if token not registered (include token.name or token.key description).\n- For factory providers, call the factory only once and cache the result (singleton behavior).\n- The container must be synchronous; async factories are discouraged. If async resolution is required, register a promise-returning function but be explicit.\n\nExample usage\n- Registering in app bootstrap (main.tsx):\n  import { register, ApiClientToken } from '@/core/di';\n  import { apiClient } from '@/services/apiClient';\n  register(ApiClientToken, apiClient);\n\n- Resolving in a service or hook:\n  const client = resolve(ApiClientToken);\n  const result = await client.fetchJson('/appointments/123');\n\nIntegration points\n- app/main.tsx and providers should register concrete implementations for ApiClientToken, AuthServiceToken, StorageServiceToken and optionally WebSocketServiceToken.\n- hooks and services import resolve(token) to get instances; tests can replace implementations by calling container.clear() and register() in test setup.\n\nNotes & conventions\n- Prefer registering minimal interface shapes (only methods you need) rather than concrete classes. Keep tokens focused and avoid overloading one token with many unrelated methods.\n- The DI container is intentionally minimal: do not attempt to replicate a full DI framework. Its purpose is swapping and test injection."
    },
    {
      "id": "core-events",
      "file_path": "src/core/events.ts",
      "description": "Lightweight event bus implementation for broadcasting/listening to domain events (useful for decoupled notifications and cross-cutting events).",
      "dependencies": [
        "src/core/utils.ts"
      ],
      "exports": [
        "EventBus",
        "createEventBus",
        "GlobalEvents"
      ],
      "priority": 1,
      "purpose": "A small typed event bus for decoupled, cross-cutting communication. Supports typed events, synchronous and asynchronous handlers, once handlers, and safe removal. Export a singleton global event bus and a factory for isolated buses used in tests.",
      "content": "Design and API contract (TypeScript-ready description):\n\n1) Event map type\n  - export type GlobalEvents = {\n      'auth:login': { user: import('@/core/contracts').User };\n      'auth:logout': { userId?: string } | undefined;\n      'toast:add': { id: string; type: 'success'|'error'|'info'; title?: string; message?: string };\n      'appointment:created': { appointment: import('@/core/contracts').Appointment };\n      'labresult:available': { labResult: import('@/core/contracts').LabResult };\n      'data:updated': { key: string; payload?: unknown };\n    };\n\n2) EventHandler generic type\n  - type EventHandler<E> = (payload: E) => void | Promise<void>;\n\n3) EventBus implementation\n  - class EventBus<EMap extends Record<string, unknown>> {\n      on<K extends keyof EMap>(event: K, handler: (payload: EMap[K]) => void | Promise<void>): () => void;\n      off<K extends keyof EMap>(event: K, handler: (payload: EMap[K]) => void | Promise<void>): void;\n      once<K extends keyof EMap>(event: K, handler: (payload: EMap[K]) => void | Promise<void>): () => void;\n      emit<K extends keyof EMap>(event: K, payload: EMap[K]): Promise<void> | void; // returns Promise<void> when any handler is async\n    }\n  - Implementation details:\n    - Internally keep a Map<event, Set<handler>>.\n    - on() returns an unsubscribe function.\n    - once() wraps the handler and removes itself after first invocation.\n    - emit() calls handlers in registration order; if any handler returns a Promise, emit returns Promise.all to allow awaiting.\n    - Protect against handler exceptions: catch and log via debugLog; do not throw to callers.\n\n4) createEventBus() factory\n  - Accepts optional debug namespace and returns a new EventBus instance. Useful for test isolation.\n\n5) globalEventBus export\n  - export const globalEventBus = createEventBus<GlobalEvents>('global');\n\nExample usage\n  import { globalEventBus } from '@/core/events';\n\n  // listen\n  const off = globalEventBus.on('auth:login', ({ user }) => {\n    console.log('user logged in', user.email);\n  });\n\n  // emit (handlers may be async)\n  await globalEventBus.emit('auth:login', { user });\n\nIntegration points\n- AuthProvider and authService should emit 'auth:login' and 'auth:logout' on the globalEventBus when auth state changes.\n- ToastProvider should listen to 'toast:add' to show toasts when other layers emit them.\n- Hooks registry (hooks.ts) can use the event bus to broadcast lifecycle events.\n\nNotes\n- Keep event payloads small and typed. For large datasets, prefer a key + fetch pattern (emit key and let listeners fetch via services).\n- Use the event bus for decoupling; avoid turning it into global state storage\u2014use stores (Zustand) or DI for stateful systems."
    },
    {
      "id": "core-hooks-registry",
      "file_path": "src/core/hooks.ts",
      "description": "Hook registry to allow runtime/plugin hooks to register behavior. Useful for extension points in the app (e.g., analytics, logging).",
      "dependencies": [
        "src/core/events.ts",
        "src/core/di.ts"
      ],
      "exports": [
        "registerHook",
        "invokeHook",
        "HookContext"
      ],
      "priority": 1,
      "purpose": "A small runtime hook registry used as extension points for instrumentation, analytics, or feature plugins. Hooks are lightweight, typed and can be invoked synchronously or asynchronously with a common HookContext.",
      "content": "Purpose & behavior\n- Provide named extension points (HookPoint union) where feature modules, providers or tests can register callbacks.\n- Hooks have a shared HookContext providing useful runtime utilities: DI container, eventBus, config and optional request metadata.\n- Handlers can be sync or async. invokeHook returns Promise<void> if any handler is async.\n\nHook points (standard)\n- export type HookPoint =\n    | 'beforeApiRequest' // payload: { url: string; options: RequestInit; meta?: Record<string, any> }\n    | 'afterApiResponse'  // payload: { url: string; response: Response | { status: number, body?: any }; meta?: Record<string, any> }\n    | 'onLogin'           // payload: { user: import('@/core/contracts').User }\n    | 'onLogout'          // payload: { userId?: string }\n    | 'onRouteChange'     // payload: { from?: string; to: string }\n    | 'onError';          // payload: { error: unknown; context?: any }\n\nHookContext\n- export interface HookContext {\n    container: import('@/core/di').Container; // DI container instance\n    bus: import('@/core/events').EventBus<any>; // event bus instance\n    config: import('@/app/config').AppConfig;\n    meta?: Record<string, any>;\n  }\n\nHookHandler & registry API\n- type HookHandler<TPayload> = (payload: TPayload, ctx: HookContext) => void | Promise<void>;\n- class HookRegistry {\n    register<T extends HookPoint>(name: T, handler: HookHandler<any>, options?: { priority?: number }): () => void;\n    invoke<T extends HookPoint>(name: T, payload: Parameters<HookHandler<any>>[0], ctx?: Partial<HookContext>): Promise<void> | void;\n  }\n\nImplementation notes\n- Internally maintain Map<HookPoint, Array<{ handler, priority }>> and sort handlers by priority (lower number = earlier).\n- register returns an unregister function.\n- invoke creates a final HookContext merging provided partial ctx with defaults (global container, globalEventBus, appConfig).\n- Errors thrown by handlers should be caught and forwarded to 'onError' hook (invoke it) and logged via debugLog.\n\nHelper exports\n- export function registerHook(name, handler, options) { return defaultHookRegistry.register(...) }\n- export function invokeHook(name, payload, ctx) { return defaultHookRegistry.invoke(...) }\n- export const defaultHookRegistry = new HookRegistry();\n\nExample usage\n- A plugin registering an analytics hook:\n  import { registerHook } from '@/core/hooks';\n  registerHook('onRouteChange', async ({ from, to }, ctx) => {\n    ctx.container.resolve(ANALYTICS_TOKEN).trackPageView({ from, to });\n  });\n\n- API client invoking hooks:\n  await invokeHook('beforeApiRequest', { url, options }, { meta: { service: 'auth' } });\n  const res = await fetch(url, options);\n  await invokeHook('afterApiResponse', { url, response: res });\n\nIntegration points\n- services/apiClient.ts should call beforeApiRequest and afterApiResponse hooks.\n- authService/onLogin/onLogout should invoke onLogin/onLogout hooks.\n- providers/Router composition can invoke onRouteChange when route changes occur.\n\nNotes\n- Keep invoked payloads small and include metadata in ctx.meta rather than packing every call with large objects.\n- Hooks should be durable and unregisterable so tests can clean up state."
    },
    {
      "id": "core-utils",
      "file_path": "src/core/utils.ts",
      "description": "Common utility functions used across the app (formatDate, classNames, sleep, safeParseJSON, uid generator).",
      "dependencies": [],
      "exports": [
        "formatDate",
        "classNames",
        "sleep",
        "safeParseJSON",
        "uid"
      ],
      "priority": 1,
      "purpose": "Small collection of deterministic, pure utility functions and small helpers used across app sections: date formatting, classNames, sleep, safe JSON parsing/stringifying, unique id generator and small debug helpers.",
      "content": "Utility functions to implement (production-ready implementations suggested):\n\n1) formatDate(date: string | Date | number, options?: { locale?: string; dateStyle?: 'short'|'medium'|'long'|'full'; timeStyle?: 'short'|'medium'|'long' }) => string\n  - Use Intl.DateTimeFormat with sensible defaults (navigator.language fallback) and guard invalid dates.\n  - Always return an ISO-friendly fallback (new Date(timestamp).toLocaleString()) for invalid inputs.\n\n2) classNames(...items: Array<string | false | null | undefined | Record<string, boolean>>) => string\n  - Minimal utility to join classes and support conditional maps.\n\n3) sleep(ms: number): Promise<void>\n  - Promise-based delay used in mocks and dev helpers.\n\n4) safeParseJSON<T = unknown>(input: string, fallback?: T): T\n  - Try/catch JSON.parse and return fallback on error. Useful near external data boundaries.\n\n5) uid(length = 8): string\n  - Small cryptographically-sound uid generator using window.crypto.getRandomValues where available; fallback to Math.random.\n\n6) debugLog(namespace: string, ...args: any[]) => void\n  - Conditional console.log wrapper that respects import.meta.env.MODE === 'development' and returns no-op in production.\n\nExample usage:\n  import { formatDate, classNames, uid } from '@/core/utils';\n  const id = uid(12);\n  const label = formatDate(item.collectedAt, { dateStyle: 'short' });\n\nPatterns & conventions\n- Keep these functions small and dependency-free (no React, no DOM where not necessary).\n- Use them liberally across services and components to keep implementations consistent.\n\nIntegration points\n- events.ts uses uid for handler ids if needed.\n- di.ts and hooks may use debugLog for lifecycle logs.\n- services and components use safeParseJSON when reading localStorage or third-party payloads."
    },
    {
      "id": "layouts-app",
      "file_path": "src/shared/layouts/AppLayout.tsx",
      "description": "Primary application layout with responsive header (NavBar), sidebar, content area, and global keyboard/focus management. Uses glass/gradient backgrounds and provides slots for header/sidebar/content.",
      "dependencies": [
        "src/shared/components/NavBar.tsx",
        "src/shared/components/Sidebar.tsx",
        "src/shared/components/GradientBackground.tsx"
      ],
      "exports": [
        "AppLayout"
      ],
      "priority": 1
    },
    {
      "id": "layouts-auth",
      "file_path": "src/shared/layouts/AuthLayout.tsx",
      "description": "Minimal centered layout for auth screens with accessible form area and responsive constraints. Integrates background gradient or glass card.",
      "dependencies": [
        "src/shared/components/GlassCard.tsx",
        "src/theme/ThemeProvider.tsx"
      ],
      "exports": [
        "AuthLayout"
      ],
      "priority": 1
    },
    {
      "id": "providers-auth",
      "file_path": "src/providers/AuthProvider.tsx",
      "description": "Authentication provider exposing useAuth context. Manages session state, token refresh, and integrates with core/events (auth:login/auth:logout).",
      "dependencies": [
        "src/core/contracts.ts",
        "src/services/authService.ts",
        "src/core/events.ts",
        "src/hooks/useAuth.ts"
      ],
      "exports": [
        "AuthProvider",
        "useAuthSafe"
      ],
      "priority": 1
    },
    {
      "id": "providers-modal",
      "file_path": "src/providers/ModalProvider.tsx",
      "description": "Modal provider that manages modal stack, focus trap and body scroll lock. Exposes useModal hook to open/close modals programmatically.",
      "dependencies": [
        "src/shared/components/Modal.tsx",
        "src/hooks/useModal.ts"
      ],
      "exports": [
        "ModalProvider",
        "useModalSafe"
      ],
      "priority": 1
    },
    {
      "id": "providers-providers",
      "file_path": "src/providers/Providers.tsx",
      "description": "Top-level composition of providers (ThemeProvider, QueryProvider, AuthProvider, ModalProvider, ToastProvider). Used in main.tsx to wrap App.",
      "dependencies": [
        "src/theme/ThemeProvider.tsx",
        "src/providers/QueryProvider.tsx",
        "src/providers/AuthProvider.tsx",
        "src/providers/ModalProvider.tsx",
        "src/shared/components/ToastProvider.tsx"
      ],
      "exports": [
        "AppProviders",
        "withProviders"
      ],
      "priority": 1
    },
    {
      "id": "providers-query",
      "file_path": "src/providers/QueryProvider.tsx",
      "description": "React Query provider wrapper that configures QueryClient, global error handling and hydration (if SSR later).",
      "dependencies": [
        "src/app/config.ts"
      ],
      "exports": [
        "QueryProvider"
      ],
      "priority": 1
    },
    {
      "id": "stores-ui",
      "file_path": "src/stores/uiStore.ts",
      "description": "Zustand store for ephemeral UI state (sidebar open, theme mode, toast queue reference, modal stack refs).",
      "dependencies": [
        "src/core/events.ts"
      ],
      "exports": [
        "useUiStore"
      ],
      "priority": 1
    },
    {
      "id": "styles-global",
      "file_path": "src/styles/global.css",
      "description": "Global CSS (or Tailwind entry) with CSS variables wired to theme tokens, resets, accessibility focus outlines and utility classes for depth/glass effects.",
      "dependencies": [
        "src/theme/index.ts"
      ],
      "exports": [
        "global styles (side-effect)"
      ],
      "priority": 1
    },
    {
      "id": "theme-animations",
      "file_path": "src/theme/animations.ts",
      "description": "Animation presets and motion variants (Framer Motion variants, easing curves, durations) used across components for consistent micro-interactions.",
      "dependencies": [
        "src/theme/index.ts"
      ],
      "exports": [
        "motionPresets",
        "fadeIn",
        "scaleUp"
      ],
      "priority": 1
    },
    {
      "id": "theme-index",
      "file_path": "src/theme/index.ts",
      "description": "Design tokens (colors, spacing, typography scales, radii, shadows). Exposes typed theme tokens used by ThemeProvider and components.",
      "dependencies": [],
      "exports": [
        "theme",
        "tokens",
        "ThemeTokens"
      ],
      "priority": 1
    },
    {
      "id": "theme-provider",
      "file_path": "src/theme/ThemeProvider.tsx",
      "description": "Context-based ThemeProvider that applies tokens, toggles dark/light, and injects CSS variables. Wraps children with motion/ARIA helpers.",
      "dependencies": [
        "src/theme/index.ts",
        "src/theme/animations.ts",
        "src/core/events.ts"
      ],
      "exports": [
        "ThemeProvider",
        "useTheme"
      ],
      "priority": 1
    },
    {
      "id": "charts-bar",
      "file_path": "src/shared/charts/BarChart.tsx",
      "description": "Wrapper bar chart component with accessible descriptions and simple interaction events (hover tooltips).",
      "dependencies": [
        "src/core/contracts.ts",
        "src/hooks/useWindowSize.ts"
      ],
      "exports": [
        "BarChart"
      ],
      "priority": 2
    },
    {
      "id": "charts-line",
      "file_path": "src/shared/charts/LineChart.tsx",
      "description": "Wrapper line chart component that adapts data contract (ChartSeries) to a charting library and provides responsive resize handling.",
      "dependencies": [
        "src/core/contracts.ts",
        "src/hooks/useWindowSize.ts"
      ],
      "exports": [
        "LineChart"
      ],
      "priority": 2
    },
    {
      "id": "components-avatar",
      "file_path": "src/shared/components/Avatar.tsx",
      "description": "Avatar component supporting image, initials fallback and status badge. Accessible alt text handling.",
      "dependencies": [
        "src/theme/index.ts"
      ],
      "exports": [
        "Avatar"
      ],
      "priority": 2
    },
    {
      "id": "components-button",
      "file_path": "src/shared/components/Button.tsx",
      "description": "Accessible button component with variants (primary, ghost, subtle). Handles keyboard focus styles, loading state and optional icon slot. Uses theme tokens & motion presets.",
      "dependencies": [
        "src/theme/index.ts",
        "src/theme/animations.ts"
      ],
      "exports": [
        "Button"
      ],
      "priority": 2
    },
    {
      "id": "components-card",
      "file_path": "src/shared/components/Card.tsx",
      "description": "Generic card surface with elevation/shadow, optional header/footer slots and responsive padding.",
      "dependencies": [
        "src/theme/index.ts"
      ],
      "exports": [
        "Card"
      ],
      "priority": 2
    },
    {
      "id": "components-glasscard",
      "file_path": "src/shared/components/GlassCard.tsx",
      "description": "Glass-morphism card that uses backdrop-filter blur, subtle border and gradient overlay for depth. Accessible and responsive.",
      "dependencies": [
        "src/theme/index.ts",
        "src/shared/components/Card.tsx"
      ],
      "exports": [
        "GlassCard"
      ],
      "priority": 2
    },
    {
      "id": "components-gradient-bg",
      "file_path": "src/shared/components/GradientBackground.tsx",
      "description": "Full-bleed gradient background component with optional animated shapes and parallax micro-interaction.",
      "dependencies": [
        "src/theme/index.ts",
        "src/theme/animations.ts"
      ],
      "exports": [
        "GradientBackground"
      ],
      "priority": 2
    },
    {
      "id": "components-input",
      "file_path": "src/shared/components/Input.tsx",
      "description": "Accessible input field with label support, error display, prefix/suffix slots and built-in debounce for onChange. Integrates with theme tokens and ARIA props.",
      "dependencies": [
        "src/theme/index.ts",
        "src/hooks/useDebounce.ts"
      ],
      "exports": [
        "Input"
      ],
      "priority": 2
    },
    {
      "id": "components-modal",
      "file_path": "src/shared/components/Modal.tsx",
      "description": "Accessible modal component with backdrop blur, focus trap, ESC to close, ARIA roles and enter/exit motion variants. Supports stacking.",
      "dependencies": [
        "src/theme/animations.ts",
        "src/shared/components/Button.tsx"
      ],
      "exports": [
        "Modal"
      ],
      "priority": 2
    },
    {
      "id": "components-navbar",
      "file_path": "src/shared/components/NavBar.tsx",
      "description": "Top navigation bar with responsive behaviors, profile menu, search, and mobile affordances. Uses NavLink from react-router for active styles.",
      "dependencies": [
        "src/shared/components/Button.tsx",
        "src/shared/components/Avatar.tsx"
      ],
      "exports": [
        "NavBar"
      ],
      "priority": 2
    },
    {
      "id": "components-sidebar",
      "file_path": "src/shared/components/Sidebar.tsx",
      "description": "Responsive sidebar with collapse/expand behavior, keyboard navigation and ARIA roles. Reads uiStore for open state.",
      "dependencies": [
        "src/stores/uiStore.ts",
        "src/shared/components/Button.tsx"
      ],
      "exports": [
        "Sidebar"
      ],
      "priority": 2
    },
    {
      "id": "components-skeleton",
      "file_path": "src/shared/components/Skeleton.tsx",
      "description": "Skeleton loading primitives for content placeholders with shimmer animation and size variants.",
      "dependencies": [
        "src/theme/animations.ts"
      ],
      "exports": [
        "Skeleton"
      ],
      "priority": 2
    },
    {
      "id": "components-spinner",
      "file_path": "src/shared/components/Spinner.tsx",
      "description": "Small spinner component used for inline and full-screen loading states; accessible (aria-busy) and configurable size.",
      "dependencies": [
        "src/theme/index.ts"
      ],
      "exports": [
        "Spinner"
      ],
      "priority": 2
    },
    {
      "id": "components-toast",
      "file_path": "src/shared/components/Toast.tsx",
      "description": "Single toast UI used by the ToastProvider: supports types (success, error, info), auto-dismiss, pause on hover and motion entrance/exit.",
      "dependencies": [
        "src/theme/index.ts",
        "src/theme/animations.ts"
      ],
      "exports": [
        "Toast"
      ],
      "priority": 2
    },
    {
      "id": "components-toast-provider",
      "file_path": "src/shared/components/ToastProvider.tsx",
      "description": "Toast manager/provider that holds the toast queue/stack. Exposes imperative API via context/useToast hook (used by services and components). Integrates with core/events.",
      "dependencies": [
        "src/shared/components/Toast.tsx",
        "src/core/events.ts"
      ],
      "exports": [
        "ToastProvider",
        "useToast"
      ],
      "priority": 2
    },
    {
      "id": "components-tooltip",
      "file_path": "src/shared/components/Tooltip.tsx",
      "description": "Accessible tooltip primitive with keyboard/focus handling and delay config. Uses portal for layering.",
      "dependencies": [
        "src/theme/animations.ts"
      ],
      "exports": [
        "Tooltip"
      ],
      "priority": 2
    },
    {
      "id": "hooks-debounce",
      "file_path": "src/hooks/useDebounce.ts",
      "description": "Reusable useDebounce hook for input/value debouncing suitable for typeahead/search components.",
      "dependencies": [
        "src/core/utils.ts"
      ],
      "exports": [
        "useDebounce"
      ],
      "priority": 2
    },
    {
      "id": "hooks-useauth",
      "file_path": "src/hooks/useAuth.ts",
      "description": "Hook that exposes authentication status and helpers (login, logout) by delegating to AuthProvider context and authService.",
      "dependencies": [
        "src/providers/AuthProvider.tsx",
        "src/services/authService.ts",
        "src/core/events.ts"
      ],
      "exports": [
        "useAuth"
      ],
      "priority": 2
    },
    {
      "id": "hooks-usefetch",
      "file_path": "src/hooks/useFetch.ts",
      "description": "Lightweight wrapper around React Query configured hooks for typed fetches. Simplifies common fetch patterns and error mapping.",
      "dependencies": [
        "src/services/apiClient.ts",
        "src/providers/QueryProvider.tsx",
        "src/core/contracts.ts"
      ],
      "exports": [
        "useFetch"
      ],
      "priority": 2
    },
    {
      "id": "hooks-usemodal",
      "file_path": "src/hooks/useModal.ts",
      "description": "Hook to open/close modals via the ModalProvider programmatically. Returns an API to open modal with content and options.",
      "dependencies": [
        "src/providers/ModalProvider.tsx",
        "src/shared/components/Modal.tsx"
      ],
      "exports": [
        "useModal"
      ],
      "priority": 2
    },
    {
      "id": "hooks-window-size",
      "file_path": "src/hooks/useWindowSize.ts",
      "description": "Hook that tracks viewport size and breakpoints, optimized with passive listeners and debouncing.",
      "dependencies": [
        "src/core/utils.ts"
      ],
      "exports": [
        "useWindowSize"
      ],
      "priority": 2
    },
    {
      "id": "services-apiclient",
      "file_path": "src/services/apiClient.ts",
      "description": "Centralized HTTP client that wraps fetch, applies base URL and auth headers, and normalizes errors/responses. Uses AppConfig from app/config.ts.",
      "dependencies": [
        "src/app/config.ts",
        "src/core/contracts.ts"
      ],
      "exports": [
        "apiClient",
        "fetchJson"
      ],
      "priority": 2
    },
    {
      "id": "services-auth",
      "file_path": "src/services/authService.ts",
      "description": "Auth service implementing login, logout, refresh token and current user retrieval. Uses apiClient and emits events on login/logout.",
      "dependencies": [
        "src/services/apiClient.ts",
        "src/core/events.ts",
        "src/core/contracts.ts"
      ],
      "exports": [
        "authService"
      ],
      "priority": 2
    },
    {
      "id": "services-data",
      "file_path": "src/services/dataService.ts",
      "description": "Domain data service for fetching feature-specific data sets (e.g., dashboard metrics). Uses apiClient and maps to ChartSeries contract.",
      "dependencies": [
        "src/services/apiClient.ts",
        "src/core/contracts.ts"
      ],
      "exports": [
        "dataService"
      ],
      "priority": 2
    },
    {
      "id": "feature-dashboard-panel",
      "file_path": "src/features/dashboard/DashboardPanel.tsx",
      "description": "Higher-level dashboard panel that composes MetricCard, BarChart and summary panels. Pulls data via useFetch/dataService and orchestrates loading/error states.",
      "dependencies": [
        "src/features/dashboard/MetricCard.tsx",
        "src/shared/charts/BarChart.tsx",
        "src/hooks/useFetch.ts",
        "src/services/dataService.ts",
        "src/shared/components/Skeleton.tsx",
        "src/shared/components/Toast.tsx"
      ],
      "exports": [
        "DashboardPanel"
      ],
      "priority": 3
    },
    {
      "id": "feature-metric-card",
      "file_path": "src/features/dashboard/MetricCard.tsx",
      "description": "Small, reusable metric card used in dashboards (value + sparkline + delta). Supports skeleton state and animated transitions.",
      "dependencies": [
        "src/shared/components/Card.tsx",
        "src/shared/charts/LineChart.tsx",
        "src/theme/animations.ts"
      ],
      "exports": [
        "MetricCard"
      ],
      "priority": 3
    },
    {
      "id": "pages-dashboard",
      "file_path": "src/pages/DashboardPage.tsx",
      "description": "Main dashboard page that queries metrics (via dataService/useFetch), shows charts and panels. Uses AppLayout and DashboardPanel.",
      "dependencies": [
        "src/features/dashboard/DashboardPanel.tsx",
        "src/shared/layouts/AppLayout.tsx",
        "src/hooks/useFetch.ts",
        "src/services/dataService.ts",
        "src/shared/components/Skeleton.tsx"
      ],
      "exports": [
        "DashboardPage"
      ],
      "priority": 3
    },
    {
      "id": "pages-home",
      "file_path": "src/pages/HomePage.tsx",
      "description": "Landing/home page with hero area, key metrics summary and calls-to-action. Uses GradientBackground and MetricCard components.",
      "dependencies": [
        "src/shared/components/GradientBackground.tsx",
        "src/features/dashboard/MetricCard.tsx",
        "src/shared/components/GlassCard.tsx"
      ],
      "exports": [
        "HomePage"
      ],
      "priority": 3
    },
    {
      "id": "pages-login",
      "file_path": "src/pages/LoginPage.tsx",
      "description": "Login page with AuthLayout, accessible form using Input and Button and handles login via useAuth hook.",
      "dependencies": [
        "src/shared/layouts/AuthLayout.tsx",
        "src/shared/components/Input.tsx",
        "src/shared/components/Button.tsx",
        "src/hooks/useAuth.ts"
      ],
      "exports": [
        "LoginPage"
      ],
      "priority": 3
    },
    {
      "id": "pages-notfound",
      "file_path": "src/pages/NotFoundPage.tsx",
      "description": "404 Not Found route with a link back to home and accessible messaging.",
      "dependencies": [
        "src/shared/components/Button.tsx",
        "src/shared/components/GradientBackground.tsx"
      ],
      "exports": [
        "NotFoundPage"
      ],
      "priority": 3
    }
  ],
  "file_paths": [
    "src/app/config.ts",
    "src/main.tsx",
    "src/App.tsx",
    "src/app/router.tsx",
    "src/core/contracts.ts",
    "src/core/di.ts",
    "src/core/events.ts",
    "src/core/hooks.ts",
    "src/core/utils.ts",
    "src/shared/layouts/AppLayout.tsx",
    "src/shared/layouts/AuthLayout.tsx",
    "src/providers/AuthProvider.tsx",
    "src/providers/ModalProvider.tsx",
    "src/providers/Providers.tsx",
    "src/providers/QueryProvider.tsx",
    "src/stores/uiStore.ts",
    "src/styles/global.css",
    "src/theme/animations.ts",
    "src/theme/index.ts",
    "src/theme/ThemeProvider.tsx",
    "src/shared/charts/BarChart.tsx",
    "src/shared/charts/LineChart.tsx",
    "src/shared/components/Avatar.tsx",
    "src/shared/components/Button.tsx",
    "src/shared/components/Card.tsx",
    "src/shared/components/GlassCard.tsx",
    "src/shared/components/GradientBackground.tsx",
    "src/shared/components/Input.tsx",
    "src/shared/components/Modal.tsx",
    "src/shared/components/NavBar.tsx",
    "src/shared/components/Sidebar.tsx",
    "src/shared/components/Skeleton.tsx",
    "src/shared/components/Spinner.tsx",
    "src/shared/components/Toast.tsx",
    "src/shared/components/ToastProvider.tsx",
    "src/shared/components/Tooltip.tsx",
    "src/hooks/useDebounce.ts",
    "src/hooks/useAuth.ts",
    "src/hooks/useFetch.ts",
    "src/hooks/useModal.ts",
    "src/hooks/useWindowSize.ts",
    "src/services/apiClient.ts",
    "src/services/authService.ts",
    "src/services/dataService.ts",
    "src/features/dashboard/DashboardPanel.tsx",
    "src/features/dashboard/MetricCard.tsx",
    "src/pages/DashboardPage.tsx",
    "src/pages/HomePage.tsx",
    "src/pages/LoginPage.tsx",
    "src/pages/NotFoundPage.tsx"
  ],
  "descriptions": [
    "Materialized runtime configuration. Reads Vite env via import.meta.env and exports a typed config object (API base URL, feature flags, app name).",
    "Vite entry file: renders App inside root element, wraps with AppProviders, hydrates global CSS, and initializes global event listeners. Uses import.meta.env values from app/config.",
    "Top-level App component that mounts AppRouter and top-level Suspense/ErrorBoundary. Sets up page transitions and route-level motion wrappers.",
    "React Router v6 route configuration, lazy-loaded pages and route guards (protected routes using useAuth).",
    "Domain types, DTOs and API contracts (shared type definitions used across services and components). Contains interfaces for User, Auth responses, generic API shapes and chart data contracts.",
    "Simple dependency-injection container for swapping implementations in tests or during runtime. Registers singletons (apiClient, services) and exposes a resolver.",
    "Lightweight event bus implementation for broadcasting/listening to domain events (useful for decoupled notifications and cross-cutting events).",
    "Hook registry to allow runtime/plugin hooks to register behavior. Useful for extension points in the app (e.g., analytics, logging).",
    "Common utility functions used across the app (formatDate, classNames, sleep, safeParseJSON, uid generator).",
    "Primary application layout with responsive header (NavBar), sidebar, content area, and global keyboard/focus management. Uses glass/gradient backgrounds and provides slots for header/sidebar/content.",
    "Minimal centered layout for auth screens with accessible form area and responsive constraints. Integrates background gradient or glass card.",
    "Authentication provider exposing useAuth context. Manages session state, token refresh, and integrates with core/events (auth:login/auth:logout).",
    "Modal provider that manages modal stack, focus trap and body scroll lock. Exposes useModal hook to open/close modals programmatically.",
    "Top-level composition of providers (ThemeProvider, QueryProvider, AuthProvider, ModalProvider, ToastProvider). Used in main.tsx to wrap App.",
    "React Query provider wrapper that configures QueryClient, global error handling and hydration (if SSR later).",
    "Zustand store for ephemeral UI state (sidebar open, theme mode, toast queue reference, modal stack refs).",
    "Global CSS (or Tailwind entry) with CSS variables wired to theme tokens, resets, accessibility focus outlines and utility classes for depth/glass effects.",
    "Animation presets and motion variants (Framer Motion variants, easing curves, durations) used across components for consistent micro-interactions.",
    "Design tokens (colors, spacing, typography scales, radii, shadows). Exposes typed theme tokens used by ThemeProvider and components.",
    "Context-based ThemeProvider that applies tokens, toggles dark/light, and injects CSS variables. Wraps children with motion/ARIA helpers.",
    "Wrapper bar chart component with accessible descriptions and simple interaction events (hover tooltips).",
    "Wrapper line chart component that adapts data contract (ChartSeries) to a charting library and provides responsive resize handling.",
    "Avatar component supporting image, initials fallback and status badge. Accessible alt text handling.",
    "Accessible button component with variants (primary, ghost, subtle). Handles keyboard focus styles, loading state and optional icon slot. Uses theme tokens & motion presets.",
    "Generic card surface with elevation/shadow, optional header/footer slots and responsive padding.",
    "Glass-morphism card that uses backdrop-filter blur, subtle border and gradient overlay for depth. Accessible and responsive.",
    "Full-bleed gradient background component with optional animated shapes and parallax micro-interaction.",
    "Accessible input field with label support, error display, prefix/suffix slots and built-in debounce for onChange. Integrates with theme tokens and ARIA props.",
    "Accessible modal component with backdrop blur, focus trap, ESC to close, ARIA roles and enter/exit motion variants. Supports stacking.",
    "Top navigation bar with responsive behaviors, profile menu, search, and mobile affordances. Uses NavLink from react-router for active styles.",
    "Responsive sidebar with collapse/expand behavior, keyboard navigation and ARIA roles. Reads uiStore for open state.",
    "Skeleton loading primitives for content placeholders with shimmer animation and size variants.",
    "Small spinner component used for inline and full-screen loading states; accessible (aria-busy) and configurable size.",
    "Single toast UI used by the ToastProvider: supports types (success, error, info), auto-dismiss, pause on hover and motion entrance/exit.",
    "Toast manager/provider that holds the toast queue/stack. Exposes imperative API via context/useToast hook (used by services and components). Integrates with core/events.",
    "Accessible tooltip primitive with keyboard/focus handling and delay config. Uses portal for layering.",
    "Reusable useDebounce hook for input/value debouncing suitable for typeahead/search components.",
    "Hook that exposes authentication status and helpers (login, logout) by delegating to AuthProvider context and authService.",
    "Lightweight wrapper around React Query configured hooks for typed fetches. Simplifies common fetch patterns and error mapping.",
    "Hook to open/close modals via the ModalProvider programmatically. Returns an API to open modal with content and options.",
    "Hook that tracks viewport size and breakpoints, optimized with passive listeners and debouncing.",
    "Centralized HTTP client that wraps fetch, applies base URL and auth headers, and normalizes errors/responses. Uses AppConfig from app/config.ts.",
    "Auth service implementing login, logout, refresh token and current user retrieval. Uses apiClient and emits events on login/logout.",
    "Domain data service for fetching feature-specific data sets (e.g., dashboard metrics). Uses apiClient and maps to ChartSeries contract.",
    "Higher-level dashboard panel that composes MetricCard, BarChart and summary panels. Pulls data via useFetch/dataService and orchestrates loading/error states.",
    "Small, reusable metric card used in dashboards (value + sparkline + delta). Supports skeleton state and animated transitions.",
    "Main dashboard page that queries metrics (via dataService/useFetch), shows charts and panels. Uses AppLayout and DashboardPanel.",
    "Landing/home page with hero area, key metrics summary and calls-to-action. Uses GradientBackground and MetricCard components.",
    "Login page with AuthLayout, accessible form using Input and Button and handles login via useAuth hook.",
    "404 Not Found route with a link back to home and accessible messaging."
  ],
  "dependencies": [
    [],
    [
      "src/App.tsx",
      "src/providers/Providers.tsx",
      "src/app/config.ts",
      "src/styles/global.css"
    ],
    [
      "src/app/router.tsx",
      "src/theme/animations.ts",
      "src/shared/components/ToastProvider.tsx"
    ],
    [
      "src/pages/HomePage.tsx",
      "src/pages/DashboardPage.tsx",
      "src/pages/LoginPage.tsx",
      "src/pages/NotFoundPage.tsx",
      "src/providers/AuthProvider.tsx"
    ],
    [],
    [
      "src/core/utils.ts",
      "src/app/config.ts"
    ],
    [
      "src/core/utils.ts"
    ],
    [
      "src/core/events.ts",
      "src/core/di.ts"
    ],
    [],
    [
      "src/shared/components/NavBar.tsx",
      "src/shared/components/Sidebar.tsx",
      "src/shared/components/GradientBackground.tsx"
    ],
    [
      "src/shared/components/GlassCard.tsx",
      "src/theme/ThemeProvider.tsx"
    ],
    [
      "src/core/contracts.ts",
      "src/services/authService.ts",
      "src/core/events.ts",
      "src/hooks/useAuth.ts"
    ],
    [
      "src/shared/components/Modal.tsx",
      "src/hooks/useModal.ts"
    ],
    [
      "src/theme/ThemeProvider.tsx",
      "src/providers/QueryProvider.tsx",
      "src/providers/AuthProvider.tsx",
      "src/providers/ModalProvider.tsx",
      "src/shared/components/ToastProvider.tsx"
    ],
    [
      "src/app/config.ts"
    ],
    [
      "src/core/events.ts"
    ],
    [
      "src/theme/index.ts"
    ],
    [
      "src/theme/index.ts"
    ],
    [],
    [
      "src/theme/index.ts",
      "src/theme/animations.ts",
      "src/core/events.ts"
    ],
    [
      "src/core/contracts.ts",
      "src/hooks/useWindowSize.ts"
    ],
    [
      "src/core/contracts.ts",
      "src/hooks/useWindowSize.ts"
    ],
    [
      "src/theme/index.ts"
    ],
    [
      "src/theme/index.ts",
      "src/theme/animations.ts"
    ],
    [
      "src/theme/index.ts"
    ],
    [
      "src/theme/index.ts",
      "src/shared/components/Card.tsx"
    ],
    [
      "src/theme/index.ts",
      "src/theme/animations.ts"
    ],
    [
      "src/theme/index.ts",
      "src/hooks/useDebounce.ts"
    ],
    [
      "src/theme/animations.ts",
      "src/shared/components/Button.tsx"
    ],
    [
      "src/shared/components/Button.tsx",
      "src/shared/components/Avatar.tsx"
    ],
    [
      "src/stores/uiStore.ts",
      "src/shared/components/Button.tsx"
    ],
    [
      "src/theme/animations.ts"
    ],
    [
      "src/theme/index.ts"
    ],
    [
      "src/theme/index.ts",
      "src/theme/animations.ts"
    ],
    [
      "src/shared/components/Toast.tsx",
      "src/core/events.ts"
    ],
    [
      "src/theme/animations.ts"
    ],
    [
      "src/core/utils.ts"
    ],
    [
      "src/providers/AuthProvider.tsx",
      "src/services/authService.ts",
      "src/core/events.ts"
    ],
    [
      "src/services/apiClient.ts",
      "src/providers/QueryProvider.tsx",
      "src/core/contracts.ts"
    ],
    [
      "src/providers/ModalProvider.tsx",
      "src/shared/components/Modal.tsx"
    ],
    [
      "src/core/utils.ts"
    ],
    [
      "src/app/config.ts",
      "src/core/contracts.ts"
    ],
    [
      "src/services/apiClient.ts",
      "src/core/events.ts",
      "src/core/contracts.ts"
    ],
    [
      "src/services/apiClient.ts",
      "src/core/contracts.ts"
    ],
    [
      "src/features/dashboard/MetricCard.tsx",
      "src/shared/charts/BarChart.tsx",
      "src/hooks/useFetch.ts",
      "src/services/dataService.ts",
      "src/shared/components/Skeleton.tsx",
      "src/shared/components/Toast.tsx"
    ],
    [
      "src/shared/components/Card.tsx",
      "src/shared/charts/LineChart.tsx",
      "src/theme/animations.ts"
    ],
    [
      "src/features/dashboard/DashboardPanel.tsx",
      "src/shared/layouts/AppLayout.tsx",
      "src/hooks/useFetch.ts",
      "src/services/dataService.ts",
      "src/shared/components/Skeleton.tsx"
    ],
    [
      "src/shared/components/GradientBackground.tsx",
      "src/features/dashboard/MetricCard.tsx",
      "src/shared/components/GlassCard.tsx"
    ],
    [
      "src/shared/layouts/AuthLayout.tsx",
      "src/shared/components/Input.tsx",
      "src/shared/components/Button.tsx",
      "src/hooks/useAuth.ts"
    ],
    [
      "src/shared/components/Button.tsx",
      "src/shared/components/GradientBackground.tsx"
    ]
  ],
  "total_files": 50
}
