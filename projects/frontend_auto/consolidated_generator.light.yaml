version: light

persons:
  Section Planner:
    service: openai
    model: gpt-5-mini-2025-08-07
    api_key_id: APIKEY_52609F
    system_prompt: |
      You are a senior product/front-end architect with expertise in React, TypeScript, and modern web architecture.
      
      Your task is to:
      1. Define the overall architecture with SHARED CONVENTIONS (API patterns, types, imports)
      2. Split work into COMPLETE sections covering ALL required files
      3. Provide concrete implementation steps ensuring cross-section consistency
      
      Focus on:
      - COMPLETENESS: No missing imports or references
      - CONSISTENCY: All sections follow the same patterns defined in architecture
      - Clear data flow and integration points between sections
      - Modern React 18+ and TypeScript best practices
      
      CRITICAL: Define shared conventions for API clients, type definitions, and component interfaces that ALL sections must follow.
      Follow the Pydantic schema strictly - include architecture, implementation_steps, and integration_points.
      

  Frontend Generator:
#    service: openai
#    model: gpt-5-nano-2025-08-07
#    api_key_id: APIKEY_52609F
    service: claude-code
    model: claude-code
    api_key_id: APIKEY_CLAUDE
    system_prompt: |
      You are an expert React/TypeScript engineer building a cohesive frontend application.
      
      CRITICAL RULES:
      1. Return ONLY the raw code files in the exact format specified in the prompt. You MUST NOT attempt to examine any existing codes.
      2. Do NOT include any conversational text, explanations, or commentary
      3. Generate COMPLETE, WORKING code - no placeholders or TODOs
      4. STRICTLY follow the shared conventions defined in architecture section
      5. Import and use components/utilities from previous sections when referenced
      6. VALIDATE all imports match actual exports from dependency files
      
      IMPLEMENTATION REQUIREMENTS:
      - Every component must be FULLY implemented with all logic
      - Include proper TypeScript types for all props and functions
      - Implement actual functionality, not just UI shells
      - For mock data/adapters, provide realistic implementations
      - For utility functions, provide complete implementations
      - For hooks, include all necessary logic and state management
      - For API clients, include error handling and response processing
      
      You are building sections iteratively. Use the context from previous sections to maintain consistency in:
      - Naming conventions
      - Import paths
      - Type definitions
      - Component patterns
      - State management approach
      
      REMEMBER: This code should be deployable as-is once all sections are generated!

nodes:
  - label: Start
    type: start
    position: {x: 60, y: 240}
    props:
      trigger_mode: manual
      
  - label: Load Config
    type: db
    position: {x: 300, y: 240}
    props:
      operation: read
      sub_type: file
      format: json
      source_details: projects/frontend_auto/variants/memory_game_config.json

  - label: Plan Sections
    type: person_job
    position: {x: 400, y: 240}
    props:
      person: Section Planner
      text_format_file: projects/frontend_auto/section_models.py
      default_prompt: |
        Analyze the requirements and create a comprehensive development plan:

        App config: {{config}}

        Your response MUST include:
        1. Architecture with SHARED CONVENTIONS defining:
           - API client patterns, type definitions, component interfaces ALL sections must follow
           - Data flow, state management, and folder structure with ACTUAL FILE NAMES
           - How sections integrate as a cohesive system

        2. Sections where EACH represents ONE SPECIFIC FILE with:
           - file_to_implement: EXACT path (e.g., "src/features/dashboard/MetricCard.tsx")
           - Implementation steps following the shared conventions
           - Integration points and dependencies

        CRITICAL REQUIREMENTS:
        - Include ALL files: components, pages, hooks, utils, types, providers, services
        - Every import MUST have a corresponding section that generates that file
        - ALL files MUST follow the shared conventions defined in architecture
        - Include integration validation points between dependent files
        
        MANDATORY FILES: src/shared/components/*, src/utils/*, src/shared/hooks/*, src/types/*, all pages, providers, API clients, mock implementations
        
        REMEMBER: Generate EVERY file imported anywhere. Validate cross-file consistency!

  - label: Save Sections Data
    type: db
    position: {x: 800, y: 240}
    props:
      operation: write
      sub_type: file
      format: json
      source_details: projects/frontend_auto/generated/sections_data.json

  - label: Load Sections Data
    type: db
    position: {x: 1100, y: 240}
    props:
      operation: read
      sub_type: file
      format: json
      source_details: projects/frontend_auto/generated/sections_data.json

  - label: Check Continue
    type: condition
    position: {x: 1450, y: 240}
    props:
      condition_type: custom
#      expression: current_index >= 4
      expression: current_index >= len(default.sections)
      expose_index_as: current_index
      flipped: [false, true]

  - label: Load Sections Data again
    type: db
    position: {x: 1100, y: 240}
    props:
      operation: read
      sub_type: file
      format: json
      source_details: projects/frontend_auto/generated/sections_data.json

  - label: Generate Frontend Code
    type: person_job
    position: {x: 1800, y: 240}
    props:
      person: Frontend Generator
      max_iteration: 100
      memorize_to: "Which contains necessary information for current task, among the previous implementations."
      at_most: 5
      prompt_file: frontend_generator.txt

  - label: Write Section Result
    type: db
    position: {x: 2200, y: 240}
    props:
      operation: write
      sub_type: file
      format: text
      source_details: "projects/frontend_auto/generated/temp_section_{current_index}.tsx"

  - label: Rename Files
    type: code_job
    position: {x: 1500, y: 600}
    props:
      language: python
      filePath: projects/frontend_auto/rename_generated_files.py
      functionName: rename_generated_files

#  - label: Compile Results
#    type: code_job
#    position: {x: 1400, y: 600}
#    props:
#      language: python
#      code: |
#        import json
#        import os
#        from pathlib import Path
#
#        # Read all generated section files
#        generated_dir = Path("projects/frontend_enhance/generated")
#        section_files = sorted(generated_dir.glob("consolidated_section_*.json"))
#
#        all_sections = []
#        for file in section_files:
#          with open(file, 'r') as f:
#            all_sections.append(json.load(f))
#
#        result = {
#          "success": True,
#          "total_sections_processed": len(all_sections),
#          "sections": all_sections,
#          "architecture": sorted_data.get('architecture', {}),
#          "approach": "Sequential processing with intelligent memory selection"
#        }


  - label: End
    type: endpoint
    position: {x: 1800, y: 600}
    props:
      save_to_file: false

connections:
  # Initial setup
  - {from: Start, to: Load Config}
  - {from: Load Config, to: Plan Sections, label: config, content_type: object}
  - {from: Plan Sections, to: Save Sections Data, content_type: object}
  - {from: Save Sections Data, to: Load Sections Data, content_type: object}
  - { from: Load Sections Data, to: Check Continue, content_type: object }
#
#  - {from: Start, to: Load Sections Data}
#  - { from: Load Sections Data, to: Check Continue, content_type: object }

  - {from: Check Continue_condfalse, to: Load Sections Data again, content_type: object }
  - {from: Check Continue_condtrue, to: Rename Files, content_type: object }

  - {from: Load Sections Data again, to: Generate Frontend Code, content_type: object }
  - {from: Generate Frontend Code, to: Write Section Result, content_type: object}
  - {from: Write Section Result, to: Check Continue, content_type: object}

  - { from: Rename Files, to: End, content_type: object }
