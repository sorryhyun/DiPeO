#!/usr/bin/env python3
"""Render key codegen templates to validate context compatibility."""

from __future__ import annotations

import asyncio
import json
from pathlib import Path
from typing import Any

from dipeo.infrastructure.codegen.templates.drivers.factory import get_template_service

BASE_TEMPLATE_DIR = Path("projects/codegen/templates")
IR_DIR = Path("projects/codegen/ir")


def load_json(path: Path) -> dict[str, Any]:
    with path.open("r", encoding="utf-8") as handle:
        return json.load(handle)


async def render(service, template_path: str, context: dict[str, Any]) -> None:
    """Render a template by relative path using the shared template service."""
    await service.render_template(template_path, context)


async def render_backend_templates(service) -> None:
    backend_ir = load_json(IR_DIR / "backend_ir.json")
    backend_ctx = dict(backend_ir)
    backend_ctx.setdefault("now", backend_ir.get("generated_at"))

    templates = [
        "backend/domain_models.j2",
        "backend/node_factory.j2",
        "backend/conversions.j2",
        "backend/integrations.j2",
        "backend/enums.j2",
        "backend/generated_nodes.j2",
        "backend/unified_nodes_init.j2",
    ]

    for template in templates:
        await render(service, template, dict(backend_ctx))


async def render_frontend_templates(service) -> None:
    frontend_ir = load_json(IR_DIR / "frontend_ir.json")
    frontend_ctx = dict(frontend_ir)
    frontend_ctx.setdefault("now", frontend_ir.get("generated_at"))

    templates = [
        "frontend/graphql-queries-simplified.j2",
        "frontend/zod_schemas_simplified.j2",
        "frontend/field_configs.j2",
    ]

    for template in templates:
        await render(service, template, dict(frontend_ctx))


async def render_strawberry_templates(service) -> None:
    strawberry_ir = load_json(IR_DIR / "strawberry_ir.json")
    base_ctx = dict(strawberry_ir)
    base_ctx.setdefault("now", strawberry_ir.get("generated_at"))

    templates_with_extras = [
        ("strawberry/strawberry_types.j2", {"module_name": "strawberry_nodes", "generated_warning": "Generated by verification"}),
        ("strawberry/strawberry_scalars.j2", {"module_name": "scalars", "generated_warning": "Generated by verification"}),
        ("strawberry/scalar_aliases.j2", {"module_name": "scalar_aliases", "generated_warning": "Generated by verification"}),
        ("strawberry/strawberry_domain_simplified.j2", {"module_name": "domain_types", "generated_warning": "Generated by verification"}),
        ("strawberry/strawberry_inputs.j2", {"module_name": "inputs", "generated_warning": "Generated by verification"}),
        ("strawberry/strawberry_enums.j2", {"module_name": "enums", "generated_warning": "Generated by verification"}),
        ("strawberry/strawberry_mutations.j2", {"module_name": "node_mutations", "generated_warning": "Generated by verification"}),
        ("strawberry/strawberry_results.j2", {"module_name": "results", "generated_warning": "Generated by verification"}),
        ("strawberry/strawberry_schema_from_operations.j2", {"module_name": "generated_schema", "generated_warning": "Generated by verification"}),
        ("strawberry/python-graphql-operations.j2", {"module_name": "operations", "generated_warning": "Generated by verification"}),
    ]

    for template, extra in templates_with_extras:
        context = dict(base_ctx)
        context.update(extra)
        await render(service, template, context)


async def main() -> None:
    service = get_template_service()

    await render_backend_templates(service)
    await render_frontend_templates(service)
    await render_strawberry_templates(service)


if __name__ == "__main__":
    asyncio.run(main())
