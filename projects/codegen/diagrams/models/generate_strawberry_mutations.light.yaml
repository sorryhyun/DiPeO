# Generate Strawberry GraphQL Node Mutations V2 - Simplified
# Uses simplified extractors that work directly with DB glob results

version: light

nodes:
  - label: Start
    type: start
    position: {x: 50, y: 300}
    props:
      custom_data:
        message: Starting Strawberry mutations generation with template job

  # NEW: Load all spec files dynamically using glob patterns
  - label: Load All Spec Files
    type: db
    position: {x: 350, y: 300}
    props:
      operation: read
      sub_type: file
      format: json  # Parse JSON files automatically
      glob: true  # Enable glob pattern expansion
      file:
        # Also load the consolidated cache if available
        - "temp/all_node_specs_ast.json"
        # Dynamically discover all node spec files
        - "temp/nodes/*.spec.ts.json"

  # Generate Strawberry types directly from glob results
  - label: Generate Strawberry Types
    type: code_job
    position: {x: 500, y: 300}
    props:
      language: python
      filePath: projects/codegen/code/shared/simplified_extractors.py
      functionName: prepare_strawberry_types

  # Generate mutations
  - label: Generate Node Mutations
    type: code_job
    position: {x: 700, y: 300}
    props:
      language: python
      filePath: projects/codegen/code/shared/simplified_extractors.py
      functionName: generate_node_mutations

  # Use template_job for rendering with automatic enhancements
  - label: Render Mutations Template
    type: template_job
    position: {x: 900, y: 300}
    props:
      engine: jinja2  # Will use enhanced rendering if services available
      template_path: projects/codegen/templates/strawberry/strawberry_mutations.j2
      output_path: dipeo/diagram_generated_staged/graphql/node_mutations.py
      # Can add variables here if needed
      variables:
        module_name: "node_mutations"
        generated_warning: "DO NOT EDIT - Generated by DiPeO"

  - label: End
    type: endpoint
    position: {x: 1100, y: 300}
    props:
      save_to_file: false

connections:

  # Load spec files
  - {from: Start, to: Load All Spec Files}

  # Pass glob results directly to simplified generator
  - {from: Load All Spec Files, to: Generate Strawberry Types, label: default, content_type: object}

  # Generate mutations
  - {from: Generate Strawberry Types, to: Generate Node Mutations, label: strawberry_types, content_type: object}

  # Pass mutations data to template renderer
  - {from: Generate Node Mutations, to: Render Mutations Template, label: mutations, content_type: object}  # This becomes available as 'mutations' in template

  - {from: Render Mutations Template, to: End}
