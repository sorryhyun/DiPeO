# Backend Model Generation using Enhanced Template Job with Foreach
# Uses template_job's new foreach capability to eliminate extractors

version: light

nodes:
  - label: Start
    type: start
    position: {x: 50, y: 200}
    props:
      custom_data:
        message: Starting model generation using enhanced template_job with foreach

  # Parse all TypeScript files and cache AST
  - label: Parse All TypeScript
    type: sub_diagram
    position: {x: 200, y: 200}
    props:
      diagram_name: projects/codegen/diagrams/shared/parse_typescript_batch_direct
      diagram_format: light
      passInputData: false
      ignoreIfSub: true

  # Discover node spec files dynamically using glob patterns
  - label: Discover Node Specs
    type: db
    position: {x: 350, y: 200}
    props:
      operation: read
      sub_type: file
      format: json  # Parse JSON files automatically
      glob: true  # Enable glob pattern expansion
      source_details:
        # Dynamically discover all node spec cache files
        - "temp/specifications/nodes/*.spec.ts.json"

  # Extract specifications from parsed node files
  - label: Extract Specifications
    type: code_job
    position: {x: 500, y: 200}
    props:
      language: python
      code: |
        # Extract all node specifications from parsed files
        specs = []
        # inputs.get('default') contains the glob results
        node_files = inputs.get('default', {})
        
        for filepath, ast_data in node_files.items():
            # Each file should have constants with node specs
            for const in (ast_data.get('constants') or []):
                value = const.get('value')
                if isinstance(value, dict) and 'nodeType' in value:
                    specs.append(value)
        
        # Use result = {} pattern for code_job output
        result = {'specs': specs}

  # Generate all backend models using foreach
  - label: Generate Backend Models
    type: template_job
    position: {x: 700, y: 200}
    props:
      engine: jinja2
      template_path: projects/codegen/templates/backend/pydantic_model_simple.j2
      foreach:
        items: specs  # Iterate over the specs array
        as: spec  # Each item is available as 'spec' in template
        output_path: "dipeo/diagram_generated_staged/models/{spec.nodeTypeSnake}_model.py"

  # Generate enums file
  - label: Generate Enums
    type: template_job
    position: {x: 900, y: 200}
    props:
      engine: jinja2
      template_path: projects/codegen/templates/models/enums_simple.j2
      output_path: dipeo/diagram_generated_staged/enums.py
      variables:
        specs: "{specs}"

  # Generate models __init__.py
  - label: Prepare Init Context
    type: code_job
    position: {x: 1100, y: 200}
    props:
      language: python
      code: |
        # Prepare context for __init__.py generation
        model_names = []
        for spec in specs:
            model_names.append({
                'module': spec['nodeTypeSnake'] + '_model',
                'class': spec['nodeTypePascal'] + 'NodeData'
            })
        # Use result = {} pattern for code_job output
        result = {'model_imports': model_names}

  - label: Generate Models Init
    type: template_job
    position: {x: 1300, y: 200}
    props:
      engine: jinja2
      template_content: |
        # Auto-generated __init__.py for models package
        
        {% for model in model_imports %}
        from .{{ model.module }} import {{ model.class }}
        {% endfor %}
        
        __all__ = [
        {% for model in model_imports %}
            "{{ model.class }}",
        {% endfor %}
        ]
      output_path: dipeo/diagram_generated_staged/models/__init__.py

  - label: End
    type: endpoint
    position: {x: 1500, y: 200}
    props:
      save_to_file: false

connections:
  - {from: Start, to: Parse All TypeScript}
  - {from: Parse All TypeScript, to: Discover Node Specs, content_type: object}
  - {from: Discover Node Specs, to: Extract Specifications, content_type: object}
  
  # Pass specs and ast_cache to model generation
  - {from: Extract Specifications, to: Generate Backend Models, content_type: object}
  
  # Also pass specs to generate enums
  - {from: Extract Specifications, to: Generate Enums, label: specs, content_type: object}
  
  # Prepare init file
  - {from: Extract Specifications, to: Prepare Init Context, label: specs, content_type: object}
  - {from: Prepare Init Context, to: Generate Models Init, content_type: object}
  
  # All paths complete before ending
  - {from: Generate Backend Models, to: End}
  - {from: Generate Enums, to: End}
  - {from: Generate Models Init, to: End}