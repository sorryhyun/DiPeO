# Generate Strawberry GraphQL Types from Node Specifications V3 - Simplified
# Uses simplified extractors that work directly with DB glob results
# Also generates GraphQL scalar types from TypeScript branded types
# And generates domain types from TypeScript interfaces
# And generates input types from TypeScript definitions

version: light

nodes:
  - label: Start
    type: start
    position: {x: 50, y: 400}
    props:
      custom_data:
        message: Starting Strawberry GraphQL types, scalars, domain types, input types, and enums generation

  # NEW: Load all spec files dynamically using glob patterns
  - label: Load All Spec Files
    type: db
    position: {x: 200, y: 200}
    props:
      operation: read
      sub_type: file
      format: json  # Parse JSON files automatically
      glob: true  # Enable glob pattern expansion
      file:
        # Also load the consolidated cache if available
        - "temp/all_node_specs_ast.json"
        # Dynamically discover all node spec files
        - "temp/specifications/nodes/*.spec.ts.json"

  # Generate Strawberry types directly from glob results
  - label: Generate Strawberry Types
    type: code_job
    position: {x: 350, y: 200}
    props:
      language: python
      filePath: projects/codegen/code/shared/simplified_extractors.py
      functionName: prepare_strawberry_types

  # Use template_job for rendering
  - label: Render Types Template
    type: template_job
    position: {x: 500, y: 200}
    props:
      engine: jinja2
      template_path: projects/codegen/templates/models/strawberry_types.j2
      output_path: dipeo/diagram_generated_staged/graphql/strawberry_nodes.py
      variables:
        module_name: "strawberry_nodes"
        generated_warning: "DO NOT EDIT - Generated by DiPeO"

  # NEW: Load core TypeScript AST files for scalar extraction
  - label: Load Core AST Files
    type: db
    position: {x: 200, y: 400}
    props:
      operation: read
      sub_type: file
      format: json
      glob: true
      file:
        - "temp/core/diagram.ts.json"
        - "temp/core/execution.ts.json"

  # NEW: Extract scalar types from AST
  - label: Extract Scalar Types
    type: code_job
    position: {x: 350, y: 400}
    props:
      language: python
      filePath: projects/codegen/code/models/generate_graphql_scalars.py
      functionName: main

  # NEW: Render scalars template
  - label: Render Scalars Template
    type: template_job
    position: {x: 500, y: 400}
    props:
      engine: jinja2
      template_path: projects/codegen/templates/models/strawberry_scalars.j2
      output_path: dipeo/diagram_generated_staged/graphql/scalars.py
      variables:
        module_name: "scalars"
        generated_warning: "DO NOT EDIT - Generated by DiPeO"

  # NEW: Extract domain types from AST (reuse same AST files)
  - label: Extract Domain Types
    type: code_job
    position: {x: 350, y: 600}
    props:
      language: python
      filePath: projects/codegen/code/models/generate_graphql_domain.py
      functionName: main

  # NEW: Render domain types template
  - label: Render Domain Types Template
    type: template_job
    position: {x: 500, y: 600}
    props:
      engine: jinja2
      template_path: projects/codegen/templates/models/strawberry_domain_full.j2
      output_path: dipeo/diagram_generated_staged/graphql/domain_types.py
      variables:
        module_name: "domain_types"
        generated_warning: "DO NOT EDIT - Generated by DiPeO"

  # NEW: Load GraphQL inputs TypeScript AST
  - label: Load GraphQL Inputs AST
    type: db
    position: {x: 200, y: 800}
    props:
      operation: read
      sub_type: file
      format: json
      glob: true
      file:
        - "temp/frontend/graphql-inputs.ts.json"

  # NEW: Extract input types from AST
  - label: Extract Input Types
    type: code_job
    position: {x: 350, y: 800}
    props:
      language: python
      filePath: projects/codegen/code/generate_graphql_inputs.py
      functionName: main

  # NEW: Render input types template
  - label: Render Input Types Template
    type: template_job
    position: {x: 500, y: 800}
    props:
      engine: jinja2
      template_path: projects/codegen/templates/models/strawberry_inputs.j2
      output_path: dipeo/diagram_generated_staged/graphql/inputs.py
      variables:
        module_name: "inputs"
        generated_warning: "DO NOT EDIT - Generated by DiPeO"

  # NEW: Load enum AST files for GraphQL enum generation
  - label: Load Enum AST Files
    type: db
    position: {x: 200, y: 1000}
    props:
      operation: read
      sub_type: file
      format: json
      glob: true
      file:
        - "temp/core/enums/*.ts.json"

  # NEW: Extract GraphQL enums from AST
  - label: Extract GraphQL Enums
    type: code_job
    position: {x: 350, y: 1000}
    props:
      language: python
      filePath: projects/codegen/code/generate_graphql_enums.py
      functionName: main

  # NEW: Render GraphQL enums template
  - label: Render GraphQL Enums Template
    type: template_job
    position: {x: 500, y: 1000}
    props:
      engine: jinja2
      template_path: projects/codegen/templates/models/strawberry_enums.j2
      output_path: dipeo/diagram_generated_staged/graphql/enums.py
      variables:
        module_name: "enums"
        generated_warning: "DO NOT EDIT - Generated by DiPeO"

  - label: End
    type: endpoint
    position: {x: 700, y: 400}
    props:
      save_to_file: false

connections:

  # Start parallel processing for all generation paths
  - {from: Start, to: Load All Spec Files}
  - {from: Start, to: Load Core AST Files}
  - {from: Start, to: Load GraphQL Inputs AST}
  - {from: Start, to: Load Enum AST Files}

  # Node types generation flow
  - {from: Load All Spec Files, to: Generate Strawberry Types, content_type: object}
  - {from: Generate Strawberry Types, to: Render Types Template, label: strawberry_types, content_type: object}

  # Scalars generation flow
  - {from: Load Core AST Files, to: Extract Scalar Types, content_type: object}
  - {from: Extract Scalar Types, to: Render Scalars Template, content_type: object}

  # Domain types generation flow (reuse Core AST Files)
  - {from: Load Core AST Files, to: Extract Domain Types, content_type: object}
  - {from: Extract Domain Types, to: Render Domain Types Template, content_type: object}

  # Input types generation flow
  - {from: Load GraphQL Inputs AST, to: Extract Input Types, content_type: object}
  - {from: Extract Input Types, to: Render Input Types Template, content_type: object}

  # GraphQL enums generation flow
  - {from: Load Enum AST Files, to: Extract GraphQL Enums, content_type: object}
  - {from: Extract GraphQL Enums, to: Render GraphQL Enums Template, content_type: object}

  # All flows converge to End
  - {from: Render Types Template, to: End}
  - {from: Render Scalars Template, to: End}
  - {from: Render Domain Types Template, to: End}
  - {from: Render Input Types Template, to: End}
  - {from: Render GraphQL Enums Template, to: End}
