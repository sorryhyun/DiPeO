# Generate Domain Model Enums V2
# Uses template_job node for enhanced rendering when services are available

version: light

nodes:
  - label: Start
    type: start
    position: {x: 50, y: 200}
    props:
      custom_data:
        message: Starting enum generation with template job approach

  # Run batch parser if cache doesn't exist
  - label: Parse TypeScript Batch
    type: sub_diagram
    position: {x: 200, y: 200}
    props:
      diagram_name: projects/codegen/diagrams/parse_typescript_batch_direct
      diagram_format: light
      passInputData: false
      ignoreIfSub: true

  # Load cached enums AST from multiple files
  - label: Load Enums AST
    type: db
    position: {x: 400, y: 200}
    props:
      operation: read
      sub_type: file
      format: json
      glob: true
      source_details:
        - "temp/core/enums/*.ts.json"

  # Extract enum definitions (simplified - just data extraction)
  - label: Extract Enums
    type: code_job
    position: {x: 600, y: 200}
    props:
      language: python
      filePath: projects/codegen/code/shared/extract_enums.py
      functionName: main

  # NEW: Use template_job for rendering with automatic enhancements
  - label: Render Enums Template
    type: template_job
    position: {x: 800, y: 200}
    props:
      engine: jinja2  # Will use enhanced rendering if services available
      template_path: projects/codegen/templates/models/enums.j2
      output_path: dipeo/diagram_generated_staged/enums.py
      # Can add variables here if needed
      variables:
        module_name: "enums"
        generated_warning: "DO NOT EDIT - Generated by DiPeO"

  - label: End
    type: endpoint
    position: {x: 1000, y: 200}
    props:
      save_to_file: false

connections:
  # Load cached data after parsing
  - {from: Start, to: Load Enums AST}

  # Extract enums from cached AST
  - {from: Load Enums AST, to: Extract Enums, content_type: object}

  # Pass extracted enums to template renderer
  - {from: Extract Enums, to: Render Enums Template, label: enums_data, content_type: object}  # This becomes available as 'enums_data' in template

  - {from: Render Enums Template, to: End}
