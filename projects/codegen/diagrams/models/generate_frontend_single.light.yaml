# Frontend Single Node Generation - Simplified Version
# Follows the successful pattern from generate_zod_schemas_v2

version: light

nodes:
  - label: Start
    type: start
    position: {x: 50, y: 200}

  # Load cached AST data directly - the input already has the hyphenated node type
  - label: Load AST
    type: db
    position: {x: 200, y: 200}
    props:
      operation: read
      sub_type: file
      file: "temp/nodes/{default.node_spec_path}.spec.ts.json"  # Use node_spec_path directly
      format: json

  # Prepare inputs for extractor
  - label: Prepare Extractor Inputs
    type: code_job
    position: {x: 400, y: 200}
    props:
      language: python
      code: |
        # Get AST data and node type
        ast_data = inputs.get('ast_data')
        node_type_hyphenated = inputs.get('default').get('default').get('node_spec_path')

        if not ast_data:
            raise ValueError(f"No AST data found for node type: {node_type_hyphenated}")

        if isinstance(ast_data, str):
            raise ValueError(f"AST data is a string instead of dict: {ast_data[:100]}...")

        result = {
            'ast_data': ast_data,
            'node_type': node_type_hyphenated
        }
        return result

  # Extract all frontend data in one step
  - label: Extract Frontend Data
    type: code_job
    position: {x: 550, y: 200}
    props:
      language: python
      file_path: dipeo/infrastructure/codegen/generators/node_extractor.py
      function_name: main

  # Generate all three file using template_job
  - label: Generate TypeScript Model
    type: template_job
    position: {x: 700, y: 100}
    props:
      engine: jinja2
      template_path: projects/codegen/templates/frontend/typescript_model.j2
      output_path: apps/web/src/__generated__/models/{{ node_name }}Node.ts

  - label: Generate Node Config
    type: template_job
    position: {x: 700, y: 200}
    props:
      engine: jinja2
      template_path: projects/codegen/templates/frontend/node_config.j2
      output_path: apps/web/src/__generated__/nodes/{{ node_name }}Config.ts

  - label: Generate Field Config
    type: template_job
    position: {x: 700, y: 300}
    props:
      engine: jinja2
      template_path: projects/codegen/templates/frontend/field_config.j2
      output_path: apps/web/src/__generated__/fields/{{ node_name }}Fields.ts

  - label: End
    type: endpoint
    position: {x: 900, y: 200}
    props:
      save_to_file: false

connections:
  # Start to Load AST - passes the input directly without wrapping
  - {from: Start, to: Load AST}

  # Pass AST data and original input to prepare
  - {from: Load AST, to: Prepare Extractor Inputs, content_type: object, label: ast_data}
  - {from: Start, to: Prepare Extractor Inputs, content_type: object}

  # Extract all data
  - {from: Prepare Extractor Inputs, to: Extract Frontend Data, content_type: object}

  # Pass extracted data directly to template jobs (no label = auto unwrap)
  - {from: Extract Frontend Data, to: Generate TypeScript Model, content_type: object}
  - {from: Extract Frontend Data, to: Generate Node Config, content_type: object}
  - {from: Extract Frontend Data, to: Generate Field Config, content_type: object}

  # All complete
  - {from: Generate TypeScript Model, to: End}
  - {from: Generate Node Config, to: End}
  - {from: Generate Field Config, to: End}
