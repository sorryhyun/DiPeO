# Generate GraphQL Schema using Template Job - Dynamic Discovery
# Uses glob patterns to automatically discover all node data files

version: light

nodes:
  - label: Start
    type: start
    position: {x: 50, y: 300}
    props:
      custom_data:
        message: Starting GraphQL schema generation with dynamic file discovery

  # Run batch parser if cache doesn't exist
  - label: Parse TypeScript Batch
    type: sub_diagram
    position: {x: 200, y: 300}
    props:
      diagram_name: projects/codegen/diagrams/shared/parse_typescript_batch_direct
      diagram_format: light
      passInputData: false
      ignoreIfSub: true

  # NEW: Load all AST files dynamically using glob patterns
  - label: Load All AST Files
    type: db
    position: {x: 400, y: 300}
    props:
      operation: read
      sub_type: file
      format: json
      glob: true  # Enable glob pattern expansion
      source_details:
        # Core AST files
        - temp/core/diagram.ts.json
        - temp/core/execution.ts.json
        - temp/core/conversation.ts.json
        - temp/core/integration.ts.json
        # Dynamic discovery of all node data files
        - "temp/core/nodes/*.data.ts.json"  # This will match all node data files automatically!

  # Prepare GraphQL data for template
  - label: Prepare GraphQL Data
    type: code_job
    position: {x: 600, y: 300}
    props:
      language: python
      filePath: projects/codegen/code/models/graphql_schema_generator.py
      functionName: prepare_graphql_data_for_template

  # Render GraphQL schema with template job
  - label: Render GraphQL Schema
    type: template_job
    position: {x: 800, y: 300}
    props:
      engine: jinja2
      template_path: projects/codegen/templates/models/graphql_schema_v2.j2
      output_path: dipeo/diagram_generated_staged/domain-schema.graphql
      variables:
        generated_warning: "DO NOT EDIT - Generated by DiPeO"
      # The data from the previous node is available as input_data
      use_input_data: true

  # Generate summary of what was created
  - label: Generate Summary
    type: code_job
    position: {x: 1000, y: 300}
    props:
      language: python
      filePath: projects/codegen/code/models/graphql_schema_generator.py
      functionName: generate_summary

  - label: End
    type: endpoint
    position: {x: 1200, y: 300}
    props:
      save_to_file: false

connections:
  # Parse specs first
  - {from: Start, to: Parse TypeScript Batch}
  
  # Load all AST files
  - {from: Parse TypeScript Batch, to: Load All AST Files}
  
  # Prepare GraphQL data
  - {from: Load All AST Files, to: Prepare GraphQL Data, content_type: object}
  
  # Render schema
  - {from: Prepare GraphQL Data, to: Render GraphQL Schema, content_type: object}
  
  # Generate summary
  - {from: Prepare GraphQL Data, to: Generate Summary, label: graphql_data}
  
  # End connections
  - {from: Render GraphQL Schema, to: End}
  - {from: Generate Summary, to: End}