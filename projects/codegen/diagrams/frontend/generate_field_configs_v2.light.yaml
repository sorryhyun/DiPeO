# Generate Field Configurations from Domain Models V2 - Unified Extractor
# Uses unified extractor to handle both mappings and AST processing
# Generates UI field configurations from TypeScript interfaces

version: light

nodes:
  - label: Start
    type: start
    position: {x: 50, y: 300}
    props:
      custom_data:
        message: Starting field configurations generation with unified extractor

  # Run batch parser if cache doesn't exist
  - label: Parse TypeScript Batch
    type: sub_diagram
    position: {x: 200, y: 300}
    props:
      diagram_name: projects/codegen/diagrams/parse_typescript_batch_direct
      diagram_format: light
      passInputData: false
      ignoreIfSub: true

  # Load all cached AST files at once
  - label: Load All AST Files
    type: db
    position: {x: 400, y: 300}
    props:
      operation: read
      sub_type: file
      format: json  # Parse JSON files automatically
      glob: true  # Enable glob pattern expansion
      source_details:
        - temp/codegen/mappings.ts.json
        - temp/codegen/node-interface-map.ts.json
        - temp/core/diagram.ts.json
        # Base node data interface (must be loaded before node data files)
        - temp/core/nodes/base.ts.json
        # Dynamically discover all node data files
        - "temp/core/nodes/*.data.ts.json"

  # Parse DB output if it's a string
  - label: Parse DB Output
    type: code_job
    position: {x: 500, y: 300}
    props:
      language: python
      code: |
        import json
        import ast
        
        data = inputs.get('default', {})
        
        # If data is a string, parse it
        if isinstance(data, str):
            try:
                # Try ast.literal_eval first (for Python dict format)
                data = ast.literal_eval(data)
            except (ValueError, SyntaxError):
                try:
                    # If that fails, try JSON
                    data = json.loads(data)
                except json.JSONDecodeError:
                    print(f"ERROR: Failed to parse data string")
                    data = {}
        
        return data

  # Unified extractor for mappings, zod schemas, and field configs
  - label: Unified Extractor
    type: code_job
    position: {x: 600, y: 300}
    props:
      language: python
      filePath: projects/codegen/code/shared/extract_mappings.py
      functionName: main

  # Extract field configs data from unified result
  - label: Extract Field Configs Data
    type: code_job
    position: {x: 800, y: 300}
    props:
      language: python
      code: |
        # Extract field configs data from unified result for template compatibility
        result = inputs.get('default', {})
        field_configs_data = result.get('field_configs', {})
        # Merge with timestamp
        result = {
            'node_configs': field_configs_data.get('node_configs', []),
            'enum_values': field_configs_data.get('enum_values', {}),
            'now': result.get('now', '')
        }
  
  # Use template_job for rendering - it now automatically unwraps default inputs
  - label: Render Field Configs Template
    type: template_job
    position: {x: 1000, y: 250}
    props:
      engine: jinja2
      template_path: projects/codegen/templates/frontend/field_configs.j2
      output_path: apps/web/src/__generated__/fields.ts

  # Also write JSON output
  - label: Write Field Configs JSON
    type: code_job
    position: {x: 1000, y: 350}
    props:
      language: python
      filePath: projects/codegen/code/shared/writers/json_writer.py
      functionName: main

  - label: End
    type: endpoint
    position: {x: 1200, y: 300}
    props:
      save_to_file: false

connections:
  # Run batch parser first
  - {from: Start, to: Parse TypeScript Batch}
  
  # Load cached data after parsing
  - {from: Parse TypeScript Batch, to: Load All AST Files}
  
  # Parse and run unified extractor
  - {from: Load All AST Files, to: Parse DB Output, content_type: object}
  - {from: Parse DB Output, to: Unified Extractor, content_type: object}  # No label = default
  
  # Extract field configs data for template
  - {from: Unified Extractor, to: Extract Field Configs Data, content_type: object}
  
  # Pass to template renderer and JSON writer
  - {from: Extract Field Configs Data, to: Render Field Configs Template, content_type: object}
  - {from: Extract Field Configs Data, to: Write Field Configs JSON, content_type: object}
  
  - {from: Render Field Configs Template, to: End}
  - {from: Write Field Configs JSON, to: End}