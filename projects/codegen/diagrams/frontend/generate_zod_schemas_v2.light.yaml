# Generate Zod Schemas V2 - Unified Extractor
# Uses a unified extractor to handle both mappings and Zod schema generation
# Generates Zod validation schemas from TypeScript interfaces

version: light
nodes:
- label: start
  type: start
  position: {x: -179, y: 299}
  props:
    custom_data:
      message: Starting Zod schemas generation with unified extractor
- label: parse typescript batch
  type: sub_diagram
  position: {x: 43, y: 66}
  props:
    diagram_name: projects/codegen/diagrams/parse_typescript_batch_direct
    diagram_format: light
    passInputData: false
    ignoreIfSub: true
- label: load all ast files
  type: db
  position: {x: 248, y: 276}
  props:
    operation: read
    sub_type: file
    format: json  # Parse JSON files automatically
    glob: true  # Enable glob pattern expansion
    source_details:
    - temp/codegen/mappings.ts.json
    - temp/codegen/node-interface-map.ts.json
    - temp/core/diagram.ts.json
    # Base node data interface (must be loaded before node data files)
    - temp/core/nodes/base.ts.json
    # Dynamic discovery of all node SPECIFICATION files (replacing *.data.ts files)
    - "temp/specifications/nodes/*.spec.ts.json"
- label: parse db output
  type: code_job
  position: {x: 380, y: 276}
  props:
    language: python
    code: |
      import json
      import ast

      data = inputs.get('default', {})

      # If data is a string, parse it
      if isinstance(data, str):
          try:
              # Try ast.literal_eval first (for Python dict format)
              data = ast.literal_eval(data)
          except (ValueError, SyntaxError):
              try:
                  # If that fails, try JSON
                  data = json.loads(data)
              except json.JSONDecodeError:
                  print(f"ERROR: Failed to parse data string")
                  data = {}

      return data
- label: unified extractor
  type: code_job
  position: {x: 509, y: 276}
  props:
    language: python
    filePath: projects/codegen/code/shared/extract_mappings.py
    functionName: main
    code_type: python
- label: extract zod data
  type: code_job
  position: {x: 635, y: 276}
  props:
    language: python
    code: |
      # Extract zod data from unified result for template compatibility
      result = inputs.get('default', {})
      zod_data = result.get('zod', {})
      # Merge top-level data with zod data
      result = {
          'schemas': zod_data.get('schemas', []),
          'enum_schemas': zod_data.get('enum_schemas', {}),
          'branded_types': zod_data.get('branded_types', []),
          'now': result.get('now', '')
      }
- label: render zod schemas template
  type: template_job
  position: {x: 761, y: 276}
  props:
    engine: jinja2
    template_path: projects/codegen/templates/frontend/zod_schemas.j2
    output_path: apps/web/src/__generated__/schemas.ts
    variables:
      module_name: schemas
      generated_warning: DO NOT EDIT - Generated by DiPeO
- label: end
  type: endpoint
  position: {x: 1013, y: 276}
  props:
    save_to_file: false
connections:
- {from: start, to: parse typescript batch, content_type: raw_text}
- {from: parse typescript batch, to: load all ast files, content_type: object}
- {from: load all ast files, to: parse db output, content_type: object}
- {from: parse db output, to: unified extractor, content_type: object}  # No label = default
- {from: unified extractor, to: extract zod data, content_type: object}
- {from: extract zod data, to: render zod schemas template, content_type: object}
- {from: render zod schemas template, to: end, content_type: raw_text}
