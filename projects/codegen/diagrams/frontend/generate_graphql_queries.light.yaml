# Generate GraphQL queries from TypeScript query definitions - Simplified
# Uses glob patterns to automatically discover query definition files
# Uses template-based generation with enum-driven architecture

version: light

nodes:
  - label: Start
    type: start
    position: {x: 50, y: 200}
    props:
      custom_data:
        message: Starting template-based GraphQL query generation

  # Parse TypeScript query definitions (saves to temp/)
  - label: Parse TypeScript
    type: sub_diagram
    position: {x: 200, y: 200}
    props:
      diagram_name: projects/codegen/diagrams/parse_typescript_batch_direct
      diagram_format: light
      passInputData: false
      ignoreIfSub: true
      
  # Load parsed query definition files from temp/
  - label: Load Query Definitions
    type: db
    position: {x: 350, y: 200}
    props:
      operation: read
      sub_type: file
      format: json
      glob: true  # Enable glob pattern expansion
      source_details:
        # Load all query definition files
        - "temp/frontend/query-definitions/*.ts.json"
        - "temp/frontend/query-enums.ts.json"
        - "temp/frontend/query-builder.ts.json"
      
  # Load and prepare query data from TypeScript AST
  - label: Prepare Query Data
    type: code_job
    position: {x: 500, y: 200}
    props:
      language: python
      filePath: projects/codegen/code/frontend/prepare_query_data.py
      functionName: prepare_query_data_for_template
      
  # Generate queries using template
  - label: Generate Queries
    type: template_job
    position: {x: 700, y: 200}
    props:
      engine: jinja2
      template_path: projects/codegen/templates/frontend/graphql-queries.j2
      output_path: apps/web/src/__generated__/queries/all-queries.ts
      variables:
        generated_warning: "DO NOT EDIT - Generated by DiPeO"

  # Verify generation success
  - label: Verify Generated Files
    type: code_job
    position: {x: 900, y: 200}
    props:
      language: python
      code: |
        import os
        from pathlib import Path
        
        # Check that the generated file exists
        output_file = '/home/soryhyun/DiPeO/apps/web/src/__generated__/queries/all-queries.ts'
        file_exists = Path(output_file).exists()
        
        if file_exists:
            file_size = Path(output_file).stat().st_size
            # Verbose logging removed - uncomment for debugging
            # print(f"✓ Generated query file: {output_file}")
            # print(f"  File size: {file_size:,} bytes")
            
            # Count queries in the file
            with open(output_file, 'r') as f:
                content = f.read()
                query_count = content.count('export const')
                gql_count = content.count('gql`')
            
            # print(f"  Exported constants: {query_count}")
            # print(f"  GraphQL documents: {gql_count}")
        else:
            # print(f"✗ Failed to generate: {output_file}")
            pass
        
        # Check metadata from input - handle different input formats
        input_data = inputs.get('default', {})
        metadata = {}
        
        # Try to extract metadata from various possible structures
        if isinstance(input_data, dict):
            metadata = input_data.get('metadata', {})
        elif isinstance(input_data, str):
            # Input might be a string, just note it
            # print(f"Debug: Input is string type")
            pass
        
        # Verbose logging removed - uncomment for debugging
        # if metadata:
        #     print(f"\nQuery statistics:")
        #     print(f"  Queries: {metadata.get('total_queries', 0)}")
        #     print(f"  Mutations: {metadata.get('total_mutations', 0)}")
        #     print(f"  Subscriptions: {metadata.get('total_subscriptions', 0)}")
        
        result = {
            'success': file_exists,
            'file': output_file if file_exists else None,
            'metadata': metadata
        }

  - label: End
    type: endpoint
    position: {x: 1000, y: 200}
    props:
      save_to_file: false

connections:
  - {from: Start, to: Parse TypeScript}
  - {from: Parse TypeScript, to: Load Query Definitions, content_type: object}
  - {from: Load Query Definitions, to: Prepare Query Data, label: ast_files}
  - {from: Prepare Query Data, to: Generate Queries, label: query_data, content_type: object}
  - {from: Prepare Query Data, to: Verify Generated Files, label: metadata}
  - {from: Generate Queries, to: End}