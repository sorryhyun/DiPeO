# Simplified Frontend Code Generation Pipeline
# Uses unified IR builder instead of multiple sub-diagrams

version: light

nodes:
  - label: Start
    type: start
    position: {x: 50, y: 400}
    props:
      trigger_mode: none
      custom_data:
        message: Starting simplified frontend code generation

  # Load all TypeScript AST files
  - label: Load TypeScript AST
    type: db
    position: {x: 200, y: 400}
    props:
      operation: read
      sub_type: file
      format: json
      glob: true
      file:
        - "temp/*.ts.json"
        - "temp/nodes/*.ts.json"
        - "temp/core/*.ts.json"
        - "temp/core/enums/*.ts.json"
        - "temp/codegen/*.ts.json"
        - "temp/utilities/*.ts.json"
        - "temp/frontend/*.ts.json"
        - "temp/frontend/query-definitions/*.ts.json"

  # Build unified frontend IR
  - label: Build Frontend IR
    type: ir_builder
    position: {x: 400, y: 400}
    props:
      builder_type: frontend
      config_path: projects/codegen/config/frontend
      output_format: json
      cache_enabled: false
      validate_output: true

  # Save IR for debugging
  - label: Save Frontend IR
    type: db
    position: {x: 600, y: 300}
    props:
      operation: write
      sub_type: file
      format: json
      file: projects/codegen/ir/frontend_ir.json

  # Prepare batch data from IR
  - label: Prepare Batch Data
    type: code_job
    position: {x: 600, y: 200}
    props:
      language: python
      code: |

        batch_items = []
        for config in node_configs['node_configs']:

            node_type = config.get('node_type', '')
            # Convert snake_case to kebab-case for file names
            file_name = node_type.replace('_', '-')
            # Each item becomes the default input to the sub_diagram
            # The key must match what the db node expects for interpolation
            batch_items.append({
                'node_spec_path': file_name
            })
        result = {'items': batch_items}

  # Generate frontend components using batch sub_diagram
  - label: Batch Generate Frontend
    type: sub_diagram
    position: {x: 800, y: 200}
    props:
      diagram_name: projects/codegen/diagrams/models/generate_frontend_single
      diagram_format: light
      batch: true
      batch_input_key: items
      batch_parallel: true

  # Field configurations from IR
  - label: Generate Field Configs
    type: template_job
    position: {x: 800, y: 280}
    props:
      engine: jinja2
      template_path: projects/codegen/templates/frontend/field_configs.j2
      output_path: apps/web/src/__generated__/fields.ts

  # Zod schemas for web app
  - label: Generate Zod Schemas
    type: template_job
    position: {x: 800, y: 360}
    props:
      engine: jinja2
      template_path: projects/codegen/templates/frontend/zod_schemas_simplified.j2
      output_path: apps/web/src/__generated__/schemas.ts

  # Zod schemas for @dipeo/models package
  - label: Generate Models Zod Schemas
    type: template_job
    position: {x: 800, y: 400}
    props:
      engine: jinja2
      template_path: projects/codegen/templates/frontend/zod_schemas_models.j2
      output_path: dipeo/models/src/__generated__/schemas.ts

  # GraphQL queries
  - label: Generate GraphQL Queries
    type: template_job
    position: {x: 800, y: 440}
    props:
      engine: jinja2
      template_path: projects/codegen/templates/frontend/graphql-queries-simplified.j2
      output_path: apps/web/src/__generated__/queries/all-queries.ts

  # Generate frontend registry from IR
  - label: Generate Frontend Registry
    type: sub_diagram
    position: {x: 800, y: 520}
    props:
      diagram_name: projects/codegen/diagrams/models/generate_frontend_registry
      diagram_format: light
      passInputData: false

  # Summary
  - label: Summary
    type: code_job
    position: {x: 1000, y: 400}
    props:
      language: python
      code: |
        import json

        # Collect generation results
        results = {
            "status": "completed",
            "generated": [
                "Frontend components (batch)",
                "Field configurations",
                "Zod validation schemas (web app)",
                "Zod validation schemas (@dipeo/models)",
                "GraphQL queries",
                "Frontend registry"
            ]
        }

        return results


connections:
  # Load AST and build IR
  - {from: Start, to: Load TypeScript AST}
  - {from: Load TypeScript AST, to: Build Frontend IR, content_type: object}

  # Save IR for debugging
  - {from: Build Frontend IR, to: Save Frontend IR, content_type: object}

  # Prepare batch data from IR
  - {from: Build Frontend IR, to: Prepare Batch Data, content_type: object, label: node_configs}

  # Batch processing for components
  - {from: Prepare Batch Data, to: Batch Generate Frontend, content_type: object}

  # Generate templates from IR
  - {from: Build Frontend IR, to: Generate Field Configs, content_type: object}
  - {from: Build Frontend IR, to: Generate Zod Schemas, content_type: object}
  - {from: Build Frontend IR, to: Generate Models Zod Schemas, content_type: object}
  - {from: Build Frontend IR, to: Generate GraphQL Queries, content_type: object}
  - {from: Build Frontend IR, to: Generate Frontend Registry, content_type: object}

  # All generation tasks converge to Summary
  - {from: Batch Generate Frontend, to: Summary}
  - {from: Generate Field Configs, to: Summary}
  - {from: Generate Zod Schemas, to: Summary}
  - {from: Generate Models Zod Schemas, to: Summary}
  - {from: Generate GraphQL Queries, to: Summary}
  - {from: Generate Frontend Registry, to: Summary}
