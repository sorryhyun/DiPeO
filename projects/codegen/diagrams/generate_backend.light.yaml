# Backend Code Generation Pipeline
# Orchestrates all backend-related code generation diagrams
# Uses batch processing for backend models like frontend

version: light

nodes:
  - label: Start
    type: start
    position: {x: 50, y: 400}
    props:
      custom_data:
        message: Starting backend code generation from TypeScript sources

  # Discover node specs for batch processing
  - label: Discover Node Specs
    type: db
    position: {x: 400, y: 200}
    props:
      operation: read
      sub_type: file
      format: json
      glob: true
      file:
        - "temp/nodes/*.spec.ts.json"

  - label: Prepare Node List
    type: code_job
    position: {x: 550, y: 200}
    props:
      language: python
      filePath: projects/codegen/code/shared/simplified_extractors.py
      functionName: prepare_node_list_for_batch

  # Batch generate backend models using single generator
  - label: Batch Generate Backend Models
    type: sub_diagram
    position: {x: 700, y: 200}
    props:
      diagram_name: projects/codegen/diagrams/models/generate_backend_models_single
      diagram_format: light
      batch: true
      batch_input_key: default
      batch_parallel: true

  # Prepare context for models __init__.py
  - label: Prepare Init Context
    type: code_job
    position: {x: 550, y: 100}
    props:
      language: python
      filePath: projects/codegen/code/models/prepare_init_context_from_specs.py
      functionName: prepare_init_context_from_specs

  # Generate models __init__.py
  - label: Generate Models Init
    type: template_job
    position: {x: 700, y: 100}
    props:
      engine: jinja2
      template_path: projects/codegen/templates/backend/models_init.j2
      output_path: dipeo/diagram_generated_staged/models/__init__.py

  # Generate unified_nodes __init__.py
  - label: Generate Unified Nodes Init
    type: template_job
    position: {x: 850, y: 100}
    props:
      engine: jinja2
      template_path: projects/codegen/templates/backend/unified_nodes_init.j2
      output_path: dipeo/diagram_generated_staged/unified_nodes/__init__.py

  # Generate Python Models
  - label: Generate Python Models
    type: sub_diagram
    position: {x: 400, y: 300}
    props:
      diagram_name: projects/codegen/diagrams/models/generate_python_models_dynamic
      diagram_format: light
      passInputData: false

  # Generate Enums
  - label: Generate Enums
    type: sub_diagram
    position: {x: 400, y: 350}
    props:
      diagram_name: projects/codegen/diagrams/models/generate_enums
      diagram_format: light
      passInputData: false

  # Generate Integrations
  - label: Generate Integrations
    type: sub_diagram
    position: {x: 400, y: 400}
    props:
      diagram_name: projects/codegen/diagrams/models/generate_integrations
      diagram_format: light
      passInputData: false

  # Generate Conversions
  - label: Generate Conversions
    type: sub_diagram
    position: {x: 400, y: 450}
    props:
      diagram_name: projects/codegen/diagrams/models/generate_conversions
      diagram_format: light
      passInputData: false

  # Generate GraphQL Schema
  - label: Generate GraphQL Schema
    type: sub_diagram
    position: {x: 400, y: 500}
    props:
      diagram_name: projects/codegen/diagrams/models/generate_graphql_schema_template
      diagram_format: light
      passInputData: false

  # Generate Static Nodes
  - label: Generate Static Nodes
    type: sub_diagram
    position: {x: 400, y: 550}
    props:
      diagram_name: projects/codegen/diagrams/models/generate_static_nodes
      diagram_format: light
      passInputData: false

  # Generate Strawberry Types
  - label: Generate Strawberry Types
    type: sub_diagram
    position: {x: 400, y: 600}
    props:
      diagram_name: projects/codegen/diagrams/models/generate_strawberry_types
      diagram_format: light
      passInputData: false

  # Generate Strawberry Mutations
  - label: Generate Strawberry Mutations
    type: sub_diagram
    position: {x: 400, y: 650}
    props:
      diagram_name: projects/codegen/diagrams/models/generate_strawberry_mutations
      diagram_format: light
      passInputData: false

  # Generate Validation Models
  - label: Generate Validation Models
    type: sub_diagram
    position: {x: 400, y: 700}
    props:
      diagram_name: projects/codegen/diagrams/models/generate_validation_models
      diagram_format: light
      passInputData: false

  # Generate TypeScript Indexes
  - label: Generate TypeScript Indexes
    type: code_job
    position: {x: 400, y: 750}
    props:
      language: python
      filePath: projects/codegen/code/models/generate_typescript_indexes.py
      functionName: main

  # Summary
  - label: Summary
    type: code_job
    position: {x: 900, y: 400}
    props:
      language: python
      code: |
        import json

        # Collect generation results
        results = {
            "status": "completed",
            "generated": [
                "Backend models (batch)",
                "Models __init__.py",
                "Unified node models",
                "Unified nodes __init__.py",
                "Python models",
                "Enums",
                "Integrations",
                "Conversions",
                "GraphQL schema",
                "Static nodes",
                "Strawberry types",
                "Strawberry mutations",
                "Validation models",
                "TypeScript indexes"
            ]
        }

        print("\n✅ Backend code generation completed successfully!")
        print("\nGenerated:")
        for item in results["generated"]:
            print(f"  • {item}")

        print("\nNext steps:")
        print("  1. Review generated code in dipeo/diagram_generated_staged/")
        print("  2. Run 'make apply-syntax-only' to apply changes")
        print("  3. Run 'make graphql-schema' to update GraphQL types")
        print("  4. Run 'make lint-server' to check Python code quality")

        return results

  - label: End
    type: endpoint
    position: {x: 1050, y: 400}
    props:
      save_to_file: false

connections:
  # Start all generation tasks from Start in parallel
  - {from: Start, to: Discover Node Specs}
  - {from: Start, to: Generate Python Models}
  - {from: Start, to: Generate Enums}
  - {from: Start, to: Generate Integrations}
  - {from: Start, to: Generate Conversions}
  - {from: Start, to: Generate GraphQL Schema}
  - {from: Start, to: Generate Static Nodes}
  - {from: Start, to: Generate Strawberry Types}
  - {from: Start, to: Generate Strawberry Mutations}
  - {from: Start, to: Generate Validation Models}
  - {from: Start, to: Generate TypeScript Indexes}

  # Backend models batch processing chain
  - {from: Discover Node Specs, to: Prepare Node List, content_type: object}
  - {from: Prepare Node List, to: Batch Generate Backend Models, content_type: object}

  # Models init generation chain
  - {from: Discover Node Specs, to: Prepare Init Context, content_type: object}
  - {from: Prepare Init Context, to: Generate Models Init, content_type: object}
  - {from: Prepare Init Context, to: Generate Unified Nodes Init, content_type: object}

  # All generation tasks converge to Summary
  - {from: Batch Generate Backend Models, to: Summary}
  - {from: Generate Models Init, to: Summary}
  - {from: Generate Unified Nodes Init, to: Summary}
  - {from: Generate Python Models, to: Summary}
  - {from: Generate Enums, to: Summary}
  - {from: Generate Integrations, to: Summary}
  - {from: Generate Conversions, to: Summary}
  - {from: Generate GraphQL Schema, to: Summary}
  - {from: Generate Static Nodes, to: Summary}
  - {from: Generate Strawberry Types, to: Summary}
  - {from: Generate Strawberry Mutations, to: Summary}
  - {from: Generate Validation Models, to: Summary}
  - {from: Generate TypeScript Indexes, to: Summary}

  # Summary to End
  - {from: Summary, to: End}
