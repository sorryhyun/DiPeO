# Unified Code Generation Pipeline - Simplified
# Runs parse_typescript_batch_direct first, then delegates to backend and frontend diagrams
# This avoids duplicate parsing and simplifies the main pipeline

version: light

nodes:
  - label: Start
    type: start
    position: {x: 50, y: 400}
    props:
      custom_data:
        message: Starting complete code generation from TypeScript sources

  # Parse all TypeScript files once using direct batch parsing
  - label: Parse All TypeScript
    type: sub_diagram
    position: {x: 200, y: 400}
    props:
      diagram_name: projects/codegen/diagrams/parse_typescript_batch_direct
      diagram_format: light
      passInputData: false

  # Run backend generation pipeline (without parsing)
  - label: Generate Backend
    type: sub_diagram
    position: {x: 400, y: 300}
    props:
      diagram_name: projects/codegen/diagrams/generate_backend
      diagram_format: light
      passInputData: false

  # Run frontend generation pipeline (without parsing)
  - label: Generate Frontend
    type: sub_diagram
    position: {x: 400, y: 500}
    props:
      diagram_name: projects/codegen/diagrams/generate_frontend
      diagram_format: light
      passInputData: false

  # Summary
  - label: End
    type: code_job
    position: {x: 600, y: 400}
    props:
      language: python
      code: |
        print('\nâœ… All code generation finished!')
        print('\nNext steps:')
        print('  1. Review generated code in dipeo/diagram_generated_staged/')
        print('  2. Run "make apply-syntax-only" to apply changes')
        print('  3. Run "make graphql-schema" to update GraphQL types')

  - label: terminate
    type: endpoint
    position: {x: 800, y: 400}
    props:
      save_to_file: false
connections:
  # First parse all TypeScript files
  - {from: Start, to: Parse All TypeScript}
  
  # After parsing, run backend and frontend generation in parallel
  - {from: Parse All TypeScript, to: Generate Backend}
  - {from: Parse All TypeScript, to: Generate Frontend}
  
  # Both generation pipelines converge to End
  - {from: Generate Backend, to: End}
  - {from: Generate Frontend, to: End}
  
  # End to terminate
  - {from: End, to: terminate}
