"""
{{ generated_warning }}

Generated from TypeScript query definitions in dipeo/models/src/frontend/query-definitions/
Total operations: {{ metadata.total_operations }} ({{ metadata.total_queries }} queries, {{ metadata.total_mutations }} mutations, {{ metadata.total_subscriptions }} subscriptions)
Generated at: {{ generated_at }}
"""

from typing import Any, Dict, List, Optional, TypedDict, Protocol
import strawberry
{% if imports is defined and imports.strawberry %}
# Import special Strawberry types
from strawberry.file_uploads import Upload
{% endif %}

# Import custom domain types from inputs if needed
{% if imports is defined and imports.domain is defined and imports.domain|length > 0 %}
from .inputs import {{ imports.domain | sort | join(', ') }}
{% endif %}

# Helper functions for Strawberry object conversion
def _to_dict_if_strawberry(value: Any) -> Any:
    """Convert Strawberry input object to dict if needed."""
    if hasattr(value, '__strawberry_definition__'):
        return strawberry.asdict(value)
    return value


# Base class for all GraphQL operations
class BaseGraphQLOperation:
    """Base class providing common functionality for all GraphQL operations."""

    query: str
    operation_type: str
    operation_name: str

    @classmethod
    def get_query(cls) -> str:
        """Get the GraphQL query string."""
        return cls.query

    @classmethod
    def _build_variables(cls, **kwargs) -> dict[str, Any]:
        """
        Build variables dictionary, converting Strawberry objects as needed.

        Args:
            **kwargs: Variable name-value pairs

        Returns:
            Dictionary of variables for GraphQL execution
        """
        variables = {}
        for key, value in kwargs.items():
            if value is not None:
                variables[key] = _to_dict_if_strawberry(value)
        return variables

# GraphQL query strings as constants
{% for operation in operations %}
{{ operation['name'] | snake_case | upper }}_{{ operation['type'] | upper }} = """{{ operation['query_string'] }}"""
{% if not loop.last %}
{% endif %}
{% endfor %}

# Typed operation classes
{% for operation in operations %}

class {{ operation['name'] | pascal_case }}Operation(BaseGraphQLOperation):
    """
    {{ operation['type'] | capitalize }} operation for {{ operation.get('entity', '') }}.
    GraphQL {{ operation['type'] }}: {{ operation['name'] }}
    """

    query = {{ operation['name'] | snake_case | upper }}_{{ operation['type'] | upper }}
    operation_type = "{{ operation['type'] }}"
    operation_name = "{{ operation['name'] }}"

    {% if operation.get('variables', []) %}
    class Variables(TypedDict{% if not operation.get('variables', []) | selectattr('required', 'equalto', true) | list %}, total=False{% endif %}):
        """Variable types for {{ operation['name'] }} {{ operation['type'] }}."""
        {% for var in operation.get('variables', []) %}
        {{ var['name'] }}: {{ var['python_type'] | graphql_to_python(var.get('required', false)) }}
        {% endfor %}
    {% else %}
    class Variables(TypedDict):
        """No variables for this operation."""
        pass  # Empty TypedDict for operations without variables
    {% endif %}

    @classmethod
    def get_variables_dict(cls, {% for var in operation.get('variables', []) %}{{ var['name'] }}: {{ var.get('union_type') if var.get('union_type') else (var['python_type'] | graphql_to_python(var.get('required', false))) }}{% if not var.get('required') %} = None{% endif %}{% if not loop.last %}, {% endif %}{% endfor %}) -> dict[str, Any]:
        """
        Build variables dictionary for the operation.

        Args:
            {%- for var in operation.get('variables', []) %}
            {{ var['name'] }}: {{ var['graphql_type'] }} - {% if var.get('required') %}Required{% else %}Optional{% endif %} (accepts dict or Strawberry input object)
            {%- endfor %}

        Returns:
            Dictionary of variables for GraphQL execution
        """
        {%- if operation.get('variables', []) %}
        return cls._build_variables(
            {%- for var in operation.get('variables', []) %}
            {{ var['name'] }}={{ var['name'] }}{% if not loop.last %},{% endif %}
            {%- endfor %}
        )
        {%- else %}
        return {}
        {%- endif %}
{% endfor %}

# Operation registries for runtime lookup
QUERIES = {
    {%- for operation in raw_queries %}
    "{{ operation['name'] }}": {{ operation['name'] | pascal_case }}Operation,
    {%- endfor %}
}

MUTATIONS = {
    {%- for operation in raw_mutations %}
    "{{ operation['name'] }}": {{ operation['name'] | pascal_case }}Operation,
    {%- endfor %}
}

SUBSCRIPTIONS = {
    {%- for operation in raw_subscriptions %}
    "{{ operation['name'] }}": {{ operation['name'] | pascal_case }}Operation,
    {%- endfor %}
}

ALL_OPERATIONS = {
    **QUERIES,
    **MUTATIONS,
    **SUBSCRIPTIONS,
}

# Helper functions
def get_operation_by_name(name: str) -> Optional[type]:
    """Get an operation class by its name."""
    return ALL_OPERATIONS.get(name)

def get_query_string(operation_name: str) -> Optional[str]:
    """Get the GraphQL query string for an operation."""
    operation_class = get_operation_by_name(operation_name)
    if operation_class:
        return operation_class.get_query()
    return None

# Export all operation classes
__all__ = [
    # Base classes and helpers
    "BaseGraphQLOperation",
    "_to_dict_if_strawberry",
    # Query strings
    {% for operation in operations %}
    "{{ operation['name'] | snake_case | upper }}_{{ operation['type'] | upper }}",
    {% endfor %}
    # Operation classes
    {% for operation in operations %}
    "{{ operation['name'] | pascal_case }}Operation",
    {% endfor %}
    # Registries
    "QUERIES",
    "MUTATIONS",
    "SUBSCRIPTIONS",
    "ALL_OPERATIONS",
    # Helper functions
    "get_operation_by_name",
    "get_query_string",
]
