"""
Generated Strawberry GraphQL schema from TypeScript operation definitions.
DO NOT EDIT - Generated by DiPeO codegen

Generated at: {{ generated_at }}
"""

import strawberry
from strawberry.types import Info
from strawberry.scalars import JSON
from strawberry.file_uploads import Upload
from typing import Any, Optional, Union
from collections.abc import AsyncGenerator
from datetime import datetime

# Import operation executor
from dipeo.application.graphql.operation_executor import OperationExecutor

# Import all operations
from dipeo.diagram_generated.graphql import operations

# Import input types and enums
from .inputs import *
from .enums import DiagramFormatGraphQL

# Import result types
from .results import (
    DiagramResult,
    DiagramListResult,
    NodeResult,
    NodeListResult,
    ExecutionResult,
    ExecutionListResult,
    PersonResult,
    PersonListResult,
    ApiKeyResult,
    ApiKeyListResult,
    ConversationResult,
    ConversationListResult,
    FileOperationResult,
    DeleteResult,
    TestResult,
    FormatConversionResult,
    ValidationResult,
    CliSessionResult,
    InteractiveResponseResult,
    BatchOperationResult,
)

# Import domain types for direct query returns
from .domain_types import (
    ExecutionStateType,
    DomainDiagramType,
    DomainPersonType,
    DomainApiKeyType,
    DomainNodeType,
    ExecutionUpdateType,  # For subscriptions
)

{% if queries %}
@strawberry.type
class Query:
    """Auto-generated Query type from TypeScript definitions"""

{% for operation in queries %}
    # GraphQL field using noun form
    @strawberry.field{% if operation.get('alias_name') %}(name="{{ operation.get('alias_name') }}"){% endif %}
    async def {{ operation.get('alias_name', operation['operation_name'] | snake_case) }}_resolver(
        self,
        info: Info{% if operation.get('parameters') %},{% endif %}
        {%- for param in operation.get('parameters', []) %}
        {{ param['name'] }}: {% if param.get('needs_conversion') %}{{ param.get('type') | graphql_to_python(not param.get('optional')) }}{% else %}{{ param.get('type') }}{% endif %}{% if param.get('optional') %} = None{% endif %}{% if not loop.last %},{% endif %}
        {%- endfor %}
    ) -> {{ get_operation_return_type(operation.get('name', operation['operation_name']), operation.get('type', operation['operation_type'])) }}:
        """
        {{ operation.get('description', '') }}
        Operation: {{ operation['operation_name'] | pascal_case }}Operation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        {%- for param in operation.get('parameters', []) %}
        {%- if not param.get('optional') %}
        variables["{{ param['name'] }}"] = {{ param['name'] }}
        {%- else %}
        if {{ param['name'] }} is not None:
            variables["{{ param['name'] }}"] = {{ param['name'] }}
        {%- endif %}
        {%- endfor %}

        return await executor.execute("{{ operation['operation_name'] }}", variables=variables)

{% endfor %}
{% endif %}

{% if mutations %}
@strawberry.type
class Mutation:
    """Auto-generated Mutation type from TypeScript definitions"""

{% for operation in mutations %}
    @strawberry.field
    async def {{ operation['operation_name'] | snake_case }}(
        self,
        info: Info{% if operation.get('parameters') %},{% endif %}
        {%- for param in operation.get('parameters', []) %}
        {{ param['name'] }}: {% if param.get('needs_conversion') %}{{ param.get('type') | graphql_to_python(not param.get('optional')) }}{% else %}{{ param.get('type') }}{% endif %}{% if param.get('optional') %} = None{% endif %}{% if not loop.last %},{% endif %}
        {%- endfor %}
    ) -> {{ get_operation_return_type(operation.get('name', operation['operation_name']), operation.get('type', operation['operation_type'])) }}:
        """
        {{ operation.get('description', '') }}
        Operation: {{ operation['operation_name'] | pascal_case }}Operation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        {%- for param in operation.get('parameters', []) %}
        {%- if not param.get('optional') %}
        variables["{{ param['name'] }}"] = {{ param['name'] }}
        {%- else %}
        if {{ param['name'] }} is not None:
            variables["{{ param['name'] }}"] = {{ param['name'] }}
        {%- endif %}
        {%- endfor %}

        return await executor.execute("{{ operation['operation_name'] }}", variables=variables)

{% endfor %}
{% endif %}

{% if subscriptions %}
@strawberry.type
class Subscription:
    """Auto-generated Subscription type from TypeScript definitions"""

{% for operation in subscriptions %}
    @strawberry.subscription
    async def {{ operation['operation_name'] | snake_case }}(
        self,
        info: Info{% if operation.get('parameters') %},{% endif %}
        {%- for param in operation.get('parameters', []) %}
        {{ param['name'] }}: {% if param.get('needs_conversion') %}{{ param.get('type') | graphql_to_python(not param.get('optional')) }}{% else %}{{ param.get('type') }}{% endif %}{% if param.get('optional') %} = None{% endif %}{% if not loop.last %},{% endif %}
        {%- endfor %}
    ) -> AsyncGenerator[{{ get_operation_return_type(operation.get('name', operation['operation_name']), operation.get('type', operation['operation_type'])) }}, None]:
        """
        {{ operation.get('description', '') }}
        Operation: {{ operation['operation_name'] | pascal_case }}Operation
        """
        from dipeo.application.graphql.operation_executor import OperationExecutor
        executor = OperationExecutor(info.context.service_registry)

        # Build variables dict from typed parameters
        variables = {}
        {%- for param in operation.get('parameters', []) %}
        {%- if not param.get('optional') %}
        variables["{{ param['name'] }}"] = {{ param['name'] }}
        {%- else %}
        if {{ param['name'] }} is not None:
            variables["{{ param['name'] }}"] = {{ param['name'] }}
        {%- endif %}
        {%- endfor %}

        # Execute subscription and yield items
        async for item in executor.execute_subscription("{{ operation['operation_name'] }}", variables=variables):
            yield item

{% endfor %}
{% endif %}

# Export the schema types
__all__ = [
{% if queries %}    'Query',{% endif %}
{% if mutations %}    'Mutation',{% endif %}
{% if subscriptions %}    'Subscription',{% endif %}
]
