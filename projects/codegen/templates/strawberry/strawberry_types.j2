"""
Strawberry GraphQL types for DiPeO nodes.
Generated automatically from node specifications.

Generated at: {{ strawberry_types.generated_at | default('N/A') }}
"""

import strawberry
from typing import *
from strawberry.types import *
from strawberry.scalars import JSON as JSONScalar
from .strawberry_domain import TemplatePreprocessorType, ToolConfigType
from .domain_types import Vec2Type

# Import Pydantic models

from ..domain_models import *
from ..unified_nodes.api_job_node import ApiJobNode
from ..unified_nodes.code_job_node import CodeJobNode
from ..unified_nodes.condition_node import ConditionNode
from ..unified_nodes.db_node import DbNode
from ..unified_nodes.endpoint_node import EndpointNode
from ..unified_nodes.hook_node import HookNode
from ..unified_nodes.integrated_api_node import IntegratedApiNode
from ..unified_nodes.json_schema_validator_node import JsonSchemaValidatorNode
from ..unified_nodes.person_job_node import PersonJobNode
from ..unified_nodes.start_node import StartNode
from ..unified_nodes.sub_diagram_node import SubDiagramNode
from ..unified_nodes.template_job_node import TemplateJobNode
from ..unified_nodes.typescript_ast_node import TypescriptAstNode
from ..unified_nodes.user_response_node import UserResponseNode

# Import Pydantic models
{% if strawberry_types and strawberry_types.strawberry_types %}
from ..domain_models import *
{% else %}
# No node types found - this file will be populated after initial node spec generation
{% endif %}

# Import generated scalars
from dipeo.diagram_generated.graphql.scalars import *


# Generate Strawberry types for node data
{% for type_info in strawberry_types.strawberry_types %}
@strawberry.experimental.pydantic.type({{ type_info.pydantic_model }}Node, all_fields=True)
class {{ type_info.class_name }}DataType:
    """{{ type_info.description }} - Data fields only"""
    pass

{% endfor %}
{% if strawberry_types and strawberry_types.strawberry_types %}

# Create union type for all node data types
NodeDataUnion = strawberry.union(
    "NodeDataUnion",
    (
{% for type_info in strawberry_types.strawberry_types %}
        {{ type_info.class_name }}DataType,
{% endfor %}
    )
)
{% else %}

# Placeholder type when no node types are available yet
@strawberry.type
class PlaceholderNodeData:
    """Placeholder type used during initial generation"""
    message: str = "No node types generated yet"

NodeDataUnion = PlaceholderNodeData
{% endif %}


# Export all types
__all__ = [
    'NodeDataUnion',
{% for type_info in strawberry_types.strawberry_types %}
    '{{ type_info.class_name }}DataType',
{% endfor %}
]
