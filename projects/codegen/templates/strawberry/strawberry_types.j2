"""
Strawberry GraphQL types for DiPeO nodes.
Generated automatically from node specifications.

Generated at: {{ generated_at | default('N/A') }}
"""

import strawberry
from typing import *
from strawberry.types import *
from strawberry.scalars import JSON as JSONScalar
from .strawberry_domain import TemplatePreprocessorType, ToolConfigType
from .domain_types import Vec2Type

# Import Pydantic models

from ..domain_models import *
from ..unified_nodes.api_job_node import ApiJobNode
from ..unified_nodes.code_job_node import CodeJobNode
from ..unified_nodes.condition_node import ConditionNode
from ..unified_nodes.db_node import DbNode
from ..unified_nodes.endpoint_node import EndpointNode
from ..unified_nodes.hook_node import HookNode
from ..unified_nodes.integrated_api_node import IntegratedApiNode
from ..unified_nodes.json_schema_validator_node import JsonSchemaValidatorNode
from ..unified_nodes.person_job_node import PersonJobNode
from ..unified_nodes.start_node import StartNode
from ..unified_nodes.sub_diagram_node import SubDiagramNode
from ..unified_nodes.template_job_node import TemplateJobNode
from ..unified_nodes.typescript_ast_node import TypescriptAstNode
from ..unified_nodes.user_response_node import UserResponseNode

# Import Pydantic models
{% if types %}
from ..domain_models import *
{% else %}
# No node types found - this file will be populated after initial node spec generation
{% endif %}

# Import generated scalars
from dipeo.diagram_generated.graphql.scalars import *


# Generate Strawberry types for node data
{% for type_info in node_specs %}
@strawberry.type
class {{ type_info.class_name }}DataType:
    """{{ type_info.description }} - Data fields only"""
    # Base fields (all nodes have these)
    id: NodeIDScalar
    position: Vec2Type
    type: strawberry.Private[NodeType]  # Not exposed in GraphQL
    label: Optional[str] = None
    flipped: Optional[bool] = False
    metadata: Optional[JSONScalar] = None  # Use JSONScalar for Dict fields

    # Node-specific fields from specification
    {% for field in type_info.fields %}
    {% if field.is_dict_type %}
    {{ field.name }}: Optional[JSONScalar] = None  # {{ field.description }}
    {% else %}
    {% if field.required %}
    {{ field.name }}: str  # {{ field.description }}
    {% else %}
    {{ field.name }}: Optional[str] = None  # {{ field.description }}
    {% endif %}
    {% endif %}
    {% endfor %}

    @classmethod
    def from_pydantic(cls, node: {{ type_info.pydantic_model }}Node) -> "{{ type_info.class_name }}DataType":
        """Convert from Pydantic model to Strawberry type."""
        # Convert Dict fields to JSONScalar
        metadata = node.metadata if node.metadata else None

        # Get node-specific fields with Dict conversion
        field_values = {}
        {% for field in type_info.fields %}
        {% if field.is_dict_type %}
        field_values["{{ field.name }}"] = getattr(node, "{{ field.name }}", None)
        {% else %}
        field_values["{{ field.name }}"] = getattr(node, "{{ field.name }}", None)
        {% endif %}
        {% endfor %}

        return cls(
            id=node.id,
            position=Vec2Type(x=node.position.x, y=node.position.y),
            type=node.type,
            label=node.label,
            flipped=node.flipped,
            metadata=metadata,
            **field_values
        )

{% endfor %}
{% if node_specs %}

# Create union type for all node data types
NodeDataUnion = strawberry.union(
    "NodeDataUnion",
    (
{% for type_info in node_specs %}
        {{ type_info.class_name }}DataType,
{% endfor %}
    )
)
{% else %}

# Placeholder type when no node types are available yet
@strawberry.type
class PlaceholderNodeData:
    """Placeholder type used during initial generation"""
    message: str = "No node types generated yet"

NodeDataUnion = PlaceholderNodeData
{% endif %}


# Export all types
__all__ = [
    'NodeDataUnion',
{% for type_info in types %}
    '{{ type_info.class_name }}DataType',
{% endfor %}
]
