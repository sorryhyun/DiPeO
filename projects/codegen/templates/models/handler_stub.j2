"""Handler for {{ display_name }} - {{ description }}

This handler stub was automatically generated from the TypeScript node specification.
TODO: Implement the business logic for this node type.
"""

import logging
from typing import TYPE_CHECKING, Any, Optional

from dipeo.application.execution.handler_factory import register_handler
from dipeo.application.execution.handler_base import TypedNodeHandler
from dipeo.application.execution.execution_request import ExecutionRequest
from dipeo.diagram_generated.generated_nodes import NodeType
from dipeo.diagram_generated.models.{{ node_type }}_model import {{ data_model_name }}
from dipeo.domain.execution.envelope import Envelope, EnvelopeFactory

if TYPE_CHECKING:
    pass

logger = logging.getLogger(__name__)


@register_handler
class {{ handler_class_name }}(TypedNodeHandler[{{ data_model_name }}]):
    """Handler for {{ display_name }} node.

    {{ description }}

    Category: {{ category }}
    {% if services %}
    Required Services: {{ services | join(', ') }}
    {% endif %}
    {% if timeout %}
    Timeout: {{ timeout }}ms
    {% endif %}
    """

    @property
    def node_type(self) -> str:
        """Return the node type this handler manages."""
        return NodeType.{{ node_type_upper }}

    @property
    def schema(self):
        """Return the Pydantic model for node data validation."""
        return {{ data_model_name }}

    @property
    def requires_services(self) -> list[str]:
        """Return list of required services for this handler."""
        {% if services %}
        return {{ services }}
        {% else %}
        return []
        {% endif %}

    async def execute_request(self, request: ExecutionRequest) -> Any:
        """Execute the {{ display_name }} node logic.

        Args:
            request: Execution request containing node data and context

        Returns:
            Execution result wrapped in appropriate envelope
        """
        # Access validated node data
        node_data = request.node.data  # Type: {{ data_model_name }}

        # Access resolved inputs
        inputs = request.resolved_inputs

        # TODO: Implement {{ display_name }} business logic
        # Example structure:
        # 1. Validate any runtime requirements
        # 2. Process inputs based on node configuration
        # 3. Perform the main operation for this node type
        # 4. Return results wrapped in appropriate envelope

        # Example of accessing node data fields:
        # if node_data.some_field:
        #     result = await self.process_field(node_data.some_field)

        # Example of using services (if configured):
        {% if 'llm' in services %}
        # llm_service = self.services.get('llm')
        # if llm_service:
        #     response = await llm_service.complete(prompt)
        {% endif %}
        {% if 'kvStore' in services %}
        # kv_store = self.services.get('kvStore')
        # if kv_store:
        #     value = await kv_store.get(key)
        {% endif %}

        # Example of creating output envelope:
        # result = {
        #     'status': 'success',
        #     'data': processed_data
        # }
        # return EnvelopeFactory.create_single(result)

        raise NotImplementedError(
            f"Handler for {{ display_name }} ({ node_type }) not yet implemented. "
            f"Please implement the business logic in this execute_request method."
        )
