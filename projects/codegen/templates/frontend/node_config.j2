// Auto-generated node configuration for {{ node_type }}
import type { UnifiedNodeConfig } from '@/infrastructure/config/unifiedConfig';
import { NodeType, HandleLabel, ToolSelection, HookType, HttpMethod, SupportedLanguage, HookTriggerMode } from '@dipeo/models';
import { {{ node_type | camel_case }}Fields } from '../fields/{{ node_type | pascal_case }}Fields';
{%- if node_type == 'integrated_api' %}
import { mergeFieldConfigs } from '@/domain/diagram/config/nodes/fieldOverrides';

// Apply field overrides to get dynamic options
const fieldsWithOverrides = mergeFieldConfigs('integrated_api');
{%- endif %}

export const {{ node_type | camel_case }}Config: UnifiedNodeConfig = {
  label: '{{ display_name }}',
  icon: '{{ icon }}',
  color: '{{ color | default('#6366f1') }}',
  nodeType: NodeType.{{ node_type | replace('-', '_') | upper }},
  category: '{{ category | default('utility') }}',
  handles: {
{%- if handles and handles.inputs %}
    input: [
{%- for input in handles.inputs %}
{%- if input is string %}
      { label: HandleLabel.{{ input | upper }}, displayLabel: '', position: 'left' },
{%- else %}
      { label: HandleLabel.{{ input.label | default('default') | upper }}, displayLabel: '{{ input.displayLabel | default('') }}', position: '{{ input.position | default('left') }}' },
{%- endif %}
{%- endfor %}
    ],
{%- endif %}
{%- if handles and handles.outputs %}
    output: [
{%- for output in handles.outputs %}
{%- if output is string %}
      { label: HandleLabel.{{ output | upper }}, displayLabel: '', position: 'right' },
{%- else %}
      { label: HandleLabel.{{ output.label | default('default') | upper }}, displayLabel: '{{ output.displayLabel | default('') }}', position: '{{ output.position | default('right') }}' },
{%- endif %}
{%- endfor %}
    ],
{%- endif %}
  },
  defaults: {
{%- for field in fields if 'default' in field and field['default'] is not none %}
{%- if field['name'] == 'tools' %}
    {{ field['name'] }}: ToolSelection.{{ field['default'] | upper }},
{%- elif field['name'] == 'hook_type' %}
    {{ field['name'] }}: HookType.{{ field['default'] | upper }},
{%- elif field['name'] == 'http_method' %}
    {{ field['name'] }}: HttpMethod.{{ field['default'] | upper }},
{%- elif field['name'] == 'language' %}
    {{ field['name'] }}: SupportedLanguage.{{ field['default'] | upper }},
{%- elif field['name'] == 'trigger_mode' %}
    {{ field['name'] }}: HookTriggerMode.{{ field['default'] | upper }},
{%- elif field['default'] is string %}
    {{ field['name'] }}: '{{ field['default'] }}',
{%- elif field['default'] is boolean %}
    {{ field['name'] }}: {{ field['default'] | lower }},
{%- else %}
    {{ field['name'] }}: {{ field['default'] | tojson }},
{%- endif %}
{%- endfor %}
  },
{%- if node_type == 'integrated_api' %}
  customFields: fieldsWithOverrides,
{%- else %}
  customFields: {{ node_type | camel_case }}Fields,
{%- endif %}
{%- if primary_display_field %}
  primaryDisplayField: '{{ primary_display_field }}',
{%- endif %}
};

export default {{ node_type | camel_case }}Config;
