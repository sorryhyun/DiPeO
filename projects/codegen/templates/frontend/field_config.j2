// Generated field configuration for {{ node_type }}
import type { UnifiedFieldDefinition } from '@/infrastructure/config/unifiedConfig';

export const {{ node_type | camel_case }}Fields: UnifiedFieldDefinition[] = [
{%- for field in fields %}
  {
    name: '{{ field['name'] }}',
    type: '{{ field | ui_field_type }}',
    label: '{{ field['name'] | humanize | escape_js }}',
    required: {{ field.get('required', false) | lower }},
{%- if 'defaultValue' in field and field['defaultValue'] is not none %}
    defaultValue: {{ field['defaultValue'] | tojson }},
{%- endif %}
{%- if field.get('uiConfig') and field['uiConfig'].get('placeholder') %}
    placeholder: '{{ field['uiConfig']['placeholder'] | escape_js }}',
{%- elif field.get('placeholder') %}
    placeholder: '{{ field['placeholder'] | escape_js }}',
{%- endif %}
{%- if field.get('description') %}
    description: '{{ field['description'] | escape_js }}',
{%- endif %}
{%- if field.get('type') == 'enum' and field.get('values') %}
    options: [
{%- for value in field['values'] %}
      { value: '{{ value | escape_js }}', label: '{{ value | humanize | escape_js }}' },
{%- endfor %}
    ],
{%- endif %}
{%- if field.get('uiConfig') %}
{%- if field['uiConfig'].get('rows') %}
    rows: {{ field['uiConfig']['rows'] }},
{%- endif %}
{%- if field['uiConfig'].get('column') %}
    column: {{ field['uiConfig']['column'] }},
{%- endif %}
{%- if field.get('uiConfig') and field['uiConfig'].get('min') is not none %}
    min: {{ field['uiConfig'].get('min') }},
{%- endif %}
{%- if field.get('uiConfig') and field['uiConfig'].get('max') is not none %}
    max: {{ field['uiConfig'].get('max') }},
{%- endif %}
{%- if field['uiConfig'].get('language') %}
    language: '{{ field['uiConfig']['language'] }}',
{%- endif %}
{%- if field['uiConfig'].get('readOnly') %}
    readOnly: {{ field['uiConfig']['readOnly'] | lower }},
{%- endif %}
{%- if field['uiConfig'].get('adjustable') %}
    adjustable: {{ field['uiConfig']['adjustable'] | lower }},
{%- endif %}
{%- if field['uiConfig'].get('showPromptFileButton') %}
    showPromptFileButton: {{ field['uiConfig']['showPromptFileButton'] | lower }},
{%- endif %}
{%- if field['uiConfig'].get('options') %}
    options: [
{%- for option in field['uiConfig']['options'] %}
      { value: '{{ option['value'] | escape_js }}', label: '{{ option['label'] | escape_js }}' },
{%- endfor %}
    ],
{%- endif %}
{%- endif %}
{%- if field.get('nestedFields') %}
    nestedFields: [
{%- for nestedField in field['nestedFields'] %}
      {
        name: '{{ nestedField['name'] }}',
        type: '{{ nestedField | ui_field_type }}',
        label: '{{ nestedField['name'] | humanize | escape_js }}',
        required: {{ nestedField.get('required', false) | lower }},
{%- if nestedField.get('description') %}
        description: '{{ nestedField['description'] | escape_js }}',
{%- endif %}
{%- if 'defaultValue' in nestedField and nestedField['defaultValue'] is not none %}
        defaultValue: {{ nestedField['defaultValue'] | tojson }},
{%- endif %}
{%- if nestedField.get('uiConfig') %}
        uiConfig: {
{%- if nestedField['uiConfig'].get('inputType') %}
          inputType: '{{ nestedField['uiConfig']['inputType'] }}',
{%- endif %}
{%- if nestedField['uiConfig'].get('options') %}
          options: [
{%- for option in nestedField['uiConfig']['options'] %}
            { value: '{{ option['value'] | escape_js }}', label: '{{ option['label'] | escape_js }}' },
{%- endfor %}
          ],
{%- endif %}
{%- if nestedField['uiConfig'].get('min') is not none %}
          min: {{ nestedField['uiConfig'].get('min') }},
{%- endif %}
{%- if nestedField['uiConfig'].get('max') is not none %}
          max: {{ nestedField['uiConfig'].get('max') }},
{%- endif %}
{%- if nestedField['uiConfig'].get('placeholder') %}
          placeholder: '{{ nestedField['uiConfig']['placeholder'] | escape_js }}',
{%- endif %}
        },
{%- endif %}
      },
{%- endfor %}
    ],
{%- endif %}
{%- if field.get('validation') and field['validation'] %}
    validate: (value: unknown) => {
{%- if field['validation'].get('pattern') %}
      if (typeof value === 'string' && !new RegExp('{{ field['validation']['pattern'] }}').test(value)) {
        return { isValid: false, error: 'Invalid format' };
      }
{%- endif %}
{%- if 'min' in field['validation'] %}
      if (typeof value === 'number' && value < {{ field['validation']['min'] }}) {
        return { isValid: false, error: 'Value must be at least {{ field['validation']['min'] }}' };
      }
{%- endif %}
{%- if 'max' in field['validation'] %}
      if (typeof value === 'number' && value > {{ field['validation']['max'] }}) {
        return { isValid: false, error: 'Value must be at most {{ field['validation']['max'] }}' };
      }
{%- endif %}
      return { isValid: true };
    },
{%- endif %}
  },
{%- endfor %}
];
