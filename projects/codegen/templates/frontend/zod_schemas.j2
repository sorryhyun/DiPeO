/**
 * GENERATED FILE - DO NOT EDIT
 * Generated by domain model Zod schemas generation
 * Generated at: {{ now }}
 *
 * This file contains Zod validation schemas generated from domain models.
 * To customize validation, use the validation functions in each node's config file.
 */

import { z } from 'zod';
import {
  PersonID,
  NodeID,
  HandleID,
  ArrowID,
  NodeType,
  SupportedLanguage,
  HttpMethod,
  DBBlockSubType,
  HookType,
  HookTriggerMode,
  ContentType,
  DiagramFormat,
  ToolSelection,
  APIServiceType
} from '@dipeo/models';

// Re-export enum schemas for validation
{%- for enum_name, schema_code in enum_schemas.items() %}
{%- if enum_name not in branded_types %}
export const {{ enum_name }}Schema = {{ schema_code }};
{%- endif %}
{%- endfor %}

// Node data schemas
export const NODE_DATA_SCHEMAS = {
{%- for schema in schemas %}
  '{{ schema.nodeType }}': {{ schema.schemaCode | indent(2) }},
{%- endfor %}
} as const;

// Type exports
{%- for schema in schemas %}
export type {{ schema.interfaceName }}Schema = z.infer{% raw %}<{% endraw %}typeof NODE_DATA_SCHEMAS['{{ schema.nodeType }}']{% raw %}>{% endraw %};
{%- endfor %}

// Helper function to get schema for a node type
export function getNodeDataSchema(nodeType: string) {
  return NODE_DATA_SCHEMAS[nodeType as keyof typeof NODE_DATA_SCHEMAS];
}

// Validate node data
export function validateNodeData(nodeType: string, data: unknown) {
  const schema = getNodeDataSchema(nodeType);
  if (!schema) {
    throw new Error(`No schema found for node type: ${nodeType}`);
  }
  return schema.parse(data);
}

/**
 * Create a field validator function that uses Zod schema
 */
export function createZodFieldValidator(nodeType: string, fieldName: string) {
  return (value: unknown, formData: unknown) => {
    const schema = getNodeDataSchema(nodeType);
    if (!schema) {
      return { isValid: true }; // No schema, assume valid
    }

    // Type cast to access shape property
    const schemaShape = (schema as z.ZodObject{% raw %}<any>{% endraw %}).shape;
    const fieldSchema = schemaShape?.[fieldName];

    if (!fieldSchema) {
      return { isValid: true }; // No field schema, assume valid
    }

    try {
      fieldSchema.parse(value);
      return { isValid: true };
    } catch (error) {
      if (error instanceof z.ZodError) {
        return {
          isValid: false,
          error: error.errors[0]?.message || 'Invalid value'
        };
      }
      return {
        isValid: false,
        error: 'Validation failed'
      };
    }
  };
}
