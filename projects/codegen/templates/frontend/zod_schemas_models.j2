/**
 * GENERATED FILE - DO NOT EDIT
 * Generated by DiPeO code generation
 * Generated at: {{ generated_at }}
 *
 * Zod validation schemas for all node types.
 * These schemas are exported from @dipeo/models for use across the codebase.
 */

import { z } from 'zod';

// Node validation schemas
{%- for config in node_configs %}
export const {{ config['node_name'] }}Schema = z.object({
{%- for field in config['fields'] %}
  {{ field['name'] }}: {{ field | zod_schema }}{% if not loop.last %},{% endif %}
{%- endfor %}
});

export type {{ config['node_name'] }}Data = z.infer<typeof {{ config['node_name'] }}Schema>;
{%- endfor %}

// Export all schemas as a registry
export const nodeSchemas = {
{%- for config in node_configs %}
  {{ config['node_type'] }}: {{ config['node_name'] }}Schema{% if not loop.last %},{% endif %}
{%- endfor %}
} as const;

// Type for node type keys
export type NodeSchemaKey = keyof typeof nodeSchemas;

// Export validation helper
export function validateNodeData<T extends NodeSchemaKey>(
  nodeType: T,
  data: unknown
): z.infer<typeof nodeSchemas[T]> {
  return nodeSchemas[nodeType].parse(data);
}

// Safe validation that returns result instead of throwing
export function safeValidateNodeData<T extends NodeSchemaKey>(
  nodeType: T,
  data: unknown
): z.SafeParseReturnType<unknown, z.infer<typeof nodeSchemas[T]>> {
  return nodeSchemas[nodeType].safeParse(data);
}

// Get schema for a node type
export function getNodeSchema(nodeType: NodeSchemaKey) {
  return nodeSchemas[nodeType];
}
