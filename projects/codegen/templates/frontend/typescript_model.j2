// Auto-generated TypeScript model for {{ node_type }} node
import { z } from 'zod';
{%- set enum_imports = fields | get_enum_imports %}
{%- if enum_imports %}
import { {{ enum_imports | join(', ') }} } from '@dipeo/models';
{%- endif %}
{%- if fields | selectattr("type", "equalto", "select") | list %}
import { createOptionsSchema } from '@/core/utils/schema';
{%- endif %}

export interface {{ node_type | pascal_case }}NodeData {
{%- for field in fields %}
  {{ field['name'] }}{% if not field.get('required') %}?{% endif %}: {{ field | typescript_type }};
{%- endfor %}
}

// Zod schema for validation
export const {{ node_type | pascal_case }}NodeDataSchema = z.object({
{%- for field in fields %}
  {{ field['name'] }}: {{ field | zod_schema }},
{%- endfor %}
});
