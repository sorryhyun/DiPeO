{#- Template for generating Pydantic models using foreach with TypeScript AST filters -#}
{%- set interface_name = spec.interfaceName -%}
{%- set interface = ts_iface(ast_cache, interface_name) -%}
{%- set node_type_pascal = spec.nodeTypePascal -%}
{%- set node_type = spec.nodeType -%}
# Auto-generated Pydantic model for {{ node_type }} node

from typing import *
from pydantic import *

{% if node_type == 'person_job' %}
from ..domain_models import *
{% endif %}
from ..enums import *
from ..integrations import *


class {{ node_type_pascal }}NodeData(BaseModel):
    """Data model for {{ spec.displayName | default(node_type) }} node."""
{%- if interface and interface.properties %}
{% for prop in interface.properties %}
    {% set prop_type = ts_to_python(prop.type, prop.name) %}
    {% set python_field_name = prop.name | snake_case -%}
    {% set needs_alias = python_field_name != prop.name -%}
    {%- if prop.optional %}
    {{ python_field_name }}: Optional[{{ prop_type }}] = Field({% if needs_alias %}alias="{{ prop.name }}", {% endif %}default=None{% if prop.description %}, description="{{ prop.description }}"{% endif %})
    {%- else %}
    {{ python_field_name }}: {{ prop_type }}{% if needs_alias %} = Field(alias="{{ prop.name }}"{% if prop.description %}, description="{{ prop.description }}"{% endif %}){% elif prop.description %} = Field(description="{{ prop.description }}"){% endif %}
    {%- endif %}
{% endfor %}
{%- else %}
    # No properties found for interface {{ interface_name }}
    pass
{%- endif %}

    class Config:
        extra = "forbid"
        validate_assignment = True
