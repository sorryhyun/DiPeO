#!/usr/bin/env python3
# __generated__ by DiPeO
"""
Domain models generated from TypeScript interfaces.
Generated at: {{ generated_at }}
"""
from __future__ import annotations

from enum import Enum, auto
from typing import Any, Dict, List, Literal, NewType, Optional, Union

from pydantic import BaseModel, ConfigDict, Field

from dipeo.domain.type_defs import JsonDict, JsonList, JsonPrimitive, JsonValue

from .enums import *
from .integrations import *

# NewType declarations
{% for newtype in domain_models.newtypes %}
{{ newtype.name }} = NewType('{{ newtype.name }}', {{ newtype.base }})
{% endfor %}

{% for model in domain_models.models %}
class {{ model.name }}(BaseModel):
    """{{ model.description or model.name + ' model' }}"""
    model_config = ConfigDict(extra='forbid', populate_by_name=True)

    {% for field in model.fields %}
    {{ field.name }}: {{ field.python_type }}{% if field.optional %} | None{% endif %}{% if field.literal %} = Field(default={{ field.literal_value }}){% elif field.optional %} = Field(default=None){% else %}{% endif %}
    {% endfor %}


{% endfor %}

# Type aliases that reference models
{% for alias in domain_models.aliases %}
{{ alias.name }} = {{ alias.type }}
{% endfor %}
