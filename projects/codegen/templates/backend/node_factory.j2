"""
Node factory for creating executable nodes from data.
DO NOT EDIT THIS FILE DIRECTLY.
"""

from typing import Dict, Any, Optional, Union

from dipeo.diagram_generated.enums import NodeType, DBBlockSubType
from dipeo.diagram_generated.domain_models import NodeID, Vec2

# Import all unified node classes
{% for node in node_specs %}
from dipeo.diagram_generated.unified_nodes.{{ node['node_type'] }}_node import {{ node['node_name'] }}Node
{%- endfor %}

# Type alias for any executable node
ExecutableNode = Union[
{%- for node in node_specs %}
    {{ node['node_name'] }}Node{{ ", " if not loop.last else "" }}
{%- endfor %}
]


def create_executable_node(
    node_type: NodeType,
    node_id: NodeID,
    position: Vec2,
    label: str = "",
    data: Optional[Dict[str, Any]] = None,
    flipped: bool = False,
    metadata: Optional[Dict[str, Any]] = None
) -> ExecutableNode:
    """Factory function to create typed executable nodes from diagram data."""
    data = data or {}

    # Create the appropriate node based on type
{% for node in node_specs %}
    {{ "elif" if not loop.first else "if" }} node_type == NodeType.{{ node['node_type'] | upper }}:
        return {{ node['node_name'] }}Node(
            id=node_id,
            position=position,
            label=label,
            flipped=flipped,
            metadata=metadata,
{%- for field in node['fields'] %}
{%- set python_field_name = field['name'] | snake_case %}
{%- if field['name'] == 'type' %}
            # type field is set by default in the model
{%- elif field['name'] in ['id', 'position', 'label', 'flipped', 'metadata'] %}
            # Base field already handled above
{%- elif node['node_type'] == 'db' and field['name'] in ['file', 'collection', 'query', 'data'] %}
            # DB node special handling for backward compatibility
            {{ python_field_name }}=data.get('{{ field['name'] }}', {{ field | python_default }}),
{%- elif node['node_type'] == 'person_job' and field['name'] == 'first_only_prompt' %}
            # PersonJob backward compatibility: first_only_prompt could be 'prompt'
            first_only_prompt=data.get('first_only_prompt', data.get('prompt', {{ field | python_default }})),
{%- elif field['name'] == 'file_path' %}
            # File path field may have camelCase variants
            {{ python_field_name }}=data.get('{{ field['name'] }}', data.get('filePath', data.get('file_path', {{ field | python_default }}))),
{%- elif field['name'] == 'function_name' %}
            # Function name field may have camelCase variants
            {{ python_field_name }}=data.get('{{ field['name'] }}', data.get('functionName', data.get('function_name', {{ field | python_default }}))),
{%- elif field['name'] == 'sub_type' %}
            # Sub type field may have camelCase variants
            {{ python_field_name }}=data.get('{{ field['name'] }}', data.get('subType', {{ field | python_default }})),
{%- elif field['name'] == 'serialize_json' %}
            # Serialize JSON field may have camelCase variants
            {{ python_field_name }}=data.get('{{ field['name'] }}', data.get('serializeJson', {{ field | python_default }})),
{%- elif field['name'] == 'ignore_if_sub' %}
            # Ignore if sub field may have camelCase variants
            {{ python_field_name }}=data.get('ignoreIfSub', data.get('ignore_if_sub', {{ field | python_default }})),
{%- else %}
            {{ python_field_name }}=data.get('{{ field['name'] }}', {{ field | python_default }}),
{%- endif %}
{%- endfor %}
        )
{% endfor %}
    else:
        raise ValueError(f"Unknown node type: {node_type}")


# Re-export for backward compatibility
__all__ = [
    'ExecutableNode',
    'create_executable_node',
{%- for node in node_specs %}
    '{{ node['node_name'] }}Node',
{%- endfor %}
]
