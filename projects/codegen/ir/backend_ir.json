{
  "version": 1,
  "generated_at": "2025-09-14T15:40:46.293275",
  "node_specs": [
    {
      "node_type": "api_job",
      "node_name": "ApiJob",
      "display_name": "API Job",
      "category": "integration",
      "description": "Make HTTP API requests",
      "fields": [
        {
          "name": "url",
          "type": "str",
          "required": true,
          "default": null,
          "description": "API endpoint URL",
          "validation": {}
        },
        {
          "name": "method",
          "type": "enum",
          "required": true,
          "default": null,
          "description": "HTTP method",
          "validation": {
            "allowedValues": [
              "GET",
              "POST",
              "PUT",
              "DELETE",
              "PATCH"
            ]
          }
        },
        {
          "name": "headers",
          "type": "Dict[str, Any]",
          "required": false,
          "default": null,
          "description": "HTTP headers",
          "validation": {}
        },
        {
          "name": "params",
          "type": "Dict[str, Any]",
          "required": false,
          "default": null,
          "description": "Query parameters",
          "validation": {}
        },
        {
          "name": "body",
          "type": "Dict[str, Any]",
          "required": false,
          "default": null,
          "description": "Request body",
          "validation": {}
        },
        {
          "name": "timeout",
          "type": "float",
          "required": false,
          "default": null,
          "description": "Request timeout in seconds",
          "validation": {}
        },
        {
          "name": "auth_type",
          "type": "enum",
          "required": false,
          "default": null,
          "description": "Authentication type",
          "validation": {
            "allowedValues": [
              "none",
              "bearer",
              "basic",
              "api_key"
            ]
          }
        },
        {
          "name": "auth_config",
          "type": "Dict[str, Any]",
          "required": false,
          "default": null,
          "description": "Authentication configuration",
          "validation": {}
        }
      ],
      "icon": "\ud83c\udf10",
      "color": "#00BCD4"
    },
    {
      "node_type": "code_job",
      "node_name": "CodeJob",
      "display_name": "Code Job",
      "category": "compute",
      "description": "Execute custom code functions",
      "fields": [
        {
          "name": "language",
          "type": "enum",
          "required": true,
          "default": null,
          "description": "Programming language",
          "validation": {
            "allowedValues": [
              "python",
              "typescript",
              "bash",
              "shell"
            ]
          }
        },
        {
          "name": "filePath",
          "type": "str",
          "required": false,
          "default": null,
          "description": "Path to code file",
          "validation": {}
        },
        {
          "name": "code",
          "type": "str",
          "required": false,
          "default": null,
          "description": "Inline code to execute (alternative to filePath)",
          "validation": {}
        },
        {
          "name": "functionName",
          "type": "str",
          "required": false,
          "default": null,
          "description": "Function to execute",
          "validation": {}
        },
        {
          "name": "timeout",
          "type": "float",
          "required": false,
          "default": null,
          "description": "Execution timeout in seconds",
          "validation": {}
        }
      ],
      "icon": "\ud83d\udcbb",
      "color": "#9C27B0"
    },
    {
      "node_type": "condition",
      "node_name": "Condition",
      "display_name": "Condition",
      "category": "control",
      "description": "Conditional branching based on expressions",
      "fields": [
        {
          "name": "condition_type",
          "type": "enum",
          "required": false,
          "default": "custom",
          "description": "Type of condition to evaluate",
          "validation": {
            "allowedValues": [
              "detect_max_iterations",
              "check_nodes_executed",
              "custom",
              "llm_decision"
            ]
          }
        },
        {
          "name": "expression",
          "type": "str",
          "required": false,
          "default": null,
          "description": "Boolean expression to evaluate",
          "validation": {}
        },
        {
          "name": "node_indices",
          "type": "array",
          "required": false,
          "default": null,
          "description": "Node indices for detect_max_iteration condition",
          "validation": {
            "itemType": "string"
          }
        },
        {
          "name": "person",
          "type": "str",
          "required": false,
          "default": null,
          "description": "AI agent to use for decision making",
          "validation": {}
        },
        {
          "name": "judge_by",
          "type": "str",
          "required": false,
          "default": null,
          "description": "Prompt for LLM to make a judgment",
          "validation": {}
        },
        {
          "name": "judge_by_file",
          "type": "str",
          "required": false,
          "default": null,
          "description": "External prompt file path",
          "validation": {}
        },
        {
          "name": "memorize_to",
          "type": "str",
          "required": false,
          "default": "GOLDFISH",
          "description": "Memory control strategy (e.g., GOLDFISH for fresh evaluation)",
          "validation": {}
        },
        {
          "name": "at_most",
          "type": "float",
          "required": false,
          "default": null,
          "description": "Maximum messages to keep in memory",
          "validation": {}
        },
        {
          "name": "expose_index_as",
          "type": "str",
          "required": false,
          "default": null,
          "description": "Variable name to expose the condition node's execution count (0-based index) to downstream nodes",
          "validation": {}
        },
        {
          "name": "skippable",
          "type": "bool",
          "required": false,
          "default": false,
          "description": "When true, downstream nodes can execute even if this condition hasn't been evaluated yet",
          "validation": {}
        }
      ],
      "icon": "\ud83d\udd00",
      "color": "#FF9800"
    },
    {
      "node_type": "db",
      "node_name": "Db",
      "display_name": "Database",
      "category": "integration",
      "description": "Database operations",
      "fields": [
        {
          "name": "file",
          "type": "Any",
          "required": false,
          "default": null,
          "description": "File path or array of file paths",
          "validation": {}
        },
        {
          "name": "collection",
          "type": "str",
          "required": false,
          "default": null,
          "description": "Database collection name",
          "validation": {}
        },
        {
          "name": "sub_type",
          "type": "enum",
          "required": true,
          "default": null,
          "description": "Database operation type",
          "validation": {
            "allowedValues": [
              "fixed_prompt",
              "file",
              "code",
              "api_tool"
            ]
          }
        },
        {
          "name": "operation",
          "type": "str",
          "required": true,
          "default": null,
          "description": "Operation configuration",
          "validation": {}
        },
        {
          "name": "query",
          "type": "str",
          "required": false,
          "default": null,
          "description": "Query configuration",
          "validation": {}
        },
        {
          "name": "data",
          "type": "Dict[str, Any]",
          "required": false,
          "default": null,
          "description": "Data configuration",
          "validation": {}
        },
        {
          "name": "serialize_json",
          "type": "bool",
          "required": false,
          "default": false,
          "description": "Serialize structured data to JSON string (for backward compatibility)",
          "validation": {}
        },
        {
          "name": "format",
          "type": "str",
          "required": false,
          "default": "json",
          "description": "Data format (json, yaml, csv, text, etc.)",
          "validation": {}
        }
      ],
      "icon": "\ud83d\uddc4\ufe0f",
      "color": "#795548"
    },
    {
      "node_type": "endpoint",
      "node_name": "Endpoint",
      "display_name": "End Node",
      "category": "control",
      "description": "Exit point for diagram execution",
      "fields": [
        {
          "name": "save_to_file",
          "type": "bool",
          "required": true,
          "default": null,
          "description": "Save results to file",
          "validation": {}
        },
        {
          "name": "file_name",
          "type": "str",
          "required": false,
          "default": null,
          "description": "Output filename",
          "validation": {}
        }
      ],
      "icon": "\ud83c\udfc1",
      "color": "#F44336"
    },
    {
      "node_type": "hook",
      "node_name": "Hook",
      "display_name": "Hook",
      "category": "compute",
      "description": "Executes hooks at specific points in the diagram execution",
      "fields": [
        {
          "name": "hook_type",
          "type": "enum",
          "required": true,
          "default": "shell",
          "description": "Type of hook to execute",
          "validation": {
            "allowedValues": [
              "shell",
              "http",
              "python",
              "file"
            ]
          }
        },
        {
          "name": "command",
          "type": "str",
          "required": false,
          "default": null,
          "description": "Shell command to run (for shell hooks)",
          "validation": {}
        },
        {
          "name": "url",
          "type": "str",
          "required": false,
          "default": null,
          "description": "Webhook URL (for HTTP hooks)",
          "validation": {
            "pattern": "^https?://"
          }
        },
        {
          "name": "timeout",
          "type": "float",
          "required": false,
          "default": 60,
          "description": "Execution timeout in seconds",
          "validation": {
            "min": 1,
            "max": 300
          }
        },
        {
          "name": "retry_count",
          "type": "float",
          "required": false,
          "default": 0,
          "description": "Number of retries on failure",
          "validation": {
            "min": 0,
            "max": 5
          }
        }
      ],
      "icon": "\ud83e\ude9d",
      "color": "#9333ea"
    },
    {
      "node_type": "integrated_api",
      "node_name": "IntegratedApi",
      "display_name": "Integrated API",
      "category": "integration",
      "description": "Connect to external APIs like Notion, Slack, GitHub, and more",
      "fields": [
        {
          "name": "provider",
          "type": "str",
          "required": true,
          "default": null,
          "description": "API provider to connect to",
          "validation": {}
        },
        {
          "name": "operation",
          "type": "str",
          "required": true,
          "default": null,
          "description": "Operation to perform (provider-specific)",
          "validation": {}
        },
        {
          "name": "resource_id",
          "type": "str",
          "required": false,
          "default": null,
          "description": "Resource identifier (e.g., page ID, channel ID)",
          "validation": {}
        },
        {
          "name": "config",
          "type": "Dict[str, Any]",
          "required": false,
          "default": null,
          "description": "Provider-specific configuration",
          "validation": {}
        },
        {
          "name": "timeout",
          "type": "float",
          "required": false,
          "default": null,
          "description": "Request timeout in seconds",
          "validation": {
            "min": 1,
            "max": 300
          }
        },
        {
          "name": "max_retries",
          "type": "float",
          "required": false,
          "default": null,
          "description": "Maximum retry attempts",
          "validation": {
            "min": 0,
            "max": 10
          }
        }
      ],
      "icon": "\ud83d\udd0c",
      "color": "#8b5cf6"
    },
    {
      "node_type": "json_schema_validator",
      "node_name": "JsonSchemaValidator",
      "display_name": "JSON Schema Validator",
      "category": "codegen",
      "description": "Validate data against JSON schema",
      "fields": [
        {
          "name": "schema_path",
          "type": "str",
          "required": false,
          "default": null,
          "description": "Path to JSON schema file",
          "validation": {}
        },
        {
          "name": "schema",
          "type": "Dict[str, Any]",
          "required": false,
          "default": null,
          "description": "Inline JSON schema",
          "validation": {}
        },
        {
          "name": "data_path",
          "type": "str",
          "required": false,
          "default": null,
          "description": "Data Path configuration",
          "validation": {}
        },
        {
          "name": "strict_mode",
          "type": "bool",
          "required": false,
          "default": null,
          "description": "Strict Mode configuration",
          "validation": {}
        },
        {
          "name": "error_on_extra",
          "type": "bool",
          "required": false,
          "default": null,
          "description": "Error On Extra configuration",
          "validation": {}
        }
      ],
      "icon": "\u2713",
      "color": "#8BC34A"
    },
    {
      "node_type": "person_job",
      "node_name": "PersonJob",
      "display_name": "Person Job",
      "category": "ai",
      "description": "Execute tasks using AI language models",
      "fields": [
        {
          "name": "person",
          "type": "str",
          "required": false,
          "default": null,
          "description": "AI person to use",
          "validation": {}
        },
        {
          "name": "first_only_prompt",
          "type": "str",
          "required": true,
          "default": null,
          "description": "Prompt used only on first execution",
          "validation": {}
        },
        {
          "name": "first_prompt_file",
          "type": "str",
          "required": false,
          "default": null,
          "description": "External prompt file for first iteration only",
          "validation": {}
        },
        {
          "name": "default_prompt",
          "type": "str",
          "required": false,
          "default": null,
          "description": "Default prompt template",
          "validation": {}
        },
        {
          "name": "prompt_file",
          "type": "str",
          "required": false,
          "default": null,
          "description": "Path to prompt file in /files/prompts/",
          "validation": {}
        },
        {
          "name": "max_iteration",
          "type": "float",
          "required": true,
          "default": 100,
          "description": "Maximum execution iterations",
          "validation": {}
        },
        {
          "name": "memorize_to",
          "type": "str",
          "required": false,
          "default": null,
          "description": "Criteria used to select helpful messages for this task. Empty = memorize all. Special: 'GOLDFISH' for goldfish mode. Comma-separated for multiple criteria.",
          "validation": {}
        },
        {
          "name": "at_most",
          "type": "float",
          "required": false,
          "default": null,
          "description": "Select at most N messages to keep (system messages may be preserved in addition).",
          "validation": {
            "min": 1,
            "max": 500
          }
        },
        {
          "name": "ignore_person",
          "type": "str",
          "required": false,
          "default": null,
          "description": "Comma-separated list of person IDs whose messages should be excluded from memory selection.",
          "validation": {}
        },
        {
          "name": "tools",
          "type": "str",
          "required": false,
          "default": null,
          "description": "Tools available to the AI agent",
          "validation": {}
        },
        {
          "name": "text_format",
          "type": "str",
          "required": false,
          "default": null,
          "description": "JSON schema or response format for structured outputs",
          "validation": {}
        },
        {
          "name": "text_format_file",
          "type": "str",
          "required": false,
          "default": null,
          "description": "Path to Python file containing Pydantic models for structured outputs",
          "validation": {}
        },
        {
          "name": "resolved_prompt",
          "type": "str",
          "required": false,
          "default": null,
          "description": "Pre-resolved prompt content from compile-time",
          "validation": {}
        },
        {
          "name": "resolved_first_prompt",
          "type": "str",
          "required": false,
          "default": null,
          "description": "Pre-resolved first prompt content from compile-time",
          "validation": {}
        },
        {
          "name": "batch",
          "type": "bool",
          "required": false,
          "default": false,
          "description": "Enable batch mode for processing multiple items",
          "validation": {}
        },
        {
          "name": "batch_input_key",
          "type": "str",
          "required": false,
          "default": "items",
          "description": "Key containing the array to iterate over in batch mode",
          "validation": {}
        },
        {
          "name": "batch_parallel",
          "type": "bool",
          "required": false,
          "default": true,
          "description": "Execute batch items in parallel",
          "validation": {}
        },
        {
          "name": "max_concurrent",
          "type": "float",
          "required": false,
          "default": 10,
          "description": "Maximum concurrent executions in batch mode",
          "validation": {
            "min": 1,
            "max": 100
          }
        }
      ],
      "icon": "\ud83e\udd16",
      "color": "#2196F3"
    },
    {
      "node_type": "start",
      "node_name": "Start",
      "display_name": "Start Node",
      "category": "control",
      "description": "Entry point for diagram execution",
      "fields": [
        {
          "name": "trigger_mode",
          "type": "enum",
          "required": false,
          "default": "none",
          "description": "How this start node is triggered",
          "validation": {
            "allowedValues": [
              "none",
              "manual",
              "hook"
            ]
          }
        },
        {
          "name": "custom_data",
          "type": "Any",
          "required": false,
          "default": null,
          "description": "Custom data to pass when manually triggered",
          "validation": {}
        },
        {
          "name": "output_data_structure",
          "type": "Dict[str, Any]",
          "required": false,
          "default": null,
          "description": "Expected output data structure",
          "validation": {}
        },
        {
          "name": "hook_event",
          "type": "str",
          "required": false,
          "default": null,
          "description": "Event name to listen for",
          "validation": {}
        },
        {
          "name": "hook_filters",
          "type": "Dict[str, Any]",
          "required": false,
          "default": null,
          "description": "Filters to apply to incoming events",
          "validation": {}
        }
      ],
      "icon": "\ud83d\ude80",
      "color": "#4CAF50"
    },
    {
      "node_type": "sub_diagram",
      "node_name": "SubDiagram",
      "display_name": "Sub-Diagram",
      "category": "compute",
      "description": "Execute another diagram as a node within the current diagram",
      "fields": [
        {
          "name": "diagram_name",
          "type": "str",
          "required": false,
          "default": null,
          "description": "Name of the diagram to execute (e.g., 'workflow/process')",
          "validation": {}
        },
        {
          "name": "diagram_data",
          "type": "Dict[str, Any]",
          "required": false,
          "default": null,
          "description": "Inline diagram data (alternative to diagram_name)",
          "validation": {}
        },
        {
          "name": "input_mapping",
          "type": "Dict[str, Any]",
          "required": false,
          "default": null,
          "description": "Map node inputs to sub-diagram variables",
          "validation": {}
        },
        {
          "name": "output_mapping",
          "type": "Dict[str, Any]",
          "required": false,
          "default": null,
          "description": "Map sub-diagram outputs to node outputs",
          "validation": {}
        },
        {
          "name": "timeout",
          "type": "float",
          "required": false,
          "default": null,
          "description": "Execution timeout in seconds",
          "validation": {
            "min": 1,
            "max": 3600
          }
        },
        {
          "name": "wait_for_completion",
          "type": "bool",
          "required": false,
          "default": true,
          "description": "Whether to wait for sub-diagram completion",
          "validation": {}
        },
        {
          "name": "isolate_conversation",
          "type": "bool",
          "required": false,
          "default": false,
          "description": "Create isolated conversation context for sub-diagram",
          "validation": {}
        },
        {
          "name": "ignoreIfSub",
          "type": "bool",
          "required": false,
          "default": false,
          "description": "Skip execution if this diagram is being run as a sub-diagram",
          "validation": {}
        },
        {
          "name": "diagram_format",
          "type": "enum",
          "required": false,
          "default": null,
          "description": "Format of the diagram file (yaml, json, or light)",
          "validation": {
            "allowedValues": [
              "yaml",
              "json",
              "light"
            ]
          }
        },
        {
          "name": "batch",
          "type": "bool",
          "required": false,
          "default": false,
          "description": "Execute sub-diagram in batch mode for multiple inputs",
          "validation": {}
        },
        {
          "name": "batch_input_key",
          "type": "str",
          "required": false,
          "default": null,
          "description": "Key in inputs containing the array of items for batch processing",
          "validation": {}
        },
        {
          "name": "batch_parallel",
          "type": "bool",
          "required": false,
          "default": false,
          "description": "Execute batch items in parallel",
          "validation": {}
        }
      ],
      "icon": "\ud83d\udcca",
      "color": "#8B5CF6"
    },
    {
      "node_type": "template_job",
      "node_name": "TemplateJob",
      "display_name": "Template Job",
      "category": "codegen",
      "description": "Process templates with data",
      "fields": [
        {
          "name": "template_path",
          "type": "str",
          "required": false,
          "default": null,
          "description": "Path to template file",
          "validation": {}
        },
        {
          "name": "template_content",
          "type": "str",
          "required": false,
          "default": null,
          "description": "Inline template content",
          "validation": {}
        },
        {
          "name": "output_path",
          "type": "str",
          "required": false,
          "default": null,
          "description": "Output file path",
          "validation": {}
        },
        {
          "name": "variables",
          "type": "Dict[str, Any]",
          "required": false,
          "default": null,
          "description": "Variables configuration",
          "validation": {}
        },
        {
          "name": "engine",
          "type": "enum",
          "required": false,
          "default": "jinja2",
          "description": "Template engine to use",
          "validation": {
            "allowedValues": [
              "internal",
              "jinja2"
            ]
          }
        },
        {
          "name": "preprocessor",
          "type": "str",
          "required": false,
          "default": null,
          "description": "Preprocessor function to apply before templating",
          "validation": {}
        }
      ],
      "icon": "\ud83d\udcdd",
      "color": "#3F51B5"
    },
    {
      "node_type": "typescript_ast",
      "node_name": "TypescriptAst",
      "display_name": "TypeScript AST Parser",
      "category": "codegen",
      "description": "Parses TypeScript source code and extracts AST, interfaces, types, and enums",
      "fields": [
        {
          "name": "source",
          "type": "str",
          "required": true,
          "default": null,
          "description": "TypeScript source code to parse",
          "validation": {}
        },
        {
          "name": "extractPatterns",
          "type": "array",
          "required": false,
          "default": [
            "interface",
            "type",
            "enum"
          ],
          "description": "Patterns to extract from the AST",
          "validation": {
            "itemType": "string",
            "allowedValues": [
              "interface",
              "type",
              "enum",
              "class",
              "function",
              "const",
              "export"
            ]
          }
        },
        {
          "name": "includeJSDoc",
          "type": "bool",
          "required": false,
          "default": false,
          "description": "Include JSDoc comments in the extracted data",
          "validation": {}
        },
        {
          "name": "parseMode",
          "type": "enum",
          "required": false,
          "default": "module",
          "description": "TypeScript parsing mode",
          "validation": {
            "allowedValues": [
              "module",
              "script"
            ]
          }
        },
        {
          "name": "transformEnums",
          "type": "bool",
          "required": false,
          "default": false,
          "description": "Transform enum definitions to a simpler format",
          "validation": {}
        },
        {
          "name": "flattenOutput",
          "type": "bool",
          "required": false,
          "default": false,
          "description": "Flatten the output structure for easier consumption",
          "validation": {}
        },
        {
          "name": "outputFormat",
          "type": "enum",
          "required": false,
          "default": "standard",
          "description": "Output format for the parsed data",
          "validation": {
            "allowedValues": [
              "standard",
              "for_codegen",
              "for_analysis"
            ]
          }
        },
        {
          "name": "batch",
          "type": "bool",
          "required": false,
          "default": false,
          "description": "Enable batch processing mode",
          "validation": {}
        },
        {
          "name": "batchInputKey",
          "type": "str",
          "required": false,
          "default": "sources",
          "description": "Key to extract batch items from input",
          "validation": {}
        }
      ],
      "icon": "\ud83d\udd0d",
      "color": "#3178c6"
    },
    {
      "node_type": "user_response",
      "node_name": "UserResponse",
      "display_name": "User Response",
      "category": "integration",
      "description": "Collect user input",
      "fields": [
        {
          "name": "prompt",
          "type": "str",
          "required": true,
          "default": null,
          "description": "Question to ask the user",
          "validation": {}
        },
        {
          "name": "timeout",
          "type": "float",
          "required": false,
          "default": 300,
          "description": "Response timeout in seconds",
          "validation": {}
        }
      ],
      "icon": "\ud83d\udcac",
      "color": "#E91E63"
    }
  ],
  "enums": [
    {
      "name": "DataType",
      "values": [
        {
          "name": "ANY",
          "value": "any"
        },
        {
          "name": "STRING",
          "value": "string"
        },
        {
          "name": "NUMBER",
          "value": "number"
        },
        {
          "name": "BOOLEAN",
          "value": "boolean"
        },
        {
          "name": "OBJECT",
          "value": "object"
        },
        {
          "name": "ARRAY",
          "value": "array"
        }
      ],
      "description": ""
    },
    {
      "name": "ContentType",
      "values": [
        {
          "name": "RAW_TEXT",
          "value": "raw_text"
        },
        {
          "name": "CONVERSATION_STATE",
          "value": "conversation_state"
        },
        {
          "name": "OBJECT",
          "value": "object"
        },
        {
          "name": "EMPTY",
          "value": "empty"
        },
        {
          "name": "GENERIC",
          "value": "generic"
        },
        {
          "name": "VARIABLE",
          "value": "variable"
        },
        {
          "name": "BINARY",
          "value": "binary"
        }
      ],
      "description": ""
    },
    {
      "name": "HandleDirection",
      "values": [
        {
          "name": "INPUT",
          "value": "input"
        },
        {
          "name": "OUTPUT",
          "value": "output"
        }
      ],
      "description": ""
    },
    {
      "name": "HandleLabel",
      "values": [
        {
          "name": "DEFAULT",
          "value": "default"
        },
        {
          "name": "FIRST",
          "value": "first"
        },
        {
          "name": "CONDTRUE",
          "value": "condtrue"
        },
        {
          "name": "CONDFALSE",
          "value": "condfalse"
        },
        {
          "name": "SUCCESS",
          "value": "success"
        },
        {
          "name": "ERROR",
          "value": "error"
        },
        {
          "name": "RESULTS",
          "value": "results"
        }
      ],
      "description": ""
    },
    {
      "name": "DiagramFormat",
      "values": [
        {
          "name": "NATIVE",
          "value": "native"
        },
        {
          "name": "LIGHT",
          "value": "light"
        },
        {
          "name": "READABLE",
          "value": "readable"
        }
      ],
      "description": ""
    },
    {
      "name": "Status",
      "values": [
        {
          "name": "PENDING",
          "value": "pending"
        },
        {
          "name": "RUNNING",
          "value": "running"
        },
        {
          "name": "PAUSED",
          "value": "paused"
        },
        {
          "name": "COMPLETED",
          "value": "completed"
        },
        {
          "name": "FAILED",
          "value": "failed"
        },
        {
          "name": "ABORTED",
          "value": "aborted"
        },
        {
          "name": "SKIPPED",
          "value": "skipped"
        },
        {
          "name": "MAXITER_REACHED",
          "value": "maxiter_reached"
        }
      ],
      "description": ""
    },
    {
      "name": "FlowStatus",
      "values": [
        {
          "name": "WAITING",
          "value": "waiting"
        },
        {
          "name": "READY",
          "value": "ready"
        },
        {
          "name": "RUNNING",
          "value": "running"
        },
        {
          "name": "BLOCKED",
          "value": "blocked"
        }
      ],
      "description": ""
    },
    {
      "name": "CompletionStatus",
      "values": [
        {
          "name": "SUCCESS",
          "value": "success"
        },
        {
          "name": "FAILED",
          "value": "failed"
        },
        {
          "name": "SKIPPED",
          "value": "skipped"
        },
        {
          "name": "MAX_ITER",
          "value": "max_iter"
        }
      ],
      "description": ""
    },
    {
      "name": "ExecutionPhase",
      "values": [
        {
          "name": "MEMORY_SELECTION",
          "value": "memory_selection"
        },
        {
          "name": "DIRECT_EXECUTION",
          "value": "direct_execution"
        },
        {
          "name": "DECISION_EVALUATION",
          "value": "decision_evaluation"
        },
        {
          "name": "DEFAULT",
          "value": "default"
        }
      ],
      "description": ""
    },
    {
      "name": "EventType",
      "values": [
        {
          "name": "EXECUTION_STARTED",
          "value": "execution_started"
        },
        {
          "name": "EXECUTION_COMPLETED",
          "value": "execution_completed"
        },
        {
          "name": "EXECUTION_ERROR",
          "value": "execution_error"
        },
        {
          "name": "EXECUTION_STATUS_CHANGED",
          "value": "execution_status_changed"
        },
        {
          "name": "NODE_STARTED",
          "value": "node_started"
        },
        {
          "name": "NODE_COMPLETED",
          "value": "node_completed"
        },
        {
          "name": "NODE_ERROR",
          "value": "node_error"
        },
        {
          "name": "NODE_OUTPUT",
          "value": "node_output"
        },
        {
          "name": "NODE_STATUS_CHANGED",
          "value": "node_status_changed"
        },
        {
          "name": "NODE_PROGRESS",
          "value": "node_progress"
        },
        {
          "name": "METRICS_COLLECTED",
          "value": "metrics_collected"
        },
        {
          "name": "OPTIMIZATION_SUGGESTED",
          "value": "optimization_suggested"
        },
        {
          "name": "WEBHOOK_RECEIVED",
          "value": "webhook_received"
        },
        {
          "name": "INTERACTIVE_PROMPT",
          "value": "interactive_prompt"
        },
        {
          "name": "INTERACTIVE_RESPONSE",
          "value": "interactive_response"
        },
        {
          "name": "EXECUTION_UPDATE",
          "value": "execution_update"
        },
        {
          "name": "EXECUTION_LOG",
          "value": "execution_log"
        },
        {
          "name": "KEEPALIVE",
          "value": "keepalive"
        }
      ],
      "description": ""
    },
    {
      "name": "LLMService",
      "values": [
        {
          "name": "OPENAI",
          "value": "openai"
        },
        {
          "name": "ANTHROPIC",
          "value": "anthropic"
        },
        {
          "name": "CLAUDE_CODE",
          "value": "claude-code"
        },
        {
          "name": "GOOGLE",
          "value": "google"
        },
        {
          "name": "GEMINI",
          "value": "gemini"
        },
        {
          "name": "BEDROCK",
          "value": "bedrock"
        },
        {
          "name": "VERTEX",
          "value": "vertex"
        },
        {
          "name": "DEEPSEEK",
          "value": "deepseek"
        },
        {
          "name": "OLLAMA",
          "value": "ollama"
        }
      ],
      "description": ""
    },
    {
      "name": "APIServiceType",
      "values": [
        {
          "name": "OPENAI",
          "value": "openai"
        },
        {
          "name": "ANTHROPIC",
          "value": "anthropic"
        },
        {
          "name": "GOOGLE",
          "value": "google"
        },
        {
          "name": "GEMINI",
          "value": "gemini"
        },
        {
          "name": "BEDROCK",
          "value": "bedrock"
        },
        {
          "name": "VERTEX",
          "value": "vertex"
        },
        {
          "name": "DEEPSEEK",
          "value": "deepseek"
        },
        {
          "name": "OLLAMA",
          "value": "ollama"
        },
        {
          "name": "CLAUDE_CODE",
          "value": "claude-code"
        }
      ],
      "description": ""
    },
    {
      "name": "ToolType",
      "values": [
        {
          "name": "WEB_SEARCH",
          "value": "web_search"
        },
        {
          "name": "WEB_SEARCH_PREVIEW",
          "value": "web_search_preview"
        },
        {
          "name": "IMAGE_GENERATION",
          "value": "image_generation"
        }
      ],
      "description": ""
    },
    {
      "name": "ToolSelection",
      "values": [
        {
          "name": "NONE",
          "value": "none"
        },
        {
          "name": "IMAGE",
          "value": "image"
        },
        {
          "name": "WEBSEARCH",
          "value": "websearch"
        }
      ],
      "description": ""
    },
    {
      "name": "AuthType",
      "values": [
        {
          "name": "NONE",
          "value": "none"
        },
        {
          "name": "BEARER",
          "value": "bearer"
        },
        {
          "name": "BASIC",
          "value": "basic"
        },
        {
          "name": "API_KEY",
          "value": "api_key"
        }
      ],
      "description": ""
    },
    {
      "name": "RetryStrategy",
      "values": [
        {
          "name": "NONE",
          "value": "none"
        },
        {
          "name": "LINEAR",
          "value": "linear"
        },
        {
          "name": "EXPONENTIAL",
          "value": "exponential"
        },
        {
          "name": "FIBONACCI",
          "value": "fibonacci"
        },
        {
          "name": "CONSTANT",
          "value": "constant"
        },
        {
          "name": "EXPONENTIAL_BACKOFF",
          "value": "exponential_backoff"
        },
        {
          "name": "LINEAR_BACKOFF",
          "value": "linear_backoff"
        },
        {
          "name": "FIXED_DELAY",
          "value": "fixed_delay"
        }
      ],
      "description": ""
    },
    {
      "name": "DBBlockSubType",
      "values": [
        {
          "name": "FIXED_PROMPT",
          "value": "fixed_prompt"
        },
        {
          "name": "FILE",
          "value": "file"
        },
        {
          "name": "CODE",
          "value": "code"
        },
        {
          "name": "API_TOOL",
          "value": "api_tool"
        }
      ],
      "description": ""
    },
    {
      "name": "SupportedLanguage",
      "values": [
        {
          "name": "PYTHON",
          "value": "python"
        },
        {
          "name": "TYPESCRIPT",
          "value": "typescript"
        },
        {
          "name": "BASH",
          "value": "bash"
        },
        {
          "name": "SHELL",
          "value": "shell"
        }
      ],
      "description": ""
    },
    {
      "name": "HttpMethod",
      "values": [
        {
          "name": "GET",
          "value": "get"
        },
        {
          "name": "POST",
          "value": "post"
        },
        {
          "name": "PUT",
          "value": "put"
        },
        {
          "name": "DELETE",
          "value": "delete"
        },
        {
          "name": "PATCH",
          "value": "patch"
        }
      ],
      "description": ""
    },
    {
      "name": "HookType",
      "values": [
        {
          "name": "SHELL",
          "value": "shell"
        },
        {
          "name": "WEBHOOK",
          "value": "webhook"
        },
        {
          "name": "PYTHON",
          "value": "python"
        },
        {
          "name": "FILE",
          "value": "file"
        }
      ],
      "description": ""
    },
    {
      "name": "HookTriggerMode",
      "values": [
        {
          "name": "NONE",
          "value": "none"
        },
        {
          "name": "MANUAL",
          "value": "manual"
        },
        {
          "name": "HOOK",
          "value": "hook"
        }
      ],
      "description": ""
    },
    {
      "name": "ConditionType",
      "values": [
        {
          "name": "DETECT_MAX_ITERATIONS",
          "value": "detect_max_iterations"
        },
        {
          "name": "CHECK_NODES_EXECUTED",
          "value": "check_nodes_executed"
        },
        {
          "name": "CUSTOM",
          "value": "custom"
        },
        {
          "name": "LLM_DECISION",
          "value": "llm_decision"
        }
      ],
      "description": ""
    },
    {
      "name": "TemplateEngine",
      "values": [
        {
          "name": "INTERNAL",
          "value": "internal"
        },
        {
          "name": "JINJA2",
          "value": "jinja2"
        }
      ],
      "description": ""
    },
    {
      "name": "NodeType",
      "values": [
        {
          "name": "START",
          "value": "start"
        },
        {
          "name": "PERSON_JOB",
          "value": "person_job"
        },
        {
          "name": "CONDITION",
          "value": "condition"
        },
        {
          "name": "CODE_JOB",
          "value": "code_job"
        },
        {
          "name": "API_JOB",
          "value": "api_job"
        },
        {
          "name": "ENDPOINT",
          "value": "endpoint"
        },
        {
          "name": "DB",
          "value": "db"
        },
        {
          "name": "USER_RESPONSE",
          "value": "user_response"
        },
        {
          "name": "HOOK",
          "value": "hook"
        },
        {
          "name": "TEMPLATE_JOB",
          "value": "template_job"
        },
        {
          "name": "JSON_SCHEMA_VALIDATOR",
          "value": "json_schema_validator"
        },
        {
          "name": "TYPESCRIPT_AST",
          "value": "typescript_ast"
        },
        {
          "name": "SUB_DIAGRAM",
          "value": "sub_diagram"
        },
        {
          "name": "INTEGRATED_API",
          "value": "integrated_api"
        }
      ],
      "description": ""
    },
    {
      "name": "Severity",
      "values": [
        {
          "name": "ERROR",
          "value": "error"
        },
        {
          "name": "WARNING",
          "value": "warning"
        },
        {
          "name": "INFO",
          "value": "info"
        }
      ],
      "description": ""
    },
    {
      "name": "EventPriority",
      "values": [
        {
          "name": "LOW",
          "value": "low"
        },
        {
          "name": "NORMAL",
          "value": "normal"
        },
        {
          "name": "HIGH",
          "value": "high"
        },
        {
          "name": "CRITICAL",
          "value": "critical"
        }
      ],
      "description": ""
    }
  ],
  "integrations": {
    "models": [
      {
        "name": "ToolConfig",
        "fields": [
          {
            "name": "type",
            "type": "ToolType",
            "optional": false
          },
          {
            "name": "enabled",
            "type": "bool",
            "optional": true
          },
          {
            "name": "config",
            "type": "Dict[str, Any]",
            "optional": true
          }
        ]
      },
      {
        "name": "WebSearchResult",
        "fields": [
          {
            "name": "url",
            "type": "str",
            "optional": false
          },
          {
            "name": "title",
            "type": "str",
            "optional": false
          },
          {
            "name": "snippet",
            "type": "str",
            "optional": false
          },
          {
            "name": "score",
            "type": "float",
            "optional": true
          }
        ]
      },
      {
        "name": "ImageGenerationResult",
        "fields": [
          {
            "name": "image_data",
            "type": "str",
            "optional": false
          },
          {
            "name": "format",
            "type": "str",
            "optional": false
          },
          {
            "name": "width",
            "type": "float",
            "optional": true
          },
          {
            "name": "height",
            "type": "float",
            "optional": true
          }
        ]
      },
      {
        "name": "ToolOutput",
        "fields": [
          {
            "name": "type",
            "type": "ToolType",
            "optional": false
          },
          {
            "name": "result",
            "type": "Union[List[WebSearchResult], ImageGenerationResult, Any]",
            "optional": false
          },
          {
            "name": "raw_response",
            "type": "Any",
            "optional": true
          }
        ]
      },
      {
        "name": "ChatResult",
        "fields": [
          {
            "name": "text",
            "type": "str",
            "optional": false
          },
          {
            "name": "llm_usage",
            "type": "Optional[LLMUsage]",
            "optional": true
          },
          {
            "name": "raw_response",
            "type": "Optional[Any]",
            "optional": true
          },
          {
            "name": "tool_outputs",
            "type": "Optional[List[ToolOutput]]",
            "optional": true
          }
        ]
      },
      {
        "name": "LLMRequestOptions",
        "fields": [
          {
            "name": "temperature",
            "type": "float",
            "optional": true
          },
          {
            "name": "max_tokens",
            "type": "float",
            "optional": true
          },
          {
            "name": "top_p",
            "type": "float",
            "optional": true
          },
          {
            "name": "n",
            "type": "float",
            "optional": true
          },
          {
            "name": "tools",
            "type": "List[ToolConfig]",
            "optional": true
          },
          {
            "name": "response_format",
            "type": "Any",
            "optional": true
          }
        ]
      }
    ],
    "functions": [],
    "configs": []
  },
  "conversions": {
    "node_type_map": {
      "code_job": "CODE_JOB",
      "api_job": "API_JOB",
      "person_job": "PERSON_JOB",
      "condition": "CONDITION",
      "user_response": "USER_RESPONSE",
      "start": "START",
      "endpoint": "ENDPOINT",
      "db": "DB",
      "hook": "HOOK",
      "template_job": "TEMPLATE_JOB",
      "json_schema_validator": "JSON_SCHEMA_VALIDATOR",
      "typescript_ast": "TYPESCRIPT_AST",
      "sub_diagram": "SUB_DIAGRAM",
      "integrated_api": "INTEGRATED_API"
    },
    "type_conversions": {
      "string": "str",
      "number": "int",
      "boolean": "bool",
      "any": "JsonValue",
      "JsonValue": "JsonValue",
      "JsonDict": "JsonDict",
      "PersonID": "Optional[PersonID]",
      "NodeID": "NodeID",
      "HandleID": "HandleID",
      "ArrowID": "ArrowID",
      "MemoryConfig": "Optional[MemoryConfig]",
      "ToolConfig[]": "Optional[List[ToolConfig]]",
      "string[]": "Optional[List[str]]",
      "Record<string, any>": "JsonDict",
      "Record<string, JsonValue>": "JsonDict",
      "Record<string, string>": "Dict[str, str]",
      "HookTriggerMode": "Optional[HookTriggerMode]",
      "SupportedLanguage": "SupportedLanguage",
      "HttpMethod": "HttpMethod",
      "DBBlockSubType": "DBBlockSubType",
      "HookType": "HookType",
      "DiagramFormat": "DiagramFormat",
      "ContentType": "ContentType",
      "ToolSelection": "ToolSelection",
      "APIServiceType": "APIServiceType"
    },
    "field_mappings": {
      "string": "text",
      "number": "number",
      "boolean": "checkbox",
      "PersonID": "personSelect",
      "SupportedLanguage": "select",
      "HttpMethod": "select",
      "DBBlockSubType": "select",
      "HookType": "select",
      "HookTriggerMode": "select",
      "ContentType": "select",
      "DiagramFormat": "select",
      "ToolSelection": "select",
      "APIServiceType": "select"
    }
  },
  "unified_models": [
    {
      "class_name": "ApiJob",
      "display_name": "API Job",
      "description": "Make HTTP API requests",
      "fields": [
        {
          "name": "url",
          "type": "str",
          "required": true,
          "default": null,
          "description": "API endpoint URL",
          "validation": {}
        },
        {
          "name": "method",
          "type": "enum",
          "required": true,
          "default": null,
          "description": "HTTP method",
          "validation": {
            "allowedValues": [
              "GET",
              "POST",
              "PUT",
              "DELETE",
              "PATCH"
            ]
          }
        },
        {
          "name": "headers",
          "type": "Dict[str, Any]",
          "required": false,
          "default": null,
          "description": "HTTP headers",
          "validation": {}
        },
        {
          "name": "params",
          "type": "Dict[str, Any]",
          "required": false,
          "default": null,
          "description": "Query parameters",
          "validation": {}
        },
        {
          "name": "body",
          "type": "Dict[str, Any]",
          "required": false,
          "default": null,
          "description": "Request body",
          "validation": {}
        },
        {
          "name": "timeout",
          "type": "float",
          "required": false,
          "default": null,
          "description": "Request timeout in seconds",
          "validation": {}
        },
        {
          "name": "auth_type",
          "type": "enum",
          "required": false,
          "default": null,
          "description": "Authentication type",
          "validation": {
            "allowedValues": [
              "none",
              "bearer",
              "basic",
              "api_key"
            ]
          }
        },
        {
          "name": "auth_config",
          "type": "Dict[str, Any]",
          "required": false,
          "default": null,
          "description": "Authentication configuration",
          "validation": {}
        }
      ],
      "category": "integration",
      "icon": "\ud83c\udf10",
      "color": "#00BCD4"
    },
    {
      "class_name": "CodeJob",
      "display_name": "Code Job",
      "description": "Execute custom code functions",
      "fields": [
        {
          "name": "language",
          "type": "enum",
          "required": true,
          "default": null,
          "description": "Programming language",
          "validation": {
            "allowedValues": [
              "python",
              "typescript",
              "bash",
              "shell"
            ]
          }
        },
        {
          "name": "filePath",
          "type": "str",
          "required": false,
          "default": null,
          "description": "Path to code file",
          "validation": {}
        },
        {
          "name": "code",
          "type": "str",
          "required": false,
          "default": null,
          "description": "Inline code to execute (alternative to filePath)",
          "validation": {}
        },
        {
          "name": "functionName",
          "type": "str",
          "required": false,
          "default": null,
          "description": "Function to execute",
          "validation": {}
        },
        {
          "name": "timeout",
          "type": "float",
          "required": false,
          "default": null,
          "description": "Execution timeout in seconds",
          "validation": {}
        }
      ],
      "category": "compute",
      "icon": "\ud83d\udcbb",
      "color": "#9C27B0"
    },
    {
      "class_name": "Condition",
      "display_name": "Condition",
      "description": "Conditional branching based on expressions",
      "fields": [
        {
          "name": "condition_type",
          "type": "enum",
          "required": false,
          "default": "custom",
          "description": "Type of condition to evaluate",
          "validation": {
            "allowedValues": [
              "detect_max_iterations",
              "check_nodes_executed",
              "custom",
              "llm_decision"
            ]
          }
        },
        {
          "name": "expression",
          "type": "str",
          "required": false,
          "default": null,
          "description": "Boolean expression to evaluate",
          "validation": {}
        },
        {
          "name": "node_indices",
          "type": "array",
          "required": false,
          "default": null,
          "description": "Node indices for detect_max_iteration condition",
          "validation": {
            "itemType": "string"
          }
        },
        {
          "name": "person",
          "type": "str",
          "required": false,
          "default": null,
          "description": "AI agent to use for decision making",
          "validation": {}
        },
        {
          "name": "judge_by",
          "type": "str",
          "required": false,
          "default": null,
          "description": "Prompt for LLM to make a judgment",
          "validation": {}
        },
        {
          "name": "judge_by_file",
          "type": "str",
          "required": false,
          "default": null,
          "description": "External prompt file path",
          "validation": {}
        },
        {
          "name": "memorize_to",
          "type": "str",
          "required": false,
          "default": "GOLDFISH",
          "description": "Memory control strategy (e.g., GOLDFISH for fresh evaluation)",
          "validation": {}
        },
        {
          "name": "at_most",
          "type": "float",
          "required": false,
          "default": null,
          "description": "Maximum messages to keep in memory",
          "validation": {}
        },
        {
          "name": "expose_index_as",
          "type": "str",
          "required": false,
          "default": null,
          "description": "Variable name to expose the condition node's execution count (0-based index) to downstream nodes",
          "validation": {}
        },
        {
          "name": "skippable",
          "type": "bool",
          "required": false,
          "default": false,
          "description": "When true, downstream nodes can execute even if this condition hasn't been evaluated yet",
          "validation": {}
        }
      ],
      "category": "control",
      "icon": "\ud83d\udd00",
      "color": "#FF9800"
    },
    {
      "class_name": "Db",
      "display_name": "Database",
      "description": "Database operations",
      "fields": [
        {
          "name": "file",
          "type": "Any",
          "required": false,
          "default": null,
          "description": "File path or array of file paths",
          "validation": {}
        },
        {
          "name": "collection",
          "type": "str",
          "required": false,
          "default": null,
          "description": "Database collection name",
          "validation": {}
        },
        {
          "name": "sub_type",
          "type": "enum",
          "required": true,
          "default": null,
          "description": "Database operation type",
          "validation": {
            "allowedValues": [
              "fixed_prompt",
              "file",
              "code",
              "api_tool"
            ]
          }
        },
        {
          "name": "operation",
          "type": "str",
          "required": true,
          "default": null,
          "description": "Operation configuration",
          "validation": {}
        },
        {
          "name": "query",
          "type": "str",
          "required": false,
          "default": null,
          "description": "Query configuration",
          "validation": {}
        },
        {
          "name": "data",
          "type": "Dict[str, Any]",
          "required": false,
          "default": null,
          "description": "Data configuration",
          "validation": {}
        },
        {
          "name": "serialize_json",
          "type": "bool",
          "required": false,
          "default": false,
          "description": "Serialize structured data to JSON string (for backward compatibility)",
          "validation": {}
        },
        {
          "name": "format",
          "type": "str",
          "required": false,
          "default": "json",
          "description": "Data format (json, yaml, csv, text, etc.)",
          "validation": {}
        }
      ],
      "category": "integration",
      "icon": "\ud83d\uddc4\ufe0f",
      "color": "#795548"
    },
    {
      "class_name": "Endpoint",
      "display_name": "End Node",
      "description": "Exit point for diagram execution",
      "fields": [
        {
          "name": "save_to_file",
          "type": "bool",
          "required": true,
          "default": null,
          "description": "Save results to file",
          "validation": {}
        },
        {
          "name": "file_name",
          "type": "str",
          "required": false,
          "default": null,
          "description": "Output filename",
          "validation": {}
        }
      ],
      "category": "control",
      "icon": "\ud83c\udfc1",
      "color": "#F44336"
    },
    {
      "class_name": "Hook",
      "display_name": "Hook",
      "description": "Executes hooks at specific points in the diagram execution",
      "fields": [
        {
          "name": "hook_type",
          "type": "enum",
          "required": true,
          "default": "shell",
          "description": "Type of hook to execute",
          "validation": {
            "allowedValues": [
              "shell",
              "http",
              "python",
              "file"
            ]
          }
        },
        {
          "name": "command",
          "type": "str",
          "required": false,
          "default": null,
          "description": "Shell command to run (for shell hooks)",
          "validation": {}
        },
        {
          "name": "url",
          "type": "str",
          "required": false,
          "default": null,
          "description": "Webhook URL (for HTTP hooks)",
          "validation": {
            "pattern": "^https?://"
          }
        },
        {
          "name": "timeout",
          "type": "float",
          "required": false,
          "default": 60,
          "description": "Execution timeout in seconds",
          "validation": {
            "min": 1,
            "max": 300
          }
        },
        {
          "name": "retry_count",
          "type": "float",
          "required": false,
          "default": 0,
          "description": "Number of retries on failure",
          "validation": {
            "min": 0,
            "max": 5
          }
        }
      ],
      "category": "compute",
      "icon": "\ud83e\ude9d",
      "color": "#9333ea"
    },
    {
      "class_name": "IntegratedApi",
      "display_name": "Integrated API",
      "description": "Connect to external APIs like Notion, Slack, GitHub, and more",
      "fields": [
        {
          "name": "provider",
          "type": "str",
          "required": true,
          "default": null,
          "description": "API provider to connect to",
          "validation": {}
        },
        {
          "name": "operation",
          "type": "str",
          "required": true,
          "default": null,
          "description": "Operation to perform (provider-specific)",
          "validation": {}
        },
        {
          "name": "resource_id",
          "type": "str",
          "required": false,
          "default": null,
          "description": "Resource identifier (e.g., page ID, channel ID)",
          "validation": {}
        },
        {
          "name": "config",
          "type": "Dict[str, Any]",
          "required": false,
          "default": null,
          "description": "Provider-specific configuration",
          "validation": {}
        },
        {
          "name": "timeout",
          "type": "float",
          "required": false,
          "default": null,
          "description": "Request timeout in seconds",
          "validation": {
            "min": 1,
            "max": 300
          }
        },
        {
          "name": "max_retries",
          "type": "float",
          "required": false,
          "default": null,
          "description": "Maximum retry attempts",
          "validation": {
            "min": 0,
            "max": 10
          }
        }
      ],
      "category": "integration",
      "icon": "\ud83d\udd0c",
      "color": "#8b5cf6"
    },
    {
      "class_name": "JsonSchemaValidator",
      "display_name": "JSON Schema Validator",
      "description": "Validate data against JSON schema",
      "fields": [
        {
          "name": "schema_path",
          "type": "str",
          "required": false,
          "default": null,
          "description": "Path to JSON schema file",
          "validation": {}
        },
        {
          "name": "schema",
          "type": "Dict[str, Any]",
          "required": false,
          "default": null,
          "description": "Inline JSON schema",
          "validation": {}
        },
        {
          "name": "data_path",
          "type": "str",
          "required": false,
          "default": null,
          "description": "Data Path configuration",
          "validation": {}
        },
        {
          "name": "strict_mode",
          "type": "bool",
          "required": false,
          "default": null,
          "description": "Strict Mode configuration",
          "validation": {}
        },
        {
          "name": "error_on_extra",
          "type": "bool",
          "required": false,
          "default": null,
          "description": "Error On Extra configuration",
          "validation": {}
        }
      ],
      "category": "codegen",
      "icon": "\u2713",
      "color": "#8BC34A"
    },
    {
      "class_name": "PersonJob",
      "display_name": "Person Job",
      "description": "Execute tasks using AI language models",
      "fields": [
        {
          "name": "person",
          "type": "str",
          "required": false,
          "default": null,
          "description": "AI person to use",
          "validation": {}
        },
        {
          "name": "first_only_prompt",
          "type": "str",
          "required": true,
          "default": null,
          "description": "Prompt used only on first execution",
          "validation": {}
        },
        {
          "name": "first_prompt_file",
          "type": "str",
          "required": false,
          "default": null,
          "description": "External prompt file for first iteration only",
          "validation": {}
        },
        {
          "name": "default_prompt",
          "type": "str",
          "required": false,
          "default": null,
          "description": "Default prompt template",
          "validation": {}
        },
        {
          "name": "prompt_file",
          "type": "str",
          "required": false,
          "default": null,
          "description": "Path to prompt file in /files/prompts/",
          "validation": {}
        },
        {
          "name": "max_iteration",
          "type": "float",
          "required": true,
          "default": 100,
          "description": "Maximum execution iterations",
          "validation": {}
        },
        {
          "name": "memorize_to",
          "type": "str",
          "required": false,
          "default": null,
          "description": "Criteria used to select helpful messages for this task. Empty = memorize all. Special: 'GOLDFISH' for goldfish mode. Comma-separated for multiple criteria.",
          "validation": {}
        },
        {
          "name": "at_most",
          "type": "float",
          "required": false,
          "default": null,
          "description": "Select at most N messages to keep (system messages may be preserved in addition).",
          "validation": {
            "min": 1,
            "max": 500
          }
        },
        {
          "name": "ignore_person",
          "type": "str",
          "required": false,
          "default": null,
          "description": "Comma-separated list of person IDs whose messages should be excluded from memory selection.",
          "validation": {}
        },
        {
          "name": "tools",
          "type": "str",
          "required": false,
          "default": null,
          "description": "Tools available to the AI agent",
          "validation": {}
        },
        {
          "name": "text_format",
          "type": "str",
          "required": false,
          "default": null,
          "description": "JSON schema or response format for structured outputs",
          "validation": {}
        },
        {
          "name": "text_format_file",
          "type": "str",
          "required": false,
          "default": null,
          "description": "Path to Python file containing Pydantic models for structured outputs",
          "validation": {}
        },
        {
          "name": "resolved_prompt",
          "type": "str",
          "required": false,
          "default": null,
          "description": "Pre-resolved prompt content from compile-time",
          "validation": {}
        },
        {
          "name": "resolved_first_prompt",
          "type": "str",
          "required": false,
          "default": null,
          "description": "Pre-resolved first prompt content from compile-time",
          "validation": {}
        },
        {
          "name": "batch",
          "type": "bool",
          "required": false,
          "default": false,
          "description": "Enable batch mode for processing multiple items",
          "validation": {}
        },
        {
          "name": "batch_input_key",
          "type": "str",
          "required": false,
          "default": "items",
          "description": "Key containing the array to iterate over in batch mode",
          "validation": {}
        },
        {
          "name": "batch_parallel",
          "type": "bool",
          "required": false,
          "default": true,
          "description": "Execute batch items in parallel",
          "validation": {}
        },
        {
          "name": "max_concurrent",
          "type": "float",
          "required": false,
          "default": 10,
          "description": "Maximum concurrent executions in batch mode",
          "validation": {
            "min": 1,
            "max": 100
          }
        }
      ],
      "category": "ai",
      "icon": "\ud83e\udd16",
      "color": "#2196F3"
    },
    {
      "class_name": "Start",
      "display_name": "Start Node",
      "description": "Entry point for diagram execution",
      "fields": [
        {
          "name": "trigger_mode",
          "type": "enum",
          "required": false,
          "default": "none",
          "description": "How this start node is triggered",
          "validation": {
            "allowedValues": [
              "none",
              "manual",
              "hook"
            ]
          }
        },
        {
          "name": "custom_data",
          "type": "Any",
          "required": false,
          "default": null,
          "description": "Custom data to pass when manually triggered",
          "validation": {}
        },
        {
          "name": "output_data_structure",
          "type": "Dict[str, Any]",
          "required": false,
          "default": null,
          "description": "Expected output data structure",
          "validation": {}
        },
        {
          "name": "hook_event",
          "type": "str",
          "required": false,
          "default": null,
          "description": "Event name to listen for",
          "validation": {}
        },
        {
          "name": "hook_filters",
          "type": "Dict[str, Any]",
          "required": false,
          "default": null,
          "description": "Filters to apply to incoming events",
          "validation": {}
        }
      ],
      "category": "control",
      "icon": "\ud83d\ude80",
      "color": "#4CAF50"
    },
    {
      "class_name": "SubDiagram",
      "display_name": "Sub-Diagram",
      "description": "Execute another diagram as a node within the current diagram",
      "fields": [
        {
          "name": "diagram_name",
          "type": "str",
          "required": false,
          "default": null,
          "description": "Name of the diagram to execute (e.g., 'workflow/process')",
          "validation": {}
        },
        {
          "name": "diagram_data",
          "type": "Dict[str, Any]",
          "required": false,
          "default": null,
          "description": "Inline diagram data (alternative to diagram_name)",
          "validation": {}
        },
        {
          "name": "input_mapping",
          "type": "Dict[str, Any]",
          "required": false,
          "default": null,
          "description": "Map node inputs to sub-diagram variables",
          "validation": {}
        },
        {
          "name": "output_mapping",
          "type": "Dict[str, Any]",
          "required": false,
          "default": null,
          "description": "Map sub-diagram outputs to node outputs",
          "validation": {}
        },
        {
          "name": "timeout",
          "type": "float",
          "required": false,
          "default": null,
          "description": "Execution timeout in seconds",
          "validation": {
            "min": 1,
            "max": 3600
          }
        },
        {
          "name": "wait_for_completion",
          "type": "bool",
          "required": false,
          "default": true,
          "description": "Whether to wait for sub-diagram completion",
          "validation": {}
        },
        {
          "name": "isolate_conversation",
          "type": "bool",
          "required": false,
          "default": false,
          "description": "Create isolated conversation context for sub-diagram",
          "validation": {}
        },
        {
          "name": "ignoreIfSub",
          "type": "bool",
          "required": false,
          "default": false,
          "description": "Skip execution if this diagram is being run as a sub-diagram",
          "validation": {}
        },
        {
          "name": "diagram_format",
          "type": "enum",
          "required": false,
          "default": null,
          "description": "Format of the diagram file (yaml, json, or light)",
          "validation": {
            "allowedValues": [
              "yaml",
              "json",
              "light"
            ]
          }
        },
        {
          "name": "batch",
          "type": "bool",
          "required": false,
          "default": false,
          "description": "Execute sub-diagram in batch mode for multiple inputs",
          "validation": {}
        },
        {
          "name": "batch_input_key",
          "type": "str",
          "required": false,
          "default": null,
          "description": "Key in inputs containing the array of items for batch processing",
          "validation": {}
        },
        {
          "name": "batch_parallel",
          "type": "bool",
          "required": false,
          "default": false,
          "description": "Execute batch items in parallel",
          "validation": {}
        }
      ],
      "category": "compute",
      "icon": "\ud83d\udcca",
      "color": "#8B5CF6"
    },
    {
      "class_name": "TemplateJob",
      "display_name": "Template Job",
      "description": "Process templates with data",
      "fields": [
        {
          "name": "template_path",
          "type": "str",
          "required": false,
          "default": null,
          "description": "Path to template file",
          "validation": {}
        },
        {
          "name": "template_content",
          "type": "str",
          "required": false,
          "default": null,
          "description": "Inline template content",
          "validation": {}
        },
        {
          "name": "output_path",
          "type": "str",
          "required": false,
          "default": null,
          "description": "Output file path",
          "validation": {}
        },
        {
          "name": "variables",
          "type": "Dict[str, Any]",
          "required": false,
          "default": null,
          "description": "Variables configuration",
          "validation": {}
        },
        {
          "name": "engine",
          "type": "enum",
          "required": false,
          "default": "jinja2",
          "description": "Template engine to use",
          "validation": {
            "allowedValues": [
              "internal",
              "jinja2"
            ]
          }
        },
        {
          "name": "preprocessor",
          "type": "str",
          "required": false,
          "default": null,
          "description": "Preprocessor function to apply before templating",
          "validation": {}
        }
      ],
      "category": "codegen",
      "icon": "\ud83d\udcdd",
      "color": "#3F51B5"
    },
    {
      "class_name": "TypescriptAst",
      "display_name": "TypeScript AST Parser",
      "description": "Parses TypeScript source code and extracts AST, interfaces, types, and enums",
      "fields": [
        {
          "name": "source",
          "type": "str",
          "required": true,
          "default": null,
          "description": "TypeScript source code to parse",
          "validation": {}
        },
        {
          "name": "extractPatterns",
          "type": "array",
          "required": false,
          "default": [
            "interface",
            "type",
            "enum"
          ],
          "description": "Patterns to extract from the AST",
          "validation": {
            "itemType": "string",
            "allowedValues": [
              "interface",
              "type",
              "enum",
              "class",
              "function",
              "const",
              "export"
            ]
          }
        },
        {
          "name": "includeJSDoc",
          "type": "bool",
          "required": false,
          "default": false,
          "description": "Include JSDoc comments in the extracted data",
          "validation": {}
        },
        {
          "name": "parseMode",
          "type": "enum",
          "required": false,
          "default": "module",
          "description": "TypeScript parsing mode",
          "validation": {
            "allowedValues": [
              "module",
              "script"
            ]
          }
        },
        {
          "name": "transformEnums",
          "type": "bool",
          "required": false,
          "default": false,
          "description": "Transform enum definitions to a simpler format",
          "validation": {}
        },
        {
          "name": "flattenOutput",
          "type": "bool",
          "required": false,
          "default": false,
          "description": "Flatten the output structure for easier consumption",
          "validation": {}
        },
        {
          "name": "outputFormat",
          "type": "enum",
          "required": false,
          "default": "standard",
          "description": "Output format for the parsed data",
          "validation": {
            "allowedValues": [
              "standard",
              "for_codegen",
              "for_analysis"
            ]
          }
        },
        {
          "name": "batch",
          "type": "bool",
          "required": false,
          "default": false,
          "description": "Enable batch processing mode",
          "validation": {}
        },
        {
          "name": "batchInputKey",
          "type": "str",
          "required": false,
          "default": "sources",
          "description": "Key to extract batch items from input",
          "validation": {}
        }
      ],
      "category": "codegen",
      "icon": "\ud83d\udd0d",
      "color": "#3178c6"
    },
    {
      "class_name": "UserResponse",
      "display_name": "User Response",
      "description": "Collect user input",
      "fields": [
        {
          "name": "prompt",
          "type": "str",
          "required": true,
          "default": null,
          "description": "Question to ask the user",
          "validation": {}
        },
        {
          "name": "timeout",
          "type": "float",
          "required": false,
          "default": 300,
          "description": "Response timeout in seconds",
          "validation": {}
        }
      ],
      "category": "integration",
      "icon": "\ud83d\udcac",
      "color": "#E91E63"
    }
  ],
  "factory_data": {
    "nodes": [
      {
        "type": "api_job",
        "name": "ApiJob",
        "display_name": "API Job",
        "category": "integration",
        "fields": [
          "url",
          "method",
          "headers",
          "params",
          "body",
          "timeout",
          "auth_type",
          "auth_config"
        ]
      },
      {
        "type": "code_job",
        "name": "CodeJob",
        "display_name": "Code Job",
        "category": "compute",
        "fields": [
          "language",
          "filePath",
          "code",
          "functionName",
          "timeout"
        ]
      },
      {
        "type": "condition",
        "name": "Condition",
        "display_name": "Condition",
        "category": "control",
        "fields": [
          "condition_type",
          "expression",
          "node_indices",
          "person",
          "judge_by",
          "judge_by_file",
          "memorize_to",
          "at_most",
          "expose_index_as",
          "skippable"
        ]
      },
      {
        "type": "db",
        "name": "Db",
        "display_name": "Database",
        "category": "integration",
        "fields": [
          "file",
          "collection",
          "sub_type",
          "operation",
          "query",
          "data",
          "serialize_json",
          "format"
        ]
      },
      {
        "type": "endpoint",
        "name": "Endpoint",
        "display_name": "End Node",
        "category": "control",
        "fields": [
          "save_to_file",
          "file_name"
        ]
      },
      {
        "type": "hook",
        "name": "Hook",
        "display_name": "Hook",
        "category": "compute",
        "fields": [
          "hook_type",
          "command",
          "url",
          "timeout",
          "retry_count"
        ]
      },
      {
        "type": "integrated_api",
        "name": "IntegratedApi",
        "display_name": "Integrated API",
        "category": "integration",
        "fields": [
          "provider",
          "operation",
          "resource_id",
          "config",
          "timeout",
          "max_retries"
        ]
      },
      {
        "type": "json_schema_validator",
        "name": "JsonSchemaValidator",
        "display_name": "JSON Schema Validator",
        "category": "codegen",
        "fields": [
          "schema_path",
          "schema",
          "data_path",
          "strict_mode",
          "error_on_extra"
        ]
      },
      {
        "type": "person_job",
        "name": "PersonJob",
        "display_name": "Person Job",
        "category": "ai",
        "fields": [
          "person",
          "first_only_prompt",
          "first_prompt_file",
          "default_prompt",
          "prompt_file",
          "max_iteration",
          "memorize_to",
          "at_most",
          "ignore_person",
          "tools",
          "text_format",
          "text_format_file",
          "resolved_prompt",
          "resolved_first_prompt",
          "batch",
          "batch_input_key",
          "batch_parallel",
          "max_concurrent"
        ]
      },
      {
        "type": "start",
        "name": "Start",
        "display_name": "Start Node",
        "category": "control",
        "fields": [
          "trigger_mode",
          "custom_data",
          "output_data_structure",
          "hook_event",
          "hook_filters"
        ]
      },
      {
        "type": "sub_diagram",
        "name": "SubDiagram",
        "display_name": "Sub-Diagram",
        "category": "compute",
        "fields": [
          "diagram_name",
          "diagram_data",
          "input_mapping",
          "output_mapping",
          "timeout",
          "wait_for_completion",
          "isolate_conversation",
          "ignoreIfSub",
          "diagram_format",
          "batch",
          "batch_input_key",
          "batch_parallel"
        ]
      },
      {
        "type": "template_job",
        "name": "TemplateJob",
        "display_name": "Template Job",
        "category": "codegen",
        "fields": [
          "template_path",
          "template_content",
          "output_path",
          "variables",
          "engine",
          "preprocessor"
        ]
      },
      {
        "type": "typescript_ast",
        "name": "TypescriptAst",
        "display_name": "TypeScript AST Parser",
        "category": "codegen",
        "fields": [
          "source",
          "extractPatterns",
          "includeJSDoc",
          "parseMode",
          "transformEnums",
          "flattenOutput",
          "outputFormat",
          "batch",
          "batchInputKey"
        ]
      },
      {
        "type": "user_response",
        "name": "UserResponse",
        "display_name": "User Response",
        "category": "integration",
        "fields": [
          "prompt",
          "timeout"
        ]
      }
    ],
    "node_map": {
      "api_job": "ApiJob",
      "code_job": "CodeJob",
      "condition": "Condition",
      "db": "Db",
      "endpoint": "Endpoint",
      "hook": "Hook",
      "integrated_api": "IntegratedApi",
      "json_schema_validator": "JsonSchemaValidator",
      "person_job": "PersonJob",
      "start": "Start",
      "sub_diagram": "SubDiagram",
      "template_job": "TemplateJob",
      "typescript_ast": "TypescriptAst",
      "user_response": "UserResponse"
    },
    "categories": [
      "ai",
      "codegen",
      "compute",
      "control",
      "integration"
    ]
  },
  "typescript_indexes": {
    "node_specs": [],
    "types": [],
    "utils": []
  },
  "metadata": {
    "node_count": 14,
    "enum_count": 26,
    "integration_model_count": 6,
    "categories": [
      "ai",
      "codegen",
      "compute",
      "control",
      "integration"
    ]
  }
}
