{
  "version": 1,
  "generated_at": "2025-09-16T16:57:05.755662",
  "interfaces": [
    {
      "name": "CliSession",
      "properties": [
        {
          "name": "id",
          "type": "CliSessionID",
          "optional": false,
          "description": ""
        },
        {
          "name": "session_id",
          "type": "str",
          "optional": false,
          "description": ""
        },
        {
          "name": "user_id",
          "type": "str",
          "optional": true,
          "description": ""
        },
        {
          "name": "started_at",
          "type": "str",
          "optional": false,
          "description": ""
        },
        {
          "name": "last_active",
          "type": "str",
          "optional": true,
          "description": ""
        },
        {
          "name": "status",
          "type": "Union['active', 'inactive', 'terminated']",
          "optional": false,
          "description": ""
        },
        {
          "name": "metadata",
          "type": "Dict[str, Any]",
          "optional": true,
          "description": ""
        },
        {
          "name": "current_directory",
          "type": "str",
          "optional": true,
          "description": ""
        },
        {
          "name": "environment",
          "type": "Dict[str, str]",
          "optional": true,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "Message",
      "properties": [
        {
          "name": "id",
          "type": "str",
          "optional": true,
          "description": ""
        },
        {
          "name": "from_person_id",
          "type": "Union[PersonID, 'system']",
          "optional": false,
          "description": ""
        },
        {
          "name": "to_person_id",
          "type": "PersonID",
          "optional": false,
          "description": ""
        },
        {
          "name": "content",
          "type": "str",
          "optional": false,
          "description": ""
        },
        {
          "name": "timestamp",
          "type": "str",
          "optional": true,
          "description": ""
        },
        {
          "name": "token_count",
          "type": "float",
          "optional": true,
          "description": ""
        },
        {
          "name": "message_type",
          "type": "Union['person_to_person', 'system_to_person', 'person_to_system']",
          "optional": false,
          "description": ""
        },
        {
          "name": "metadata",
          "type": "JsonDict",
          "optional": true,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "ConversationMetadata",
      "properties": [
        {
          "name": "started_at",
          "type": "str",
          "optional": false,
          "description": ""
        },
        {
          "name": "last_message_at",
          "type": "str",
          "optional": false,
          "description": ""
        },
        {
          "name": "total_tokens",
          "type": "float",
          "optional": false,
          "description": ""
        },
        {
          "name": "message_count",
          "type": "float",
          "optional": false,
          "description": ""
        },
        {
          "name": "context_resets",
          "type": "float",
          "optional": false,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "Conversation",
      "properties": [
        {
          "name": "messages",
          "type": "List[Message]",
          "optional": false,
          "description": ""
        },
        {
          "name": "metadata",
          "type": "ConversationMetadata",
          "optional": true,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "Vec2",
      "properties": [
        {
          "name": "x",
          "type": "float",
          "optional": false,
          "description": ""
        },
        {
          "name": "y",
          "type": "float",
          "optional": false,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "DomainHandle",
      "properties": [
        {
          "name": "id",
          "type": "HandleID",
          "optional": false,
          "description": ""
        },
        {
          "name": "node_id",
          "type": "NodeID",
          "optional": false,
          "description": ""
        },
        {
          "name": "label",
          "type": "HandleLabel",
          "optional": false,
          "description": ""
        },
        {
          "name": "direction",
          "type": "HandleDirection",
          "optional": false,
          "description": ""
        },
        {
          "name": "data_type",
          "type": "DataType",
          "optional": false,
          "description": ""
        },
        {
          "name": "position",
          "type": "Optional[str]",
          "optional": true,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "DomainNode",
      "properties": [
        {
          "name": "id",
          "type": "NodeID",
          "optional": false,
          "description": ""
        },
        {
          "name": "type",
          "type": "NodeType",
          "optional": false,
          "description": ""
        },
        {
          "name": "position",
          "type": "Vec2",
          "optional": false,
          "description": ""
        },
        {
          "name": "data",
          "type": "JsonDict",
          "optional": false,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "DomainArrow",
      "properties": [
        {
          "name": "id",
          "type": "ArrowID",
          "optional": false,
          "description": ""
        },
        {
          "name": "source",
          "type": "HandleID",
          "optional": false,
          "description": ""
        },
        {
          "name": "target",
          "type": "HandleID",
          "optional": false,
          "description": ""
        },
        {
          "name": "content_type",
          "type": "Optional[ContentType]",
          "optional": true,
          "description": ""
        },
        {
          "name": "label",
          "type": "Optional[str]",
          "optional": true,
          "description": ""
        },
        {
          "name": "packing",
          "type": "Union['pack', 'spread']",
          "optional": true,
          "description": ""
        },
        {
          "name": "execution_priority",
          "type": "Optional[float]",
          "optional": true,
          "description": ""
        },
        {
          "name": "data",
          "type": "Optional[Dict[str, Any]]",
          "optional": true,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "DomainPerson",
      "properties": [
        {
          "name": "id",
          "type": "PersonID",
          "optional": false,
          "description": ""
        },
        {
          "name": "label",
          "type": "str",
          "optional": false,
          "description": ""
        },
        {
          "name": "llm_config",
          "type": "PersonLLMConfig",
          "optional": false,
          "description": ""
        },
        {
          "name": "type",
          "type": "'person'",
          "optional": false,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "DomainApiKey",
      "properties": [
        {
          "name": "id",
          "type": "ApiKeyID",
          "optional": false,
          "description": ""
        },
        {
          "name": "label",
          "type": "str",
          "optional": false,
          "description": ""
        },
        {
          "name": "service",
          "type": "APIServiceType",
          "optional": false,
          "description": ""
        },
        {
          "name": "key",
          "type": "str",
          "optional": true,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "DiagramMetadata",
      "properties": [
        {
          "name": "id",
          "type": "Optional[DiagramID]",
          "optional": true,
          "description": ""
        },
        {
          "name": "name",
          "type": "Optional[str]",
          "optional": true,
          "description": ""
        },
        {
          "name": "description",
          "type": "Optional[str]",
          "optional": true,
          "description": ""
        },
        {
          "name": "version",
          "type": "str",
          "optional": false,
          "description": ""
        },
        {
          "name": "created",
          "type": "str",
          "optional": false,
          "description": ""
        },
        {
          "name": "modified",
          "type": "str",
          "optional": false,
          "description": ""
        },
        {
          "name": "author",
          "type": "Optional[str]",
          "optional": true,
          "description": ""
        },
        {
          "name": "tags",
          "type": "Optional[List[str]]",
          "optional": true,
          "description": ""
        },
        {
          "name": "format",
          "type": "Optional[str]",
          "optional": true,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "DomainDiagram",
      "properties": [
        {
          "name": "nodes",
          "type": "List[DomainNode]",
          "optional": false,
          "description": ""
        },
        {
          "name": "handles",
          "type": "List[DomainHandle]",
          "optional": false,
          "description": ""
        },
        {
          "name": "arrows",
          "type": "List[DomainArrow]",
          "optional": false,
          "description": ""
        },
        {
          "name": "persons",
          "type": "List[DomainPerson]",
          "optional": false,
          "description": ""
        },
        {
          "name": "metadata",
          "type": "Optional[DiagramMetadata]",
          "optional": true,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "LLMUsage",
      "properties": [
        {
          "name": "input",
          "type": "float",
          "optional": false,
          "description": ""
        },
        {
          "name": "output",
          "type": "float",
          "optional": false,
          "description": ""
        },
        {
          "name": "cached",
          "type": "Optional[float]",
          "optional": true,
          "description": ""
        },
        {
          "name": "total",
          "type": "float",
          "optional": true,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "NodeState",
      "properties": [
        {
          "name": "status",
          "type": "Status",
          "optional": false,
          "description": ""
        },
        {
          "name": "started_at",
          "type": "Optional[str]",
          "optional": true,
          "description": ""
        },
        {
          "name": "ended_at",
          "type": "Optional[str]",
          "optional": true,
          "description": ""
        },
        {
          "name": "error",
          "type": "Optional[str]",
          "optional": true,
          "description": ""
        },
        {
          "name": "llm_usage",
          "type": "Optional[LLMUsage]",
          "optional": true,
          "description": ""
        },
        {
          "name": "output",
          "type": "Optional[Dict[str, Any]]",
          "optional": true,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "NodeMetrics",
      "properties": [
        {
          "name": "node_id",
          "type": "str",
          "optional": false,
          "description": ""
        },
        {
          "name": "node_type",
          "type": "str",
          "optional": false,
          "description": ""
        },
        {
          "name": "start_time",
          "type": "float",
          "optional": false,
          "description": ""
        },
        {
          "name": "end_time",
          "type": "Optional[float]",
          "optional": true,
          "description": ""
        },
        {
          "name": "duration_ms",
          "type": "Optional[float]",
          "optional": true,
          "description": ""
        },
        {
          "name": "memory_usage",
          "type": "Optional[float]",
          "optional": true,
          "description": ""
        },
        {
          "name": "llm_usage",
          "type": "Optional[LLMUsage]",
          "optional": true,
          "description": ""
        },
        {
          "name": "error",
          "type": "Optional[str]",
          "optional": true,
          "description": ""
        },
        {
          "name": "dependencies",
          "type": "List[str]",
          "optional": true,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "Bottleneck",
      "properties": [
        {
          "name": "node_id",
          "type": "str",
          "optional": false,
          "description": ""
        },
        {
          "name": "node_type",
          "type": "str",
          "optional": false,
          "description": ""
        },
        {
          "name": "duration_ms",
          "type": "float",
          "optional": false,
          "description": ""
        },
        {
          "name": "percentage",
          "type": "float",
          "optional": false,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "ExecutionMetrics",
      "properties": [
        {
          "name": "execution_id",
          "type": "ExecutionID",
          "optional": false,
          "description": ""
        },
        {
          "name": "start_time",
          "type": "float",
          "optional": false,
          "description": ""
        },
        {
          "name": "end_time",
          "type": "Optional[float]",
          "optional": true,
          "description": ""
        },
        {
          "name": "total_duration_ms",
          "type": "Optional[float]",
          "optional": true,
          "description": ""
        },
        {
          "name": "node_metrics",
          "type": "Record<string, NodeMetrics>",
          "optional": false,
          "description": ""
        },
        {
          "name": "critical_path",
          "type": "List[str]",
          "optional": true,
          "description": ""
        },
        {
          "name": "parallelizable_groups",
          "type": "List[List[str]]",
          "optional": true,
          "description": ""
        },
        {
          "name": "bottlenecks",
          "type": "List[Bottleneck]",
          "optional": true,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "EnvelopeMeta",
      "properties": [
        {
          "name": "node_id",
          "type": "str",
          "optional": true,
          "description": ""
        },
        {
          "name": "llm_usage",
          "type": "LLMUsage",
          "optional": true,
          "description": ""
        },
        {
          "name": "execution_time",
          "type": "float",
          "optional": true,
          "description": ""
        },
        {
          "name": "retry_count",
          "type": "float",
          "optional": true,
          "description": ""
        },
        {
          "name": "error",
          "type": "str",
          "optional": true,
          "description": ""
        },
        {
          "name": "error_type",
          "type": "str",
          "optional": true,
          "description": ""
        },
        {
          "name": "timestamp",
          "type": "Union[str, float]",
          "optional": true,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "SerializedEnvelope",
      "properties": [
        {
          "name": "envelope_format",
          "type": "true",
          "optional": false,
          "description": ""
        },
        {
          "name": "id",
          "type": "str",
          "optional": false,
          "description": ""
        },
        {
          "name": "trace_id",
          "type": "str",
          "optional": false,
          "description": ""
        },
        {
          "name": "produced_by",
          "type": "str",
          "optional": false,
          "description": ""
        },
        {
          "name": "content_type",
          "type": "str",
          "optional": false,
          "description": ""
        },
        {
          "name": "schema_id",
          "type": "str",
          "optional": true,
          "description": ""
        },
        {
          "name": "serialization_format",
          "type": "str",
          "optional": true,
          "description": ""
        },
        {
          "name": "body",
          "type": "JSONScalar",
          "optional": false,
          "description": ""
        },
        {
          "name": "meta",
          "type": "EnvelopeMeta",
          "optional": false,
          "description": ""
        },
        {
          "name": "representations",
          "type": "Dict[str, Any]",
          "optional": true,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "ExecutionState",
      "properties": [
        {
          "name": "id",
          "type": "ExecutionID",
          "optional": false,
          "description": ""
        },
        {
          "name": "status",
          "type": "Status",
          "optional": false,
          "description": ""
        },
        {
          "name": "diagram_id",
          "type": "Optional[DiagramID]",
          "optional": true,
          "description": ""
        },
        {
          "name": "started_at",
          "type": "str",
          "optional": false,
          "description": ""
        },
        {
          "name": "ended_at",
          "type": "Optional[str]",
          "optional": true,
          "description": ""
        },
        {
          "name": "node_states",
          "type": "Record<string, NodeState>",
          "optional": false,
          "description": ""
        },
        {
          "name": "node_outputs",
          "type": "Record<string, SerializedNodeOutput>",
          "optional": false,
          "description": ""
        },
        {
          "name": "llm_usage",
          "type": "LLMUsage",
          "optional": false,
          "description": ""
        },
        {
          "name": "error",
          "type": "Optional[str]",
          "optional": true,
          "description": ""
        },
        {
          "name": "variables",
          "type": "JsonDict",
          "optional": true,
          "description": ""
        },
        {
          "name": "metadata",
          "type": "JsonDict",
          "optional": true,
          "description": ""
        },
        {
          "name": "duration_seconds",
          "type": "Optional[float]",
          "optional": true,
          "description": ""
        },
        {
          "name": "is_active",
          "type": "bool",
          "optional": true,
          "description": ""
        },
        {
          "name": "exec_counts",
          "type": "Record<string, number>",
          "optional": false,
          "description": ""
        },
        {
          "name": "executed_nodes",
          "type": "List[str]",
          "optional": false,
          "description": ""
        },
        {
          "name": "metrics",
          "type": "Optional[ExecutionMetrics]",
          "optional": true,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "InteractivePromptData",
      "properties": [
        {
          "name": "node_id",
          "type": "NodeID",
          "optional": false,
          "description": ""
        },
        {
          "name": "prompt",
          "type": "str",
          "optional": false,
          "description": ""
        },
        {
          "name": "timeout",
          "type": "float",
          "optional": true,
          "description": ""
        },
        {
          "name": "default_value",
          "type": "Optional[str]",
          "optional": true,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "ExecutionUpdate",
      "properties": [
        {
          "name": "type",
          "type": "EventType",
          "optional": false,
          "description": ""
        },
        {
          "name": "execution_id",
          "type": "ExecutionID",
          "optional": false,
          "description": ""
        },
        {
          "name": "node_id",
          "type": "NodeID",
          "optional": true,
          "description": ""
        },
        {
          "name": "status",
          "type": "Status",
          "optional": true,
          "description": ""
        },
        {
          "name": "result",
          "type": "JsonValue",
          "optional": true,
          "description": ""
        },
        {
          "name": "error",
          "type": "str",
          "optional": true,
          "description": ""
        },
        {
          "name": "timestamp",
          "type": "str",
          "optional": true,
          "description": ""
        },
        {
          "name": "total_tokens",
          "type": "float",
          "optional": true,
          "description": ""
        },
        {
          "name": "node_type",
          "type": "str",
          "optional": true,
          "description": ""
        },
        {
          "name": "tokens",
          "type": "float",
          "optional": true,
          "description": ""
        },
        {
          "name": "data",
          "type": "Dict[str, Any]",
          "optional": true,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "NodeDefinition",
      "properties": [
        {
          "name": "type",
          "type": "str",
          "optional": false,
          "description": ""
        },
        {
          "name": "node_schema",
          "type": "JSONScalar",
          "optional": false,
          "description": ""
        },
        {
          "name": "handler",
          "type": "JSONScalar",
          "optional": false,
          "description": ""
        },
        {
          "name": "requires_services",
          "type": "List[str]",
          "optional": true,
          "description": ""
        },
        {
          "name": "description",
          "type": "str",
          "optional": true,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "File",
      "properties": [
        {
          "name": "id",
          "type": "FileID",
          "optional": false,
          "description": ""
        },
        {
          "name": "name",
          "type": "str",
          "optional": false,
          "description": ""
        },
        {
          "name": "path",
          "type": "str",
          "optional": false,
          "description": ""
        },
        {
          "name": "content",
          "type": "str",
          "optional": true,
          "description": ""
        },
        {
          "name": "size",
          "type": "float",
          "optional": true,
          "description": ""
        },
        {
          "name": "mime_type",
          "type": "str",
          "optional": true,
          "description": ""
        },
        {
          "name": "created_at",
          "type": "str",
          "optional": true,
          "description": ""
        },
        {
          "name": "modified_at",
          "type": "str",
          "optional": true,
          "description": ""
        },
        {
          "name": "metadata",
          "type": "Dict[str, Any]",
          "optional": true,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "ToolOutput",
      "properties": [
        {
          "name": "type",
          "type": "ToolType",
          "optional": false,
          "description": ""
        },
        {
          "name": "result",
          "type": "Union[List[WebSearchResult], ImageGenerationResult, JSONScalar]",
          "optional": false,
          "description": ""
        },
        {
          "name": "raw_response",
          "type": "JSONScalar",
          "optional": true,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "NodeUpdate",
      "properties": [
        {
          "name": "execution_id",
          "type": "ExecutionID",
          "optional": false,
          "description": ""
        },
        {
          "name": "node_id",
          "type": "NodeID",
          "optional": false,
          "description": ""
        },
        {
          "name": "status",
          "type": "Status",
          "optional": false,
          "description": ""
        },
        {
          "name": "progress",
          "type": "float",
          "optional": true,
          "description": ""
        },
        {
          "name": "output",
          "type": "JSONScalar",
          "optional": true,
          "description": ""
        },
        {
          "name": "error",
          "type": "str",
          "optional": true,
          "description": ""
        },
        {
          "name": "metrics",
          "type": "Dict[str, Any]",
          "optional": true,
          "description": ""
        },
        {
          "name": "timestamp",
          "type": "str",
          "optional": false,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "InteractivePrompt",
      "properties": [
        {
          "name": "execution_id",
          "type": "ExecutionID",
          "optional": false,
          "description": ""
        },
        {
          "name": "node_id",
          "type": "NodeID",
          "optional": false,
          "description": ""
        },
        {
          "name": "prompt_id",
          "type": "str",
          "optional": false,
          "description": ""
        },
        {
          "name": "prompt",
          "type": "str",
          "optional": false,
          "description": ""
        },
        {
          "name": "timeout",
          "type": "float",
          "optional": true,
          "description": ""
        },
        {
          "name": "default_value",
          "type": "Optional[str]",
          "optional": true,
          "description": ""
        },
        {
          "name": "options",
          "type": "List[str]",
          "optional": true,
          "description": ""
        },
        {
          "name": "timestamp",
          "type": "str",
          "optional": false,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "ExecutionLogEntry",
      "properties": [
        {
          "name": "execution_id",
          "type": "ExecutionID",
          "optional": false,
          "description": ""
        },
        {
          "name": "node_id",
          "type": "NodeID",
          "optional": true,
          "description": ""
        },
        {
          "name": "level",
          "type": "Union['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL']",
          "optional": false,
          "description": ""
        },
        {
          "name": "message",
          "type": "str",
          "optional": false,
          "description": ""
        },
        {
          "name": "context",
          "type": "Dict[str, Any]",
          "optional": true,
          "description": ""
        },
        {
          "name": "timestamp",
          "type": "str",
          "optional": false,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "KeepalivePayload",
      "properties": [
        {
          "name": "type",
          "type": "'keepalive'",
          "optional": false,
          "description": ""
        },
        {
          "name": "timestamp",
          "type": "str",
          "optional": false,
          "description": ""
        }
      ],
      "description": ""
    }
  ],
  "scalars": [
    {
      "name": "CliSessionID",
      "type": "string",
      "description": "Branded scalar type for CliSessionID"
    },
    {
      "name": "NodeID",
      "type": "string",
      "description": "Branded scalar type for NodeID"
    },
    {
      "name": "ArrowID",
      "type": "string",
      "description": "Branded scalar type for ArrowID"
    },
    {
      "name": "HandleID",
      "type": "string",
      "description": "Branded scalar type for HandleID"
    },
    {
      "name": "PersonID",
      "type": "string",
      "description": "Branded scalar type for PersonID"
    },
    {
      "name": "ApiKeyID",
      "type": "string",
      "description": "Branded scalar type for ApiKeyID"
    },
    {
      "name": "DiagramID",
      "type": "string",
      "description": "Branded scalar type for DiagramID"
    },
    {
      "name": "HookID",
      "type": "string",
      "description": "Branded scalar type for HookID"
    },
    {
      "name": "TaskID",
      "type": "string",
      "description": "Branded scalar type for TaskID"
    },
    {
      "name": "ExecutionID",
      "type": "string",
      "description": "Branded scalar type for ExecutionID"
    },
    {
      "name": "FileID",
      "type": "string",
      "description": "Branded scalar type for FileID"
    }
  ],
  "enums": [
    {
      "name": "DataType",
      "values": [
        {
          "name": "ANY",
          "value": "any"
        },
        {
          "name": "STRING",
          "value": "string"
        },
        {
          "name": "NUMBER",
          "value": "number"
        },
        {
          "name": "BOOLEAN",
          "value": "boolean"
        },
        {
          "name": "OBJECT",
          "value": "object"
        },
        {
          "name": "ARRAY",
          "value": "array"
        }
      ],
      "description": ""
    },
    {
      "name": "ContentType",
      "values": [
        {
          "name": "RAW_TEXT",
          "value": "raw_text"
        },
        {
          "name": "CONVERSATION_STATE",
          "value": "conversation_state"
        },
        {
          "name": "OBJECT",
          "value": "object"
        },
        {
          "name": "EMPTY",
          "value": "empty"
        },
        {
          "name": "GENERIC",
          "value": "generic"
        },
        {
          "name": "VARIABLE",
          "value": "variable"
        },
        {
          "name": "BINARY",
          "value": "binary"
        }
      ],
      "description": ""
    },
    {
      "name": "HandleDirection",
      "values": [
        {
          "name": "INPUT",
          "value": "input"
        },
        {
          "name": "OUTPUT",
          "value": "output"
        }
      ],
      "description": ""
    },
    {
      "name": "HandleLabel",
      "values": [
        {
          "name": "DEFAULT",
          "value": "default"
        },
        {
          "name": "FIRST",
          "value": "first"
        },
        {
          "name": "CONDTRUE",
          "value": "condtrue"
        },
        {
          "name": "CONDFALSE",
          "value": "condfalse"
        },
        {
          "name": "SUCCESS",
          "value": "success"
        },
        {
          "name": "ERROR",
          "value": "error"
        },
        {
          "name": "RESULTS",
          "value": "results"
        }
      ],
      "description": ""
    },
    {
      "name": "DiagramFormat",
      "values": [
        {
          "name": "NATIVE",
          "value": "native"
        },
        {
          "name": "LIGHT",
          "value": "light"
        },
        {
          "name": "READABLE",
          "value": "readable"
        }
      ],
      "description": ""
    },
    {
      "name": "Status",
      "values": [
        {
          "name": "PENDING",
          "value": "pending"
        },
        {
          "name": "RUNNING",
          "value": "running"
        },
        {
          "name": "PAUSED",
          "value": "paused"
        },
        {
          "name": "COMPLETED",
          "value": "completed"
        },
        {
          "name": "FAILED",
          "value": "failed"
        },
        {
          "name": "ABORTED",
          "value": "aborted"
        },
        {
          "name": "SKIPPED",
          "value": "skipped"
        },
        {
          "name": "MAXITER_REACHED",
          "value": "maxiter_reached"
        }
      ],
      "description": ""
    },
    {
      "name": "FlowStatus",
      "values": [
        {
          "name": "WAITING",
          "value": "waiting"
        },
        {
          "name": "READY",
          "value": "ready"
        },
        {
          "name": "RUNNING",
          "value": "running"
        },
        {
          "name": "BLOCKED",
          "value": "blocked"
        }
      ],
      "description": ""
    },
    {
      "name": "CompletionStatus",
      "values": [
        {
          "name": "SUCCESS",
          "value": "success"
        },
        {
          "name": "FAILED",
          "value": "failed"
        },
        {
          "name": "SKIPPED",
          "value": "skipped"
        },
        {
          "name": "MAX_ITER",
          "value": "max_iter"
        }
      ],
      "description": ""
    },
    {
      "name": "ExecutionPhase",
      "values": [
        {
          "name": "MEMORY_SELECTION",
          "value": "memory_selection"
        },
        {
          "name": "DIRECT_EXECUTION",
          "value": "direct_execution"
        },
        {
          "name": "DECISION_EVALUATION",
          "value": "decision_evaluation"
        },
        {
          "name": "DEFAULT",
          "value": "default"
        }
      ],
      "description": ""
    },
    {
      "name": "EventType",
      "values": [
        {
          "name": "EXECUTION_STARTED",
          "value": "execution_started"
        },
        {
          "name": "EXECUTION_COMPLETED",
          "value": "execution_completed"
        },
        {
          "name": "EXECUTION_ERROR",
          "value": "execution_error"
        },
        {
          "name": "EXECUTION_STATUS_CHANGED",
          "value": "execution_status_changed"
        },
        {
          "name": "NODE_STARTED",
          "value": "node_started"
        },
        {
          "name": "NODE_COMPLETED",
          "value": "node_completed"
        },
        {
          "name": "NODE_ERROR",
          "value": "node_error"
        },
        {
          "name": "NODE_OUTPUT",
          "value": "node_output"
        },
        {
          "name": "NODE_STATUS_CHANGED",
          "value": "node_status_changed"
        },
        {
          "name": "NODE_PROGRESS",
          "value": "node_progress"
        },
        {
          "name": "METRICS_COLLECTED",
          "value": "metrics_collected"
        },
        {
          "name": "OPTIMIZATION_SUGGESTED",
          "value": "optimization_suggested"
        },
        {
          "name": "WEBHOOK_RECEIVED",
          "value": "webhook_received"
        },
        {
          "name": "INTERACTIVE_PROMPT",
          "value": "interactive_prompt"
        },
        {
          "name": "INTERACTIVE_RESPONSE",
          "value": "interactive_response"
        },
        {
          "name": "EXECUTION_UPDATE",
          "value": "execution_update"
        },
        {
          "name": "EXECUTION_LOG",
          "value": "execution_log"
        },
        {
          "name": "KEEPALIVE",
          "value": "keepalive"
        }
      ],
      "description": ""
    },
    {
      "name": "LLMService",
      "values": [
        {
          "name": "OPENAI",
          "value": "openai"
        },
        {
          "name": "ANTHROPIC",
          "value": "anthropic"
        },
        {
          "name": "CLAUDE_CODE",
          "value": "claude-code"
        },
        {
          "name": "GOOGLE",
          "value": "google"
        },
        {
          "name": "GEMINI",
          "value": "gemini"
        },
        {
          "name": "BEDROCK",
          "value": "bedrock"
        },
        {
          "name": "VERTEX",
          "value": "vertex"
        },
        {
          "name": "DEEPSEEK",
          "value": "deepseek"
        },
        {
          "name": "OLLAMA",
          "value": "ollama"
        }
      ],
      "description": ""
    },
    {
      "name": "APIServiceType",
      "values": [
        {
          "name": "OPENAI",
          "value": "openai"
        },
        {
          "name": "ANTHROPIC",
          "value": "anthropic"
        },
        {
          "name": "GOOGLE",
          "value": "google"
        },
        {
          "name": "GEMINI",
          "value": "gemini"
        },
        {
          "name": "BEDROCK",
          "value": "bedrock"
        },
        {
          "name": "VERTEX",
          "value": "vertex"
        },
        {
          "name": "DEEPSEEK",
          "value": "deepseek"
        },
        {
          "name": "OLLAMA",
          "value": "ollama"
        },
        {
          "name": "CLAUDE_CODE",
          "value": "claude-code"
        }
      ],
      "description": ""
    },
    {
      "name": "ToolType",
      "values": [
        {
          "name": "WEB_SEARCH",
          "value": "web_search"
        },
        {
          "name": "WEB_SEARCH_PREVIEW",
          "value": "web_search_preview"
        },
        {
          "name": "IMAGE_GENERATION",
          "value": "image_generation"
        }
      ],
      "description": ""
    },
    {
      "name": "ToolSelection",
      "values": [
        {
          "name": "NONE",
          "value": "none"
        },
        {
          "name": "IMAGE",
          "value": "image"
        },
        {
          "name": "WEBSEARCH",
          "value": "websearch"
        }
      ],
      "description": ""
    },
    {
      "name": "AuthType",
      "values": [
        {
          "name": "NONE",
          "value": "none"
        },
        {
          "name": "BEARER",
          "value": "bearer"
        },
        {
          "name": "BASIC",
          "value": "basic"
        },
        {
          "name": "API_KEY",
          "value": "api_key"
        }
      ],
      "description": ""
    },
    {
      "name": "RetryStrategy",
      "values": [
        {
          "name": "NONE",
          "value": "none"
        },
        {
          "name": "LINEAR",
          "value": "linear"
        },
        {
          "name": "EXPONENTIAL",
          "value": "exponential"
        },
        {
          "name": "FIBONACCI",
          "value": "fibonacci"
        },
        {
          "name": "CONSTANT",
          "value": "constant"
        },
        {
          "name": "EXPONENTIAL_BACKOFF",
          "value": "exponential_backoff"
        },
        {
          "name": "LINEAR_BACKOFF",
          "value": "linear_backoff"
        },
        {
          "name": "FIXED_DELAY",
          "value": "fixed_delay"
        }
      ],
      "description": ""
    },
    {
      "name": "DBBlockSubType",
      "values": [
        {
          "name": "FIXED_PROMPT",
          "value": "fixed_prompt"
        },
        {
          "name": "FILE",
          "value": "file"
        },
        {
          "name": "CODE",
          "value": "code"
        },
        {
          "name": "API_TOOL",
          "value": "api_tool"
        }
      ],
      "description": ""
    },
    {
      "name": "SupportedLanguage",
      "values": [
        {
          "name": "PYTHON",
          "value": "python"
        },
        {
          "name": "TYPESCRIPT",
          "value": "typescript"
        },
        {
          "name": "BASH",
          "value": "bash"
        },
        {
          "name": "SHELL",
          "value": "shell"
        }
      ],
      "description": ""
    },
    {
      "name": "HttpMethod",
      "values": [
        {
          "name": "GET",
          "value": "get"
        },
        {
          "name": "POST",
          "value": "post"
        },
        {
          "name": "PUT",
          "value": "put"
        },
        {
          "name": "DELETE",
          "value": "delete"
        },
        {
          "name": "PATCH",
          "value": "patch"
        }
      ],
      "description": ""
    },
    {
      "name": "HookType",
      "values": [
        {
          "name": "SHELL",
          "value": "shell"
        },
        {
          "name": "WEBHOOK",
          "value": "webhook"
        },
        {
          "name": "PYTHON",
          "value": "python"
        },
        {
          "name": "FILE",
          "value": "file"
        }
      ],
      "description": ""
    },
    {
      "name": "HookTriggerMode",
      "values": [
        {
          "name": "NONE",
          "value": "none"
        },
        {
          "name": "MANUAL",
          "value": "manual"
        },
        {
          "name": "HOOK",
          "value": "hook"
        }
      ],
      "description": ""
    },
    {
      "name": "ConditionType",
      "values": [
        {
          "name": "DETECT_MAX_ITERATIONS",
          "value": "detect_max_iterations"
        },
        {
          "name": "CHECK_NODES_EXECUTED",
          "value": "check_nodes_executed"
        },
        {
          "name": "CUSTOM",
          "value": "custom"
        },
        {
          "name": "LLM_DECISION",
          "value": "llm_decision"
        }
      ],
      "description": ""
    },
    {
      "name": "TemplateEngine",
      "values": [
        {
          "name": "INTERNAL",
          "value": "internal"
        },
        {
          "name": "JINJA2",
          "value": "jinja2"
        }
      ],
      "description": ""
    },
    {
      "name": "NodeType",
      "values": [
        {
          "name": "START",
          "value": "start"
        },
        {
          "name": "PERSON_JOB",
          "value": "person_job"
        },
        {
          "name": "CONDITION",
          "value": "condition"
        },
        {
          "name": "CODE_JOB",
          "value": "code_job"
        },
        {
          "name": "API_JOB",
          "value": "api_job"
        },
        {
          "name": "ENDPOINT",
          "value": "endpoint"
        },
        {
          "name": "DB",
          "value": "db"
        },
        {
          "name": "USER_RESPONSE",
          "value": "user_response"
        },
        {
          "name": "HOOK",
          "value": "hook"
        },
        {
          "name": "TEMPLATE_JOB",
          "value": "template_job"
        },
        {
          "name": "JSON_SCHEMA_VALIDATOR",
          "value": "json_schema_validator"
        },
        {
          "name": "TYPESCRIPT_AST",
          "value": "typescript_ast"
        },
        {
          "name": "SUB_DIAGRAM",
          "value": "sub_diagram"
        },
        {
          "name": "INTEGRATED_API",
          "value": "integrated_api"
        },
        {
          "name": "IR_BUILDER",
          "value": "ir_builder"
        }
      ],
      "description": ""
    },
    {
      "name": "Severity",
      "values": [
        {
          "name": "ERROR",
          "value": "error"
        },
        {
          "name": "WARNING",
          "value": "warning"
        },
        {
          "name": "INFO",
          "value": "info"
        }
      ],
      "description": ""
    },
    {
      "name": "EventPriority",
      "values": [
        {
          "name": "LOW",
          "value": "low"
        },
        {
          "name": "NORMAL",
          "value": "normal"
        },
        {
          "name": "HIGH",
          "value": "high"
        },
        {
          "name": "CRITICAL",
          "value": "critical"
        }
      ],
      "description": ""
    }
  ],
  "inputs": [
    {
      "name": "Vec2Input",
      "fields": [
        {
          "name": "x",
          "type": "Float",
          "is_optional": false,
          "description": ""
        },
        {
          "name": "y",
          "type": "Float",
          "is_optional": false,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "PersonLLMConfigInput",
      "fields": [
        {
          "name": "api_key_id",
          "type": "ID",
          "is_optional": false,
          "description": ""
        },
        {
          "name": "model",
          "type": "String",
          "is_optional": false,
          "description": ""
        },
        {
          "name": "service",
          "type": "LLMService",
          "is_optional": false,
          "description": ""
        },
        {
          "name": "system_prompt",
          "type": "String",
          "is_optional": true,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "CreateNodeInput",
      "fields": [
        {
          "name": "data",
          "type": "JSON",
          "is_optional": false,
          "description": ""
        },
        {
          "name": "position",
          "type": "Vec2Input",
          "is_optional": false,
          "description": ""
        },
        {
          "name": "type",
          "type": "NodeType",
          "is_optional": false,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "UpdateNodeInput",
      "fields": [
        {
          "name": "data",
          "type": "JSON",
          "is_optional": true,
          "description": ""
        },
        {
          "name": "position",
          "type": "Vec2Input",
          "is_optional": true,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "CreateDiagramInput",
      "fields": [
        {
          "name": "author",
          "type": "String",
          "is_optional": true,
          "description": ""
        },
        {
          "name": "description",
          "type": "String",
          "is_optional": true,
          "description": ""
        },
        {
          "name": "name",
          "type": "String",
          "is_optional": false,
          "description": ""
        },
        {
          "name": "tags",
          "type": "List[String]",
          "is_optional": true,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "DiagramFilterInput",
      "fields": [
        {
          "name": "author",
          "type": "String",
          "is_optional": true,
          "description": ""
        },
        {
          "name": "created_after",
          "type": "DateTime",
          "is_optional": true,
          "description": ""
        },
        {
          "name": "created_before",
          "type": "DateTime",
          "is_optional": true,
          "description": ""
        },
        {
          "name": "name",
          "type": "String",
          "is_optional": true,
          "description": ""
        },
        {
          "name": "tags",
          "type": "List[String]",
          "is_optional": true,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "CreatePersonInput",
      "fields": [
        {
          "name": "label",
          "type": "String",
          "is_optional": false,
          "description": ""
        },
        {
          "name": "llm_config",
          "type": "PersonLLMConfigInput",
          "is_optional": false,
          "description": ""
        },
        {
          "name": "type",
          "type": "String",
          "is_optional": true,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "UpdatePersonInput",
      "fields": [
        {
          "name": "label",
          "type": "String",
          "is_optional": true,
          "description": ""
        },
        {
          "name": "llm_config",
          "type": "PersonLLMConfigInput",
          "is_optional": true,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "CreateApiKeyInput",
      "fields": [
        {
          "name": "key",
          "type": "String",
          "is_optional": false,
          "description": ""
        },
        {
          "name": "label",
          "type": "String",
          "is_optional": false,
          "description": ""
        },
        {
          "name": "service",
          "type": "APIServiceType",
          "is_optional": false,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "ExecuteDiagramInput",
      "fields": [
        {
          "name": "debug_mode",
          "type": "Boolean",
          "is_optional": true,
          "description": ""
        },
        {
          "name": "diagram_data",
          "type": "JSON",
          "is_optional": true,
          "description": ""
        },
        {
          "name": "diagram_id",
          "type": "ID",
          "is_optional": true,
          "description": ""
        },
        {
          "name": "max_iterations",
          "type": "Int",
          "is_optional": true,
          "description": ""
        },
        {
          "name": "timeout_seconds",
          "type": "Int",
          "is_optional": true,
          "description": ""
        },
        {
          "name": "use_unified_monitoring",
          "type": "Boolean",
          "is_optional": true,
          "description": ""
        },
        {
          "name": "variables",
          "type": "JSON",
          "is_optional": true,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "ExecutionControlInput",
      "fields": [
        {
          "name": "action",
          "type": "String",
          "is_optional": false,
          "description": ""
        },
        {
          "name": "execution_id",
          "type": "ID",
          "is_optional": false,
          "description": ""
        },
        {
          "name": "reason",
          "type": "String",
          "is_optional": true,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "ExecutionFilterInput",
      "fields": [
        {
          "name": "diagram_id",
          "type": "ID",
          "is_optional": true,
          "description": ""
        },
        {
          "name": "started_after",
          "type": "DateTime",
          "is_optional": true,
          "description": ""
        },
        {
          "name": "started_before",
          "type": "DateTime",
          "is_optional": true,
          "description": ""
        },
        {
          "name": "status",
          "type": "Status",
          "is_optional": true,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "UpdateNodeStateInput",
      "fields": [
        {
          "name": "error",
          "type": "String",
          "is_optional": true,
          "description": ""
        },
        {
          "name": "execution_id",
          "type": "ID",
          "is_optional": false,
          "description": ""
        },
        {
          "name": "node_id",
          "type": "ID",
          "is_optional": false,
          "description": ""
        },
        {
          "name": "output",
          "type": "JSON",
          "is_optional": true,
          "description": ""
        },
        {
          "name": "status",
          "type": "Status",
          "is_optional": false,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "InteractiveResponseInput",
      "fields": [
        {
          "name": "execution_id",
          "type": "ID",
          "is_optional": false,
          "description": ""
        },
        {
          "name": "metadata",
          "type": "JSON",
          "is_optional": true,
          "description": ""
        },
        {
          "name": "node_id",
          "type": "ID",
          "is_optional": false,
          "description": ""
        },
        {
          "name": "response",
          "type": "String",
          "is_optional": false,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "RegisterCliSessionInput",
      "fields": [
        {
          "name": "execution_id",
          "type": "ID",
          "is_optional": false,
          "description": ""
        },
        {
          "name": "diagram_name",
          "type": "String",
          "is_optional": false,
          "description": ""
        },
        {
          "name": "diagram_format",
          "type": "DiagramFormatGraphQL",
          "is_optional": false,
          "description": ""
        },
        {
          "name": "diagram_data",
          "type": "JSON",
          "is_optional": true,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "UnregisterCliSessionInput",
      "fields": [
        {
          "name": "execution_id",
          "type": "ID",
          "is_optional": false,
          "description": ""
        }
      ],
      "description": ""
    }
  ],
  "node_specs": [
    {
      "name": "apiJob",
      "spec": {
        "nodeType": "NodeType.API_JOB",
        "displayName": "API Job",
        "category": "integration",
        "icon": "\ud83c\udf10",
        "color": "#00BCD4",
        "description": "Make HTTP API requests",
        "fields": [
          {
            "name": "url",
            "type": "string",
            "required": true,
            "description": "API endpoint URL",
            "uiConfig": {
              "inputType": "text",
              "placeholder": "https://example.com"
            }
          },
          {
            "name": "method",
            "type": "enum",
            "required": true,
            "description": "HTTP method",
            "validation": {
              "allowedValues": [
                "GET",
                "POST",
                "PUT",
                "DELETE",
                "PATCH"
              ]
            },
            "uiConfig": {
              "inputType": "select",
              "options": [
                {
                  "value": "GET",
                  "label": "GET"
                },
                {
                  "value": "POST",
                  "label": "POST"
                },
                {
                  "value": "PUT",
                  "label": "PUT"
                },
                {
                  "value": "DELETE",
                  "label": "DELETE"
                },
                {
                  "value": "PATCH",
                  "label": "PATCH"
                }
              ]
            }
          },
          {
            "name": "headers",
            "type": "object",
            "required": false,
            "description": "HTTP headers",
            "uiConfig": {
              "inputType": "code",
              "collapsible": true
            }
          },
          {
            "name": "params",
            "type": "object",
            "required": false,
            "description": "Query parameters",
            "uiConfig": {
              "inputType": "code",
              "collapsible": true
            }
          },
          {
            "name": "body",
            "type": "object",
            "required": false,
            "description": "Request body",
            "uiConfig": {
              "inputType": "code",
              "collapsible": true
            }
          },
          {
            "name": "timeout",
            "type": "number",
            "required": false,
            "description": "Request timeout in seconds",
            "uiConfig": {
              "inputType": "number",
              "min": 0,
              "max": 3600
            }
          },
          {
            "name": "auth_type",
            "type": "enum",
            "required": false,
            "description": "Authentication type",
            "validation": {
              "allowedValues": [
                "none",
                "bearer",
                "basic",
                "api_key"
              ]
            },
            "uiConfig": {
              "inputType": "select",
              "options": [
                {
                  "value": "none",
                  "label": "None"
                },
                {
                  "value": "bearer",
                  "label": "Bearer Token"
                },
                {
                  "value": "basic",
                  "label": "Basic Auth"
                },
                {
                  "value": "api_key",
                  "label": "API Key"
                }
              ]
            }
          },
          {
            "name": "auth_config",
            "type": "object",
            "required": false,
            "description": "Authentication configuration",
            "uiConfig": {
              "inputType": "code",
              "collapsible": true
            }
          }
        ],
        "handles": {
          "inputs": [
            "default"
          ],
          "outputs": [
            "default"
          ]
        },
        "outputs": {
          "result": {
            "type": "any",
            "description": "API response data"
          }
        },
        "execution": {
          "timeout": 300,
          "retryable": true,
          "maxRetries": 3
        },
        "primaryDisplayField": "method"
      }
    },
    {
      "name": "codeJob",
      "spec": {
        "nodeType": "NodeType.CODE_JOB",
        "displayName": "Code Job",
        "category": "compute",
        "icon": "\ud83d\udcbb",
        "color": "#9C27B0",
        "description": "Execute custom code functions",
        "fields": [
          {
            "name": "language",
            "type": "enum",
            "required": true,
            "description": "Programming language",
            "validation": {
              "allowedValues": [
                "python",
                "typescript",
                "bash",
                "shell"
              ]
            },
            "uiConfig": {
              "inputType": "select",
              "options": [
                {
                  "value": "python",
                  "label": "Python"
                },
                {
                  "value": "typescript",
                  "label": "TypeScript"
                },
                {
                  "value": "bash",
                  "label": "Bash"
                },
                {
                  "value": "shell",
                  "label": "Shell"
                }
              ]
            }
          },
          {
            "name": "filePath",
            "type": "string",
            "required": false,
            "description": "Path to code file",
            "uiConfig": {
              "inputType": "text",
              "placeholder": "/path/to/file"
            }
          },
          {
            "name": "code",
            "type": "string",
            "required": false,
            "description": "Inline code to execute (alternative to filePath)",
            "uiConfig": {
              "inputType": "code",
              "rows": 10,
              "adjustable": true
            }
          },
          {
            "name": "functionName",
            "type": "string",
            "required": false,
            "description": "Function to execute",
            "uiConfig": {
              "inputType": "text"
            }
          },
          {
            "name": "timeout",
            "type": "number",
            "required": false,
            "description": "Execution timeout in seconds",
            "uiConfig": {
              "inputType": "number",
              "min": 0,
              "max": 3600
            }
          }
        ],
        "handles": {
          "inputs": [
            "default"
          ],
          "outputs": [
            "default"
          ]
        },
        "inputPorts": [
          {
            "name": "default",
            "contentType": "object",
            "required": false,
            "description": "Input data passed to the code function"
          },
          {
            "name": "code",
            "contentType": "raw_text",
            "required": true,
            "description": "Code to execute (overrides filePath if provided)"
          }
        ],
        "outputs": {
          "result": {
            "type": "any",
            "description": "Code execution result"
          }
        },
        "execution": {
          "timeout": 300,
          "retryable": true,
          "maxRetries": 3
        },
        "primaryDisplayField": "language"
      }
    },
    {
      "name": "condition",
      "spec": {
        "nodeType": "NodeType.CONDITION",
        "displayName": "Condition",
        "category": "control",
        "icon": "\ud83d\udd00",
        "color": "#FF9800",
        "description": "Conditional branching based on expressions",
        "fields": [
          {
            "name": "condition_type",
            "type": "enum",
            "required": false,
            "defaultValue": "custom",
            "description": "Type of condition to evaluate",
            "validation": {
              "allowedValues": [
                "detect_max_iterations",
                "check_nodes_executed",
                "custom",
                "llm_decision"
              ]
            },
            "uiConfig": {
              "inputType": "select",
              "options": [
                {
                  "value": "detect_max_iterations",
                  "label": "Detect Max Iterations"
                },
                {
                  "value": "check_nodes_executed",
                  "label": "Check Nodes Executed"
                },
                {
                  "value": "custom",
                  "label": "Custom Expression"
                },
                {
                  "value": "llm_decision",
                  "label": "LLM Decision"
                }
              ]
            }
          },
          {
            "name": "expression",
            "type": "string",
            "required": false,
            "description": "Boolean expression to evaluate",
            "conditional": {
              "field": "condition_type",
              "values": [
                "custom"
              ]
            },
            "uiConfig": {
              "inputType": "textarea",
              "placeholder": "e.g., inputs.value > 10",
              "rows": 3
            }
          },
          {
            "name": "node_indices",
            "type": "array",
            "required": false,
            "description": "Node indices for detect_max_iteration condition",
            "conditional": {
              "field": "condition_type",
              "values": [
                "detect_max_iterations",
                "check_nodes_executed"
              ]
            },
            "validation": {
              "itemType": "string"
            },
            "uiConfig": {
              "inputType": "nodeSelect",
              "placeholder": "Select nodes to monitor"
            }
          },
          {
            "name": "person",
            "type": "string",
            "required": false,
            "description": "AI agent to use for decision making",
            "conditional": {
              "field": "condition_type",
              "values": [
                "llm_decision"
              ]
            },
            "uiConfig": {
              "inputType": "personSelect",
              "placeholder": "Select AI agent"
            }
          },
          {
            "name": "judge_by",
            "type": "string",
            "required": false,
            "description": "Prompt for LLM to make a judgment",
            "conditional": {
              "field": "condition_type",
              "values": [
                "llm_decision"
              ]
            },
            "uiConfig": {
              "inputType": "textarea",
              "placeholder": "Enter the prompt for LLM to judge (should result in YES/NO)",
              "rows": 5
            }
          },
          {
            "name": "judge_by_file",
            "type": "string",
            "required": false,
            "description": "External prompt file path",
            "conditional": {
              "field": "condition_type",
              "values": [
                "llm_decision"
              ]
            },
            "uiConfig": {
              "inputType": "text",
              "placeholder": "e.g., prompts/quality_check.txt"
            }
          },
          {
            "name": "memorize_to",
            "type": "string",
            "required": false,
            "defaultValue": "GOLDFISH",
            "description": "Memory control strategy (e.g., GOLDFISH for fresh evaluation)",
            "conditional": {
              "field": "condition_type",
              "values": [
                "llm_decision"
              ]
            },
            "uiConfig": {
              "inputType": "text",
              "placeholder": "e.g., GOLDFISH"
            }
          },
          {
            "name": "at_most",
            "type": "number",
            "required": false,
            "description": "Maximum messages to keep in memory",
            "conditional": {
              "field": "condition_type",
              "values": [
                "llm_decision"
              ]
            },
            "uiConfig": {
              "inputType": "number",
              "placeholder": "e.g., 10"
            }
          },
          {
            "name": "expose_index_as",
            "type": "string",
            "required": false,
            "description": "Variable name to expose the condition node's execution count (0-based index) to downstream nodes",
            "uiConfig": {
              "inputType": "text",
              "placeholder": "e.g., current_index, loop_counter"
            }
          },
          {
            "name": "skippable",
            "type": "boolean",
            "required": false,
            "defaultValue": false,
            "description": "When true, downstream nodes can execute even if this condition hasn't been evaluated yet",
            "uiConfig": {
              "inputType": "checkbox"
            }
          }
        ],
        "handles": {
          "inputs": [
            "default"
          ],
          "outputs": [
            "condtrue",
            "condfalse"
          ]
        },
        "outputs": {
          "true": {
            "type": "any",
            "description": "Output when condition is true"
          },
          "false": {
            "type": "any",
            "description": "Output when condition is false"
          }
        },
        "execution": {
          "timeout": 300,
          "retryable": true,
          "maxRetries": 3
        },
        "primaryDisplayField": "condition_type"
      }
    },
    {
      "name": "db",
      "spec": {
        "nodeType": "NodeType.DB",
        "displayName": "Database",
        "category": "integration",
        "icon": "\ud83d\uddc4\ufe0f",
        "color": "#795548",
        "description": "Database operations",
        "fields": [
          {
            "name": "file",
            "type": "any",
            "required": false,
            "description": "File path or array of file paths",
            "uiConfig": {
              "inputType": "text"
            }
          },
          {
            "name": "collection",
            "type": "string",
            "required": false,
            "description": "Database collection name",
            "uiConfig": {
              "inputType": "text"
            }
          },
          {
            "name": "sub_type",
            "type": "enum",
            "required": true,
            "description": "Database operation type",
            "validation": {
              "allowedValues": [
                "fixed_prompt",
                "file",
                "code",
                "api_tool"
              ]
            },
            "uiConfig": {
              "inputType": "select",
              "options": [
                {
                  "value": "fixed_prompt",
                  "label": "Fixed Prompt"
                },
                {
                  "value": "file",
                  "label": "File"
                },
                {
                  "value": "code",
                  "label": "Code"
                },
                {
                  "value": "api_tool",
                  "label": "API Tool"
                }
              ]
            }
          },
          {
            "name": "operation",
            "type": "string",
            "required": true,
            "description": "Operation configuration",
            "uiConfig": {
              "inputType": "text"
            }
          },
          {
            "name": "query",
            "type": "string",
            "required": false,
            "description": "Query configuration",
            "uiConfig": {
              "inputType": "text"
            }
          },
          {
            "name": "data",
            "type": "object",
            "required": false,
            "description": "Data configuration",
            "uiConfig": {
              "inputType": "code",
              "collapsible": true
            }
          },
          {
            "name": "serialize_json",
            "type": "boolean",
            "required": false,
            "description": "Serialize structured data to JSON string (for backward compatibility)",
            "defaultValue": false,
            "uiConfig": {
              "inputType": "checkbox"
            }
          },
          {
            "name": "format",
            "type": "string",
            "required": false,
            "description": "Data format (json, yaml, csv, text, etc.)",
            "defaultValue": "json",
            "uiConfig": {
              "inputType": "select",
              "options": [
                {
                  "value": "json",
                  "label": "JSON"
                },
                {
                  "value": "yaml",
                  "label": "YAML"
                },
                {
                  "value": "csv",
                  "label": "CSV"
                },
                {
                  "value": "text",
                  "label": "Text"
                },
                {
                  "value": "xml",
                  "label": "XML"
                }
              ]
            }
          }
        ],
        "handles": {
          "inputs": [
            "default"
          ],
          "outputs": [
            "default"
          ]
        },
        "outputs": {
          "result": {
            "type": "any",
            "description": "Node execution result"
          }
        },
        "execution": {
          "timeout": 300,
          "retryable": true,
          "maxRetries": 3
        },
        "primaryDisplayField": "operation"
      }
    },
    {
      "name": "endpoint",
      "spec": {
        "nodeType": "NodeType.ENDPOINT",
        "displayName": "End Node",
        "category": "control",
        "icon": "\ud83c\udfc1",
        "color": "#F44336",
        "description": "Exit point for diagram execution",
        "fields": [
          {
            "name": "save_to_file",
            "type": "boolean",
            "required": true,
            "description": "Save results to file",
            "uiConfig": {
              "inputType": "checkbox"
            }
          },
          {
            "name": "file_name",
            "type": "string",
            "required": false,
            "description": "Output filename",
            "uiConfig": {
              "inputType": "text"
            }
          }
        ],
        "handles": {
          "inputs": [
            "default"
          ],
          "outputs": []
        },
        "outputs": {},
        "execution": {
          "timeout": 300,
          "retryable": true,
          "maxRetries": 3
        },
        "primaryDisplayField": "save_to_file"
      }
    },
    {
      "name": "hook",
      "spec": {
        "nodeType": "NodeType.HOOK",
        "displayName": "Hook",
        "category": "compute",
        "icon": "\ud83e\ude9d",
        "color": "#9333ea",
        "description": "Executes hooks at specific points in the diagram execution",
        "fields": [
          {
            "name": "hook_type",
            "type": "enum",
            "required": true,
            "defaultValue": "shell",
            "description": "Type of hook to execute",
            "validation": {
              "allowedValues": [
                "shell",
                "http",
                "python",
                "file"
              ]
            },
            "uiConfig": {
              "inputType": "select",
              "options": [
                {
                  "value": "shell",
                  "label": "Shell"
                },
                {
                  "value": "http",
                  "label": "HTTP"
                },
                {
                  "value": "python",
                  "label": "Python"
                },
                {
                  "value": "file",
                  "label": "File"
                }
              ]
            }
          },
          {
            "name": "command",
            "type": "string",
            "required": false,
            "description": "Shell command to run (for shell hooks)",
            "uiConfig": {
              "inputType": "text",
              "placeholder": "Command to execute"
            }
          },
          {
            "name": "url",
            "type": "string",
            "required": false,
            "description": "Webhook URL (for HTTP hooks)",
            "validation": {
              "pattern": "^https?://"
            },
            "uiConfig": {
              "inputType": "text",
              "placeholder": "https://api.example.com/webhook"
            }
          },
          {
            "name": "timeout",
            "type": "number",
            "required": false,
            "defaultValue": 60,
            "description": "Execution timeout in seconds",
            "validation": {
              "min": 1,
              "max": 300
            },
            "uiConfig": {
              "inputType": "number",
              "min": 1,
              "max": 300
            }
          },
          {
            "name": "retry_count",
            "type": "number",
            "required": false,
            "defaultValue": 0,
            "description": "Number of retries on failure",
            "validation": {
              "min": 0,
              "max": 5
            },
            "uiConfig": {
              "inputType": "number",
              "min": 0,
              "max": 5
            }
          }
        ],
        "handles": {
          "inputs": [
            "default"
          ],
          "outputs": [
            "success",
            "error"
          ]
        },
        "outputs": {
          "success": {
            "type": "any",
            "description": "Success output"
          },
          "error": {
            "type": "any",
            "description": "Error output"
          }
        },
        "execution": {
          "timeout": 60,
          "retryable": true,
          "maxRetries": 3
        },
        "examples": [
          {
            "name": "Shell Hook",
            "description": "Execute a shell command",
            "configuration": {
              "hook_type": "shell",
              "command": "echo 'Hook executed'",
              "timeout": 30
            }
          },
          {
            "name": "Webhook",
            "description": "Call a webhook URL",
            "configuration": {
              "hook_type": "http",
              "url": "https://api.example.com/webhook",
              "timeout": 60,
              "retry_count": 2
            }
          }
        ],
        "primaryDisplayField": "hook_type"
      }
    },
    {
      "name": "integratedApi",
      "spec": {
        "nodeType": "NodeType.INTEGRATED_API",
        "displayName": "Integrated API",
        "category": "integration",
        "icon": "\ud83d\udd0c",
        "color": "#8b5cf6",
        "description": "Connect to external APIs like Notion, Slack, GitHub, and more",
        "fields": [
          {
            "name": "provider",
            "type": "string",
            "required": true,
            "description": "API provider to connect to",
            "uiConfig": {
              "inputType": "select"
            }
          },
          {
            "name": "operation",
            "type": "string",
            "required": true,
            "description": "Operation to perform (provider-specific)",
            "uiConfig": {
              "inputType": "select",
              "placeholder": "Select an operation"
            }
          },
          {
            "name": "resource_id",
            "type": "string",
            "required": false,
            "description": "Resource identifier (e.g., page ID, channel ID)",
            "uiConfig": {
              "inputType": "text",
              "placeholder": "Resource ID (if applicable)"
            }
          },
          {
            "name": "config",
            "type": "object",
            "required": false,
            "description": "Provider-specific configuration",
            "uiConfig": {
              "inputType": "code",
              "placeholder": "{ /* provider-specific config */ }"
            }
          },
          {
            "name": "timeout",
            "type": "number",
            "required": false,
            "description": "Request timeout in seconds",
            "validation": {
              "min": 1,
              "max": 300
            },
            "uiConfig": {
              "inputType": "number",
              "placeholder": "30"
            }
          },
          {
            "name": "max_retries",
            "type": "number",
            "required": false,
            "description": "Maximum retry attempts",
            "validation": {
              "min": 0,
              "max": 10
            },
            "uiConfig": {
              "inputType": "number",
              "placeholder": "3"
            }
          }
        ],
        "handles": {
          "inputs": [
            "default"
          ],
          "outputs": [
            "default",
            "error"
          ]
        },
        "outputs": {
          "result": {
            "type": "any",
            "description": "API response data"
          },
          "error": {
            "type": "any",
            "description": "Error details if the operation fails"
          }
        },
        "execution": {
          "timeout": 60,
          "retryable": true,
          "maxRetries": 3
        },
        "primaryDisplayField": "provider"
      }
    },
    {
      "name": "irBuilder",
      "spec": {
        "nodeType": "NodeType.IR_BUILDER",
        "displayName": "IR Builder",
        "category": "codegen",
        "icon": "\ud83c\udfd7\ufe0f",
        "color": "#FF5722",
        "description": "Build Intermediate Representation for code generation",
        "fields": [
          {
            "name": "builder_type",
            "type": "enum",
            "required": true,
            "description": "Type of IR builder to use",
            "validation": {
              "allowedValues": [
                "backend",
                "frontend",
                "strawberry",
                "custom"
              ]
            },
            "uiConfig": {
              "inputType": "select",
              "options": [
                {
                  "value": "backend",
                  "label": "Backend"
                },
                {
                  "value": "frontend",
                  "label": "Frontend"
                },
                {
                  "value": "strawberry",
                  "label": "Strawberry (GraphQL)"
                },
                {
                  "value": "custom",
                  "label": "Custom"
                }
              ]
            }
          },
          {
            "name": "source_type",
            "type": "enum",
            "required": false,
            "description": "Type of source data",
            "validation": {
              "allowedValues": [
                "ast",
                "schema",
                "config",
                "auto"
              ]
            },
            "uiConfig": {
              "inputType": "select",
              "options": [
                {
                  "value": "ast",
                  "label": "AST"
                },
                {
                  "value": "schema",
                  "label": "Schema"
                },
                {
                  "value": "config",
                  "label": "Config"
                },
                {
                  "value": "auto",
                  "label": "Auto-detect"
                }
              ]
            }
          },
          {
            "name": "config_path",
            "type": "string",
            "required": false,
            "description": "Path to configuration directory",
            "uiConfig": {
              "inputType": "text",
              "placeholder": "projects/codegen/config/"
            }
          },
          {
            "name": "output_format",
            "type": "enum",
            "required": false,
            "description": "Output format for IR",
            "validation": {
              "allowedValues": [
                "json",
                "yaml",
                "python"
              ]
            },
            "uiConfig": {
              "inputType": "select",
              "options": [
                {
                  "value": "json",
                  "label": "JSON"
                },
                {
                  "value": "yaml",
                  "label": "YAML"
                },
                {
                  "value": "python",
                  "label": "Python"
                }
              ]
            }
          },
          {
            "name": "cache_enabled",
            "type": "boolean",
            "required": false,
            "description": "Enable IR caching",
            "uiConfig": {
              "inputType": "checkbox"
            }
          },
          {
            "name": "validate_output",
            "type": "boolean",
            "required": false,
            "description": "Validate IR structure before output",
            "uiConfig": {
              "inputType": "checkbox"
            }
          }
        ],
        "handles": {
          "inputs": [
            "default"
          ],
          "outputs": [
            "default"
          ]
        },
        "inputPorts": [
          {
            "name": "default",
            "contentType": "object",
            "required": true,
            "description": "Source data (AST, schema, or config) for IR generation"
          }
        ],
        "outputs": {
          "result": {
            "type": "DataType.OBJECT",
            "description": "Generated IR structure"
          }
        },
        "execution": {
          "timeout": 120,
          "retryable": true,
          "maxRetries": 2
        },
        "primaryDisplayField": "builder_type"
      }
    },
    {
      "name": "jsonSchemaValidator",
      "spec": {
        "nodeType": "NodeType.JSON_SCHEMA_VALIDATOR",
        "displayName": "JSON Schema Validator",
        "category": "codegen",
        "icon": "\u2713",
        "color": "#8BC34A",
        "description": "Validate data against JSON schema",
        "fields": [
          {
            "name": "schema_path",
            "type": "string",
            "required": false,
            "description": "Path to JSON schema file",
            "uiConfig": {
              "inputType": "text",
              "placeholder": "/path/to/file"
            }
          },
          {
            "name": "schema",
            "type": "object",
            "required": false,
            "description": "Inline JSON schema",
            "uiConfig": {
              "inputType": "code",
              "collapsible": true
            }
          },
          {
            "name": "data_path",
            "type": "string",
            "required": false,
            "description": "Data Path configuration",
            "uiConfig": {
              "inputType": "text",
              "placeholder": "/path/to/file"
            }
          },
          {
            "name": "strict_mode",
            "type": "boolean",
            "required": false,
            "description": "Strict Mode configuration",
            "uiConfig": {
              "inputType": "checkbox"
            }
          },
          {
            "name": "error_on_extra",
            "type": "boolean",
            "required": false,
            "description": "Error On Extra configuration",
            "uiConfig": {
              "inputType": "checkbox"
            }
          }
        ],
        "handles": {
          "inputs": [
            "default"
          ],
          "outputs": [
            "default"
          ]
        },
        "outputs": {
          "result": {
            "type": "any",
            "description": "Node execution result"
          }
        },
        "execution": {
          "timeout": 300,
          "retryable": true,
          "maxRetries": 3
        },
        "primaryDisplayField": "schema_path"
      }
    },
    {
      "name": "personJob",
      "spec": {
        "nodeType": "NodeType.PERSON_JOB",
        "displayName": "Person Job",
        "category": "ai",
        "icon": "\ud83e\udd16",
        "color": "#2196F3",
        "description": "Execute tasks using AI language models",
        "fields": [
          {
            "name": "person",
            "type": "string",
            "required": false,
            "description": "AI person to use",
            "uiConfig": {
              "inputType": "personSelect"
            }
          },
          {
            "name": "first_only_prompt",
            "type": "string",
            "required": true,
            "description": "Prompt used only on first execution",
            "uiConfig": {
              "inputType": "textarea",
              "placeholder": "Enter prompt template...",
              "column": 2,
              "rows": 10,
              "adjustable": true,
              "showPromptFileButton": true
            }
          },
          {
            "name": "first_prompt_file",
            "type": "string",
            "required": false,
            "description": "External prompt file for first iteration only",
            "uiConfig": {
              "inputType": "text",
              "placeholder": "example_first.txt",
              "column": 2,
              "hidden": true
            }
          },
          {
            "name": "default_prompt",
            "type": "string",
            "required": false,
            "description": "Default prompt template",
            "uiConfig": {
              "inputType": "textarea",
              "placeholder": "Enter prompt template...",
              "column": 2,
              "rows": 10,
              "adjustable": true,
              "showPromptFileButton": true
            }
          },
          {
            "name": "prompt_file",
            "type": "string",
            "required": false,
            "description": "Path to prompt file in /files/prompts/",
            "uiConfig": {
              "inputType": "text",
              "placeholder": "example.txt",
              "column": 2,
              "hidden": true
            }
          },
          {
            "name": "max_iteration",
            "type": "number",
            "required": true,
            "defaultValue": 100,
            "description": "Maximum execution iterations",
            "uiConfig": {
              "inputType": "number",
              "min": 1
            }
          },
          {
            "name": "memorize_to",
            "type": "string",
            "required": false,
            "description": "Criteria used to select helpful messages for this task. Empty = memorize all. Special: 'GOLDFISH' for goldfish mode. Comma-separated for multiple criteria.",
            "uiConfig": {
              "inputType": "text",
              "placeholder": "e.g., requirements, acceptance criteria, API keys",
              "column": 2
            }
          },
          {
            "name": "at_most",
            "type": "number",
            "required": false,
            "description": "Select at most N messages to keep (system messages may be preserved in addition).",
            "validation": {
              "min": 1,
              "max": 500
            },
            "uiConfig": {
              "inputType": "number",
              "min": 1,
              "max": 500,
              "column": 1
            }
          },
          {
            "name": "ignore_person",
            "type": "string",
            "required": false,
            "description": "Comma-separated list of person IDs whose messages should be excluded from memory selection.",
            "uiConfig": {
              "inputType": "text",
              "placeholder": "e.g., assistant, user2",
              "column": 2
            }
          },
          {
            "name": "tools",
            "type": "string",
            "required": false,
            "description": "Tools available to the AI agent",
            "uiConfig": {
              "column": 1,
              "inputType": "select",
              "options": [
                {
                  "value": "none",
                  "label": "None - No tools"
                },
                {
                  "value": "image",
                  "label": "Image - Image generation capabilities"
                },
                {
                  "value": "websearch",
                  "label": "Web Search - Search the internet"
                }
              ]
            }
          },
          {
            "name": "text_format",
            "type": "string",
            "required": false,
            "description": "JSON schema or response format for structured outputs",
            "uiConfig": {
              "inputType": "textarea",
              "placeholder": "{\"type\": \"object\", \"properties\": {...}}",
              "column": 2,
              "rows": 6,
              "adjustable": true
            }
          },
          {
            "name": "text_format_file",
            "type": "string",
            "required": false,
            "description": "Path to Python file containing Pydantic models for structured outputs",
            "uiConfig": {
              "inputType": "text",
              "placeholder": "path/to/models.py",
              "column": 2
            }
          },
          {
            "name": "resolved_prompt",
            "type": "string",
            "required": false,
            "description": "Pre-resolved prompt content from compile-time",
            "uiConfig": {
              "inputType": "textarea",
              "column": 2,
              "rows": 4
            }
          },
          {
            "name": "resolved_first_prompt",
            "type": "string",
            "required": false,
            "description": "Pre-resolved first prompt content from compile-time",
            "uiConfig": {
              "inputType": "textarea",
              "column": 2,
              "rows": 4
            }
          },
          {
            "name": "batch",
            "type": "boolean",
            "required": false,
            "defaultValue": false,
            "description": "Enable batch mode for processing multiple items",
            "uiConfig": {
              "inputType": "checkbox"
            }
          },
          {
            "name": "batch_input_key",
            "type": "string",
            "required": false,
            "defaultValue": "items",
            "description": "Key containing the array to iterate over in batch mode",
            "uiConfig": {
              "inputType": "text",
              "placeholder": "items"
            }
          },
          {
            "name": "batch_parallel",
            "type": "boolean",
            "required": false,
            "defaultValue": true,
            "description": "Execute batch items in parallel",
            "uiConfig": {
              "inputType": "checkbox"
            }
          },
          {
            "name": "max_concurrent",
            "type": "number",
            "required": false,
            "defaultValue": 10,
            "description": "Maximum concurrent executions in batch mode",
            "validation": {
              "min": 1,
              "max": 100
            },
            "uiConfig": {
              "inputType": "number",
              "min": 1,
              "max": 100
            }
          }
        ],
        "handles": {
          "inputs": [
            "default",
            "first"
          ],
          "outputs": [
            "default"
          ]
        },
        "outputs": {
          "result": {
            "type": "any",
            "description": "AI response and results"
          }
        },
        "execution": {
          "timeout": 300,
          "retryable": true,
          "maxRetries": 3
        },
        "primaryDisplayField": "person"
      }
    },
    {
      "name": "start",
      "spec": {
        "nodeType": "NodeType.START",
        "displayName": "Start Node",
        "category": "control",
        "icon": "\ud83d\ude80",
        "color": "#4CAF50",
        "description": "Entry point for diagram execution",
        "fields": [
          {
            "name": "trigger_mode",
            "type": "enum",
            "required": false,
            "defaultValue": "none",
            "description": "How this start node is triggered",
            "validation": {
              "allowedValues": [
                "none",
                "manual",
                "hook"
              ]
            },
            "uiConfig": {
              "inputType": "select",
              "options": [
                {
                  "value": "none",
                  "label": "None - Simple start point"
                },
                {
                  "value": "manual",
                  "label": "Manual - Triggered manually with data"
                },
                {
                  "value": "hook",
                  "label": "Hook - Triggered by external events"
                }
              ]
            }
          },
          {
            "name": "custom_data",
            "type": "any",
            "required": false,
            "description": "Custom data to pass when manually triggered",
            "conditional": {
              "field": "trigger_mode",
              "values": [
                "manual"
              ]
            },
            "uiConfig": {
              "inputType": "text"
            }
          },
          {
            "name": "output_data_structure",
            "type": "object",
            "required": false,
            "description": "Expected output data structure",
            "conditional": {
              "field": "trigger_mode",
              "values": [
                "manual"
              ]
            },
            "uiConfig": {
              "inputType": "code",
              "collapsible": true
            }
          },
          {
            "name": "hook_event",
            "type": "string",
            "required": false,
            "description": "Event name to listen for",
            "conditional": {
              "field": "trigger_mode",
              "values": [
                "hook"
              ]
            },
            "uiConfig": {
              "inputType": "text",
              "placeholder": "e.g., webhook.received, file.uploaded"
            }
          },
          {
            "name": "hook_filters",
            "type": "object",
            "required": false,
            "description": "Filters to apply to incoming events",
            "conditional": {
              "field": "trigger_mode",
              "values": [
                "hook"
              ]
            },
            "uiConfig": {
              "inputType": "code",
              "collapsible": true
            }
          }
        ],
        "handles": {
          "inputs": [],
          "outputs": [
            "default"
          ]
        },
        "outputs": {
          "result": {
            "type": "any",
            "description": "Node execution result"
          }
        },
        "execution": {
          "timeout": 300,
          "retryable": true,
          "maxRetries": 3
        }
      }
    },
    {
      "name": "subDiagram",
      "spec": {
        "nodeType": "NodeType.SUB_DIAGRAM",
        "displayName": "Sub-Diagram",
        "category": "compute",
        "icon": "\ud83d\udcca",
        "color": "#8B5CF6",
        "description": "Execute another diagram as a node within the current diagram",
        "fields": [
          {
            "name": "diagram_name",
            "type": "string",
            "required": false,
            "description": "Name of the diagram to execute (e.g., 'workflow/process')",
            "uiConfig": {
              "inputType": "select",
              "placeholder": "Select diagram..."
            }
          },
          {
            "name": "diagram_data",
            "type": "object",
            "required": false,
            "description": "Inline diagram data (alternative to diagram_name)",
            "uiConfig": {
              "inputType": "code",
              "collapsible": true
            }
          },
          {
            "name": "input_mapping",
            "type": "object",
            "required": false,
            "description": "Map node inputs to sub-diagram variables",
            "uiConfig": {
              "inputType": "code",
              "placeholder": "{ \"targetVar\": \"sourceInput\" }"
            }
          },
          {
            "name": "output_mapping",
            "type": "object",
            "required": false,
            "description": "Map sub-diagram outputs to node outputs",
            "uiConfig": {
              "inputType": "code",
              "placeholder": "{ \"outputKey\": \"nodeId.field\" }"
            }
          },
          {
            "name": "timeout",
            "type": "number",
            "required": false,
            "description": "Execution timeout in seconds",
            "validation": {
              "min": 1,
              "max": 3600
            },
            "uiConfig": {
              "inputType": "number",
              "min": 1,
              "max": 3600
            }
          },
          {
            "name": "wait_for_completion",
            "type": "boolean",
            "required": false,
            "defaultValue": true,
            "description": "Whether to wait for sub-diagram completion",
            "uiConfig": {
              "inputType": "checkbox"
            }
          },
          {
            "name": "isolate_conversation",
            "type": "boolean",
            "required": false,
            "defaultValue": false,
            "description": "Create isolated conversation context for sub-diagram",
            "uiConfig": {
              "inputType": "checkbox"
            }
          },
          {
            "name": "ignoreIfSub",
            "type": "boolean",
            "required": false,
            "defaultValue": false,
            "description": "Skip execution if this diagram is being run as a sub-diagram",
            "uiConfig": {
              "inputType": "checkbox"
            }
          },
          {
            "name": "diagram_format",
            "type": "enum",
            "required": false,
            "description": "Format of the diagram file (yaml, json, or light)",
            "validation": {
              "allowedValues": [
                "yaml",
                "json",
                "light"
              ]
            },
            "uiConfig": {
              "inputType": "select",
              "options": [
                {
                  "label": "YAML",
                  "value": "yaml"
                },
                {
                  "label": "JSON",
                  "value": "json"
                },
                {
                  "label": "Light",
                  "value": "light"
                }
              ]
            }
          },
          {
            "name": "batch",
            "type": "boolean",
            "required": false,
            "defaultValue": false,
            "description": "Execute sub-diagram in batch mode for multiple inputs",
            "uiConfig": {
              "inputType": "checkbox"
            }
          },
          {
            "name": "batch_input_key",
            "type": "string",
            "required": false,
            "description": "Key in inputs containing the array of items for batch processing",
            "uiConfig": {
              "inputType": "text",
              "placeholder": "items"
            }
          },
          {
            "name": "batch_parallel",
            "type": "boolean",
            "required": false,
            "defaultValue": false,
            "description": "Execute batch items in parallel",
            "uiConfig": {
              "inputType": "checkbox"
            }
          }
        ],
        "handles": {
          "inputs": [
            "default"
          ],
          "outputs": [
            "default"
          ]
        },
        "outputs": {
          "default": {
            "type": "any",
            "description": "Output from sub-diagram execution (includes results and error if any)"
          }
        },
        "execution": {
          "timeout": 600,
          "retryable": true,
          "maxRetries": 1
        },
        "examples": [
          {
            "name": "Execute Named Diagram",
            "description": "Execute a diagram by name with input mapping",
            "configuration": {
              "diagram_name": "codegen/node_ui_codegen",
              "input_mapping": {
                "spec_path": "node_specification",
                "output_dir": "output_directory"
              },
              "wait_for_completion": true
            }
          },
          {
            "name": "Execute Inline Diagram",
            "description": "Execute an inline diagram definition",
            "configuration": {
              "diagram_data": {
                "nodes": [
                  {
                    "id": "start",
                    "type": "start",
                    "data": {}
                  }
                ],
                "connections": []
              },
              "timeout": 30
            }
          }
        ],
        "primaryDisplayField": "diagram_name"
      }
    },
    {
      "name": "templateJob",
      "spec": {
        "nodeType": "NodeType.TEMPLATE_JOB",
        "displayName": "Template Job",
        "category": "codegen",
        "icon": "\ud83d\udcdd",
        "color": "#3F51B5",
        "description": "Process templates with data",
        "fields": [
          {
            "name": "template_path",
            "type": "string",
            "required": false,
            "description": "Path to template file",
            "uiConfig": {
              "inputType": "text",
              "placeholder": "/path/to/file"
            }
          },
          {
            "name": "template_content",
            "type": "string",
            "required": false,
            "description": "Inline template content",
            "uiConfig": {
              "inputType": "textarea",
              "placeholder": "Enter template content...",
              "rows": 10,
              "adjustable": true
            }
          },
          {
            "name": "output_path",
            "type": "string",
            "required": false,
            "description": "Output file path",
            "uiConfig": {
              "inputType": "text",
              "placeholder": "/path/to/file"
            }
          },
          {
            "name": "variables",
            "type": "object",
            "required": false,
            "description": "Variables configuration",
            "uiConfig": {
              "inputType": "code",
              "collapsible": true
            }
          },
          {
            "name": "engine",
            "type": "enum",
            "required": false,
            "defaultValue": "jinja2",
            "description": "Template engine to use",
            "validation": {
              "allowedValues": [
                "internal",
                "jinja2"
              ]
            },
            "uiConfig": {
              "inputType": "select",
              "options": [
                {
                  "value": "internal",
                  "label": "Internal"
                },
                {
                  "value": "jinja2",
                  "label": "Jinja2"
                }
              ]
            }
          },
          {
            "name": "preprocessor",
            "type": "string",
            "required": false,
            "description": "Preprocessor function to apply before templating",
            "uiConfig": {
              "inputType": "text"
            }
          }
        ],
        "handles": {
          "inputs": [
            "default"
          ],
          "outputs": [
            "default"
          ]
        },
        "outputs": {
          "result": {
            "type": "any",
            "description": "Node execution result"
          }
        },
        "execution": {
          "timeout": 300,
          "retryable": true,
          "maxRetries": 3
        },
        "primaryDisplayField": "engine"
      }
    },
    {
      "name": "typescriptAst",
      "spec": {
        "nodeType": "NodeType.TYPESCRIPT_AST",
        "displayName": "TypeScript AST Parser",
        "category": "codegen",
        "icon": "\ud83d\udd0d",
        "color": "#3178c6",
        "description": "Parses TypeScript source code and extracts AST, interfaces, types, and enums",
        "fields": [
          {
            "name": "source",
            "type": "string",
            "required": true,
            "description": "TypeScript source code to parse",
            "uiConfig": {
              "inputType": "code",
              "language": "SupportedLanguage.TYPESCRIPT"
            }
          },
          {
            "name": "extractPatterns",
            "type": "array",
            "required": false,
            "defaultValue": [
              "interface",
              "type",
              "enum"
            ],
            "description": "Patterns to extract from the AST",
            "validation": {
              "itemType": "string",
              "allowedValues": [
                "interface",
                "type",
                "enum",
                "class",
                "function",
                "const",
                "export"
              ]
            },
            "uiConfig": {
              "inputType": "code"
            }
          },
          {
            "name": "includeJSDoc",
            "type": "boolean",
            "required": false,
            "defaultValue": false,
            "description": "Include JSDoc comments in the extracted data",
            "uiConfig": {
              "inputType": "checkbox"
            }
          },
          {
            "name": "parseMode",
            "type": "enum",
            "required": false,
            "defaultValue": "module",
            "description": "TypeScript parsing mode",
            "validation": {
              "allowedValues": [
                "module",
                "script"
              ]
            },
            "uiConfig": {
              "inputType": "select",
              "options": [
                {
                  "value": "module",
                  "label": "Module"
                },
                {
                  "value": "script",
                  "label": "Script"
                }
              ]
            }
          },
          {
            "name": "transformEnums",
            "type": "boolean",
            "required": false,
            "defaultValue": false,
            "description": "Transform enum definitions to a simpler format",
            "uiConfig": {
              "inputType": "checkbox"
            }
          },
          {
            "name": "flattenOutput",
            "type": "boolean",
            "required": false,
            "defaultValue": false,
            "description": "Flatten the output structure for easier consumption",
            "uiConfig": {
              "inputType": "checkbox"
            }
          },
          {
            "name": "outputFormat",
            "type": "enum",
            "required": false,
            "defaultValue": "standard",
            "description": "Output format for the parsed data",
            "validation": {
              "allowedValues": [
                "standard",
                "for_codegen",
                "for_analysis"
              ]
            },
            "uiConfig": {
              "inputType": "select",
              "options": [
                {
                  "value": "standard",
                  "label": "Standard"
                },
                {
                  "value": "for_codegen",
                  "label": "For Code Generation"
                },
                {
                  "value": "for_analysis",
                  "label": "For Analysis"
                }
              ]
            }
          },
          {
            "name": "batch",
            "type": "boolean",
            "required": false,
            "defaultValue": false,
            "description": "Enable batch processing mode",
            "uiConfig": {
              "inputType": "checkbox"
            }
          },
          {
            "name": "batchInputKey",
            "type": "string",
            "required": false,
            "defaultValue": "sources",
            "description": "Key to extract batch items from input",
            "uiConfig": {
              "inputType": "text"
            }
          }
        ],
        "handles": {
          "inputs": [
            "default"
          ],
          "outputs": [
            "results",
            "error"
          ]
        },
        "outputs": {
          "ast": {
            "type": "any",
            "description": "Parsed AST structure"
          },
          "interfaces": {
            "type": "any",
            "description": "Extracted interface definitions"
          },
          "types": {
            "type": "any",
            "description": "Extracted type aliases"
          },
          "enums": {
            "type": "any",
            "description": "Extracted enum definitions"
          },
          "error": {
            "type": "any",
            "description": "Error message if parsing fails"
          }
        },
        "execution": {
          "timeout": 30,
          "retryable": false,
          "maxRetries": 0
        },
        "examples": [
          {
            "name": "Parse Interface",
            "description": "Extract interface from TypeScript code",
            "configuration": {
              "source": "interface User {\n  id: string;\n  name: string;\n  age?: number;\n}",
              "extractPatterns": [
                "interface"
              ]
            }
          },
          {
            "name": "Parse Multiple Types",
            "description": "Extract interfaces, types, and enums",
            "configuration": {
              "source": "interface User { id: string; }\ntype Status = 'active' | 'inactive';\nenum Role { Admin, User }",
              "extractPatterns": [
                "interface",
                "type",
                "enum"
              ],
              "includeJSDoc": true
            }
          }
        ],
        "primaryDisplayField": "parseMode"
      }
    },
    {
      "name": "userResponse",
      "spec": {
        "nodeType": "NodeType.USER_RESPONSE",
        "displayName": "User Response",
        "category": "integration",
        "icon": "\ud83d\udcac",
        "color": "#E91E63",
        "description": "Collect user input",
        "fields": [
          {
            "name": "prompt",
            "type": "string",
            "required": true,
            "description": "Question to ask the user",
            "uiConfig": {
              "inputType": "textarea",
              "placeholder": "Enter prompt template..."
            }
          },
          {
            "name": "timeout",
            "type": "number",
            "required": false,
            "defaultValue": 300,
            "description": "Response timeout in seconds",
            "uiConfig": {
              "inputType": "number",
              "min": 0,
              "max": 3600
            }
          }
        ],
        "handles": {
          "inputs": [
            "default"
          ],
          "outputs": [
            "default"
          ]
        },
        "outputs": {
          "result": {
            "type": "any",
            "description": "Node execution result"
          }
        },
        "execution": {
          "timeout": 300,
          "retryable": true,
          "maxRetries": 3
        },
        "primaryDisplayField": "prompt"
      }
    }
  ],
  "operations": [
    {
      "name": "GetApiKeys",
      "type": "query",
      "entity": "ApiKey",
      "variables": [
        {
          "name": "service",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": false
        }
      ],
      "fields": [
        {
          "name": "api_keys",
          "args": [
            {
              "name": "service",
              "value": "service",
              "isVariable": true
            }
          ],
          "fields": []
        }
      ],
      "query_string": "query GetApiKeys($service: String) {\n    api_keys(service: $service)\n}"
    },
    {
      "name": "GetApiKey",
      "type": "query",
      "entity": "ApiKey",
      "variables": [
        {
          "name": "api_key_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": true
        }
      ],
      "fields": [
        {
          "name": "api_key",
          "args": [
            {
              "name": "api_key_id",
              "value": "api_key_id",
              "isVariable": true
            }
          ],
          "fields": [
            {
              "name": "id"
            },
            {
              "name": "label"
            },
            {
              "name": "service"
            }
          ]
        }
      ],
      "query_string": "query GetApiKey($api_key_id: String!) {\n    api_key(api_key_id: $api_key_id) {\n      id\n      label\n      service\n    }\n}"
    },
    {
      "name": "GetAvailableModels",
      "type": "query",
      "entity": "ApiKey",
      "variables": [
        {
          "name": "service",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": true
        },
        {
          "name": "api_key_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": true
        }
      ],
      "fields": [
        {
          "name": "available_models",
          "args": [
            {
              "name": "service",
              "value": "service",
              "isVariable": true
            },
            {
              "name": "api_key_id",
              "value": "api_key_id",
              "isVariable": true
            }
          ]
        }
      ],
      "query_string": "query GetAvailableModels($service: String!, $api_key_id: String!) {\n    available_models(service: $service, api_key_id: $api_key_id)\n}"
    },
    {
      "name": "CreateApiKey",
      "type": "mutation",
      "entity": "ApiKey",
      "variables": [
        {
          "name": "input",
          "type": "CreateApiKeyInput",
          "graphql_type": "CreateApiKeyInput",
          "python_type": "CreateApiKeyInput",
          "required": true
        }
      ],
      "fields": [
        {
          "name": "create_api_key",
          "args": [
            {
              "name": "input",
              "value": "input",
              "isVariable": true
            }
          ],
          "fields": [
            {
              "name": "success"
            },
            {
              "name": "api_key",
              "fields": [
                {
                  "name": "id"
                },
                {
                  "name": "label"
                },
                {
                  "name": "service"
                }
              ]
            },
            {
              "name": "message"
            },
            {
              "name": "error"
            }
          ]
        }
      ],
      "query_string": "mutation CreateApiKey($input: CreateApiKeyInput!) {\n    create_api_key(input: $input) {\n      success\n      api_key {\n        id\n        label\n        service\n      }\n      message\n      error\n    }\n}"
    },
    {
      "name": "TestApiKey",
      "type": "mutation",
      "entity": "ApiKey",
      "variables": [
        {
          "name": "api_key_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": true
        }
      ],
      "fields": [
        {
          "name": "test_api_key",
          "args": [
            {
              "name": "api_key_id",
              "value": "api_key_id",
              "isVariable": true
            }
          ],
          "fields": [
            {
              "name": "success"
            },
            {
              "name": "message"
            },
            {
              "name": "error"
            }
          ]
        }
      ],
      "query_string": "mutation TestApiKey($api_key_id: String!) {\n    test_api_key(api_key_id: $api_key_id) {\n      success\n      message\n      error\n    }\n}"
    },
    {
      "name": "DeleteApiKey",
      "type": "mutation",
      "entity": "ApiKey",
      "variables": [
        {
          "name": "api_key_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": true
        }
      ],
      "fields": [
        {
          "name": "delete_api_key",
          "args": [
            {
              "name": "api_key_id",
              "value": "api_key_id",
              "isVariable": true
            }
          ],
          "fields": [
            {
              "name": "success"
            },
            {
              "name": "message"
            }
          ]
        }
      ],
      "query_string": "mutation DeleteApiKey($api_key_id: String!) {\n    delete_api_key(api_key_id: $api_key_id) {\n      success\n      message\n    }\n}"
    },
    {
      "name": "RegisterCliSession",
      "type": "mutation",
      "entity": "CliSession",
      "variables": [
        {
          "name": "input",
          "type": "RegisterCliSessionInput",
          "graphql_type": "RegisterCliSessionInput",
          "python_type": "RegisterCliSessionInput",
          "required": true
        }
      ],
      "fields": [
        {
          "name": "register_cli_session",
          "args": [
            {
              "name": "input",
              "value": "input",
              "isVariable": true
            }
          ],
          "fields": [
            {
              "name": "success"
            },
            {
              "name": "message"
            },
            {
              "name": "error"
            }
          ]
        }
      ],
      "query_string": "mutation RegisterCliSession($input: RegisterCliSessionInput!) {\n    register_cli_session(input: $input) {\n      success\n      message\n      error\n    }\n}"
    },
    {
      "name": "UnregisterCliSession",
      "type": "mutation",
      "entity": "CliSession",
      "variables": [
        {
          "name": "input",
          "type": "UnregisterCliSessionInput",
          "graphql_type": "UnregisterCliSessionInput",
          "python_type": "UnregisterCliSessionInput",
          "required": true
        }
      ],
      "fields": [
        {
          "name": "unregister_cli_session",
          "args": [
            {
              "name": "input",
              "value": "input",
              "isVariable": true
            }
          ],
          "fields": [
            {
              "name": "success"
            },
            {
              "name": "message"
            },
            {
              "name": "error"
            }
          ]
        }
      ],
      "query_string": "mutation UnregisterCliSession($input: UnregisterCliSessionInput!) {\n    unregister_cli_session(input: $input) {\n      success\n      message\n      error\n    }\n}"
    },
    {
      "name": "ListConversations",
      "type": "query",
      "entity": "Conversation",
      "variables": [
        {
          "name": "person_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": false
        },
        {
          "name": "execution_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": false
        },
        {
          "name": "search",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": false
        },
        {
          "name": "show_forgotten",
          "type": "Boolean",
          "graphql_type": "Boolean",
          "python_type": "Boolean",
          "required": false
        },
        {
          "name": "limit",
          "type": "Int",
          "graphql_type": "Int",
          "python_type": "Int",
          "required": false
        },
        {
          "name": "offset",
          "type": "Int",
          "graphql_type": "Int",
          "python_type": "Int",
          "required": false
        },
        {
          "name": "since",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": false
        }
      ],
      "fields": [
        {
          "name": "conversations",
          "args": [
            {
              "name": "person_id",
              "value": "person_id",
              "isVariable": true
            },
            {
              "name": "execution_id",
              "value": "execution_id",
              "isVariable": true
            },
            {
              "name": "search",
              "value": "search",
              "isVariable": true
            },
            {
              "name": "show_forgotten",
              "value": "show_forgotten",
              "isVariable": true
            },
            {
              "name": "limit",
              "value": "limit",
              "isVariable": true
            },
            {
              "name": "offset",
              "value": "offset",
              "isVariable": true
            },
            {
              "name": "since",
              "value": "since",
              "isVariable": true
            }
          ],
          "fields": []
        }
      ],
      "query_string": "query ListConversations($person_id: String, $execution_id: String, $search: String, $show_forgotten: Boolean, $limit: Int, $offset: Int, $since: String) {\n    conversations(person_id: $person_id, execution_id: $execution_id, search: $search, show_forgotten: $show_forgotten, limit: $limit, offset: $offset, since: $since)\n}"
    },
    {
      "name": "GetDiagram",
      "type": "query",
      "entity": "Diagram",
      "variables": [
        {
          "name": "diagram_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": true
        }
      ],
      "fields": [
        {
          "name": "diagram",
          "args": [
            {
              "name": "diagram_id",
              "value": "diagram_id",
              "isVariable": true
            }
          ],
          "fields": [
            {
              "name": "nodes",
              "fields": [
                {
                  "name": "id"
                },
                {
                  "name": "type"
                },
                {
                  "name": "position",
                  "fields": [
                    {
                      "name": "x"
                    },
                    {
                      "name": "y"
                    }
                  ]
                },
                {
                  "name": "data"
                }
              ]
            },
            {
              "name": "handles",
              "fields": [
                {
                  "name": "id"
                },
                {
                  "name": "node_id"
                },
                {
                  "name": "label"
                },
                {
                  "name": "direction"
                },
                {
                  "name": "data_type"
                },
                {
                  "name": "position"
                }
              ]
            },
            {
              "name": "arrows",
              "fields": [
                {
                  "name": "id"
                },
                {
                  "name": "source"
                },
                {
                  "name": "target"
                },
                {
                  "name": "content_type"
                },
                {
                  "name": "label"
                },
                {
                  "name": "data"
                }
              ]
            },
            {
              "name": "persons",
              "fields": [
                {
                  "name": "id"
                },
                {
                  "name": "label"
                },
                {
                  "name": "llm_config",
                  "fields": [
                    {
                      "name": "service"
                    },
                    {
                      "name": "model"
                    },
                    {
                      "name": "api_key_id"
                    },
                    {
                      "name": "system_prompt"
                    }
                  ]
                },
                {
                  "name": "type"
                }
              ]
            },
            {
              "name": "metadata",
              "fields": [
                {
                  "name": "id"
                },
                {
                  "name": "name"
                },
                {
                  "name": "description"
                },
                {
                  "name": "version"
                },
                {
                  "name": "created"
                },
                {
                  "name": "modified"
                },
                {
                  "name": "author"
                },
                {
                  "name": "tags"
                }
              ]
            }
          ]
        }
      ],
      "query_string": "query GetDiagram($diagram_id: String!) {\n    diagram(diagram_id: $diagram_id) {\n      nodes {\n        id\n        type\n        position {\n          x\n          y\n        }\n        data\n      }\n      handles {\n        id\n        node_id\n        label\n        direction\n        data_type\n        position\n      }\n      arrows {\n        id\n        source\n        target\n        content_type\n        label\n        data\n      }\n      persons {\n        id\n        label\n        llm_config {\n          service\n          model\n          api_key_id\n          system_prompt\n        }\n        type\n      }\n      metadata {\n        id\n        name\n        description\n        version\n        created\n        modified\n        author\n        tags\n      }\n    }\n}"
    },
    {
      "name": "ListDiagrams",
      "type": "query",
      "entity": "Diagram",
      "variables": [
        {
          "name": "filter",
          "type": "DiagramFilterInput",
          "graphql_type": "DiagramFilterInput",
          "python_type": "DiagramFilterInput",
          "required": false
        },
        {
          "name": "limit",
          "type": "Int",
          "graphql_type": "Int",
          "python_type": "Int",
          "required": false
        },
        {
          "name": "offset",
          "type": "Int",
          "graphql_type": "Int",
          "python_type": "Int",
          "required": false
        }
      ],
      "fields": [
        {
          "name": "diagrams",
          "args": [
            {
              "name": "filter",
              "value": "filter",
              "isVariable": true
            },
            {
              "name": "limit",
              "value": "limit",
              "isVariable": true
            },
            {
              "name": "offset",
              "value": "offset",
              "isVariable": true
            }
          ],
          "fields": [
            {
              "name": "metadata",
              "fields": [
                {
                  "name": "id"
                },
                {
                  "name": "name"
                },
                {
                  "name": "description"
                },
                {
                  "name": "author"
                },
                {
                  "name": "created"
                },
                {
                  "name": "modified"
                },
                {
                  "name": "tags"
                }
              ]
            },
            {
              "name": "nodeCount"
            },
            {
              "name": "arrowCount"
            }
          ]
        }
      ],
      "query_string": "query ListDiagrams($filter: DiagramFilterInput, $limit: Int, $offset: Int) {\n    diagrams(filter: $filter, limit: $limit, offset: $offset) {\n      metadata {\n        id\n        name\n        description\n        author\n        created\n        modified\n        tags\n      }\n      nodeCount\n      arrowCount\n    }\n}"
    },
    {
      "name": "CreateDiagram",
      "type": "mutation",
      "entity": "Diagram",
      "variables": [
        {
          "name": "input",
          "type": "CreateDiagramInput",
          "graphql_type": "CreateDiagramInput",
          "python_type": "CreateDiagramInput",
          "required": true
        }
      ],
      "fields": [
        {
          "name": "create_diagram",
          "args": [
            {
              "name": "input",
              "value": "input",
              "isVariable": true
            }
          ],
          "fields": [
            {
              "name": "success"
            },
            {
              "name": "diagram",
              "fields": [
                {
                  "name": "metadata",
                  "fields": [
                    {
                      "name": "id"
                    },
                    {
                      "name": "name"
                    }
                  ]
                }
              ]
            },
            {
              "name": "message"
            },
            {
              "name": "error"
            }
          ]
        }
      ],
      "query_string": "mutation CreateDiagram($input: CreateDiagramInput!) {\n    create_diagram(input: $input) {\n      success\n      diagram {\n        metadata {\n          id\n          name\n        }\n      }\n      message\n      error\n    }\n}"
    },
    {
      "name": "ExecuteDiagram",
      "type": "mutation",
      "entity": "Diagram",
      "variables": [
        {
          "name": "input",
          "type": "ExecuteDiagramInput",
          "graphql_type": "ExecuteDiagramInput",
          "python_type": "ExecuteDiagramInput",
          "required": true
        }
      ],
      "fields": [
        {
          "name": "execute_diagram",
          "args": [
            {
              "name": "input",
              "value": "input",
              "isVariable": true
            }
          ],
          "fields": [
            {
              "name": "success"
            },
            {
              "name": "execution",
              "fields": [
                {
                  "name": "id"
                }
              ]
            },
            {
              "name": "message"
            },
            {
              "name": "error"
            }
          ]
        }
      ],
      "query_string": "mutation ExecuteDiagram($input: ExecuteDiagramInput!) {\n    execute_diagram(input: $input) {\n      success\n      execution {\n        id\n      }\n      message\n      error\n    }\n}"
    },
    {
      "name": "DeleteDiagram",
      "type": "mutation",
      "entity": "Diagram",
      "variables": [
        {
          "name": "diagram_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": true
        }
      ],
      "fields": [
        {
          "name": "delete_diagram",
          "args": [
            {
              "name": "diagram_id",
              "value": "diagram_id",
              "isVariable": true
            }
          ],
          "fields": [
            {
              "name": "success"
            },
            {
              "name": "message"
            },
            {
              "name": "error"
            }
          ]
        }
      ],
      "query_string": "mutation DeleteDiagram($diagram_id: String!) {\n    delete_diagram(diagram_id: $diagram_id) {\n      success\n      message\n      error\n    }\n}"
    },
    {
      "name": "GetExecution",
      "type": "query",
      "entity": "Execution",
      "variables": [
        {
          "name": "execution_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": true
        }
      ],
      "fields": [
        {
          "name": "execution",
          "args": [
            {
              "name": "execution_id",
              "value": "execution_id",
              "isVariable": true
            }
          ],
          "fields": [
            {
              "name": "id"
            },
            {
              "name": "status"
            },
            {
              "name": "diagram_id"
            },
            {
              "name": "started_at"
            },
            {
              "name": "ended_at"
            },
            {
              "name": "error"
            },
            {
              "name": "node_states"
            },
            {
              "name": "node_outputs"
            },
            {
              "name": "variables"
            },
            {
              "name": "metrics"
            },
            {
              "name": "llm_usage",
              "fields": [
                {
                  "name": "input"
                },
                {
                  "name": "output"
                },
                {
                  "name": "cached"
                },
                {
                  "name": "total"
                }
              ]
            }
          ]
        }
      ],
      "query_string": "query GetExecution($execution_id: String!) {\n    execution(execution_id: $execution_id) {\n      id\n      status\n      diagram_id\n      started_at\n      ended_at\n      error\n      node_states\n      node_outputs\n      variables\n      metrics\n      llm_usage {\n        input\n        output\n        cached\n        total\n      }\n    }\n}"
    },
    {
      "name": "ListExecutions",
      "type": "query",
      "entity": "Execution",
      "variables": [
        {
          "name": "filter",
          "type": "ExecutionFilterInput",
          "graphql_type": "ExecutionFilterInput",
          "python_type": "ExecutionFilterInput",
          "required": false
        },
        {
          "name": "limit",
          "type": "Int",
          "graphql_type": "Int",
          "python_type": "Int",
          "required": false
        },
        {
          "name": "offset",
          "type": "Int",
          "graphql_type": "Int",
          "python_type": "Int",
          "required": false
        }
      ],
      "fields": [
        {
          "name": "executions",
          "args": [
            {
              "name": "filter",
              "value": "filter",
              "isVariable": true
            },
            {
              "name": "limit",
              "value": "limit",
              "isVariable": true
            },
            {
              "name": "offset",
              "value": "offset",
              "isVariable": true
            }
          ],
          "fields": [
            {
              "name": "id"
            },
            {
              "name": "status"
            },
            {
              "name": "diagram_id"
            },
            {
              "name": "started_at"
            },
            {
              "name": "ended_at"
            },
            {
              "name": "error"
            }
          ]
        }
      ],
      "query_string": "query ListExecutions($filter: ExecutionFilterInput, $limit: Int, $offset: Int) {\n    executions(filter: $filter, limit: $limit, offset: $offset) {\n      id\n      status\n      diagram_id\n      started_at\n      ended_at\n      error\n    }\n}"
    },
    {
      "name": "ExecutionUpdates",
      "type": "subscription",
      "entity": "Execution",
      "variables": [
        {
          "name": "execution_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": true
        }
      ],
      "fields": [
        {
          "name": "execution_updates",
          "args": [
            {
              "name": "execution_id",
              "value": "execution_id",
              "isVariable": true
            }
          ],
          "fields": [
            {
              "name": "execution_id"
            },
            {
              "name": "event_type"
            },
            {
              "name": "data"
            },
            {
              "name": "timestamp"
            }
          ]
        }
      ],
      "query_string": "subscription ExecutionUpdates($execution_id: String!) {\n    execution_updates(execution_id: $execution_id) {\n      execution_id\n      event_type\n      data\n      timestamp\n    }\n}"
    },
    {
      "name": "ControlExecution",
      "type": "mutation",
      "entity": "Execution",
      "variables": [
        {
          "name": "input",
          "type": "ExecutionControlInput",
          "graphql_type": "ExecutionControlInput",
          "python_type": "ExecutionControlInput",
          "required": true
        }
      ],
      "fields": [
        {
          "name": "control_execution",
          "args": [
            {
              "name": "input",
              "value": "input",
              "isVariable": true
            }
          ],
          "fields": [
            {
              "name": "success"
            },
            {
              "name": "execution",
              "fields": [
                {
                  "name": "id"
                },
                {
                  "name": "status"
                }
              ]
            },
            {
              "name": "message"
            },
            {
              "name": "error"
            }
          ]
        }
      ],
      "query_string": "mutation ControlExecution($input: ExecutionControlInput!) {\n    control_execution(input: $input) {\n      success\n      execution {\n        id\n        status\n      }\n      message\n      error\n    }\n}"
    },
    {
      "name": "SendInteractiveResponse",
      "type": "mutation",
      "entity": "Execution",
      "variables": [
        {
          "name": "input",
          "type": "InteractiveResponseInput",
          "graphql_type": "InteractiveResponseInput",
          "python_type": "InteractiveResponseInput",
          "required": true
        }
      ],
      "fields": [
        {
          "name": "send_interactive_response",
          "args": [
            {
              "name": "input",
              "value": "input",
              "isVariable": true
            }
          ],
          "fields": [
            {
              "name": "success"
            },
            {
              "name": "message"
            },
            {
              "name": "error"
            }
          ]
        }
      ],
      "query_string": "mutation SendInteractiveResponse($input: InteractiveResponseInput!) {\n    send_interactive_response(input: $input) {\n      success\n      message\n      error\n    }\n}"
    },
    {
      "name": "UpdateNodeState",
      "type": "mutation",
      "entity": "Execution",
      "variables": [
        {
          "name": "input",
          "type": "UpdateNodeStateInput",
          "graphql_type": "UpdateNodeStateInput",
          "python_type": "UpdateNodeStateInput",
          "required": true
        }
      ],
      "fields": [
        {
          "name": "update_node_state",
          "args": [
            {
              "name": "input",
              "value": "input",
              "isVariable": true
            }
          ],
          "fields": [
            {
              "name": "success"
            },
            {
              "name": "execution",
              "fields": [
                {
                  "name": "id"
                },
                {
                  "name": "status"
                }
              ]
            },
            {
              "name": "message"
            },
            {
              "name": "error"
            }
          ]
        }
      ],
      "query_string": "mutation UpdateNodeState($input: UpdateNodeStateInput!) {\n    update_node_state(input: $input) {\n      success\n      execution {\n        id\n        status\n      }\n      message\n      error\n    }\n}"
    },
    {
      "name": "UploadFile",
      "type": "mutation",
      "entity": "File",
      "variables": [
        {
          "name": "file",
          "type": "Upload",
          "graphql_type": "Upload",
          "python_type": "Upload",
          "required": true
        },
        {
          "name": "path",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": false
        }
      ],
      "fields": [
        {
          "name": "upload_file",
          "args": [
            {
              "name": "file",
              "value": "file",
              "isVariable": true
            },
            {
              "name": "path",
              "value": "path",
              "isVariable": true
            }
          ],
          "fields": []
        }
      ],
      "query_string": "mutation UploadFile($file: Upload!, $path: String) {\n    upload_file(file: $file, path: $path)\n}"
    },
    {
      "name": "UploadDiagram",
      "type": "mutation",
      "entity": "File",
      "variables": [
        {
          "name": "file",
          "type": "Upload",
          "graphql_type": "Upload",
          "python_type": "Upload",
          "required": true
        },
        {
          "name": "format",
          "type": "DiagramFormatGraphQL",
          "graphql_type": "DiagramFormatGraphQL",
          "python_type": "DiagramFormatGraphQL",
          "required": true
        }
      ],
      "fields": [
        {
          "name": "upload_diagram",
          "args": [
            {
              "name": "file",
              "value": "file",
              "isVariable": true
            },
            {
              "name": "format",
              "value": "format",
              "isVariable": true
            }
          ],
          "fields": []
        }
      ],
      "query_string": "mutation UploadDiagram($file: Upload!, $format: DiagramFormatGraphQL!) {\n    upload_diagram(file: $file, format: $format)\n}"
    },
    {
      "name": "ValidateDiagram",
      "type": "mutation",
      "entity": "File",
      "variables": [
        {
          "name": "content",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": true
        },
        {
          "name": "format",
          "type": "DiagramFormatGraphQL",
          "graphql_type": "DiagramFormatGraphQL",
          "python_type": "DiagramFormatGraphQL",
          "required": true
        }
      ],
      "fields": [
        {
          "name": "validate_diagram",
          "args": [
            {
              "name": "content",
              "value": "content",
              "isVariable": true
            },
            {
              "name": "format",
              "value": "format",
              "isVariable": true
            }
          ],
          "fields": []
        }
      ],
      "query_string": "mutation ValidateDiagram($content: String!, $format: DiagramFormatGraphQL!) {\n    validate_diagram(content: $content, format: $format)\n}"
    },
    {
      "name": "ConvertDiagramFormat",
      "type": "mutation",
      "entity": "File",
      "variables": [
        {
          "name": "content",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": true
        },
        {
          "name": "from_format",
          "type": "DiagramFormatGraphQL",
          "graphql_type": "DiagramFormatGraphQL",
          "python_type": "DiagramFormatGraphQL",
          "required": true
        },
        {
          "name": "to_format",
          "type": "DiagramFormatGraphQL",
          "graphql_type": "DiagramFormatGraphQL",
          "python_type": "DiagramFormatGraphQL",
          "required": true
        }
      ],
      "fields": [
        {
          "name": "convert_diagram_format",
          "args": [
            {
              "name": "content",
              "value": "content",
              "isVariable": true
            },
            {
              "name": "from_format",
              "value": "from_format",
              "isVariable": true
            },
            {
              "name": "to_format",
              "value": "to_format",
              "isVariable": true
            }
          ],
          "fields": [
            {
              "name": "success"
            },
            {
              "name": "data"
            },
            {
              "name": "format"
            },
            {
              "name": "message"
            },
            {
              "name": "error"
            }
          ]
        }
      ],
      "query_string": "mutation ConvertDiagramFormat($content: String!, $from_format: DiagramFormatGraphQL!, $to_format: DiagramFormatGraphQL!) {\n    convert_diagram_format(content: $content, from_format: $from_format, to_format: $to_format) {\n      success\n      data\n      format\n      message\n      error\n    }\n}"
    },
    {
      "name": "GetSupportedFormats",
      "type": "query",
      "entity": "Format",
      "variables": [],
      "fields": [
        {
          "name": "supported_formats",
          "fields": []
        }
      ],
      "query_string": "query GetSupportedFormats {\n    supported_formats\n}"
    },
    {
      "name": "CreateNode",
      "type": "mutation",
      "entity": "Node",
      "variables": [
        {
          "name": "diagram_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": true
        },
        {
          "name": "input",
          "type": "CreateNodeInput",
          "graphql_type": "CreateNodeInput",
          "python_type": "CreateNodeInput",
          "required": true
        }
      ],
      "fields": [
        {
          "name": "create_node",
          "args": [
            {
              "name": "diagram_id",
              "value": "diagram_id",
              "isVariable": true
            },
            {
              "name": "input",
              "value": "input",
              "isVariable": true
            }
          ],
          "fields": [
            {
              "name": "success"
            },
            {
              "name": "node",
              "fields": [
                {
                  "name": "id"
                },
                {
                  "name": "type"
                },
                {
                  "name": "position",
                  "fields": [
                    {
                      "name": "x"
                    },
                    {
                      "name": "y"
                    }
                  ]
                },
                {
                  "name": "data"
                }
              ]
            },
            {
              "name": "message"
            },
            {
              "name": "error"
            }
          ]
        }
      ],
      "query_string": "mutation CreateNode($diagram_id: String!, $input: CreateNodeInput!) {\n    create_node(diagram_id: $diagram_id, input: $input) {\n      success\n      node {\n        id\n        type\n        position {\n          x\n          y\n        }\n        data\n      }\n      message\n      error\n    }\n}"
    },
    {
      "name": "UpdateNode",
      "type": "mutation",
      "entity": "Node",
      "variables": [
        {
          "name": "diagram_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": true
        },
        {
          "name": "node_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": true
        },
        {
          "name": "input",
          "type": "UpdateNodeInput",
          "graphql_type": "UpdateNodeInput",
          "python_type": "UpdateNodeInput",
          "required": true
        }
      ],
      "fields": [
        {
          "name": "update_node",
          "args": [
            {
              "name": "diagram_id",
              "value": "diagram_id",
              "isVariable": true
            },
            {
              "name": "node_id",
              "value": "node_id",
              "isVariable": true
            },
            {
              "name": "input",
              "value": "input",
              "isVariable": true
            }
          ],
          "fields": [
            {
              "name": "success"
            },
            {
              "name": "message"
            },
            {
              "name": "error"
            }
          ]
        }
      ],
      "query_string": "mutation UpdateNode($diagram_id: String!, $node_id: String!, $input: UpdateNodeInput!) {\n    update_node(diagram_id: $diagram_id, node_id: $node_id, input: $input) {\n      success\n      message\n      error\n    }\n}"
    },
    {
      "name": "DeleteNode",
      "type": "mutation",
      "entity": "Node",
      "variables": [
        {
          "name": "diagram_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": true
        },
        {
          "name": "node_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": true
        }
      ],
      "fields": [
        {
          "name": "delete_node",
          "args": [
            {
              "name": "diagram_id",
              "value": "diagram_id",
              "isVariable": true
            },
            {
              "name": "node_id",
              "value": "node_id",
              "isVariable": true
            }
          ],
          "fields": [
            {
              "name": "success"
            },
            {
              "name": "message"
            },
            {
              "name": "error"
            }
          ]
        }
      ],
      "query_string": "mutation DeleteNode($diagram_id: String!, $node_id: String!) {\n    delete_node(diagram_id: $diagram_id, node_id: $node_id) {\n      success\n      message\n      error\n    }\n}"
    },
    {
      "name": "GetPerson",
      "type": "query",
      "entity": "Person",
      "variables": [
        {
          "name": "person_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": true
        }
      ],
      "fields": [
        {
          "name": "person",
          "args": [
            {
              "name": "person_id",
              "value": "person_id",
              "isVariable": true
            }
          ],
          "fields": [
            {
              "name": "id"
            },
            {
              "name": "label"
            },
            {
              "name": "type"
            },
            {
              "name": "llm_config",
              "fields": [
                {
                  "name": "service"
                },
                {
                  "name": "model"
                },
                {
                  "name": "api_key_id"
                },
                {
                  "name": "system_prompt"
                }
              ]
            }
          ]
        }
      ],
      "query_string": "query GetPerson($person_id: String!) {\n    person(person_id: $person_id) {\n      id\n      label\n      type\n      llm_config {\n        service\n        model\n        api_key_id\n        system_prompt\n      }\n    }\n}"
    },
    {
      "name": "ListPersons",
      "type": "query",
      "entity": "Person",
      "variables": [
        {
          "name": "limit",
          "type": "Int",
          "graphql_type": "Int",
          "python_type": "Int",
          "required": false
        }
      ],
      "fields": [
        {
          "name": "persons",
          "args": [
            {
              "name": "limit",
              "value": "limit",
              "isVariable": true
            }
          ],
          "fields": [
            {
              "name": "id"
            },
            {
              "name": "label"
            },
            {
              "name": "type"
            },
            {
              "name": "llm_config",
              "fields": [
                {
                  "name": "service"
                },
                {
                  "name": "model"
                },
                {
                  "name": "api_key_id"
                }
              ]
            }
          ]
        }
      ],
      "query_string": "query ListPersons($limit: Int) {\n    persons(limit: $limit) {\n      id\n      label\n      type\n      llm_config {\n        service\n        model\n        api_key_id\n      }\n    }\n}"
    },
    {
      "name": "CreatePerson",
      "type": "mutation",
      "entity": "Person",
      "variables": [
        {
          "name": "input",
          "type": "CreatePersonInput",
          "graphql_type": "CreatePersonInput",
          "python_type": "CreatePersonInput",
          "required": true
        }
      ],
      "fields": [
        {
          "name": "create_person",
          "args": [
            {
              "name": "input",
              "value": "input",
              "isVariable": true
            }
          ],
          "fields": [
            {
              "name": "success"
            },
            {
              "name": "person",
              "fields": [
                {
                  "name": "id"
                },
                {
                  "name": "label"
                }
              ]
            },
            {
              "name": "message"
            },
            {
              "name": "error"
            }
          ]
        }
      ],
      "query_string": "mutation CreatePerson($input: CreatePersonInput!) {\n    create_person(input: $input) {\n      success\n      person {\n        id\n        label\n      }\n      message\n      error\n    }\n}"
    },
    {
      "name": "UpdatePerson",
      "type": "mutation",
      "entity": "Person",
      "variables": [
        {
          "name": "person_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": true
        },
        {
          "name": "input",
          "type": "UpdatePersonInput",
          "graphql_type": "UpdatePersonInput",
          "python_type": "UpdatePersonInput",
          "required": true
        }
      ],
      "fields": [
        {
          "name": "update_person",
          "args": [
            {
              "name": "person_id",
              "value": "person_id",
              "isVariable": true
            },
            {
              "name": "input",
              "value": "input",
              "isVariable": true
            }
          ],
          "fields": [
            {
              "name": "success"
            },
            {
              "name": "person",
              "fields": [
                {
                  "name": "id"
                },
                {
                  "name": "label"
                }
              ]
            },
            {
              "name": "message"
            },
            {
              "name": "error"
            }
          ]
        }
      ],
      "query_string": "mutation UpdatePerson($person_id: String!, $input: UpdatePersonInput!) {\n    update_person(person_id: $person_id, input: $input) {\n      success\n      person {\n        id\n        label\n      }\n      message\n      error\n    }\n}"
    },
    {
      "name": "DeletePerson",
      "type": "mutation",
      "entity": "Person",
      "variables": [
        {
          "name": "person_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": true
        }
      ],
      "fields": [
        {
          "name": "delete_person",
          "args": [
            {
              "name": "person_id",
              "value": "person_id",
              "isVariable": true
            }
          ],
          "fields": [
            {
              "name": "success"
            },
            {
              "name": "message"
            },
            {
              "name": "error"
            }
          ]
        }
      ],
      "query_string": "mutation DeletePerson($person_id: String!) {\n    delete_person(person_id: $person_id) {\n      success\n      message\n      error\n    }\n}"
    },
    {
      "name": "ListPromptFiles",
      "type": "query",
      "entity": "Prompt",
      "variables": [],
      "fields": [
        {
          "name": "prompt_files",
          "fields": []
        }
      ],
      "query_string": "query ListPromptFiles {\n    prompt_files\n}"
    },
    {
      "name": "GetPromptFile",
      "type": "query",
      "entity": "Prompt",
      "variables": [
        {
          "name": "filename",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": true
        }
      ],
      "fields": [
        {
          "name": "prompt_file",
          "args": [
            {
              "name": "filename",
              "value": "filename",
              "isVariable": true
            }
          ],
          "fields": []
        }
      ],
      "query_string": "query GetPromptFile($filename: String!) {\n    prompt_file(filename: $filename)\n}"
    },
    {
      "name": "GetProviders",
      "type": "query",
      "entity": "Provider",
      "variables": [],
      "fields": [
        {
          "name": "providers",
          "fields": []
        }
      ],
      "query_string": "query GetProviders {\n    providers\n}"
    },
    {
      "name": "GetProviderOperations",
      "type": "query",
      "entity": "Provider",
      "variables": [
        {
          "name": "provider",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": true
        }
      ],
      "fields": [
        {
          "name": "provider_operations",
          "args": [
            {
              "name": "provider",
              "value": "provider",
              "isVariable": true
            }
          ],
          "fields": []
        }
      ],
      "query_string": "query GetProviderOperations($provider: String!) {\n    provider_operations(provider: $provider)\n}"
    },
    {
      "name": "GetOperationSchema",
      "type": "query",
      "entity": "Provider",
      "variables": [
        {
          "name": "provider",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": true
        },
        {
          "name": "operation",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": true
        }
      ],
      "fields": [
        {
          "name": "operation_schema",
          "args": [
            {
              "name": "provider",
              "value": "provider",
              "isVariable": true
            },
            {
              "name": "operation",
              "value": "operation",
              "isVariable": true
            }
          ],
          "fields": []
        }
      ],
      "query_string": "query GetOperationSchema($provider: String!, $operation: String!) {\n    operation_schema(provider: $provider, operation: $operation)\n}"
    },
    {
      "name": "GetSystemInfo",
      "type": "query",
      "entity": "System",
      "variables": [],
      "fields": [
        {
          "name": "system_info",
          "fields": []
        }
      ],
      "query_string": "query GetSystemInfo {\n    system_info\n}"
    },
    {
      "name": "GetExecutionCapabilities",
      "type": "query",
      "entity": "System",
      "variables": [],
      "fields": [
        {
          "name": "execution_capabilities",
          "fields": []
        }
      ],
      "query_string": "query GetExecutionCapabilities {\n    execution_capabilities\n}"
    },
    {
      "name": "HealthCheck",
      "type": "query",
      "entity": "System",
      "variables": [],
      "fields": [
        {
          "name": "health_check",
          "fields": []
        }
      ],
      "query_string": "query HealthCheck {\n    health_check\n}"
    },
    {
      "name": "GetExecutionOrder",
      "type": "query",
      "entity": "System",
      "variables": [
        {
          "name": "execution_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": true
        }
      ],
      "fields": [
        {
          "name": "execution_order",
          "args": [
            {
              "name": "execution_id",
              "value": "execution_id",
              "isVariable": true
            }
          ],
          "fields": []
        }
      ],
      "query_string": "query GetExecutionOrder($execution_id: String!) {\n    execution_order(execution_id: $execution_id)\n}"
    },
    {
      "name": "GetExecutionMetrics",
      "type": "query",
      "entity": "System",
      "variables": [
        {
          "name": "execution_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": true
        }
      ],
      "fields": [
        {
          "name": "execution_metrics",
          "args": [
            {
              "name": "execution_id",
              "value": "execution_id",
              "isVariable": true
            }
          ],
          "fields": []
        }
      ],
      "query_string": "query GetExecutionMetrics($execution_id: String!) {\n    execution_metrics(execution_id: $execution_id)\n}"
    },
    {
      "name": "GetExecutionHistory",
      "type": "query",
      "entity": "System",
      "variables": [
        {
          "name": "diagram_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": false
        },
        {
          "name": "limit",
          "type": "Int",
          "graphql_type": "Int",
          "python_type": "Int",
          "required": false
        },
        {
          "name": "include_metrics",
          "type": "Boolean",
          "graphql_type": "Boolean",
          "python_type": "Boolean",
          "required": false
        }
      ],
      "fields": [
        {
          "name": "execution_history",
          "args": [
            {
              "name": "diagram_id",
              "value": "diagram_id",
              "isVariable": true
            },
            {
              "name": "limit",
              "value": "limit",
              "isVariable": true
            },
            {
              "name": "include_metrics",
              "value": "include_metrics",
              "isVariable": true
            }
          ],
          "fields": []
        }
      ],
      "query_string": "query GetExecutionHistory($diagram_id: String, $limit: Int, $include_metrics: Boolean) {\n    execution_history(diagram_id: $diagram_id, limit: $limit, include_metrics: $include_metrics)\n}"
    },
    {
      "name": "GetActiveCliSession",
      "type": "query",
      "entity": "System",
      "variables": [],
      "fields": [
        {
          "name": "active_cli_session",
          "fields": []
        }
      ],
      "query_string": "query GetActiveCliSession {\n    active_cli_session\n}"
    }
  ],
  "imports": {
    "typing": [
      "Any",
      "Dict",
      "List",
      "Optional",
      "TypedDict"
    ],
    "graphql": [],
    "domain": [
      "CreatePersonInput",
      "CreateNodeInput",
      "ExecutionFilterInput",
      "CreateApiKeyInput",
      "ExecuteDiagramInput",
      "InteractiveResponseInput",
      "UpdateNodeStateInput",
      "CreateDiagramInput",
      "Upload",
      "UpdateNodeInput",
      "DiagramFormatGraphQL",
      "ExecutionControlInput",
      "UnregisterCliSessionInput",
      "UpdatePersonInput",
      "RegisterCliSessionInput",
      "DiagramFilterInput"
    ]
  },
  "raw_queries": [
    {
      "name": "GetApiKeys",
      "type": "query",
      "entity": "ApiKey",
      "variables": [
        {
          "name": "service",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": false
        }
      ],
      "fields": [
        {
          "name": "api_keys",
          "args": [
            {
              "name": "service",
              "value": "service",
              "isVariable": true
            }
          ],
          "fields": []
        }
      ],
      "query_string": "query GetApiKeys($service: String) {\n    api_keys(service: $service)\n}"
    },
    {
      "name": "GetApiKey",
      "type": "query",
      "entity": "ApiKey",
      "variables": [
        {
          "name": "api_key_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": true
        }
      ],
      "fields": [
        {
          "name": "api_key",
          "args": [
            {
              "name": "api_key_id",
              "value": "api_key_id",
              "isVariable": true
            }
          ],
          "fields": [
            {
              "name": "id"
            },
            {
              "name": "label"
            },
            {
              "name": "service"
            }
          ]
        }
      ],
      "query_string": "query GetApiKey($api_key_id: String!) {\n    api_key(api_key_id: $api_key_id) {\n      id\n      label\n      service\n    }\n}"
    },
    {
      "name": "GetAvailableModels",
      "type": "query",
      "entity": "ApiKey",
      "variables": [
        {
          "name": "service",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": true
        },
        {
          "name": "api_key_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": true
        }
      ],
      "fields": [
        {
          "name": "available_models",
          "args": [
            {
              "name": "service",
              "value": "service",
              "isVariable": true
            },
            {
              "name": "api_key_id",
              "value": "api_key_id",
              "isVariable": true
            }
          ]
        }
      ],
      "query_string": "query GetAvailableModels($service: String!, $api_key_id: String!) {\n    available_models(service: $service, api_key_id: $api_key_id)\n}"
    },
    {
      "name": "ListConversations",
      "type": "query",
      "entity": "Conversation",
      "variables": [
        {
          "name": "person_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": false
        },
        {
          "name": "execution_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": false
        },
        {
          "name": "search",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": false
        },
        {
          "name": "show_forgotten",
          "type": "Boolean",
          "graphql_type": "Boolean",
          "python_type": "Boolean",
          "required": false
        },
        {
          "name": "limit",
          "type": "Int",
          "graphql_type": "Int",
          "python_type": "Int",
          "required": false
        },
        {
          "name": "offset",
          "type": "Int",
          "graphql_type": "Int",
          "python_type": "Int",
          "required": false
        },
        {
          "name": "since",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": false
        }
      ],
      "fields": [
        {
          "name": "conversations",
          "args": [
            {
              "name": "person_id",
              "value": "person_id",
              "isVariable": true
            },
            {
              "name": "execution_id",
              "value": "execution_id",
              "isVariable": true
            },
            {
              "name": "search",
              "value": "search",
              "isVariable": true
            },
            {
              "name": "show_forgotten",
              "value": "show_forgotten",
              "isVariable": true
            },
            {
              "name": "limit",
              "value": "limit",
              "isVariable": true
            },
            {
              "name": "offset",
              "value": "offset",
              "isVariable": true
            },
            {
              "name": "since",
              "value": "since",
              "isVariable": true
            }
          ],
          "fields": []
        }
      ],
      "query_string": "query ListConversations($person_id: String, $execution_id: String, $search: String, $show_forgotten: Boolean, $limit: Int, $offset: Int, $since: String) {\n    conversations(person_id: $person_id, execution_id: $execution_id, search: $search, show_forgotten: $show_forgotten, limit: $limit, offset: $offset, since: $since)\n}"
    },
    {
      "name": "GetDiagram",
      "type": "query",
      "entity": "Diagram",
      "variables": [
        {
          "name": "diagram_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": true
        }
      ],
      "fields": [
        {
          "name": "diagram",
          "args": [
            {
              "name": "diagram_id",
              "value": "diagram_id",
              "isVariable": true
            }
          ],
          "fields": [
            {
              "name": "nodes",
              "fields": [
                {
                  "name": "id"
                },
                {
                  "name": "type"
                },
                {
                  "name": "position",
                  "fields": [
                    {
                      "name": "x"
                    },
                    {
                      "name": "y"
                    }
                  ]
                },
                {
                  "name": "data"
                }
              ]
            },
            {
              "name": "handles",
              "fields": [
                {
                  "name": "id"
                },
                {
                  "name": "node_id"
                },
                {
                  "name": "label"
                },
                {
                  "name": "direction"
                },
                {
                  "name": "data_type"
                },
                {
                  "name": "position"
                }
              ]
            },
            {
              "name": "arrows",
              "fields": [
                {
                  "name": "id"
                },
                {
                  "name": "source"
                },
                {
                  "name": "target"
                },
                {
                  "name": "content_type"
                },
                {
                  "name": "label"
                },
                {
                  "name": "data"
                }
              ]
            },
            {
              "name": "persons",
              "fields": [
                {
                  "name": "id"
                },
                {
                  "name": "label"
                },
                {
                  "name": "llm_config",
                  "fields": [
                    {
                      "name": "service"
                    },
                    {
                      "name": "model"
                    },
                    {
                      "name": "api_key_id"
                    },
                    {
                      "name": "system_prompt"
                    }
                  ]
                },
                {
                  "name": "type"
                }
              ]
            },
            {
              "name": "metadata",
              "fields": [
                {
                  "name": "id"
                },
                {
                  "name": "name"
                },
                {
                  "name": "description"
                },
                {
                  "name": "version"
                },
                {
                  "name": "created"
                },
                {
                  "name": "modified"
                },
                {
                  "name": "author"
                },
                {
                  "name": "tags"
                }
              ]
            }
          ]
        }
      ],
      "query_string": "query GetDiagram($diagram_id: String!) {\n    diagram(diagram_id: $diagram_id) {\n      nodes {\n        id\n        type\n        position {\n          x\n          y\n        }\n        data\n      }\n      handles {\n        id\n        node_id\n        label\n        direction\n        data_type\n        position\n      }\n      arrows {\n        id\n        source\n        target\n        content_type\n        label\n        data\n      }\n      persons {\n        id\n        label\n        llm_config {\n          service\n          model\n          api_key_id\n          system_prompt\n        }\n        type\n      }\n      metadata {\n        id\n        name\n        description\n        version\n        created\n        modified\n        author\n        tags\n      }\n    }\n}"
    },
    {
      "name": "ListDiagrams",
      "type": "query",
      "entity": "Diagram",
      "variables": [
        {
          "name": "filter",
          "type": "DiagramFilterInput",
          "graphql_type": "DiagramFilterInput",
          "python_type": "DiagramFilterInput",
          "required": false
        },
        {
          "name": "limit",
          "type": "Int",
          "graphql_type": "Int",
          "python_type": "Int",
          "required": false
        },
        {
          "name": "offset",
          "type": "Int",
          "graphql_type": "Int",
          "python_type": "Int",
          "required": false
        }
      ],
      "fields": [
        {
          "name": "diagrams",
          "args": [
            {
              "name": "filter",
              "value": "filter",
              "isVariable": true
            },
            {
              "name": "limit",
              "value": "limit",
              "isVariable": true
            },
            {
              "name": "offset",
              "value": "offset",
              "isVariable": true
            }
          ],
          "fields": [
            {
              "name": "metadata",
              "fields": [
                {
                  "name": "id"
                },
                {
                  "name": "name"
                },
                {
                  "name": "description"
                },
                {
                  "name": "author"
                },
                {
                  "name": "created"
                },
                {
                  "name": "modified"
                },
                {
                  "name": "tags"
                }
              ]
            },
            {
              "name": "nodeCount"
            },
            {
              "name": "arrowCount"
            }
          ]
        }
      ],
      "query_string": "query ListDiagrams($filter: DiagramFilterInput, $limit: Int, $offset: Int) {\n    diagrams(filter: $filter, limit: $limit, offset: $offset) {\n      metadata {\n        id\n        name\n        description\n        author\n        created\n        modified\n        tags\n      }\n      nodeCount\n      arrowCount\n    }\n}"
    },
    {
      "name": "GetExecution",
      "type": "query",
      "entity": "Execution",
      "variables": [
        {
          "name": "execution_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": true
        }
      ],
      "fields": [
        {
          "name": "execution",
          "args": [
            {
              "name": "execution_id",
              "value": "execution_id",
              "isVariable": true
            }
          ],
          "fields": [
            {
              "name": "id"
            },
            {
              "name": "status"
            },
            {
              "name": "diagram_id"
            },
            {
              "name": "started_at"
            },
            {
              "name": "ended_at"
            },
            {
              "name": "error"
            },
            {
              "name": "node_states"
            },
            {
              "name": "node_outputs"
            },
            {
              "name": "variables"
            },
            {
              "name": "metrics"
            },
            {
              "name": "llm_usage",
              "fields": [
                {
                  "name": "input"
                },
                {
                  "name": "output"
                },
                {
                  "name": "cached"
                },
                {
                  "name": "total"
                }
              ]
            }
          ]
        }
      ],
      "query_string": "query GetExecution($execution_id: String!) {\n    execution(execution_id: $execution_id) {\n      id\n      status\n      diagram_id\n      started_at\n      ended_at\n      error\n      node_states\n      node_outputs\n      variables\n      metrics\n      llm_usage {\n        input\n        output\n        cached\n        total\n      }\n    }\n}"
    },
    {
      "name": "ListExecutions",
      "type": "query",
      "entity": "Execution",
      "variables": [
        {
          "name": "filter",
          "type": "ExecutionFilterInput",
          "graphql_type": "ExecutionFilterInput",
          "python_type": "ExecutionFilterInput",
          "required": false
        },
        {
          "name": "limit",
          "type": "Int",
          "graphql_type": "Int",
          "python_type": "Int",
          "required": false
        },
        {
          "name": "offset",
          "type": "Int",
          "graphql_type": "Int",
          "python_type": "Int",
          "required": false
        }
      ],
      "fields": [
        {
          "name": "executions",
          "args": [
            {
              "name": "filter",
              "value": "filter",
              "isVariable": true
            },
            {
              "name": "limit",
              "value": "limit",
              "isVariable": true
            },
            {
              "name": "offset",
              "value": "offset",
              "isVariable": true
            }
          ],
          "fields": [
            {
              "name": "id"
            },
            {
              "name": "status"
            },
            {
              "name": "diagram_id"
            },
            {
              "name": "started_at"
            },
            {
              "name": "ended_at"
            },
            {
              "name": "error"
            }
          ]
        }
      ],
      "query_string": "query ListExecutions($filter: ExecutionFilterInput, $limit: Int, $offset: Int) {\n    executions(filter: $filter, limit: $limit, offset: $offset) {\n      id\n      status\n      diagram_id\n      started_at\n      ended_at\n      error\n    }\n}"
    },
    {
      "name": "GetSupportedFormats",
      "type": "query",
      "entity": "Format",
      "variables": [],
      "fields": [
        {
          "name": "supported_formats",
          "fields": []
        }
      ],
      "query_string": "query GetSupportedFormats {\n    supported_formats\n}"
    },
    {
      "name": "GetPerson",
      "type": "query",
      "entity": "Person",
      "variables": [
        {
          "name": "person_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": true
        }
      ],
      "fields": [
        {
          "name": "person",
          "args": [
            {
              "name": "person_id",
              "value": "person_id",
              "isVariable": true
            }
          ],
          "fields": [
            {
              "name": "id"
            },
            {
              "name": "label"
            },
            {
              "name": "type"
            },
            {
              "name": "llm_config",
              "fields": [
                {
                  "name": "service"
                },
                {
                  "name": "model"
                },
                {
                  "name": "api_key_id"
                },
                {
                  "name": "system_prompt"
                }
              ]
            }
          ]
        }
      ],
      "query_string": "query GetPerson($person_id: String!) {\n    person(person_id: $person_id) {\n      id\n      label\n      type\n      llm_config {\n        service\n        model\n        api_key_id\n        system_prompt\n      }\n    }\n}"
    },
    {
      "name": "ListPersons",
      "type": "query",
      "entity": "Person",
      "variables": [
        {
          "name": "limit",
          "type": "Int",
          "graphql_type": "Int",
          "python_type": "Int",
          "required": false
        }
      ],
      "fields": [
        {
          "name": "persons",
          "args": [
            {
              "name": "limit",
              "value": "limit",
              "isVariable": true
            }
          ],
          "fields": [
            {
              "name": "id"
            },
            {
              "name": "label"
            },
            {
              "name": "type"
            },
            {
              "name": "llm_config",
              "fields": [
                {
                  "name": "service"
                },
                {
                  "name": "model"
                },
                {
                  "name": "api_key_id"
                }
              ]
            }
          ]
        }
      ],
      "query_string": "query ListPersons($limit: Int) {\n    persons(limit: $limit) {\n      id\n      label\n      type\n      llm_config {\n        service\n        model\n        api_key_id\n      }\n    }\n}"
    },
    {
      "name": "ListPromptFiles",
      "type": "query",
      "entity": "Prompt",
      "variables": [],
      "fields": [
        {
          "name": "prompt_files",
          "fields": []
        }
      ],
      "query_string": "query ListPromptFiles {\n    prompt_files\n}"
    },
    {
      "name": "GetPromptFile",
      "type": "query",
      "entity": "Prompt",
      "variables": [
        {
          "name": "filename",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": true
        }
      ],
      "fields": [
        {
          "name": "prompt_file",
          "args": [
            {
              "name": "filename",
              "value": "filename",
              "isVariable": true
            }
          ],
          "fields": []
        }
      ],
      "query_string": "query GetPromptFile($filename: String!) {\n    prompt_file(filename: $filename)\n}"
    },
    {
      "name": "GetProviders",
      "type": "query",
      "entity": "Provider",
      "variables": [],
      "fields": [
        {
          "name": "providers",
          "fields": []
        }
      ],
      "query_string": "query GetProviders {\n    providers\n}"
    },
    {
      "name": "GetProviderOperations",
      "type": "query",
      "entity": "Provider",
      "variables": [
        {
          "name": "provider",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": true
        }
      ],
      "fields": [
        {
          "name": "provider_operations",
          "args": [
            {
              "name": "provider",
              "value": "provider",
              "isVariable": true
            }
          ],
          "fields": []
        }
      ],
      "query_string": "query GetProviderOperations($provider: String!) {\n    provider_operations(provider: $provider)\n}"
    },
    {
      "name": "GetOperationSchema",
      "type": "query",
      "entity": "Provider",
      "variables": [
        {
          "name": "provider",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": true
        },
        {
          "name": "operation",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": true
        }
      ],
      "fields": [
        {
          "name": "operation_schema",
          "args": [
            {
              "name": "provider",
              "value": "provider",
              "isVariable": true
            },
            {
              "name": "operation",
              "value": "operation",
              "isVariable": true
            }
          ],
          "fields": []
        }
      ],
      "query_string": "query GetOperationSchema($provider: String!, $operation: String!) {\n    operation_schema(provider: $provider, operation: $operation)\n}"
    },
    {
      "name": "GetSystemInfo",
      "type": "query",
      "entity": "System",
      "variables": [],
      "fields": [
        {
          "name": "system_info",
          "fields": []
        }
      ],
      "query_string": "query GetSystemInfo {\n    system_info\n}"
    },
    {
      "name": "GetExecutionCapabilities",
      "type": "query",
      "entity": "System",
      "variables": [],
      "fields": [
        {
          "name": "execution_capabilities",
          "fields": []
        }
      ],
      "query_string": "query GetExecutionCapabilities {\n    execution_capabilities\n}"
    },
    {
      "name": "HealthCheck",
      "type": "query",
      "entity": "System",
      "variables": [],
      "fields": [
        {
          "name": "health_check",
          "fields": []
        }
      ],
      "query_string": "query HealthCheck {\n    health_check\n}"
    },
    {
      "name": "GetExecutionOrder",
      "type": "query",
      "entity": "System",
      "variables": [
        {
          "name": "execution_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": true
        }
      ],
      "fields": [
        {
          "name": "execution_order",
          "args": [
            {
              "name": "execution_id",
              "value": "execution_id",
              "isVariable": true
            }
          ],
          "fields": []
        }
      ],
      "query_string": "query GetExecutionOrder($execution_id: String!) {\n    execution_order(execution_id: $execution_id)\n}"
    },
    {
      "name": "GetExecutionMetrics",
      "type": "query",
      "entity": "System",
      "variables": [
        {
          "name": "execution_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": true
        }
      ],
      "fields": [
        {
          "name": "execution_metrics",
          "args": [
            {
              "name": "execution_id",
              "value": "execution_id",
              "isVariable": true
            }
          ],
          "fields": []
        }
      ],
      "query_string": "query GetExecutionMetrics($execution_id: String!) {\n    execution_metrics(execution_id: $execution_id)\n}"
    },
    {
      "name": "GetExecutionHistory",
      "type": "query",
      "entity": "System",
      "variables": [
        {
          "name": "diagram_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": false
        },
        {
          "name": "limit",
          "type": "Int",
          "graphql_type": "Int",
          "python_type": "Int",
          "required": false
        },
        {
          "name": "include_metrics",
          "type": "Boolean",
          "graphql_type": "Boolean",
          "python_type": "Boolean",
          "required": false
        }
      ],
      "fields": [
        {
          "name": "execution_history",
          "args": [
            {
              "name": "diagram_id",
              "value": "diagram_id",
              "isVariable": true
            },
            {
              "name": "limit",
              "value": "limit",
              "isVariable": true
            },
            {
              "name": "include_metrics",
              "value": "include_metrics",
              "isVariable": true
            }
          ],
          "fields": []
        }
      ],
      "query_string": "query GetExecutionHistory($diagram_id: String, $limit: Int, $include_metrics: Boolean) {\n    execution_history(diagram_id: $diagram_id, limit: $limit, include_metrics: $include_metrics)\n}"
    },
    {
      "name": "GetActiveCliSession",
      "type": "query",
      "entity": "System",
      "variables": [],
      "fields": [
        {
          "name": "active_cli_session",
          "fields": []
        }
      ],
      "query_string": "query GetActiveCliSession {\n    active_cli_session\n}"
    }
  ],
  "raw_mutations": [
    {
      "name": "CreateApiKey",
      "type": "mutation",
      "entity": "ApiKey",
      "variables": [
        {
          "name": "input",
          "type": "CreateApiKeyInput",
          "graphql_type": "CreateApiKeyInput",
          "python_type": "CreateApiKeyInput",
          "required": true
        }
      ],
      "fields": [
        {
          "name": "create_api_key",
          "args": [
            {
              "name": "input",
              "value": "input",
              "isVariable": true
            }
          ],
          "fields": [
            {
              "name": "success"
            },
            {
              "name": "api_key",
              "fields": [
                {
                  "name": "id"
                },
                {
                  "name": "label"
                },
                {
                  "name": "service"
                }
              ]
            },
            {
              "name": "message"
            },
            {
              "name": "error"
            }
          ]
        }
      ],
      "query_string": "mutation CreateApiKey($input: CreateApiKeyInput!) {\n    create_api_key(input: $input) {\n      success\n      api_key {\n        id\n        label\n        service\n      }\n      message\n      error\n    }\n}"
    },
    {
      "name": "TestApiKey",
      "type": "mutation",
      "entity": "ApiKey",
      "variables": [
        {
          "name": "api_key_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": true
        }
      ],
      "fields": [
        {
          "name": "test_api_key",
          "args": [
            {
              "name": "api_key_id",
              "value": "api_key_id",
              "isVariable": true
            }
          ],
          "fields": [
            {
              "name": "success"
            },
            {
              "name": "message"
            },
            {
              "name": "error"
            }
          ]
        }
      ],
      "query_string": "mutation TestApiKey($api_key_id: String!) {\n    test_api_key(api_key_id: $api_key_id) {\n      success\n      message\n      error\n    }\n}"
    },
    {
      "name": "DeleteApiKey",
      "type": "mutation",
      "entity": "ApiKey",
      "variables": [
        {
          "name": "api_key_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": true
        }
      ],
      "fields": [
        {
          "name": "delete_api_key",
          "args": [
            {
              "name": "api_key_id",
              "value": "api_key_id",
              "isVariable": true
            }
          ],
          "fields": [
            {
              "name": "success"
            },
            {
              "name": "message"
            }
          ]
        }
      ],
      "query_string": "mutation DeleteApiKey($api_key_id: String!) {\n    delete_api_key(api_key_id: $api_key_id) {\n      success\n      message\n    }\n}"
    },
    {
      "name": "RegisterCliSession",
      "type": "mutation",
      "entity": "CliSession",
      "variables": [
        {
          "name": "input",
          "type": "RegisterCliSessionInput",
          "graphql_type": "RegisterCliSessionInput",
          "python_type": "RegisterCliSessionInput",
          "required": true
        }
      ],
      "fields": [
        {
          "name": "register_cli_session",
          "args": [
            {
              "name": "input",
              "value": "input",
              "isVariable": true
            }
          ],
          "fields": [
            {
              "name": "success"
            },
            {
              "name": "message"
            },
            {
              "name": "error"
            }
          ]
        }
      ],
      "query_string": "mutation RegisterCliSession($input: RegisterCliSessionInput!) {\n    register_cli_session(input: $input) {\n      success\n      message\n      error\n    }\n}"
    },
    {
      "name": "UnregisterCliSession",
      "type": "mutation",
      "entity": "CliSession",
      "variables": [
        {
          "name": "input",
          "type": "UnregisterCliSessionInput",
          "graphql_type": "UnregisterCliSessionInput",
          "python_type": "UnregisterCliSessionInput",
          "required": true
        }
      ],
      "fields": [
        {
          "name": "unregister_cli_session",
          "args": [
            {
              "name": "input",
              "value": "input",
              "isVariable": true
            }
          ],
          "fields": [
            {
              "name": "success"
            },
            {
              "name": "message"
            },
            {
              "name": "error"
            }
          ]
        }
      ],
      "query_string": "mutation UnregisterCliSession($input: UnregisterCliSessionInput!) {\n    unregister_cli_session(input: $input) {\n      success\n      message\n      error\n    }\n}"
    },
    {
      "name": "CreateDiagram",
      "type": "mutation",
      "entity": "Diagram",
      "variables": [
        {
          "name": "input",
          "type": "CreateDiagramInput",
          "graphql_type": "CreateDiagramInput",
          "python_type": "CreateDiagramInput",
          "required": true
        }
      ],
      "fields": [
        {
          "name": "create_diagram",
          "args": [
            {
              "name": "input",
              "value": "input",
              "isVariable": true
            }
          ],
          "fields": [
            {
              "name": "success"
            },
            {
              "name": "diagram",
              "fields": [
                {
                  "name": "metadata",
                  "fields": [
                    {
                      "name": "id"
                    },
                    {
                      "name": "name"
                    }
                  ]
                }
              ]
            },
            {
              "name": "message"
            },
            {
              "name": "error"
            }
          ]
        }
      ],
      "query_string": "mutation CreateDiagram($input: CreateDiagramInput!) {\n    create_diagram(input: $input) {\n      success\n      diagram {\n        metadata {\n          id\n          name\n        }\n      }\n      message\n      error\n    }\n}"
    },
    {
      "name": "ExecuteDiagram",
      "type": "mutation",
      "entity": "Diagram",
      "variables": [
        {
          "name": "input",
          "type": "ExecuteDiagramInput",
          "graphql_type": "ExecuteDiagramInput",
          "python_type": "ExecuteDiagramInput",
          "required": true
        }
      ],
      "fields": [
        {
          "name": "execute_diagram",
          "args": [
            {
              "name": "input",
              "value": "input",
              "isVariable": true
            }
          ],
          "fields": [
            {
              "name": "success"
            },
            {
              "name": "execution",
              "fields": [
                {
                  "name": "id"
                }
              ]
            },
            {
              "name": "message"
            },
            {
              "name": "error"
            }
          ]
        }
      ],
      "query_string": "mutation ExecuteDiagram($input: ExecuteDiagramInput!) {\n    execute_diagram(input: $input) {\n      success\n      execution {\n        id\n      }\n      message\n      error\n    }\n}"
    },
    {
      "name": "DeleteDiagram",
      "type": "mutation",
      "entity": "Diagram",
      "variables": [
        {
          "name": "diagram_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": true
        }
      ],
      "fields": [
        {
          "name": "delete_diagram",
          "args": [
            {
              "name": "diagram_id",
              "value": "diagram_id",
              "isVariable": true
            }
          ],
          "fields": [
            {
              "name": "success"
            },
            {
              "name": "message"
            },
            {
              "name": "error"
            }
          ]
        }
      ],
      "query_string": "mutation DeleteDiagram($diagram_id: String!) {\n    delete_diagram(diagram_id: $diagram_id) {\n      success\n      message\n      error\n    }\n}"
    },
    {
      "name": "ControlExecution",
      "type": "mutation",
      "entity": "Execution",
      "variables": [
        {
          "name": "input",
          "type": "ExecutionControlInput",
          "graphql_type": "ExecutionControlInput",
          "python_type": "ExecutionControlInput",
          "required": true
        }
      ],
      "fields": [
        {
          "name": "control_execution",
          "args": [
            {
              "name": "input",
              "value": "input",
              "isVariable": true
            }
          ],
          "fields": [
            {
              "name": "success"
            },
            {
              "name": "execution",
              "fields": [
                {
                  "name": "id"
                },
                {
                  "name": "status"
                }
              ]
            },
            {
              "name": "message"
            },
            {
              "name": "error"
            }
          ]
        }
      ],
      "query_string": "mutation ControlExecution($input: ExecutionControlInput!) {\n    control_execution(input: $input) {\n      success\n      execution {\n        id\n        status\n      }\n      message\n      error\n    }\n}"
    },
    {
      "name": "SendInteractiveResponse",
      "type": "mutation",
      "entity": "Execution",
      "variables": [
        {
          "name": "input",
          "type": "InteractiveResponseInput",
          "graphql_type": "InteractiveResponseInput",
          "python_type": "InteractiveResponseInput",
          "required": true
        }
      ],
      "fields": [
        {
          "name": "send_interactive_response",
          "args": [
            {
              "name": "input",
              "value": "input",
              "isVariable": true
            }
          ],
          "fields": [
            {
              "name": "success"
            },
            {
              "name": "message"
            },
            {
              "name": "error"
            }
          ]
        }
      ],
      "query_string": "mutation SendInteractiveResponse($input: InteractiveResponseInput!) {\n    send_interactive_response(input: $input) {\n      success\n      message\n      error\n    }\n}"
    },
    {
      "name": "UpdateNodeState",
      "type": "mutation",
      "entity": "Execution",
      "variables": [
        {
          "name": "input",
          "type": "UpdateNodeStateInput",
          "graphql_type": "UpdateNodeStateInput",
          "python_type": "UpdateNodeStateInput",
          "required": true
        }
      ],
      "fields": [
        {
          "name": "update_node_state",
          "args": [
            {
              "name": "input",
              "value": "input",
              "isVariable": true
            }
          ],
          "fields": [
            {
              "name": "success"
            },
            {
              "name": "execution",
              "fields": [
                {
                  "name": "id"
                },
                {
                  "name": "status"
                }
              ]
            },
            {
              "name": "message"
            },
            {
              "name": "error"
            }
          ]
        }
      ],
      "query_string": "mutation UpdateNodeState($input: UpdateNodeStateInput!) {\n    update_node_state(input: $input) {\n      success\n      execution {\n        id\n        status\n      }\n      message\n      error\n    }\n}"
    },
    {
      "name": "UploadFile",
      "type": "mutation",
      "entity": "File",
      "variables": [
        {
          "name": "file",
          "type": "Upload",
          "graphql_type": "Upload",
          "python_type": "Upload",
          "required": true
        },
        {
          "name": "path",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": false
        }
      ],
      "fields": [
        {
          "name": "upload_file",
          "args": [
            {
              "name": "file",
              "value": "file",
              "isVariable": true
            },
            {
              "name": "path",
              "value": "path",
              "isVariable": true
            }
          ],
          "fields": []
        }
      ],
      "query_string": "mutation UploadFile($file: Upload!, $path: String) {\n    upload_file(file: $file, path: $path)\n}"
    },
    {
      "name": "UploadDiagram",
      "type": "mutation",
      "entity": "File",
      "variables": [
        {
          "name": "file",
          "type": "Upload",
          "graphql_type": "Upload",
          "python_type": "Upload",
          "required": true
        },
        {
          "name": "format",
          "type": "DiagramFormatGraphQL",
          "graphql_type": "DiagramFormatGraphQL",
          "python_type": "DiagramFormatGraphQL",
          "required": true
        }
      ],
      "fields": [
        {
          "name": "upload_diagram",
          "args": [
            {
              "name": "file",
              "value": "file",
              "isVariable": true
            },
            {
              "name": "format",
              "value": "format",
              "isVariable": true
            }
          ],
          "fields": []
        }
      ],
      "query_string": "mutation UploadDiagram($file: Upload!, $format: DiagramFormatGraphQL!) {\n    upload_diagram(file: $file, format: $format)\n}"
    },
    {
      "name": "ValidateDiagram",
      "type": "mutation",
      "entity": "File",
      "variables": [
        {
          "name": "content",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": true
        },
        {
          "name": "format",
          "type": "DiagramFormatGraphQL",
          "graphql_type": "DiagramFormatGraphQL",
          "python_type": "DiagramFormatGraphQL",
          "required": true
        }
      ],
      "fields": [
        {
          "name": "validate_diagram",
          "args": [
            {
              "name": "content",
              "value": "content",
              "isVariable": true
            },
            {
              "name": "format",
              "value": "format",
              "isVariable": true
            }
          ],
          "fields": []
        }
      ],
      "query_string": "mutation ValidateDiagram($content: String!, $format: DiagramFormatGraphQL!) {\n    validate_diagram(content: $content, format: $format)\n}"
    },
    {
      "name": "ConvertDiagramFormat",
      "type": "mutation",
      "entity": "File",
      "variables": [
        {
          "name": "content",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": true
        },
        {
          "name": "from_format",
          "type": "DiagramFormatGraphQL",
          "graphql_type": "DiagramFormatGraphQL",
          "python_type": "DiagramFormatGraphQL",
          "required": true
        },
        {
          "name": "to_format",
          "type": "DiagramFormatGraphQL",
          "graphql_type": "DiagramFormatGraphQL",
          "python_type": "DiagramFormatGraphQL",
          "required": true
        }
      ],
      "fields": [
        {
          "name": "convert_diagram_format",
          "args": [
            {
              "name": "content",
              "value": "content",
              "isVariable": true
            },
            {
              "name": "from_format",
              "value": "from_format",
              "isVariable": true
            },
            {
              "name": "to_format",
              "value": "to_format",
              "isVariable": true
            }
          ],
          "fields": [
            {
              "name": "success"
            },
            {
              "name": "data"
            },
            {
              "name": "format"
            },
            {
              "name": "message"
            },
            {
              "name": "error"
            }
          ]
        }
      ],
      "query_string": "mutation ConvertDiagramFormat($content: String!, $from_format: DiagramFormatGraphQL!, $to_format: DiagramFormatGraphQL!) {\n    convert_diagram_format(content: $content, from_format: $from_format, to_format: $to_format) {\n      success\n      data\n      format\n      message\n      error\n    }\n}"
    },
    {
      "name": "CreateNode",
      "type": "mutation",
      "entity": "Node",
      "variables": [
        {
          "name": "diagram_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": true
        },
        {
          "name": "input",
          "type": "CreateNodeInput",
          "graphql_type": "CreateNodeInput",
          "python_type": "CreateNodeInput",
          "required": true
        }
      ],
      "fields": [
        {
          "name": "create_node",
          "args": [
            {
              "name": "diagram_id",
              "value": "diagram_id",
              "isVariable": true
            },
            {
              "name": "input",
              "value": "input",
              "isVariable": true
            }
          ],
          "fields": [
            {
              "name": "success"
            },
            {
              "name": "node",
              "fields": [
                {
                  "name": "id"
                },
                {
                  "name": "type"
                },
                {
                  "name": "position",
                  "fields": [
                    {
                      "name": "x"
                    },
                    {
                      "name": "y"
                    }
                  ]
                },
                {
                  "name": "data"
                }
              ]
            },
            {
              "name": "message"
            },
            {
              "name": "error"
            }
          ]
        }
      ],
      "query_string": "mutation CreateNode($diagram_id: String!, $input: CreateNodeInput!) {\n    create_node(diagram_id: $diagram_id, input: $input) {\n      success\n      node {\n        id\n        type\n        position {\n          x\n          y\n        }\n        data\n      }\n      message\n      error\n    }\n}"
    },
    {
      "name": "UpdateNode",
      "type": "mutation",
      "entity": "Node",
      "variables": [
        {
          "name": "diagram_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": true
        },
        {
          "name": "node_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": true
        },
        {
          "name": "input",
          "type": "UpdateNodeInput",
          "graphql_type": "UpdateNodeInput",
          "python_type": "UpdateNodeInput",
          "required": true
        }
      ],
      "fields": [
        {
          "name": "update_node",
          "args": [
            {
              "name": "diagram_id",
              "value": "diagram_id",
              "isVariable": true
            },
            {
              "name": "node_id",
              "value": "node_id",
              "isVariable": true
            },
            {
              "name": "input",
              "value": "input",
              "isVariable": true
            }
          ],
          "fields": [
            {
              "name": "success"
            },
            {
              "name": "message"
            },
            {
              "name": "error"
            }
          ]
        }
      ],
      "query_string": "mutation UpdateNode($diagram_id: String!, $node_id: String!, $input: UpdateNodeInput!) {\n    update_node(diagram_id: $diagram_id, node_id: $node_id, input: $input) {\n      success\n      message\n      error\n    }\n}"
    },
    {
      "name": "DeleteNode",
      "type": "mutation",
      "entity": "Node",
      "variables": [
        {
          "name": "diagram_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": true
        },
        {
          "name": "node_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": true
        }
      ],
      "fields": [
        {
          "name": "delete_node",
          "args": [
            {
              "name": "diagram_id",
              "value": "diagram_id",
              "isVariable": true
            },
            {
              "name": "node_id",
              "value": "node_id",
              "isVariable": true
            }
          ],
          "fields": [
            {
              "name": "success"
            },
            {
              "name": "message"
            },
            {
              "name": "error"
            }
          ]
        }
      ],
      "query_string": "mutation DeleteNode($diagram_id: String!, $node_id: String!) {\n    delete_node(diagram_id: $diagram_id, node_id: $node_id) {\n      success\n      message\n      error\n    }\n}"
    },
    {
      "name": "CreatePerson",
      "type": "mutation",
      "entity": "Person",
      "variables": [
        {
          "name": "input",
          "type": "CreatePersonInput",
          "graphql_type": "CreatePersonInput",
          "python_type": "CreatePersonInput",
          "required": true
        }
      ],
      "fields": [
        {
          "name": "create_person",
          "args": [
            {
              "name": "input",
              "value": "input",
              "isVariable": true
            }
          ],
          "fields": [
            {
              "name": "success"
            },
            {
              "name": "person",
              "fields": [
                {
                  "name": "id"
                },
                {
                  "name": "label"
                }
              ]
            },
            {
              "name": "message"
            },
            {
              "name": "error"
            }
          ]
        }
      ],
      "query_string": "mutation CreatePerson($input: CreatePersonInput!) {\n    create_person(input: $input) {\n      success\n      person {\n        id\n        label\n      }\n      message\n      error\n    }\n}"
    },
    {
      "name": "UpdatePerson",
      "type": "mutation",
      "entity": "Person",
      "variables": [
        {
          "name": "person_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": true
        },
        {
          "name": "input",
          "type": "UpdatePersonInput",
          "graphql_type": "UpdatePersonInput",
          "python_type": "UpdatePersonInput",
          "required": true
        }
      ],
      "fields": [
        {
          "name": "update_person",
          "args": [
            {
              "name": "person_id",
              "value": "person_id",
              "isVariable": true
            },
            {
              "name": "input",
              "value": "input",
              "isVariable": true
            }
          ],
          "fields": [
            {
              "name": "success"
            },
            {
              "name": "person",
              "fields": [
                {
                  "name": "id"
                },
                {
                  "name": "label"
                }
              ]
            },
            {
              "name": "message"
            },
            {
              "name": "error"
            }
          ]
        }
      ],
      "query_string": "mutation UpdatePerson($person_id: String!, $input: UpdatePersonInput!) {\n    update_person(person_id: $person_id, input: $input) {\n      success\n      person {\n        id\n        label\n      }\n      message\n      error\n    }\n}"
    },
    {
      "name": "DeletePerson",
      "type": "mutation",
      "entity": "Person",
      "variables": [
        {
          "name": "person_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": true
        }
      ],
      "fields": [
        {
          "name": "delete_person",
          "args": [
            {
              "name": "person_id",
              "value": "person_id",
              "isVariable": true
            }
          ],
          "fields": [
            {
              "name": "success"
            },
            {
              "name": "message"
            },
            {
              "name": "error"
            }
          ]
        }
      ],
      "query_string": "mutation DeletePerson($person_id: String!) {\n    delete_person(person_id: $person_id) {\n      success\n      message\n      error\n    }\n}"
    }
  ],
  "raw_subscriptions": [
    {
      "name": "ExecutionUpdates",
      "type": "subscription",
      "entity": "Execution",
      "variables": [
        {
          "name": "execution_id",
          "type": "String",
          "graphql_type": "String",
          "python_type": "String",
          "required": true
        }
      ],
      "fields": [
        {
          "name": "execution_updates",
          "args": [
            {
              "name": "execution_id",
              "value": "execution_id",
              "isVariable": true
            }
          ],
          "fields": [
            {
              "name": "execution_id"
            },
            {
              "name": "event_type"
            },
            {
              "name": "data"
            },
            {
              "name": "timestamp"
            }
          ]
        }
      ],
      "query_string": "subscription ExecutionUpdates($execution_id: String!) {\n    execution_updates(execution_id: $execution_id) {\n      execution_id\n      event_type\n      data\n      timestamp\n    }\n}"
    }
  ],
  "queries": [
    {
      "operation_name": "GetApiKeys",
      "operation_type": "query",
      "parameters": [
        {
          "name": "service",
          "type": "str",
          "optional": true,
          "needs_conversion": true
        }
      ],
      "description": "Query for ApiKey",
      "alias_name": "api_keys"
    },
    {
      "operation_name": "GetApiKey",
      "operation_type": "query",
      "parameters": [
        {
          "name": "api_key_id",
          "type": "str",
          "optional": false,
          "needs_conversion": true
        }
      ],
      "description": "Query for ApiKey",
      "alias_name": "api_key"
    },
    {
      "operation_name": "GetAvailableModels",
      "operation_type": "query",
      "parameters": [
        {
          "name": "service",
          "type": "str",
          "optional": false,
          "needs_conversion": true
        },
        {
          "name": "api_key_id",
          "type": "str",
          "optional": false,
          "needs_conversion": true
        }
      ],
      "description": "Query for ApiKey",
      "alias_name": "available_models"
    },
    {
      "operation_name": "ListConversations",
      "operation_type": "query",
      "parameters": [
        {
          "name": "person_id",
          "type": "str",
          "optional": true,
          "needs_conversion": true
        },
        {
          "name": "execution_id",
          "type": "str",
          "optional": true,
          "needs_conversion": true
        },
        {
          "name": "search",
          "type": "str",
          "optional": true,
          "needs_conversion": true
        },
        {
          "name": "show_forgotten",
          "type": "bool",
          "optional": true,
          "needs_conversion": true
        },
        {
          "name": "limit",
          "type": "int",
          "optional": true,
          "needs_conversion": true
        },
        {
          "name": "offset",
          "type": "int",
          "optional": true,
          "needs_conversion": true
        },
        {
          "name": "since",
          "type": "str",
          "optional": true,
          "needs_conversion": true
        }
      ],
      "description": "Query for Conversation",
      "alias_name": "conversations"
    },
    {
      "operation_name": "GetDiagram",
      "operation_type": "query",
      "parameters": [
        {
          "name": "diagram_id",
          "type": "str",
          "optional": false,
          "needs_conversion": true
        }
      ],
      "description": "Query for Diagram",
      "alias_name": "diagram"
    },
    {
      "operation_name": "ListDiagrams",
      "operation_type": "query",
      "parameters": [
        {
          "name": "filter",
          "type": "DiagramFilterInput",
          "optional": true,
          "needs_conversion": true
        },
        {
          "name": "limit",
          "type": "int",
          "optional": true,
          "needs_conversion": true
        },
        {
          "name": "offset",
          "type": "int",
          "optional": true,
          "needs_conversion": true
        }
      ],
      "description": "Query for Diagram",
      "alias_name": "diagrams"
    },
    {
      "operation_name": "GetExecution",
      "operation_type": "query",
      "parameters": [
        {
          "name": "execution_id",
          "type": "str",
          "optional": false,
          "needs_conversion": true
        }
      ],
      "description": "Query for Execution",
      "alias_name": "execution"
    },
    {
      "operation_name": "ListExecutions",
      "operation_type": "query",
      "parameters": [
        {
          "name": "filter",
          "type": "ExecutionFilterInput",
          "optional": true,
          "needs_conversion": true
        },
        {
          "name": "limit",
          "type": "int",
          "optional": true,
          "needs_conversion": true
        },
        {
          "name": "offset",
          "type": "int",
          "optional": true,
          "needs_conversion": true
        }
      ],
      "description": "Query for Execution",
      "alias_name": "executions"
    },
    {
      "operation_name": "GetSupportedFormats",
      "operation_type": "query",
      "parameters": [],
      "description": "Query for Format",
      "alias_name": "supported_formats"
    },
    {
      "operation_name": "GetPerson",
      "operation_type": "query",
      "parameters": [
        {
          "name": "person_id",
          "type": "str",
          "optional": false,
          "needs_conversion": true
        }
      ],
      "description": "Query for Person",
      "alias_name": "person"
    },
    {
      "operation_name": "ListPersons",
      "operation_type": "query",
      "parameters": [
        {
          "name": "limit",
          "type": "int",
          "optional": true,
          "needs_conversion": true
        }
      ],
      "description": "Query for Person",
      "alias_name": "persons"
    },
    {
      "operation_name": "ListPromptFiles",
      "operation_type": "query",
      "parameters": [],
      "description": "Query for Prompt",
      "alias_name": "prompt_files"
    },
    {
      "operation_name": "GetPromptFile",
      "operation_type": "query",
      "parameters": [
        {
          "name": "filename",
          "type": "str",
          "optional": false,
          "needs_conversion": true
        }
      ],
      "description": "Query for Prompt",
      "alias_name": "prompt_file"
    },
    {
      "operation_name": "GetProviders",
      "operation_type": "query",
      "parameters": [],
      "description": "Query for Provider",
      "alias_name": "providers"
    },
    {
      "operation_name": "GetProviderOperations",
      "operation_type": "query",
      "parameters": [
        {
          "name": "provider",
          "type": "str",
          "optional": false,
          "needs_conversion": true
        }
      ],
      "description": "Query for Provider",
      "alias_name": "provider_operations"
    },
    {
      "operation_name": "GetOperationSchema",
      "operation_type": "query",
      "parameters": [
        {
          "name": "provider",
          "type": "str",
          "optional": false,
          "needs_conversion": true
        },
        {
          "name": "operation",
          "type": "str",
          "optional": false,
          "needs_conversion": true
        }
      ],
      "description": "Query for Provider",
      "alias_name": "operation_schema"
    },
    {
      "operation_name": "GetSystemInfo",
      "operation_type": "query",
      "parameters": [],
      "description": "Query for System",
      "alias_name": "system_info"
    },
    {
      "operation_name": "GetExecutionCapabilities",
      "operation_type": "query",
      "parameters": [],
      "description": "Query for System",
      "alias_name": "execution_capabilities"
    },
    {
      "operation_name": "HealthCheck",
      "operation_type": "query",
      "parameters": [],
      "description": "Query for System",
      "alias_name": "health_check"
    },
    {
      "operation_name": "GetExecutionOrder",
      "operation_type": "query",
      "parameters": [
        {
          "name": "execution_id",
          "type": "str",
          "optional": false,
          "needs_conversion": true
        }
      ],
      "description": "Query for System",
      "alias_name": "execution_order"
    },
    {
      "operation_name": "GetExecutionMetrics",
      "operation_type": "query",
      "parameters": [
        {
          "name": "execution_id",
          "type": "str",
          "optional": false,
          "needs_conversion": true
        }
      ],
      "description": "Query for System",
      "alias_name": "execution_metrics"
    },
    {
      "operation_name": "GetExecutionHistory",
      "operation_type": "query",
      "parameters": [
        {
          "name": "diagram_id",
          "type": "str",
          "optional": true,
          "needs_conversion": true
        },
        {
          "name": "limit",
          "type": "int",
          "optional": true,
          "needs_conversion": true
        },
        {
          "name": "include_metrics",
          "type": "bool",
          "optional": true,
          "needs_conversion": true
        }
      ],
      "description": "Query for System",
      "alias_name": "execution_history"
    },
    {
      "operation_name": "GetActiveCliSession",
      "operation_type": "query",
      "parameters": [],
      "description": "Query for System",
      "alias_name": "active_cli_session"
    }
  ],
  "mutations": [
    {
      "operation_name": "CreateApiKey",
      "operation_type": "mutation",
      "parameters": [
        {
          "name": "input",
          "type": "CreateApiKeyInput",
          "optional": false,
          "needs_conversion": true
        }
      ],
      "description": "Mutation for ApiKey",
      "alias_name": null
    },
    {
      "operation_name": "TestApiKey",
      "operation_type": "mutation",
      "parameters": [
        {
          "name": "api_key_id",
          "type": "str",
          "optional": false,
          "needs_conversion": true
        }
      ],
      "description": "Mutation for ApiKey",
      "alias_name": null
    },
    {
      "operation_name": "DeleteApiKey",
      "operation_type": "mutation",
      "parameters": [
        {
          "name": "api_key_id",
          "type": "str",
          "optional": false,
          "needs_conversion": true
        }
      ],
      "description": "Mutation for ApiKey",
      "alias_name": null
    },
    {
      "operation_name": "RegisterCliSession",
      "operation_type": "mutation",
      "parameters": [
        {
          "name": "input",
          "type": "RegisterCliSessionInput",
          "optional": false,
          "needs_conversion": true
        }
      ],
      "description": "Mutation for CliSession",
      "alias_name": null
    },
    {
      "operation_name": "UnregisterCliSession",
      "operation_type": "mutation",
      "parameters": [
        {
          "name": "input",
          "type": "UnregisterCliSessionInput",
          "optional": false,
          "needs_conversion": true
        }
      ],
      "description": "Mutation for CliSession",
      "alias_name": null
    },
    {
      "operation_name": "CreateDiagram",
      "operation_type": "mutation",
      "parameters": [
        {
          "name": "input",
          "type": "CreateDiagramInput",
          "optional": false,
          "needs_conversion": true
        }
      ],
      "description": "Mutation for Diagram",
      "alias_name": null
    },
    {
      "operation_name": "ExecuteDiagram",
      "operation_type": "mutation",
      "parameters": [
        {
          "name": "input",
          "type": "ExecuteDiagramInput",
          "optional": false,
          "needs_conversion": true
        }
      ],
      "description": "Mutation for Diagram",
      "alias_name": null
    },
    {
      "operation_name": "DeleteDiagram",
      "operation_type": "mutation",
      "parameters": [
        {
          "name": "diagram_id",
          "type": "str",
          "optional": false,
          "needs_conversion": true
        }
      ],
      "description": "Mutation for Diagram",
      "alias_name": null
    },
    {
      "operation_name": "ControlExecution",
      "operation_type": "mutation",
      "parameters": [
        {
          "name": "input",
          "type": "ExecutionControlInput",
          "optional": false,
          "needs_conversion": true
        }
      ],
      "description": "Mutation for Execution",
      "alias_name": null
    },
    {
      "operation_name": "SendInteractiveResponse",
      "operation_type": "mutation",
      "parameters": [
        {
          "name": "input",
          "type": "InteractiveResponseInput",
          "optional": false,
          "needs_conversion": true
        }
      ],
      "description": "Mutation for Execution",
      "alias_name": null
    },
    {
      "operation_name": "UpdateNodeState",
      "operation_type": "mutation",
      "parameters": [
        {
          "name": "input",
          "type": "UpdateNodeStateInput",
          "optional": false,
          "needs_conversion": true
        }
      ],
      "description": "Mutation for Execution",
      "alias_name": null
    },
    {
      "operation_name": "UploadFile",
      "operation_type": "mutation",
      "parameters": [
        {
          "name": "file",
          "type": "Upload",
          "optional": false,
          "needs_conversion": true
        },
        {
          "name": "path",
          "type": "str",
          "optional": true,
          "needs_conversion": true
        }
      ],
      "description": "Mutation for File",
      "alias_name": null
    },
    {
      "operation_name": "UploadDiagram",
      "operation_type": "mutation",
      "parameters": [
        {
          "name": "file",
          "type": "Upload",
          "optional": false,
          "needs_conversion": true
        },
        {
          "name": "format",
          "type": "DiagramFormatGraphQL",
          "optional": false,
          "needs_conversion": true
        }
      ],
      "description": "Mutation for File",
      "alias_name": null
    },
    {
      "operation_name": "ValidateDiagram",
      "operation_type": "mutation",
      "parameters": [
        {
          "name": "content",
          "type": "str",
          "optional": false,
          "needs_conversion": true
        },
        {
          "name": "format",
          "type": "DiagramFormatGraphQL",
          "optional": false,
          "needs_conversion": true
        }
      ],
      "description": "Mutation for File",
      "alias_name": null
    },
    {
      "operation_name": "ConvertDiagramFormat",
      "operation_type": "mutation",
      "parameters": [
        {
          "name": "content",
          "type": "str",
          "optional": false,
          "needs_conversion": true
        },
        {
          "name": "from_format",
          "type": "DiagramFormatGraphQL",
          "optional": false,
          "needs_conversion": true
        },
        {
          "name": "to_format",
          "type": "DiagramFormatGraphQL",
          "optional": false,
          "needs_conversion": true
        }
      ],
      "description": "Mutation for File",
      "alias_name": null
    },
    {
      "operation_name": "CreateNode",
      "operation_type": "mutation",
      "parameters": [
        {
          "name": "diagram_id",
          "type": "str",
          "optional": false,
          "needs_conversion": true
        },
        {
          "name": "input",
          "type": "CreateNodeInput",
          "optional": false,
          "needs_conversion": true
        }
      ],
      "description": "Mutation for Node",
      "alias_name": null
    },
    {
      "operation_name": "UpdateNode",
      "operation_type": "mutation",
      "parameters": [
        {
          "name": "diagram_id",
          "type": "str",
          "optional": false,
          "needs_conversion": true
        },
        {
          "name": "node_id",
          "type": "str",
          "optional": false,
          "needs_conversion": true
        },
        {
          "name": "input",
          "type": "UpdateNodeInput",
          "optional": false,
          "needs_conversion": true
        }
      ],
      "description": "Mutation for Node",
      "alias_name": null
    },
    {
      "operation_name": "DeleteNode",
      "operation_type": "mutation",
      "parameters": [
        {
          "name": "diagram_id",
          "type": "str",
          "optional": false,
          "needs_conversion": true
        },
        {
          "name": "node_id",
          "type": "str",
          "optional": false,
          "needs_conversion": true
        }
      ],
      "description": "Mutation for Node",
      "alias_name": null
    },
    {
      "operation_name": "CreatePerson",
      "operation_type": "mutation",
      "parameters": [
        {
          "name": "input",
          "type": "CreatePersonInput",
          "optional": false,
          "needs_conversion": true
        }
      ],
      "description": "Mutation for Person",
      "alias_name": null
    },
    {
      "operation_name": "UpdatePerson",
      "operation_type": "mutation",
      "parameters": [
        {
          "name": "person_id",
          "type": "str",
          "optional": false,
          "needs_conversion": true
        },
        {
          "name": "input",
          "type": "UpdatePersonInput",
          "optional": false,
          "needs_conversion": true
        }
      ],
      "description": "Mutation for Person",
      "alias_name": null
    },
    {
      "operation_name": "DeletePerson",
      "operation_type": "mutation",
      "parameters": [
        {
          "name": "person_id",
          "type": "str",
          "optional": false,
          "needs_conversion": true
        }
      ],
      "description": "Mutation for Person",
      "alias_name": null
    }
  ],
  "subscriptions": [
    {
      "operation_name": "ExecutionUpdates",
      "operation_type": "subscription",
      "parameters": [
        {
          "name": "execution_id",
          "type": "str",
          "optional": false,
          "needs_conversion": true
        }
      ],
      "description": "Subscription for Execution",
      "alias_name": null
    }
  ],
  "operations_ir": {
    "queries": [
      {
        "name": "GetApiKeys",
        "type": "query",
        "entity": "ApiKey",
        "has_variables": true,
        "variable_count": 1,
        "variable_names": [
          "service"
        ],
        "class_name": "GetApiKeysOperation",
        "query_const_name": "GETAPIKEYS_QUERY"
      },
      {
        "name": "GetApiKey",
        "type": "query",
        "entity": "ApiKey",
        "has_variables": true,
        "variable_count": 1,
        "variable_names": [
          "api_key_id"
        ],
        "class_name": "GetApiKeyOperation",
        "query_const_name": "GETAPIKEY_QUERY"
      },
      {
        "name": "GetAvailableModels",
        "type": "query",
        "entity": "ApiKey",
        "has_variables": true,
        "variable_count": 2,
        "variable_names": [
          "service",
          "api_key_id"
        ],
        "class_name": "GetAvailableModelsOperation",
        "query_const_name": "GETAVAILABLEMODELS_QUERY"
      },
      {
        "name": "ListConversations",
        "type": "query",
        "entity": "Conversation",
        "has_variables": true,
        "variable_count": 7,
        "variable_names": [
          "person_id",
          "execution_id",
          "search",
          "show_forgotten",
          "limit",
          "offset",
          "since"
        ],
        "class_name": "ListConversationsOperation",
        "query_const_name": "LISTCONVERSATIONS_QUERY"
      },
      {
        "name": "GetDiagram",
        "type": "query",
        "entity": "Diagram",
        "has_variables": true,
        "variable_count": 1,
        "variable_names": [
          "diagram_id"
        ],
        "class_name": "GetDiagramOperation",
        "query_const_name": "GETDIAGRAM_QUERY"
      },
      {
        "name": "ListDiagrams",
        "type": "query",
        "entity": "Diagram",
        "has_variables": true,
        "variable_count": 3,
        "variable_names": [
          "filter",
          "limit",
          "offset"
        ],
        "class_name": "ListDiagramsOperation",
        "query_const_name": "LISTDIAGRAMS_QUERY"
      },
      {
        "name": "GetExecution",
        "type": "query",
        "entity": "Execution",
        "has_variables": true,
        "variable_count": 1,
        "variable_names": [
          "execution_id"
        ],
        "class_name": "GetExecutionOperation",
        "query_const_name": "GETEXECUTION_QUERY"
      },
      {
        "name": "ListExecutions",
        "type": "query",
        "entity": "Execution",
        "has_variables": true,
        "variable_count": 3,
        "variable_names": [
          "filter",
          "limit",
          "offset"
        ],
        "class_name": "ListExecutionsOperation",
        "query_const_name": "LISTEXECUTIONS_QUERY"
      },
      {
        "name": "GetSupportedFormats",
        "type": "query",
        "entity": "Format",
        "has_variables": false,
        "variable_count": 0,
        "variable_names": [],
        "class_name": "GetSupportedFormatsOperation",
        "query_const_name": "GETSUPPORTEDFORMATS_QUERY"
      },
      {
        "name": "GetPerson",
        "type": "query",
        "entity": "Person",
        "has_variables": true,
        "variable_count": 1,
        "variable_names": [
          "person_id"
        ],
        "class_name": "GetPersonOperation",
        "query_const_name": "GETPERSON_QUERY"
      },
      {
        "name": "ListPersons",
        "type": "query",
        "entity": "Person",
        "has_variables": true,
        "variable_count": 1,
        "variable_names": [
          "limit"
        ],
        "class_name": "ListPersonsOperation",
        "query_const_name": "LISTPERSONS_QUERY"
      },
      {
        "name": "ListPromptFiles",
        "type": "query",
        "entity": "Prompt",
        "has_variables": false,
        "variable_count": 0,
        "variable_names": [],
        "class_name": "ListPromptFilesOperation",
        "query_const_name": "LISTPROMPTFILES_QUERY"
      },
      {
        "name": "GetPromptFile",
        "type": "query",
        "entity": "Prompt",
        "has_variables": true,
        "variable_count": 1,
        "variable_names": [
          "filename"
        ],
        "class_name": "GetPromptFileOperation",
        "query_const_name": "GETPROMPTFILE_QUERY"
      },
      {
        "name": "GetProviders",
        "type": "query",
        "entity": "Provider",
        "has_variables": false,
        "variable_count": 0,
        "variable_names": [],
        "class_name": "GetProvidersOperation",
        "query_const_name": "GETPROVIDERS_QUERY"
      },
      {
        "name": "GetProviderOperations",
        "type": "query",
        "entity": "Provider",
        "has_variables": true,
        "variable_count": 1,
        "variable_names": [
          "provider"
        ],
        "class_name": "GetProviderOperationsOperation",
        "query_const_name": "GETPROVIDEROPERATIONS_QUERY"
      },
      {
        "name": "GetOperationSchema",
        "type": "query",
        "entity": "Provider",
        "has_variables": true,
        "variable_count": 2,
        "variable_names": [
          "provider",
          "operation"
        ],
        "class_name": "GetOperationSchemaOperation",
        "query_const_name": "GETOPERATIONSCHEMA_QUERY"
      },
      {
        "name": "GetSystemInfo",
        "type": "query",
        "entity": "System",
        "has_variables": false,
        "variable_count": 0,
        "variable_names": [],
        "class_name": "GetSystemInfoOperation",
        "query_const_name": "GETSYSTEMINFO_QUERY"
      },
      {
        "name": "GetExecutionCapabilities",
        "type": "query",
        "entity": "System",
        "has_variables": false,
        "variable_count": 0,
        "variable_names": [],
        "class_name": "GetExecutionCapabilitiesOperation",
        "query_const_name": "GETEXECUTIONCAPABILITIES_QUERY"
      },
      {
        "name": "HealthCheck",
        "type": "query",
        "entity": "System",
        "has_variables": false,
        "variable_count": 0,
        "variable_names": [],
        "class_name": "HealthCheckOperation",
        "query_const_name": "HEALTHCHECK_QUERY"
      },
      {
        "name": "GetExecutionOrder",
        "type": "query",
        "entity": "System",
        "has_variables": true,
        "variable_count": 1,
        "variable_names": [
          "execution_id"
        ],
        "class_name": "GetExecutionOrderOperation",
        "query_const_name": "GETEXECUTIONORDER_QUERY"
      },
      {
        "name": "GetExecutionMetrics",
        "type": "query",
        "entity": "System",
        "has_variables": true,
        "variable_count": 1,
        "variable_names": [
          "execution_id"
        ],
        "class_name": "GetExecutionMetricsOperation",
        "query_const_name": "GETEXECUTIONMETRICS_QUERY"
      },
      {
        "name": "GetExecutionHistory",
        "type": "query",
        "entity": "System",
        "has_variables": true,
        "variable_count": 3,
        "variable_names": [
          "diagram_id",
          "limit",
          "include_metrics"
        ],
        "class_name": "GetExecutionHistoryOperation",
        "query_const_name": "GETEXECUTIONHISTORY_QUERY"
      },
      {
        "name": "GetActiveCliSession",
        "type": "query",
        "entity": "System",
        "has_variables": false,
        "variable_count": 0,
        "variable_names": [],
        "class_name": "GetActiveCliSessionOperation",
        "query_const_name": "GETACTIVECLISESSION_QUERY"
      }
    ],
    "mutations": [
      {
        "name": "CreateApiKey",
        "type": "mutation",
        "entity": "ApiKey",
        "has_variables": true,
        "variable_count": 1,
        "variable_names": [
          "input"
        ],
        "class_name": "CreateApiKeyOperation",
        "query_const_name": "CREATEAPIKEY_MUTATION"
      },
      {
        "name": "TestApiKey",
        "type": "mutation",
        "entity": "ApiKey",
        "has_variables": true,
        "variable_count": 1,
        "variable_names": [
          "api_key_id"
        ],
        "class_name": "TestApiKeyOperation",
        "query_const_name": "TESTAPIKEY_MUTATION"
      },
      {
        "name": "DeleteApiKey",
        "type": "mutation",
        "entity": "ApiKey",
        "has_variables": true,
        "variable_count": 1,
        "variable_names": [
          "api_key_id"
        ],
        "class_name": "DeleteApiKeyOperation",
        "query_const_name": "DELETEAPIKEY_MUTATION"
      },
      {
        "name": "RegisterCliSession",
        "type": "mutation",
        "entity": "CliSession",
        "has_variables": true,
        "variable_count": 1,
        "variable_names": [
          "input"
        ],
        "class_name": "RegisterCliSessionOperation",
        "query_const_name": "REGISTERCLISESSION_MUTATION"
      },
      {
        "name": "UnregisterCliSession",
        "type": "mutation",
        "entity": "CliSession",
        "has_variables": true,
        "variable_count": 1,
        "variable_names": [
          "input"
        ],
        "class_name": "UnregisterCliSessionOperation",
        "query_const_name": "UNREGISTERCLISESSION_MUTATION"
      },
      {
        "name": "CreateDiagram",
        "type": "mutation",
        "entity": "Diagram",
        "has_variables": true,
        "variable_count": 1,
        "variable_names": [
          "input"
        ],
        "class_name": "CreateDiagramOperation",
        "query_const_name": "CREATEDIAGRAM_MUTATION"
      },
      {
        "name": "ExecuteDiagram",
        "type": "mutation",
        "entity": "Diagram",
        "has_variables": true,
        "variable_count": 1,
        "variable_names": [
          "input"
        ],
        "class_name": "ExecuteDiagramOperation",
        "query_const_name": "EXECUTEDIAGRAM_MUTATION"
      },
      {
        "name": "DeleteDiagram",
        "type": "mutation",
        "entity": "Diagram",
        "has_variables": true,
        "variable_count": 1,
        "variable_names": [
          "diagram_id"
        ],
        "class_name": "DeleteDiagramOperation",
        "query_const_name": "DELETEDIAGRAM_MUTATION"
      },
      {
        "name": "ControlExecution",
        "type": "mutation",
        "entity": "Execution",
        "has_variables": true,
        "variable_count": 1,
        "variable_names": [
          "input"
        ],
        "class_name": "ControlExecutionOperation",
        "query_const_name": "CONTROLEXECUTION_MUTATION"
      },
      {
        "name": "SendInteractiveResponse",
        "type": "mutation",
        "entity": "Execution",
        "has_variables": true,
        "variable_count": 1,
        "variable_names": [
          "input"
        ],
        "class_name": "SendInteractiveResponseOperation",
        "query_const_name": "SENDINTERACTIVERESPONSE_MUTATION"
      },
      {
        "name": "UpdateNodeState",
        "type": "mutation",
        "entity": "Execution",
        "has_variables": true,
        "variable_count": 1,
        "variable_names": [
          "input"
        ],
        "class_name": "UpdateNodeStateOperation",
        "query_const_name": "UPDATENODESTATE_MUTATION"
      },
      {
        "name": "UploadFile",
        "type": "mutation",
        "entity": "File",
        "has_variables": true,
        "variable_count": 2,
        "variable_names": [
          "file",
          "path"
        ],
        "class_name": "UploadFileOperation",
        "query_const_name": "UPLOADFILE_MUTATION"
      },
      {
        "name": "UploadDiagram",
        "type": "mutation",
        "entity": "File",
        "has_variables": true,
        "variable_count": 2,
        "variable_names": [
          "file",
          "format"
        ],
        "class_name": "UploadDiagramOperation",
        "query_const_name": "UPLOADDIAGRAM_MUTATION"
      },
      {
        "name": "ValidateDiagram",
        "type": "mutation",
        "entity": "File",
        "has_variables": true,
        "variable_count": 2,
        "variable_names": [
          "content",
          "format"
        ],
        "class_name": "ValidateDiagramOperation",
        "query_const_name": "VALIDATEDIAGRAM_MUTATION"
      },
      {
        "name": "ConvertDiagramFormat",
        "type": "mutation",
        "entity": "File",
        "has_variables": true,
        "variable_count": 3,
        "variable_names": [
          "content",
          "from_format",
          "to_format"
        ],
        "class_name": "ConvertDiagramFormatOperation",
        "query_const_name": "CONVERTDIAGRAMFORMAT_MUTATION"
      },
      {
        "name": "CreateNode",
        "type": "mutation",
        "entity": "Node",
        "has_variables": true,
        "variable_count": 2,
        "variable_names": [
          "diagram_id",
          "input"
        ],
        "class_name": "CreateNodeOperation",
        "query_const_name": "CREATENODE_MUTATION"
      },
      {
        "name": "UpdateNode",
        "type": "mutation",
        "entity": "Node",
        "has_variables": true,
        "variable_count": 3,
        "variable_names": [
          "diagram_id",
          "node_id",
          "input"
        ],
        "class_name": "UpdateNodeOperation",
        "query_const_name": "UPDATENODE_MUTATION"
      },
      {
        "name": "DeleteNode",
        "type": "mutation",
        "entity": "Node",
        "has_variables": true,
        "variable_count": 2,
        "variable_names": [
          "diagram_id",
          "node_id"
        ],
        "class_name": "DeleteNodeOperation",
        "query_const_name": "DELETENODE_MUTATION"
      },
      {
        "name": "CreatePerson",
        "type": "mutation",
        "entity": "Person",
        "has_variables": true,
        "variable_count": 1,
        "variable_names": [
          "input"
        ],
        "class_name": "CreatePersonOperation",
        "query_const_name": "CREATEPERSON_MUTATION"
      },
      {
        "name": "UpdatePerson",
        "type": "mutation",
        "entity": "Person",
        "has_variables": true,
        "variable_count": 2,
        "variable_names": [
          "person_id",
          "input"
        ],
        "class_name": "UpdatePersonOperation",
        "query_const_name": "UPDATEPERSON_MUTATION"
      },
      {
        "name": "DeletePerson",
        "type": "mutation",
        "entity": "Person",
        "has_variables": true,
        "variable_count": 1,
        "variable_names": [
          "person_id"
        ],
        "class_name": "DeletePersonOperation",
        "query_const_name": "DELETEPERSON_MUTATION"
      }
    ],
    "subscriptions": [
      {
        "name": "ExecutionUpdates",
        "type": "subscription",
        "entity": "Execution",
        "has_variables": true,
        "variable_count": 1,
        "variable_names": [
          "execution_id"
        ],
        "class_name": "ExecutionUpdatesOperation",
        "query_const_name": "EXECUTIONUPDATES_SUBSCRIPTION"
      }
    ]
  },
  "result_wrappers": [
    {
      "name": "GetApiKeysResult",
      "operation": "GetApiKeys",
      "type": "querie",
      "fields": []
    },
    {
      "name": "GetApiKeyResult",
      "operation": "GetApiKey",
      "type": "querie",
      "fields": []
    },
    {
      "name": "GetAvailableModelsResult",
      "operation": "GetAvailableModels",
      "type": "querie",
      "fields": []
    },
    {
      "name": "ListConversationsResult",
      "operation": "ListConversations",
      "type": "querie",
      "fields": []
    },
    {
      "name": "GetDiagramResult",
      "operation": "GetDiagram",
      "type": "querie",
      "fields": []
    },
    {
      "name": "ListDiagramsResult",
      "operation": "ListDiagrams",
      "type": "querie",
      "fields": []
    },
    {
      "name": "GetExecutionResult",
      "operation": "GetExecution",
      "type": "querie",
      "fields": []
    },
    {
      "name": "ListExecutionsResult",
      "operation": "ListExecutions",
      "type": "querie",
      "fields": []
    },
    {
      "name": "GetSupportedFormatsResult",
      "operation": "GetSupportedFormats",
      "type": "querie",
      "fields": []
    },
    {
      "name": "GetPersonResult",
      "operation": "GetPerson",
      "type": "querie",
      "fields": []
    },
    {
      "name": "ListPersonsResult",
      "operation": "ListPersons",
      "type": "querie",
      "fields": []
    },
    {
      "name": "ListPromptFilesResult",
      "operation": "ListPromptFiles",
      "type": "querie",
      "fields": []
    },
    {
      "name": "GetPromptFileResult",
      "operation": "GetPromptFile",
      "type": "querie",
      "fields": []
    },
    {
      "name": "GetProvidersResult",
      "operation": "GetProviders",
      "type": "querie",
      "fields": []
    },
    {
      "name": "GetProviderOperationsResult",
      "operation": "GetProviderOperations",
      "type": "querie",
      "fields": []
    },
    {
      "name": "GetOperationSchemaResult",
      "operation": "GetOperationSchema",
      "type": "querie",
      "fields": []
    },
    {
      "name": "GetSystemInfoResult",
      "operation": "GetSystemInfo",
      "type": "querie",
      "fields": []
    },
    {
      "name": "GetExecutionCapabilitiesResult",
      "operation": "GetExecutionCapabilities",
      "type": "querie",
      "fields": []
    },
    {
      "name": "HealthCheckResult",
      "operation": "HealthCheck",
      "type": "querie",
      "fields": []
    },
    {
      "name": "GetExecutionOrderResult",
      "operation": "GetExecutionOrder",
      "type": "querie",
      "fields": []
    },
    {
      "name": "GetExecutionMetricsResult",
      "operation": "GetExecutionMetrics",
      "type": "querie",
      "fields": []
    },
    {
      "name": "GetExecutionHistoryResult",
      "operation": "GetExecutionHistory",
      "type": "querie",
      "fields": []
    },
    {
      "name": "GetActiveCliSessionResult",
      "operation": "GetActiveCliSession",
      "type": "querie",
      "fields": []
    },
    {
      "name": "CreateApiKeyResult",
      "operation": "CreateApiKey",
      "type": "mutation",
      "fields": []
    },
    {
      "name": "TestApiKeyResult",
      "operation": "TestApiKey",
      "type": "mutation",
      "fields": []
    },
    {
      "name": "DeleteApiKeyResult",
      "operation": "DeleteApiKey",
      "type": "mutation",
      "fields": []
    },
    {
      "name": "RegisterCliSessionResult",
      "operation": "RegisterCliSession",
      "type": "mutation",
      "fields": []
    },
    {
      "name": "UnregisterCliSessionResult",
      "operation": "UnregisterCliSession",
      "type": "mutation",
      "fields": []
    },
    {
      "name": "CreateDiagramResult",
      "operation": "CreateDiagram",
      "type": "mutation",
      "fields": []
    },
    {
      "name": "ExecuteDiagramResult",
      "operation": "ExecuteDiagram",
      "type": "mutation",
      "fields": []
    },
    {
      "name": "DeleteDiagramResult",
      "operation": "DeleteDiagram",
      "type": "mutation",
      "fields": []
    },
    {
      "name": "ControlExecutionResult",
      "operation": "ControlExecution",
      "type": "mutation",
      "fields": []
    },
    {
      "name": "SendInteractiveResponseResult",
      "operation": "SendInteractiveResponse",
      "type": "mutation",
      "fields": []
    },
    {
      "name": "UpdateNodeStateResult",
      "operation": "UpdateNodeState",
      "type": "mutation",
      "fields": []
    },
    {
      "name": "UploadFileResult",
      "operation": "UploadFile",
      "type": "mutation",
      "fields": []
    },
    {
      "name": "UploadDiagramResult",
      "operation": "UploadDiagram",
      "type": "mutation",
      "fields": []
    },
    {
      "name": "ValidateDiagramResult",
      "operation": "ValidateDiagram",
      "type": "mutation",
      "fields": []
    },
    {
      "name": "ConvertDiagramFormatResult",
      "operation": "ConvertDiagramFormat",
      "type": "mutation",
      "fields": []
    },
    {
      "name": "CreateNodeResult",
      "operation": "CreateNode",
      "type": "mutation",
      "fields": []
    },
    {
      "name": "UpdateNodeResult",
      "operation": "UpdateNode",
      "type": "mutation",
      "fields": []
    },
    {
      "name": "DeleteNodeResult",
      "operation": "DeleteNode",
      "type": "mutation",
      "fields": []
    },
    {
      "name": "CreatePersonResult",
      "operation": "CreatePerson",
      "type": "mutation",
      "fields": []
    },
    {
      "name": "UpdatePersonResult",
      "operation": "UpdatePerson",
      "type": "mutation",
      "fields": []
    },
    {
      "name": "DeletePersonResult",
      "operation": "DeletePerson",
      "type": "mutation",
      "fields": []
    },
    {
      "name": "ExecutionUpdatesResult",
      "operation": "ExecutionUpdates",
      "type": "subscription",
      "fields": []
    }
  ],
  "types": [
    {
      "name": "CliSession",
      "fields": [
        {
          "name": "id",
          "type": "CliSessionID",
          "optional": false,
          "description": ""
        },
        {
          "name": "session_id",
          "type": "str",
          "optional": false,
          "description": ""
        },
        {
          "name": "user_id",
          "type": "str",
          "optional": true,
          "description": ""
        },
        {
          "name": "started_at",
          "type": "str",
          "optional": false,
          "description": ""
        },
        {
          "name": "last_active",
          "type": "str",
          "optional": true,
          "description": ""
        },
        {
          "name": "status",
          "type": "Union['active', 'inactive', 'terminated']",
          "optional": false,
          "description": ""
        },
        {
          "name": "metadata",
          "type": "Dict[str, Any]",
          "optional": true,
          "description": ""
        },
        {
          "name": "current_directory",
          "type": "str",
          "optional": true,
          "description": ""
        },
        {
          "name": "environment",
          "type": "Dict[str, str]",
          "optional": true,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "Message",
      "fields": [
        {
          "name": "id",
          "type": "str",
          "optional": true,
          "description": ""
        },
        {
          "name": "from_person_id",
          "type": "Union[PersonID, 'system']",
          "optional": false,
          "description": ""
        },
        {
          "name": "to_person_id",
          "type": "PersonID",
          "optional": false,
          "description": ""
        },
        {
          "name": "content",
          "type": "str",
          "optional": false,
          "description": ""
        },
        {
          "name": "timestamp",
          "type": "str",
          "optional": true,
          "description": ""
        },
        {
          "name": "token_count",
          "type": "float",
          "optional": true,
          "description": ""
        },
        {
          "name": "message_type",
          "type": "Union['person_to_person', 'system_to_person', 'person_to_system']",
          "optional": false,
          "description": ""
        },
        {
          "name": "metadata",
          "type": "JsonDict",
          "optional": true,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "ConversationMetadata",
      "fields": [
        {
          "name": "started_at",
          "type": "str",
          "optional": false,
          "description": ""
        },
        {
          "name": "last_message_at",
          "type": "str",
          "optional": false,
          "description": ""
        },
        {
          "name": "total_tokens",
          "type": "float",
          "optional": false,
          "description": ""
        },
        {
          "name": "message_count",
          "type": "float",
          "optional": false,
          "description": ""
        },
        {
          "name": "context_resets",
          "type": "float",
          "optional": false,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "Conversation",
      "fields": [
        {
          "name": "messages",
          "type": "List[Message]",
          "optional": false,
          "description": ""
        },
        {
          "name": "metadata",
          "type": "ConversationMetadata",
          "optional": true,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "Vec2",
      "fields": [
        {
          "name": "x",
          "type": "float",
          "optional": false,
          "description": ""
        },
        {
          "name": "y",
          "type": "float",
          "optional": false,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "DomainHandle",
      "fields": [
        {
          "name": "id",
          "type": "HandleID",
          "optional": false,
          "description": ""
        },
        {
          "name": "node_id",
          "type": "NodeID",
          "optional": false,
          "description": ""
        },
        {
          "name": "label",
          "type": "HandleLabel",
          "optional": false,
          "description": ""
        },
        {
          "name": "direction",
          "type": "HandleDirection",
          "optional": false,
          "description": ""
        },
        {
          "name": "data_type",
          "type": "DataType",
          "optional": false,
          "description": ""
        },
        {
          "name": "position",
          "type": "Optional[str]",
          "optional": true,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "DomainNode",
      "fields": [
        {
          "name": "id",
          "type": "NodeID",
          "optional": false,
          "description": ""
        },
        {
          "name": "type",
          "type": "NodeType",
          "optional": false,
          "description": ""
        },
        {
          "name": "position",
          "type": "Vec2",
          "optional": false,
          "description": ""
        },
        {
          "name": "data",
          "type": "JsonDict",
          "optional": false,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "DomainArrow",
      "fields": [
        {
          "name": "id",
          "type": "ArrowID",
          "optional": false,
          "description": ""
        },
        {
          "name": "source",
          "type": "HandleID",
          "optional": false,
          "description": ""
        },
        {
          "name": "target",
          "type": "HandleID",
          "optional": false,
          "description": ""
        },
        {
          "name": "content_type",
          "type": "Optional[ContentType]",
          "optional": true,
          "description": ""
        },
        {
          "name": "label",
          "type": "Optional[str]",
          "optional": true,
          "description": ""
        },
        {
          "name": "packing",
          "type": "Union['pack', 'spread']",
          "optional": true,
          "description": ""
        },
        {
          "name": "execution_priority",
          "type": "Optional[float]",
          "optional": true,
          "description": ""
        },
        {
          "name": "data",
          "type": "Optional[Dict[str, Any]]",
          "optional": true,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "DomainPerson",
      "fields": [
        {
          "name": "id",
          "type": "PersonID",
          "optional": false,
          "description": ""
        },
        {
          "name": "label",
          "type": "str",
          "optional": false,
          "description": ""
        },
        {
          "name": "llm_config",
          "type": "PersonLLMConfig",
          "optional": false,
          "description": ""
        },
        {
          "name": "type",
          "type": "'person'",
          "optional": false,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "DomainApiKey",
      "fields": [
        {
          "name": "id",
          "type": "ApiKeyID",
          "optional": false,
          "description": ""
        },
        {
          "name": "label",
          "type": "str",
          "optional": false,
          "description": ""
        },
        {
          "name": "service",
          "type": "APIServiceType",
          "optional": false,
          "description": ""
        },
        {
          "name": "key",
          "type": "str",
          "optional": true,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "DiagramMetadata",
      "fields": [
        {
          "name": "id",
          "type": "Optional[DiagramID]",
          "optional": true,
          "description": ""
        },
        {
          "name": "name",
          "type": "Optional[str]",
          "optional": true,
          "description": ""
        },
        {
          "name": "description",
          "type": "Optional[str]",
          "optional": true,
          "description": ""
        },
        {
          "name": "version",
          "type": "str",
          "optional": false,
          "description": ""
        },
        {
          "name": "created",
          "type": "str",
          "optional": false,
          "description": ""
        },
        {
          "name": "modified",
          "type": "str",
          "optional": false,
          "description": ""
        },
        {
          "name": "author",
          "type": "Optional[str]",
          "optional": true,
          "description": ""
        },
        {
          "name": "tags",
          "type": "Optional[List[str]]",
          "optional": true,
          "description": ""
        },
        {
          "name": "format",
          "type": "Optional[str]",
          "optional": true,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "DomainDiagram",
      "fields": [
        {
          "name": "nodes",
          "type": "List[DomainNode]",
          "optional": false,
          "description": ""
        },
        {
          "name": "handles",
          "type": "List[DomainHandle]",
          "optional": false,
          "description": ""
        },
        {
          "name": "arrows",
          "type": "List[DomainArrow]",
          "optional": false,
          "description": ""
        },
        {
          "name": "persons",
          "type": "List[DomainPerson]",
          "optional": false,
          "description": ""
        },
        {
          "name": "metadata",
          "type": "Optional[DiagramMetadata]",
          "optional": true,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "LLMUsage",
      "fields": [
        {
          "name": "input",
          "type": "float",
          "optional": false,
          "description": ""
        },
        {
          "name": "output",
          "type": "float",
          "optional": false,
          "description": ""
        },
        {
          "name": "cached",
          "type": "Optional[float]",
          "optional": true,
          "description": ""
        },
        {
          "name": "total",
          "type": "float",
          "optional": true,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "NodeState",
      "fields": [
        {
          "name": "status",
          "type": "Status",
          "optional": false,
          "description": ""
        },
        {
          "name": "started_at",
          "type": "Optional[str]",
          "optional": true,
          "description": ""
        },
        {
          "name": "ended_at",
          "type": "Optional[str]",
          "optional": true,
          "description": ""
        },
        {
          "name": "error",
          "type": "Optional[str]",
          "optional": true,
          "description": ""
        },
        {
          "name": "llm_usage",
          "type": "Optional[LLMUsage]",
          "optional": true,
          "description": ""
        },
        {
          "name": "output",
          "type": "Optional[Dict[str, Any]]",
          "optional": true,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "NodeMetrics",
      "fields": [
        {
          "name": "node_id",
          "type": "str",
          "optional": false,
          "description": ""
        },
        {
          "name": "node_type",
          "type": "str",
          "optional": false,
          "description": ""
        },
        {
          "name": "start_time",
          "type": "float",
          "optional": false,
          "description": ""
        },
        {
          "name": "end_time",
          "type": "Optional[float]",
          "optional": true,
          "description": ""
        },
        {
          "name": "duration_ms",
          "type": "Optional[float]",
          "optional": true,
          "description": ""
        },
        {
          "name": "memory_usage",
          "type": "Optional[float]",
          "optional": true,
          "description": ""
        },
        {
          "name": "llm_usage",
          "type": "Optional[LLMUsage]",
          "optional": true,
          "description": ""
        },
        {
          "name": "error",
          "type": "Optional[str]",
          "optional": true,
          "description": ""
        },
        {
          "name": "dependencies",
          "type": "List[str]",
          "optional": true,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "Bottleneck",
      "fields": [
        {
          "name": "node_id",
          "type": "str",
          "optional": false,
          "description": ""
        },
        {
          "name": "node_type",
          "type": "str",
          "optional": false,
          "description": ""
        },
        {
          "name": "duration_ms",
          "type": "float",
          "optional": false,
          "description": ""
        },
        {
          "name": "percentage",
          "type": "float",
          "optional": false,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "ExecutionMetrics",
      "fields": [
        {
          "name": "execution_id",
          "type": "ExecutionID",
          "optional": false,
          "description": ""
        },
        {
          "name": "start_time",
          "type": "float",
          "optional": false,
          "description": ""
        },
        {
          "name": "end_time",
          "type": "Optional[float]",
          "optional": true,
          "description": ""
        },
        {
          "name": "total_duration_ms",
          "type": "Optional[float]",
          "optional": true,
          "description": ""
        },
        {
          "name": "node_metrics",
          "type": "Record<string, NodeMetrics>",
          "optional": false,
          "description": ""
        },
        {
          "name": "critical_path",
          "type": "List[str]",
          "optional": true,
          "description": ""
        },
        {
          "name": "parallelizable_groups",
          "type": "List[List[str]]",
          "optional": true,
          "description": ""
        },
        {
          "name": "bottlenecks",
          "type": "List[Bottleneck]",
          "optional": true,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "EnvelopeMeta",
      "fields": [
        {
          "name": "node_id",
          "type": "str",
          "optional": true,
          "description": ""
        },
        {
          "name": "llm_usage",
          "type": "LLMUsage",
          "optional": true,
          "description": ""
        },
        {
          "name": "execution_time",
          "type": "float",
          "optional": true,
          "description": ""
        },
        {
          "name": "retry_count",
          "type": "float",
          "optional": true,
          "description": ""
        },
        {
          "name": "error",
          "type": "str",
          "optional": true,
          "description": ""
        },
        {
          "name": "error_type",
          "type": "str",
          "optional": true,
          "description": ""
        },
        {
          "name": "timestamp",
          "type": "Union[str, float]",
          "optional": true,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "SerializedEnvelope",
      "fields": [
        {
          "name": "envelope_format",
          "type": "true",
          "optional": false,
          "description": ""
        },
        {
          "name": "id",
          "type": "str",
          "optional": false,
          "description": ""
        },
        {
          "name": "trace_id",
          "type": "str",
          "optional": false,
          "description": ""
        },
        {
          "name": "produced_by",
          "type": "str",
          "optional": false,
          "description": ""
        },
        {
          "name": "content_type",
          "type": "str",
          "optional": false,
          "description": ""
        },
        {
          "name": "schema_id",
          "type": "str",
          "optional": true,
          "description": ""
        },
        {
          "name": "serialization_format",
          "type": "str",
          "optional": true,
          "description": ""
        },
        {
          "name": "body",
          "type": "JSONScalar",
          "optional": false,
          "description": ""
        },
        {
          "name": "meta",
          "type": "EnvelopeMeta",
          "optional": false,
          "description": ""
        },
        {
          "name": "representations",
          "type": "Dict[str, Any]",
          "optional": true,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "ExecutionState",
      "fields": [
        {
          "name": "id",
          "type": "ExecutionID",
          "optional": false,
          "description": ""
        },
        {
          "name": "status",
          "type": "Status",
          "optional": false,
          "description": ""
        },
        {
          "name": "diagram_id",
          "type": "Optional[DiagramID]",
          "optional": true,
          "description": ""
        },
        {
          "name": "started_at",
          "type": "str",
          "optional": false,
          "description": ""
        },
        {
          "name": "ended_at",
          "type": "Optional[str]",
          "optional": true,
          "description": ""
        },
        {
          "name": "node_states",
          "type": "Record<string, NodeState>",
          "optional": false,
          "description": ""
        },
        {
          "name": "node_outputs",
          "type": "Record<string, SerializedNodeOutput>",
          "optional": false,
          "description": ""
        },
        {
          "name": "llm_usage",
          "type": "LLMUsage",
          "optional": false,
          "description": ""
        },
        {
          "name": "error",
          "type": "Optional[str]",
          "optional": true,
          "description": ""
        },
        {
          "name": "variables",
          "type": "JsonDict",
          "optional": true,
          "description": ""
        },
        {
          "name": "metadata",
          "type": "JsonDict",
          "optional": true,
          "description": ""
        },
        {
          "name": "duration_seconds",
          "type": "Optional[float]",
          "optional": true,
          "description": ""
        },
        {
          "name": "is_active",
          "type": "bool",
          "optional": true,
          "description": ""
        },
        {
          "name": "exec_counts",
          "type": "Record<string, number>",
          "optional": false,
          "description": ""
        },
        {
          "name": "executed_nodes",
          "type": "List[str]",
          "optional": false,
          "description": ""
        },
        {
          "name": "metrics",
          "type": "Optional[ExecutionMetrics]",
          "optional": true,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "InteractivePromptData",
      "fields": [
        {
          "name": "node_id",
          "type": "NodeID",
          "optional": false,
          "description": ""
        },
        {
          "name": "prompt",
          "type": "str",
          "optional": false,
          "description": ""
        },
        {
          "name": "timeout",
          "type": "float",
          "optional": true,
          "description": ""
        },
        {
          "name": "default_value",
          "type": "Optional[str]",
          "optional": true,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "ExecutionUpdate",
      "fields": [
        {
          "name": "type",
          "type": "EventType",
          "optional": false,
          "description": ""
        },
        {
          "name": "execution_id",
          "type": "ExecutionID",
          "optional": false,
          "description": ""
        },
        {
          "name": "node_id",
          "type": "NodeID",
          "optional": true,
          "description": ""
        },
        {
          "name": "status",
          "type": "Status",
          "optional": true,
          "description": ""
        },
        {
          "name": "result",
          "type": "JsonValue",
          "optional": true,
          "description": ""
        },
        {
          "name": "error",
          "type": "str",
          "optional": true,
          "description": ""
        },
        {
          "name": "timestamp",
          "type": "str",
          "optional": true,
          "description": ""
        },
        {
          "name": "total_tokens",
          "type": "float",
          "optional": true,
          "description": ""
        },
        {
          "name": "node_type",
          "type": "str",
          "optional": true,
          "description": ""
        },
        {
          "name": "tokens",
          "type": "float",
          "optional": true,
          "description": ""
        },
        {
          "name": "data",
          "type": "Dict[str, Any]",
          "optional": true,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "NodeDefinition",
      "fields": [
        {
          "name": "type",
          "type": "str",
          "optional": false,
          "description": ""
        },
        {
          "name": "node_schema",
          "type": "JSONScalar",
          "optional": false,
          "description": ""
        },
        {
          "name": "handler",
          "type": "JSONScalar",
          "optional": false,
          "description": ""
        },
        {
          "name": "requires_services",
          "type": "List[str]",
          "optional": true,
          "description": ""
        },
        {
          "name": "description",
          "type": "str",
          "optional": true,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "File",
      "fields": [
        {
          "name": "id",
          "type": "FileID",
          "optional": false,
          "description": ""
        },
        {
          "name": "name",
          "type": "str",
          "optional": false,
          "description": ""
        },
        {
          "name": "path",
          "type": "str",
          "optional": false,
          "description": ""
        },
        {
          "name": "content",
          "type": "str",
          "optional": true,
          "description": ""
        },
        {
          "name": "size",
          "type": "float",
          "optional": true,
          "description": ""
        },
        {
          "name": "mime_type",
          "type": "str",
          "optional": true,
          "description": ""
        },
        {
          "name": "created_at",
          "type": "str",
          "optional": true,
          "description": ""
        },
        {
          "name": "modified_at",
          "type": "str",
          "optional": true,
          "description": ""
        },
        {
          "name": "metadata",
          "type": "Dict[str, Any]",
          "optional": true,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "ToolOutput",
      "fields": [
        {
          "name": "type",
          "type": "ToolType",
          "optional": false,
          "description": ""
        },
        {
          "name": "result",
          "type": "Union[List[WebSearchResult], ImageGenerationResult, JSONScalar]",
          "optional": false,
          "description": ""
        },
        {
          "name": "raw_response",
          "type": "JSONScalar",
          "optional": true,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "NodeUpdate",
      "fields": [
        {
          "name": "execution_id",
          "type": "ExecutionID",
          "optional": false,
          "description": ""
        },
        {
          "name": "node_id",
          "type": "NodeID",
          "optional": false,
          "description": ""
        },
        {
          "name": "status",
          "type": "Status",
          "optional": false,
          "description": ""
        },
        {
          "name": "progress",
          "type": "float",
          "optional": true,
          "description": ""
        },
        {
          "name": "output",
          "type": "JSONScalar",
          "optional": true,
          "description": ""
        },
        {
          "name": "error",
          "type": "str",
          "optional": true,
          "description": ""
        },
        {
          "name": "metrics",
          "type": "Dict[str, Any]",
          "optional": true,
          "description": ""
        },
        {
          "name": "timestamp",
          "type": "str",
          "optional": false,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "InteractivePrompt",
      "fields": [
        {
          "name": "execution_id",
          "type": "ExecutionID",
          "optional": false,
          "description": ""
        },
        {
          "name": "node_id",
          "type": "NodeID",
          "optional": false,
          "description": ""
        },
        {
          "name": "prompt_id",
          "type": "str",
          "optional": false,
          "description": ""
        },
        {
          "name": "prompt",
          "type": "str",
          "optional": false,
          "description": ""
        },
        {
          "name": "timeout",
          "type": "float",
          "optional": true,
          "description": ""
        },
        {
          "name": "default_value",
          "type": "Optional[str]",
          "optional": true,
          "description": ""
        },
        {
          "name": "options",
          "type": "List[str]",
          "optional": true,
          "description": ""
        },
        {
          "name": "timestamp",
          "type": "str",
          "optional": false,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "ExecutionLogEntry",
      "fields": [
        {
          "name": "execution_id",
          "type": "ExecutionID",
          "optional": false,
          "description": ""
        },
        {
          "name": "node_id",
          "type": "NodeID",
          "optional": true,
          "description": ""
        },
        {
          "name": "level",
          "type": "Union['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL']",
          "optional": false,
          "description": ""
        },
        {
          "name": "message",
          "type": "str",
          "optional": false,
          "description": ""
        },
        {
          "name": "context",
          "type": "Dict[str, Any]",
          "optional": true,
          "description": ""
        },
        {
          "name": "timestamp",
          "type": "str",
          "optional": false,
          "description": ""
        }
      ],
      "description": ""
    },
    {
      "name": "KeepalivePayload",
      "fields": [
        {
          "name": "type",
          "type": "'keepalive'",
          "optional": false,
          "description": ""
        },
        {
          "name": "timestamp",
          "type": "str",
          "optional": false,
          "description": ""
        }
      ],
      "description": ""
    }
  ],
  "config": {
    "type_mappings": {
      "scalar_mappings": {
        "string": "str",
        "number": "float",
        "boolean": "bool",
        "Date": "datetime",
        "any": "JSONScalar",
        "Record<*>": "JSONScalar",
        "Dict<*>": "JSONScalar",
        "Upload": "Upload"
      },
      "patterns": [
        {
          "pattern": "*ID",
          "type": "strawberry.ID"
        },
        {
          "pattern": "*Status",
          "type": "Status",
          "is_enum": true
        }
      ],
      "complex_types": {
        "LLMUsage": "LLMUsageType",
        "PersonLLMConfig": "PersonLLMConfigType",
        "Vec2": "Vec2Type"
      }
    },
    "domain_fields": {
      "interfaces": {
        "Vec2": {
          "simple_fields": true,
          "custom_fields": [],
          "field_methods": []
        },
        "LLMUsage": {
          "simple_fields": true,
          "custom_fields": [],
          "field_methods": []
        },
        "PersonLLMConfig": {
          "simple_fields": true,
          "custom_fields": [],
          "field_methods": []
        },
        "DomainHandle": {
          "simple_fields": true,
          "custom_fields": [],
          "field_methods": []
        },
        "DomainApiKey": {
          "simple_fields": true,
          "custom_fields": [],
          "field_methods": []
        },
        "FileType": {
          "simple_fields": true,
          "custom_fields": [],
          "field_methods": []
        },
        "CliSession": {
          "simple_fields": true,
          "custom_fields": [],
          "field_methods": []
        },
        "CliSessionResult": {
          "simple_fields": true,
          "custom_fields": [],
          "field_methods": []
        },
        "ConversationMetadata": {
          "simple_fields": true,
          "custom_fields": [],
          "field_methods": []
        },
        "DiagramMetadata": {
          "simple_fields": true,
          "custom_fields": [],
          "field_methods": []
        },
        "NodeState": {
          "simple_fields": false,
          "custom_fields": [
            {
              "name": "status",
              "is_auto": false,
              "is_enum": true,
              "type": "Status"
            },
            {
              "name": "started_at",
              "is_auto": true
            },
            {
              "name": "ended_at",
              "is_auto": true
            },
            {
              "name": "error",
              "is_auto": true
            },
            {
              "name": "llm_usage",
              "is_auto": true
            }
          ],
          "field_methods": [
            {
              "name": "output",
              "return_type": "Optional[JSONScalar]",
              "is_optional": true,
              "description": "Node output data"
            }
          ]
        },
        "EnvelopeMeta": {
          "simple_fields": false,
          "custom_fields": [
            {
              "name": "node_id",
              "is_auto": false,
              "is_optional": true,
              "type": "str",
              "default": "None"
            },
            {
              "name": "llm_usage",
              "is_auto": false,
              "is_optional": true,
              "type": "LLMUsageType",
              "default": "None"
            },
            {
              "name": "execution_time",
              "is_auto": false,
              "is_optional": true,
              "type": "float",
              "default": "None"
            },
            {
              "name": "retry_count",
              "is_auto": false,
              "is_optional": true,
              "type": "int",
              "default": "None"
            },
            {
              "name": "error",
              "is_auto": false,
              "is_optional": true,
              "type": "str",
              "default": "None"
            },
            {
              "name": "error_type",
              "is_auto": false,
              "is_optional": true,
              "type": "str",
              "default": "None"
            },
            {
              "name": "timestamp",
              "is_auto": false,
              "is_optional": true,
              "type": "JSONScalar",
              "default": "None"
            }
          ],
          "field_methods": []
        },
        "SerializedEnvelope": {
          "simple_fields": false,
          "custom_fields": [
            {
              "name": "envelope_format",
              "is_auto": true
            },
            {
              "name": "id",
              "is_auto": true
            },
            {
              "name": "trace_id",
              "is_auto": true
            },
            {
              "name": "produced_by",
              "is_auto": true
            },
            {
              "name": "content_type",
              "is_auto": true
            },
            {
              "name": "schema_id",
              "is_auto": true
            },
            {
              "name": "serialization_format",
              "is_auto": true
            },
            {
              "name": "body",
              "is_auto": false,
              "is_optional": true,
              "type": "JSONScalar",
              "default": "None"
            },
            {
              "name": "meta",
              "is_auto": true
            }
          ],
          "field_methods": []
        },
        "DomainNode": {
          "simple_fields": false,
          "custom_fields": [
            {
              "name": "id",
              "is_auto": true
            },
            {
              "name": "position",
              "is_auto": true
            }
          ],
          "field_methods": [
            {
              "name": "type",
              "return_type": "str",
              "is_optional": false,
              "description": "Return the enum value (lowercase) instead of the enum name."
            },
            {
              "name": "data",
              "return_type": "JSONScalar",
              "is_optional": false,
              "description": "Node configuration data"
            }
          ]
        },
        "DomainArrow": {
          "simple_fields": false,
          "custom_fields": [
            {
              "name": "id",
              "is_auto": true
            },
            {
              "name": "source",
              "is_auto": true
            },
            {
              "name": "target",
              "is_auto": true
            },
            {
              "name": "content_type",
              "is_auto": true
            },
            {
              "name": "label",
              "is_auto": true
            }
          ],
          "field_methods": [
            {
              "name": "data",
              "return_type": "Optional[JSONScalar]",
              "is_optional": true,
              "description": "Arrow data as JSON"
            }
          ]
        },
        "DomainPerson": {
          "simple_fields": false,
          "custom_fields": [
            {
              "name": "id",
              "type": "PersonIDScalar",
              "is_auto": true
            },
            {
              "name": "label",
              "type": "str",
              "is_auto": true
            },
            {
              "name": "llm_config",
              "type": "'PersonLLMConfigType'",
              "is_auto": true
            }
          ],
          "field_methods": [
            {
              "name": "type",
              "return_type": "str",
              "is_optional": false,
              "description": "Returns the person type"
            }
          ]
        },
        "Message": {
          "simple_fields": false,
          "has_all_fields": true,
          "custom_fields": [
            {
              "name": "from_person_id",
              "type": "str"
            },
            {
              "name": "to_person_id",
              "type": "PersonIDScalar"
            },
            {
              "name": "content",
              "type": "str"
            },
            {
              "name": "timestamp",
              "type": "str",
              "is_optional": true,
              "default": "None"
            },
            {
              "name": "token_count",
              "type": "float",
              "is_optional": true,
              "default": "None"
            },
            {
              "name": "message_type",
              "type": "str"
            },
            {
              "name": "metadata",
              "type": "JSONScalar",
              "is_optional": true,
              "default": "None"
            }
          ],
          "field_methods": []
        },
        "ExecutionOptions": {
          "simple_fields": false,
          "custom_fields": [
            {
              "name": "mode",
              "is_auto": true
            },
            {
              "name": "timeout",
              "is_auto": true
            }
          ],
          "field_methods": [
            {
              "name": "variables",
              "return_type": "JSONScalar",
              "is_optional": false,
              "description": "Execution variables"
            }
          ]
        },
        "ExecutionState": {
          "simple_fields": false,
          "custom_fields": [
            {
              "name": "id",
              "is_auto": true
            },
            {
              "name": "status",
              "type": "Status",
              "is_enum": true
            },
            {
              "name": "diagram_id",
              "is_auto": true
            },
            {
              "name": "started_at",
              "is_auto": true
            },
            {
              "name": "ended_at",
              "is_auto": true
            },
            {
              "name": "llm_usage",
              "is_auto": true
            },
            {
              "name": "error",
              "is_auto": true
            },
            {
              "name": "duration_seconds",
              "is_auto": true
            },
            {
              "name": "is_active",
              "is_auto": true
            },
            {
              "name": "executed_nodes",
              "is_auto": true
            }
          ],
          "field_methods": [
            {
              "name": "node_states",
              "return_type": "JSONScalar",
              "is_optional": false,
              "description": "Node execution states"
            },
            {
              "name": "node_outputs",
              "return_type": "JSONScalar",
              "is_optional": false,
              "description": "Node execution outputs"
            },
            {
              "name": "variables",
              "return_type": "Optional[JSONScalar]",
              "is_optional": true,
              "description": "Execution variables"
            },
            {
              "name": "exec_counts",
              "return_type": "JSONScalar",
              "is_optional": false,
              "description": "Node execution counts"
            },
            {
              "name": "metrics",
              "return_type": "Optional[JSONScalar]",
              "is_optional": true,
              "description": "Execution metrics"
            }
          ]
        },
        "ExecutionMetrics": {
          "simple_fields": false,
          "custom_fields": [
            {
              "name": "execution_id",
              "is_auto": true
            },
            {
              "name": "start_time",
              "is_auto": true
            },
            {
              "name": "end_time",
              "is_auto": true
            },
            {
              "name": "total_duration_ms",
              "is_auto": true
            },
            {
              "name": "critical_path",
              "is_auto": true
            },
            {
              "name": "parallelizable_groups",
              "is_auto": true
            }
          ],
          "field_methods": [
            {
              "name": "node_metrics",
              "return_type": "JSONScalar",
              "is_optional": false,
              "description": "Node metrics as JSON"
            }
          ]
        },
        "DomainDiagram": {
          "simple_fields": false,
          "custom_fields": [
            {
              "name": "nodes",
              "is_auto": true
            },
            {
              "name": "handles",
              "is_auto": true
            },
            {
              "name": "arrows",
              "is_auto": true
            },
            {
              "name": "persons",
              "is_auto": true
            },
            {
              "name": "metadata",
              "is_auto": true
            }
          ],
          "field_methods": [
            {
              "name": "nodeCount",
              "return_type": "int",
              "is_optional": false,
              "description": "Returns the total number of nodes in the diagram"
            },
            {
              "name": "arrowCount",
              "return_type": "int",
              "is_optional": false,
              "description": "Returns the total number of arrows in the diagram"
            }
          ]
        },
        "NodeMetrics": {
          "simple_fields": true,
          "custom_fields": [],
          "field_methods": []
        },
        "Bottleneck": {
          "simple_fields": true,
          "custom_fields": [],
          "field_methods": []
        }
      }
    },
    "schema": {}
  },
  "metadata": {
    "ast_file_count": 61,
    "interface_count": 29,
    "enum_count": 26,
    "scalar_count": 11,
    "input_count": 16,
    "node_spec_count": 15,
    "total_operations": 45,
    "total_queries": 23,
    "total_mutations": 21,
    "total_subscriptions": 1,
    "operations_meta": [
      {
        "name": "GetApiKeys",
        "type": "query",
        "entity": "ApiKey",
        "has_variables": true,
        "variable_count": 1,
        "variable_names": [
          "service"
        ],
        "class_name": "GetApiKeysOperation",
        "query_const_name": "GETAPIKEYS_QUERY"
      },
      {
        "name": "GetApiKey",
        "type": "query",
        "entity": "ApiKey",
        "has_variables": true,
        "variable_count": 1,
        "variable_names": [
          "api_key_id"
        ],
        "class_name": "GetApiKeyOperation",
        "query_const_name": "GETAPIKEY_QUERY"
      },
      {
        "name": "GetAvailableModels",
        "type": "query",
        "entity": "ApiKey",
        "has_variables": true,
        "variable_count": 2,
        "variable_names": [
          "service",
          "api_key_id"
        ],
        "class_name": "GetAvailableModelsOperation",
        "query_const_name": "GETAVAILABLEMODELS_QUERY"
      },
      {
        "name": "CreateApiKey",
        "type": "mutation",
        "entity": "ApiKey",
        "has_variables": true,
        "variable_count": 1,
        "variable_names": [
          "input"
        ],
        "class_name": "CreateApiKeyOperation",
        "query_const_name": "CREATEAPIKEY_MUTATION"
      },
      {
        "name": "TestApiKey",
        "type": "mutation",
        "entity": "ApiKey",
        "has_variables": true,
        "variable_count": 1,
        "variable_names": [
          "api_key_id"
        ],
        "class_name": "TestApiKeyOperation",
        "query_const_name": "TESTAPIKEY_MUTATION"
      },
      {
        "name": "DeleteApiKey",
        "type": "mutation",
        "entity": "ApiKey",
        "has_variables": true,
        "variable_count": 1,
        "variable_names": [
          "api_key_id"
        ],
        "class_name": "DeleteApiKeyOperation",
        "query_const_name": "DELETEAPIKEY_MUTATION"
      },
      {
        "name": "RegisterCliSession",
        "type": "mutation",
        "entity": "CliSession",
        "has_variables": true,
        "variable_count": 1,
        "variable_names": [
          "input"
        ],
        "class_name": "RegisterCliSessionOperation",
        "query_const_name": "REGISTERCLISESSION_MUTATION"
      },
      {
        "name": "UnregisterCliSession",
        "type": "mutation",
        "entity": "CliSession",
        "has_variables": true,
        "variable_count": 1,
        "variable_names": [
          "input"
        ],
        "class_name": "UnregisterCliSessionOperation",
        "query_const_name": "UNREGISTERCLISESSION_MUTATION"
      },
      {
        "name": "ListConversations",
        "type": "query",
        "entity": "Conversation",
        "has_variables": true,
        "variable_count": 7,
        "variable_names": [
          "person_id",
          "execution_id",
          "search",
          "show_forgotten",
          "limit",
          "offset",
          "since"
        ],
        "class_name": "ListConversationsOperation",
        "query_const_name": "LISTCONVERSATIONS_QUERY"
      },
      {
        "name": "GetDiagram",
        "type": "query",
        "entity": "Diagram",
        "has_variables": true,
        "variable_count": 1,
        "variable_names": [
          "diagram_id"
        ],
        "class_name": "GetDiagramOperation",
        "query_const_name": "GETDIAGRAM_QUERY"
      },
      {
        "name": "ListDiagrams",
        "type": "query",
        "entity": "Diagram",
        "has_variables": true,
        "variable_count": 3,
        "variable_names": [
          "filter",
          "limit",
          "offset"
        ],
        "class_name": "ListDiagramsOperation",
        "query_const_name": "LISTDIAGRAMS_QUERY"
      },
      {
        "name": "CreateDiagram",
        "type": "mutation",
        "entity": "Diagram",
        "has_variables": true,
        "variable_count": 1,
        "variable_names": [
          "input"
        ],
        "class_name": "CreateDiagramOperation",
        "query_const_name": "CREATEDIAGRAM_MUTATION"
      },
      {
        "name": "ExecuteDiagram",
        "type": "mutation",
        "entity": "Diagram",
        "has_variables": true,
        "variable_count": 1,
        "variable_names": [
          "input"
        ],
        "class_name": "ExecuteDiagramOperation",
        "query_const_name": "EXECUTEDIAGRAM_MUTATION"
      },
      {
        "name": "DeleteDiagram",
        "type": "mutation",
        "entity": "Diagram",
        "has_variables": true,
        "variable_count": 1,
        "variable_names": [
          "diagram_id"
        ],
        "class_name": "DeleteDiagramOperation",
        "query_const_name": "DELETEDIAGRAM_MUTATION"
      },
      {
        "name": "GetExecution",
        "type": "query",
        "entity": "Execution",
        "has_variables": true,
        "variable_count": 1,
        "variable_names": [
          "execution_id"
        ],
        "class_name": "GetExecutionOperation",
        "query_const_name": "GETEXECUTION_QUERY"
      },
      {
        "name": "ListExecutions",
        "type": "query",
        "entity": "Execution",
        "has_variables": true,
        "variable_count": 3,
        "variable_names": [
          "filter",
          "limit",
          "offset"
        ],
        "class_name": "ListExecutionsOperation",
        "query_const_name": "LISTEXECUTIONS_QUERY"
      },
      {
        "name": "ExecutionUpdates",
        "type": "subscription",
        "entity": "Execution",
        "has_variables": true,
        "variable_count": 1,
        "variable_names": [
          "execution_id"
        ],
        "class_name": "ExecutionUpdatesOperation",
        "query_const_name": "EXECUTIONUPDATES_SUBSCRIPTION"
      },
      {
        "name": "ControlExecution",
        "type": "mutation",
        "entity": "Execution",
        "has_variables": true,
        "variable_count": 1,
        "variable_names": [
          "input"
        ],
        "class_name": "ControlExecutionOperation",
        "query_const_name": "CONTROLEXECUTION_MUTATION"
      },
      {
        "name": "SendInteractiveResponse",
        "type": "mutation",
        "entity": "Execution",
        "has_variables": true,
        "variable_count": 1,
        "variable_names": [
          "input"
        ],
        "class_name": "SendInteractiveResponseOperation",
        "query_const_name": "SENDINTERACTIVERESPONSE_MUTATION"
      },
      {
        "name": "UpdateNodeState",
        "type": "mutation",
        "entity": "Execution",
        "has_variables": true,
        "variable_count": 1,
        "variable_names": [
          "input"
        ],
        "class_name": "UpdateNodeStateOperation",
        "query_const_name": "UPDATENODESTATE_MUTATION"
      },
      {
        "name": "UploadFile",
        "type": "mutation",
        "entity": "File",
        "has_variables": true,
        "variable_count": 2,
        "variable_names": [
          "file",
          "path"
        ],
        "class_name": "UploadFileOperation",
        "query_const_name": "UPLOADFILE_MUTATION"
      },
      {
        "name": "UploadDiagram",
        "type": "mutation",
        "entity": "File",
        "has_variables": true,
        "variable_count": 2,
        "variable_names": [
          "file",
          "format"
        ],
        "class_name": "UploadDiagramOperation",
        "query_const_name": "UPLOADDIAGRAM_MUTATION"
      },
      {
        "name": "ValidateDiagram",
        "type": "mutation",
        "entity": "File",
        "has_variables": true,
        "variable_count": 2,
        "variable_names": [
          "content",
          "format"
        ],
        "class_name": "ValidateDiagramOperation",
        "query_const_name": "VALIDATEDIAGRAM_MUTATION"
      },
      {
        "name": "ConvertDiagramFormat",
        "type": "mutation",
        "entity": "File",
        "has_variables": true,
        "variable_count": 3,
        "variable_names": [
          "content",
          "from_format",
          "to_format"
        ],
        "class_name": "ConvertDiagramFormatOperation",
        "query_const_name": "CONVERTDIAGRAMFORMAT_MUTATION"
      },
      {
        "name": "GetSupportedFormats",
        "type": "query",
        "entity": "Format",
        "has_variables": false,
        "variable_count": 0,
        "variable_names": [],
        "class_name": "GetSupportedFormatsOperation",
        "query_const_name": "GETSUPPORTEDFORMATS_QUERY"
      },
      {
        "name": "CreateNode",
        "type": "mutation",
        "entity": "Node",
        "has_variables": true,
        "variable_count": 2,
        "variable_names": [
          "diagram_id",
          "input"
        ],
        "class_name": "CreateNodeOperation",
        "query_const_name": "CREATENODE_MUTATION"
      },
      {
        "name": "UpdateNode",
        "type": "mutation",
        "entity": "Node",
        "has_variables": true,
        "variable_count": 3,
        "variable_names": [
          "diagram_id",
          "node_id",
          "input"
        ],
        "class_name": "UpdateNodeOperation",
        "query_const_name": "UPDATENODE_MUTATION"
      },
      {
        "name": "DeleteNode",
        "type": "mutation",
        "entity": "Node",
        "has_variables": true,
        "variable_count": 2,
        "variable_names": [
          "diagram_id",
          "node_id"
        ],
        "class_name": "DeleteNodeOperation",
        "query_const_name": "DELETENODE_MUTATION"
      },
      {
        "name": "GetPerson",
        "type": "query",
        "entity": "Person",
        "has_variables": true,
        "variable_count": 1,
        "variable_names": [
          "person_id"
        ],
        "class_name": "GetPersonOperation",
        "query_const_name": "GETPERSON_QUERY"
      },
      {
        "name": "ListPersons",
        "type": "query",
        "entity": "Person",
        "has_variables": true,
        "variable_count": 1,
        "variable_names": [
          "limit"
        ],
        "class_name": "ListPersonsOperation",
        "query_const_name": "LISTPERSONS_QUERY"
      },
      {
        "name": "CreatePerson",
        "type": "mutation",
        "entity": "Person",
        "has_variables": true,
        "variable_count": 1,
        "variable_names": [
          "input"
        ],
        "class_name": "CreatePersonOperation",
        "query_const_name": "CREATEPERSON_MUTATION"
      },
      {
        "name": "UpdatePerson",
        "type": "mutation",
        "entity": "Person",
        "has_variables": true,
        "variable_count": 2,
        "variable_names": [
          "person_id",
          "input"
        ],
        "class_name": "UpdatePersonOperation",
        "query_const_name": "UPDATEPERSON_MUTATION"
      },
      {
        "name": "DeletePerson",
        "type": "mutation",
        "entity": "Person",
        "has_variables": true,
        "variable_count": 1,
        "variable_names": [
          "person_id"
        ],
        "class_name": "DeletePersonOperation",
        "query_const_name": "DELETEPERSON_MUTATION"
      },
      {
        "name": "ListPromptFiles",
        "type": "query",
        "entity": "Prompt",
        "has_variables": false,
        "variable_count": 0,
        "variable_names": [],
        "class_name": "ListPromptFilesOperation",
        "query_const_name": "LISTPROMPTFILES_QUERY"
      },
      {
        "name": "GetPromptFile",
        "type": "query",
        "entity": "Prompt",
        "has_variables": true,
        "variable_count": 1,
        "variable_names": [
          "filename"
        ],
        "class_name": "GetPromptFileOperation",
        "query_const_name": "GETPROMPTFILE_QUERY"
      },
      {
        "name": "GetProviders",
        "type": "query",
        "entity": "Provider",
        "has_variables": false,
        "variable_count": 0,
        "variable_names": [],
        "class_name": "GetProvidersOperation",
        "query_const_name": "GETPROVIDERS_QUERY"
      },
      {
        "name": "GetProviderOperations",
        "type": "query",
        "entity": "Provider",
        "has_variables": true,
        "variable_count": 1,
        "variable_names": [
          "provider"
        ],
        "class_name": "GetProviderOperationsOperation",
        "query_const_name": "GETPROVIDEROPERATIONS_QUERY"
      },
      {
        "name": "GetOperationSchema",
        "type": "query",
        "entity": "Provider",
        "has_variables": true,
        "variable_count": 2,
        "variable_names": [
          "provider",
          "operation"
        ],
        "class_name": "GetOperationSchemaOperation",
        "query_const_name": "GETOPERATIONSCHEMA_QUERY"
      },
      {
        "name": "GetSystemInfo",
        "type": "query",
        "entity": "System",
        "has_variables": false,
        "variable_count": 0,
        "variable_names": [],
        "class_name": "GetSystemInfoOperation",
        "query_const_name": "GETSYSTEMINFO_QUERY"
      },
      {
        "name": "GetExecutionCapabilities",
        "type": "query",
        "entity": "System",
        "has_variables": false,
        "variable_count": 0,
        "variable_names": [],
        "class_name": "GetExecutionCapabilitiesOperation",
        "query_const_name": "GETEXECUTIONCAPABILITIES_QUERY"
      },
      {
        "name": "HealthCheck",
        "type": "query",
        "entity": "System",
        "has_variables": false,
        "variable_count": 0,
        "variable_names": [],
        "class_name": "HealthCheckOperation",
        "query_const_name": "HEALTHCHECK_QUERY"
      },
      {
        "name": "GetExecutionOrder",
        "type": "query",
        "entity": "System",
        "has_variables": true,
        "variable_count": 1,
        "variable_names": [
          "execution_id"
        ],
        "class_name": "GetExecutionOrderOperation",
        "query_const_name": "GETEXECUTIONORDER_QUERY"
      },
      {
        "name": "GetExecutionMetrics",
        "type": "query",
        "entity": "System",
        "has_variables": true,
        "variable_count": 1,
        "variable_names": [
          "execution_id"
        ],
        "class_name": "GetExecutionMetricsOperation",
        "query_const_name": "GETEXECUTIONMETRICS_QUERY"
      },
      {
        "name": "GetExecutionHistory",
        "type": "query",
        "entity": "System",
        "has_variables": true,
        "variable_count": 3,
        "variable_names": [
          "diagram_id",
          "limit",
          "include_metrics"
        ],
        "class_name": "GetExecutionHistoryOperation",
        "query_const_name": "GETEXECUTIONHISTORY_QUERY"
      },
      {
        "name": "GetActiveCliSession",
        "type": "query",
        "entity": "System",
        "has_variables": false,
        "variable_count": 0,
        "variable_names": [],
        "class_name": "GetActiveCliSessionOperation",
        "query_const_name": "GETACTIVECLISESSION_QUERY"
      }
    ]
  }
}
