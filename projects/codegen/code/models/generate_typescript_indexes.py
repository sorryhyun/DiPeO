"""Generate both core/nodes/index.ts and specifications/nodes/index.ts files."""
import os
from pathlib import Path
from typing import Any, Dict, List, Tuple


def camel_to_snake(name: str) -> str:
    """Convert camelCase to snake_case."""
    result = []
    for i, char in enumerate(name):
        if char.isupper() and i > 0:
            # Add underscore before uppercase letter if previous char is lowercase
            if name[i-1].islower() or (i < len(name) - 1 and name[i+1].islower()):
                result.append('_')
        result.append(char.lower())
    return ''.join(result)


def get_spec_name_from_filename(filename: str) -> str:
    """Extract spec variable name from filename.
    e.g., 'person-job.spec.ts' -> 'personJobSpec'
    """
    base_name = filename.replace('.spec.ts', '')
    parts = base_name.split('-')
    # First part is lowercase, rest are capitalized
    camel_case = parts[0] + ''.join(part.capitalize() for part in parts[1:])
    return camel_case + 'Spec'


def get_registry_key_from_filename(filename: str) -> str:
    """Extract registry key from filename.
    e.g., 'person-job.spec.ts' -> 'person_job'
    """
    base_name = filename.replace('.spec.ts', '')
    return base_name.replace('-', '_')


def generate_node_data_index(base_dir: Path) -> dict[str, Any]:
    """Generate the core/nodes/index.ts file.

    Since node data types are now generated from specifications,
    this file only exports the base types.
    """
    node_data_dir = base_dir / 'dipeo' / 'models' / 'src' / 'core' / 'nodes'
    output_path = node_data_dir / 'index.ts'

    # Generate minimal exports - only base types
    exports = [
        "// Simplified after removing redundant *.data.ts files",
        "// Node data types are now generated from specifications",
        "",
        "export * from './base.js';"
    ]

    # Combine all parts
    content = '\n'.join(exports)

    # Write the file
    with open(output_path, 'w', encoding='utf-8') as f:
        f.write(content)

    return {
        'data_output_path': str(output_path),
        'message': 'Generated minimal index exporting only base types'
    }


def generate_node_specs_index(base_dir: Path) -> dict[str, Any]:
    """Generate the specifications/nodes/index.ts file."""
    node_specs_dir = base_dir / 'dipeo' / 'models' / 'src' / 'specifications' / 'nodes'
    output_path = node_specs_dir / 'index.ts'

    # Find all .spec.ts files
    spec_files = sorted([
        f.name for f in node_specs_dir.glob('*.spec.ts')
        if f.name not in ['index.ts', 'node-specifications.ts']
    ])

    if not spec_files:
        return {'error': 'No spec files found', 'output_path': str(output_path)}

    # Generate import statements
    imports = [
        "// Auto-generated file. Do not edit manually.",
        "// Generated by projects/codegen/code/models/generate_typescript_indexes.py",
        "",
        "import { NodeSpecificationRegistry } from '../types.js';"
    ]

    spec_names: list[tuple[str, str, str]] = []

    for spec_file in spec_files:
        spec_name = get_spec_name_from_filename(spec_file)
        registry_key = get_registry_key_from_filename(spec_file)
        import_path = f"./{spec_file.replace('.ts', '.js')}"

        imports.append(f"import {{ {spec_name} }} from '{import_path}';")
        spec_names.append((spec_name, registry_key, spec_file))

    # Generate exports
    exports = [
        "",
        "export { "
    ]

    for i, (spec_name, _, _) in enumerate(spec_names):
        if i == len(spec_names) - 1:
            exports.append(f"  {spec_name}")
        else:
            exports.append(f"  {spec_name},")

    exports.append("};")

    # Generate registry
    registry = [
        "",
        "export const nodeSpecificationRegistry: NodeSpecificationRegistry = {"
    ]

    for i, (spec_name, registry_key, _) in enumerate(spec_names):
        if i == len(spec_names) - 1:
            registry.append(f"  {registry_key}: {spec_name}")
        else:
            registry.append(f"  {registry_key}: {spec_name},")

    registry.append("};")

    # Combine all parts
    content = '\n'.join(imports + exports + registry)

    # Write the file
    with open(output_path, 'w', encoding='utf-8') as f:
        f.write(content)

    return {
        'specs_output_path': str(output_path),
        'spec_count': len(spec_files),
        'spec_files': spec_files
    }


def main(inputs: dict[str, Any]) -> dict[str, Any]:
    """Generate both TypeScript index files."""
    base_dir = Path(os.getenv('DIPEO_BASE_DIR', os.getcwd()))

    # Generate both index files
    data_results = generate_node_data_index(base_dir)
    specs_results = generate_node_specs_index(base_dir)

    # Combine results
    results = {**data_results, **specs_results}

    return results
