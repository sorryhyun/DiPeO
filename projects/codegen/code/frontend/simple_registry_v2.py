"""Simple generator for frontend node registry imports - Version 2.
Handles glob results directly without intermediate extraction.
"""
from typing import Any

from dipeo.infrastructure.codegen.templates.filters.base_filters import BaseFilters
from projects.codegen.code.core.utils import parse_dipeo_output


def extract_node_types_from_glob(glob_results: dict[str, Any]) -> list[str]:
    """Extract node types directly from glob results.

    Args:
        glob_results: Dict with file paths as keys from DB glob operation

    Returns:
        List of node type strings
    """
    node_types = []

    for filepath in glob_results:
        # Skip special keys if present
        if filepath in ['default', 'inputs', 'node_id']:
            continue

        # Check if this is a spec file
        if not filepath.endswith('.spec.ts.json'):
            continue

        # Extract node type from filename
        # e.g., "temp/nodes/person-job.spec.ts.json" -> "person_job"
        from pathlib import Path
        base_filename = Path(filepath).name
        node_type = base_filename.replace('.spec.ts.json', '').replace('-', '_')
        node_types.append(node_type)

    return sorted(node_types)


def generate_simple_registry(node_types: list[str]) -> str:
    """Generate registry file that imports and registers all node configs."""
    lines = [
        "// Auto-generated node registry",
        "// DO NOT EDIT - This file is automatically generated by the codegen system",
        "import { registerNodeConfig } from '@/domain/diagram/config/nodeRegistry';",
        ""
    ]

    for node_type in node_types:
        if node_type == 'example_hook':
            config_name = "hookConfig"
            file_name = "HookConfig"
        elif node_type == 'typescript_ast_parser':
            config_name = "typescriptAstConfig"
            file_name = "TypescriptAstConfig"
        else:
            config_name = f"{BaseFilters.camel_case(node_type)}Config"
            file_name = f"{BaseFilters.pascal_case(node_type)}Config"
        lines.append(f"import {{ {config_name} }} from '@/__generated__/nodes/{file_name}';")

    lines.append("")
    lines.append("export function registerAllNodes() {")

    for node_type in node_types:
        if node_type == 'example_hook':
            config_name = "hookConfig"
        elif node_type == 'typescript_ast_parser':
            config_name = "typescriptAstConfig"
        else:
            config_name = f"{BaseFilters.camel_case(node_type)}Config"
        lines.append(f"  registerNodeConfig({config_name});")

    lines.append("}")
    lines.append("")
    lines.append("// Call this on app initialization")
    lines.append("registerAllNodes();")

    return "\n".join(lines)


def main(inputs: dict[str, Any]) -> dict[str, Any]:
    """Entry point for code_job node - handles glob results directly."""

    # DiPeO handles 'default' automatically
    raw_results = inputs['default']

    # Parse string to dict if needed (DiPeO returns Python dict strings)
    if isinstance(raw_results, str):
        glob_results = parse_dipeo_output(raw_results)
        if not glob_results:
            glob_results = {}
    else:
        glob_results = raw_results if isinstance(raw_results, dict) else {}

    # Extract node types directly from glob results
    node_types = extract_node_types_from_glob(glob_results)

    if not node_types:
        raise ValueError("No node types found in glob results")

    # Generate the registry
    generated_code = generate_simple_registry(node_types)

    return {
        'generated_code': generated_code,
        'filename': 'nodeRegistry.ts',
        'node_count': len(node_types)
    }
