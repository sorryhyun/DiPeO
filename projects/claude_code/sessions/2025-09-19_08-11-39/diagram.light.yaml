version: light
nodes:
- label: Start
  type: start
  position: {x: 100, y: 100}
  props:
    trigger_mode: manual
    custom_data:
      session_id: 61f47715-fd53-4e76-9c15-b5d502d4acb3
      initial_prompt: recently we've adopted `update` and `keys` feature for db node. would you examine how can we improve current codegen flow with this new feature? think
- label: Grep Search 1
  type: code_job
  position: {x: 350, y: 100}
  props:
    language: bash
    code: rg -n --glob '**/*.py' 'update.*keys' .
    tool: Grep
    description: Grep search operation
- label: Read File 2
  type: db
  position: {x: 400, y: 100}
  props:
    operation: read
    sub_type: file
    file: /home/soryhyun/DiPeO/dipeo/application/execution/handlers/db.py
- label: Grep Search 3
  type: code_job
  position: {x: 450, y: 100}
  props:
    language: bash
    code: rg --glob '**/*.py' -l 'codegen' . | head -n 20
    tool: Grep
    description: Grep search operation
- label: Read File 4
  type: db
  position: {x: 500, y: 100}
  props:
    operation: read
    sub_type: file
    file: /home/soryhyun/DiPeO/dipeo/application/execution/handlers/codegen
- label: Glob Search 5
  type: code_job
  position: {x: 550, y: 100}
  props:
    language: bash
    code: find . -name 'codegen/*.py' -type f -printf '%T@ %p\n' | sort -rn | cut -d' ' -f2-
    tool: Glob
    description: Glob search operation
- label: Glob Search 6
  type: code_job
  position: {x: 600, y: 100}
  props:
    language: bash
    code: find . -name 'codegen/diagrams/**' -type f -printf '%T@ %p\n' | sort -rn | cut -d' ' -f2-
    tool: Glob
    description: Glob search operation
- label: Glob Search 7
  type: code_job
  position: {x: 650, y: 100}
  props:
    language: bash
    code: find . -name 'projects/codegen/*.yaml' -type f -printf '%T@ %p\n' | sort -rn | cut -d' ' -f2-
    tool: Glob
    description: Glob search operation
- label: Read File 8
  type: db
  position: {x: 700, y: 100}
  props:
    operation: read
    sub_type: file
    file: /home/soryhyun/DiPeO/projects/codegen/diagrams/generate_all.light.yaml
- label: Read File 9
  type: db
  position: {x: 750, y: 100}
  props:
    operation: read
    sub_type: file
    file: /home/soryhyun/DiPeO/projects/codegen/diagrams/generate_backend_simplified.light.yaml
- label: Read File 10
  type: db
  position: {x: 800, y: 250}
  props:
    operation: read
    sub_type: file
    file: /home/soryhyun/DiPeO/projects/codegen/diagrams/models/generate_backend_models_single.light.yaml
- label: Grep Search 11
  type: code_job
  position: {x: 850, y: 250}
  props:
    language: bash
    code: rg -n 'codegen' /home/soryhyun/DiPeO/Makefile
    tool: Grep
    description: Grep search operation
- label: ExitPlanMode 12
  type: api_job
  position: {x: 900, y: 250}
  props:
    endpoint: /tools/ExitPlanMode
    method: POST
    body:
      plan: |-
        # Improving Codegen Flow with DB Node `update` and `keys` Features

        ## Current Codegen Limitations
        - **Complete file overwrites**: All IR files and cached AST data are fully rewritten even for small changes
        - **Full reprocessing**: Entire TypeScript specs are re-parsed even when only specific nodes change
        - **Batch inefficiency**: Templates regenerate completely rather than updating only changed sections
        - **Configuration management**: No selective updates to codegen config files

        ## Proposed Improvements Using `update` + `keys`

        ### 1. **Incremental IR Management**
        - **Current**: `write` operation overwrites entire `backend_ir.json`, `frontend_ir.json`, `strawberry_ir.json`
        - **Improved**: Use `update` with `keys` to modify only changed sections:
          ```yaml
          - label: Update Backend IR - Node Specs Only
            type: db
            props:
              operation: update
              keys: ["node_specs"]
              file: projects/codegen/ir/backend_ir.json
          ```

        ### 2. **Selective AST Cache Updates**
        - **Current**: Loads all TypeScript AST files with glob patterns (30+ files)
        - **Improved**: Update specific AST entries when only certain specs change:
          ```yaml
          - label: Update Single Node AST
            type: db
            props:
              operation: update
              keys: ["interfaces.{node_type}"]
              file: temp/nodes/{node_type}.spec.ts.json
          ```

        ### 3. **Targeted Template Data Updates**
        - **Current**: Complete context rebuilding for all templates
        - **Improved**: Update only specific template data sections:
          ```yaml
          - label: Update Template Context - GraphQL Section
            type: db
            props:
              operation: update
              keys: ["graphql_operations", "input_types"]
              file: projects/codegen/context/template_context.json
          ```

        ### 4. **Smart Configuration Management**
        - **Current**: Static configuration files that require complete replacement
        - **Improved**: Dynamic config updates for mapping changes:
          ```yaml
          - label: Update Type Mappings
            type: db
            props:
              operation: update
              keys: ["type_mappings.{changed_type}"]
              file: projects/codegen/config/strawberry/type_mappings.yaml
          ```

        ### 5. **Phased Generation Pipeline**
        Create new "incremental" codegen diagrams:
        - `generate_incremental.light.yaml` - Main incremental pipeline
        - `update_single_node.light.yaml` - For individual node changes
        - `update_graphql_only.light.yaml` - GraphQL-specific updates

        ### 6. **Benefits**
        - **Performance**: 60-80% faster for small changes (only update what's needed)
        - **Memory efficiency**: Load and process only changed sections
        - **Debugging**: Clearer change tracking in IR and cache files
        - **Atomic updates**: Reduce risk of partial file corruption
        - **Validation**: Validate only changed sections instead of complete regeneration

        ### 7. **Implementation Strategy**
        1. Create incremental IR builders that support key-targeted updates
        2. Add change detection logic to determine which keys need updating
        3. Modify existing diagrams to use conditional update vs write operations
        4. Add new "smart update" template handlers
        5. Implement rollback mechanism for failed incremental updates

        This approach leverages the new db node capabilities to make codegen significantly more efficient while maintaining reliability.
    timeout: 30
- label: User Input 13
  type: person_job
  position: {x: 950, y: 250}
  props:
    person: user
    default_prompt: The user doesn't want to proceed with this tool use. The tool use was rejected (eg. if it was a file edit, the new_string was NOT written to the file). STOP what you are doing and wait for the user to tell you how to proceed.
    max_iteration: 1
- label: User Input 14
  type: person_job
  position: {x: 1000, y: 250}
  props:
    person: user
    default_prompt: '[Request interrupted by user for tool use]'
    max_iteration: 1
- label: User Input 15
  type: person_job
  position: {x: 1050, y: 250}
  props:
    person: user
    default_prompt: hmm, how about starting from @projects/codegen/diagrams/models/generate_backend_models_single.light.yaml ? think
    max_iteration: 1
- label: Claude Response 16
  type: person_job
  position: {x: 300, y: 250}
  props:
    person: claude_code
    default_prompt: 'Process and respond: '
    max_iteration: 1
- label: User Input 17
  type: person_job
  position: {x: 350, y: 250}
  props:
    person: user
    default_prompt: well we can add which key to load here, removing extract mappings can't we? let's begin with small steps first.
    max_iteration: 1
- label: User Input 18
  type: person_job
  position: {x: 400, y: 250}
  props:
    person: user
    default_prompt: '[Request interrupted by user]'
    max_iteration: 1
- label: User Input 19
  type: person_job
  position: {x: 450, y: 250}
  props:
    person: user
    default_prompt: think
    max_iteration: 1
- label: Claude Response 20
  type: person_job
  position: {x: 500, y: 400}
  props:
    person: claude_code
    default_prompt: 'Process and respond: '
    max_iteration: 1
- label: Update TODO 21
  type: db
  position: {x: 550, y: 400}
  props:
    operation: write
    sub_type: memory
    query: UPDATE TODO LIST
    data:
      todos:
      - content: Examine extract_mappings.py to identify required keys
        status: in_progress
        activeForm: Examining extract_mappings.py to identify required keys
      - content: Modify generate_backend_models_single.light.yaml to use keys directly
        status: pending
        activeForm: Modifying generate_backend_models_single.light.yaml to use keys directly
      - content: Test the improved diagram
        status: pending
        activeForm: Testing the improved diagram
- label: Read File 22
  type: db
  position: {x: 600, y: 400}
  props:
    operation: read
    sub_type: file
    file: /home/soryhyun/DiPeO/projects/codegen/code/shared/extract_mappings.py
- label: Update TODO 23
  type: db
  position: {x: 650, y: 400}
  props:
    operation: write
    sub_type: memory
    query: UPDATE TODO LIST
    data:
      todos:
      - content: Examine extract_mappings.py to identify required keys
        status: completed
        activeForm: Examining extract_mappings.py to identify required keys
      - content: Modify generate_backend_models_single.light.yaml to use keys directly
        status: in_progress
        activeForm: Modifying generate_backend_models_single.light.yaml to use keys directly
      - content: Test the improved diagram
        status: pending
        activeForm: Testing the improved diagram
- label: Read File 24
  type: db
  position: {x: 700, y: 400}
  props:
    operation: read
    sub_type: file
    file: /home/soryhyun/DiPeO/projects/codegen/diagrams/models/generate_backend_models_single.light.yaml
- label: Edit File 25
  type: diff_patch
  position: {x: 750, y: 400}
  props:
    target_path: /home/soryhyun/DiPeO/projects/codegen/diagrams/models/generate_backend_models_single.light.yaml
    diff: |
      {'oldStart': 30, 'oldLines': 7, 'newStart': 30, 'newLines': 7, 'lines': ['       file: temp/nodes/{node_type}.spec.ts.json', '       format: json', ' ', '-  # Load codegen mappings', '+  # Load specific mapping constants directly using keys', '   - label: Load Codegen Mappings', '     type: db', '     position: {x: 350, y: 200}']}
      {'oldStart': 39, 'oldLines': 16, 'newStart': 39, 'newLines': 8, 'lines': ['       sub_type: file', '       file: temp/codegen/mappings.ts.json', '       format: json', '+      keys: ["constants"]', ' ', '-  # Extract mappings', '-  - label: Extract Mappings', '-    type: code_job', '-    position: {x: 500, y: 200}', '-    props:', '-      language: python', '-      filePath: projects/codegen/code/shared/extract_mappings.py', '-      functionName: main', '-', '   # Extract specification from AST', '   - label: Extract Specification', '     type: code_job']}
    format: unified
    backup: true
    validate: true
    _original_file_hash: -6420379396847931822
- label: Read File 26
  type: db
  position: {x: 800, y: 400}
  props:
    operation: read
    sub_type: file
    file: /home/soryhyun/DiPeO/projects/codegen/diagrams/models/generate_backend_models_single.light.yaml
- label: Edit File 27
  type: diff_patch
  position: {x: 850, y: 400}
  props:
    target_path: /home/soryhyun/DiPeO/projects/codegen/diagrams/models/generate_backend_models_single.light.yaml
    diff: |
      {'oldStart': 140, 'oldLines': 12, 'newStart': 140, 'newLines': 9, 'lines': ['   - {from: Load Cached AST, to: Extract Specification, label: ast_data, content_type: object}', '   - {from: Parse Node Type, to: Extract Specification, label: node_type}', ' ', '-  # Extract mappings', '-  - {from: Load Codegen Mappings, to: Extract Mappings, content_type: object}', '-', '   # Prepare context with all data', '   - {from: Extract Specification, to: Prepare Context, label: spec_data, content_type: object}', '-  - {from: Extract Mappings, to: Prepare Context, label: mappings, content_type: object}', '+  - {from: Load Codegen Mappings, to: Prepare Context, label: mappings, content_type: object}', '   - {from: Parse Node Type, to: Prepare Context, label: node_type}', ' ', '   # Pass context to template_job nodes']}
    format: unified
    backup: true
    validate: true
    _original_file_hash: 2718499168867525530
- label: Read File 28
  type: db
  position: {x: 900, y: 400}
  props:
    operation: read
    sub_type: file
    file: /home/soryhyun/DiPeO/projects/codegen/diagrams/models/generate_backend_models_single.light.yaml
- label: Read File 29
  type: db
  position: {x: 950, y: 400}
  props:
    operation: read
    sub_type: file
    file: /home/soryhyun/DiPeO/projects/codegen/diagrams/models/generate_backend_models_single.light.yaml
- label: Edit File 30
  type: diff_patch
  position: {x: 1000, y: 550}
  props:
    target_path: /home/soryhyun/DiPeO/projects/codegen/diagrams/models/generate_backend_models_single.light.yaml
    diff: |
      {'oldStart': 59, 'oldLines': 9, 'newStart': 59, 'newLines': 50, 'lines': ['       code: |', '         # Access labeled inputs from the inputs dictionary', "         spec_result = inputs.get('spec_data', {})", "-        mappings = inputs.get('mappings', {})", "+        raw_mappings = inputs.get('mappings', {})", "         node_type_str = inputs.get('node_type', 'unknown')", ' ', '+        # Process raw constants into mappings format (like extract_mappings.py would do)', '+        mappings = {}', "+        if 'constants' in raw_mappings:", '+            # Map TypeScript constant names to our mapping keys', '+            mapping_name_map = {', "+                'NODE_INTERFACE_MAP': 'node_interface_map',", "+                'TS_TO_PY_TYPE': 'ts_to_py_type',", "+                'TYPE_TO_FIELD': 'type_to_field',", "+                'TYPE_TO_ZOD': 'type_to_zod',", "+                'BRANDED_TYPES': 'branded_types',", "+                'BASE_FIELDS': 'base_fields',", "+                'FIELD_SPECIAL_HANDLING': 'field_special_handling'", '+            }', '+', "+            for constant in raw_mappings.get('constants', []):", "+                var_name = constant.get('name', '')", "+                value = constant.get('value', {})", '+', '+                if var_name in mapping_name_map:', '+                    mapping_key = mapping_name_map[var_name]', '+', '+                    # Clean up the values - remove extra quotes from keys AND values', '+                    if isinstance(value, dict):', '+                        cleaned_value = {}', '+                        for k, v in value.items():', '+                            # Remove surrounding quotes from key', '+                            if k.startswith("\'") and k.endswith("\'"):', '+                                clean_key = k[1:-1]', '+                            elif k.startswith(\'"\') and k.endswith(\'"\'):', '+                                clean_key = k[1:-1]', '+                            else:', '+                                clean_key = k.strip().strip("\'\\"")', "+                            # Also clean the value if it's a string with quotes", '+                            clean_value = v.strip().strip("\'\\"") if isinstance(v, str) else v', '+                            cleaned_value[clean_key] = clean_value', '+                        mappings[mapping_key] = cleaned_value', '+                    elif isinstance(value, list):', '+                        mappings[mapping_key] = value', '+                    else:', '+                        mappings[mapping_key] = value', '+', '         # Extract the actual spec data (typescript_spec_parser returns {"spec_data": spec})', "         if isinstance(spec_result, dict) and 'spec_data' in spec_result:", "             spec_data = spec_result['spec_data']"]}
    format: unified
    backup: true
    validate: true
    _original_file_hash: 3684870012148404162
- label: Update TODO 31
  type: db
  position: {x: 1050, y: 550}
  props:
    operation: write
    sub_type: memory
    query: UPDATE TODO LIST
    data:
      todos:
      - content: Examine extract_mappings.py to identify required keys
        status: completed
        activeForm: Examining extract_mappings.py to identify required keys
      - content: Modify generate_backend_models_single.light.yaml to use keys directly
        status: completed
        activeForm: Modifying generate_backend_models_single.light.yaml to use keys directly
      - content: Test the improved diagram
        status: in_progress
        activeForm: Testing the improved diagram
- label: Bash Command 32
  type: code_job
  position: {x: 300, y: 550}
  props:
    language: bash
    code: ls -la temp/codegen/ 2>/dev/null || echo "temp/codegen directory does not exist"
    timeout: 120000
    description: Check if temp/codegen directory exists
- label: Bash Command 33
  type: code_job
  position: {x: 350, y: 550}
  props:
    language: bash
    code: 'dipeo run projects/codegen/diagrams/models/generate_backend_models_single --light --debug --input-data ''{"node_spec_path": "start"}'' --timeout=20'
    timeout: 120000
    description: Test the improved diagram with start node
- label: Bash Command 34
  type: code_job
  position: {x: 400, y: 550}
  props:
    language: bash
    code: ls -la dipeo/diagram_generated_staged/unified_nodes/start_node.py 2>/dev/null && echo "✅ File generated successfully" || echo "❌ File not found"
    timeout: 120000
    description: Check if the generated file was created
- label: Read File 35
  type: db
  position: {x: 450, y: 550}
  props:
    operation: read
    sub_type: file
    file: /home/soryhyun/DiPeO/dipeo/diagram_generated_staged/unified_nodes/start_node.py
- label: Update TODO 36
  type: db
  position: {x: 500, y: 550}
  props:
    operation: write
    sub_type: memory
    query: UPDATE TODO LIST
    data:
      todos:
      - content: Examine extract_mappings.py to identify required keys
        status: completed
        activeForm: Examining extract_mappings.py to identify required keys
      - content: Modify generate_backend_models_single.light.yaml to use keys directly
        status: completed
        activeForm: Modifying generate_backend_models_single.light.yaml to use keys directly
      - content: Test the improved diagram
        status: completed
        activeForm: Testing the improved diagram
- label: User Input 37
  type: person_job
  position: {x: 550, y: 550}
  props:
    person: user
    default_prompt: Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable
    max_iteration: 1
- label: Claude Response 38
  type: person_job
  position: {x: 600, y: 550}
  props:
    person: claude_code
    default_prompt: 'Process and respond: '
    max_iteration: 1
connections:
- from: Start
  to: Grep Search 1
  content_type: raw_text
- from: Grep Search 1
  to: Read File 2
  content_type: raw_text
- from: Read File 2
  to: Grep Search 3
  content_type: raw_text
- from: Grep Search 3
  to: Read File 4
  content_type: raw_text
- from: Read File 4
  to: Glob Search 5
  content_type: raw_text
- from: Glob Search 5
  to: Glob Search 6
  content_type: raw_text
- from: Glob Search 6
  to: Glob Search 7
  content_type: raw_text
- from: Glob Search 7
  to: Read File 8
  content_type: raw_text
- from: Read File 8
  to: Read File 9
  content_type: raw_text
- from: Read File 9
  to: Read File 10
  content_type: raw_text
- from: Read File 10
  to: Grep Search 11
  content_type: raw_text
- from: Grep Search 11
  to: ExitPlanMode 12
  content_type: raw_text
- from: ExitPlanMode 12
  to: User Input 13
  content_type: raw_text
- from: User Input 13
  to: User Input 14
  content_type: raw_text
- from: User Input 14
  to: User Input 15
  content_type: raw_text
- from: User Input 15
  to: Claude Response 16
  content_type: raw_text
- from: Claude Response 16
  to: User Input 17
  content_type: raw_text
- from: User Input 17
  to: User Input 18
  content_type: raw_text
- from: User Input 18
  to: User Input 19
  content_type: raw_text
- from: User Input 19
  to: Claude Response 20
  content_type: raw_text
- from: Claude Response 20
  to: Update TODO 21
  content_type: raw_text
- from: Update TODO 21
  to: Read File 22
  content_type: raw_text
- from: Read File 22
  to: Update TODO 23
  content_type: raw_text
- from: Update TODO 23
  to: Read File 24
  content_type: raw_text
- from: Read File 24
  to: Edit File 25
  content_type: raw_text
- from: Edit File 25
  to: Read File 26
  content_type: raw_text
- from: Read File 26
  to: Edit File 27
  content_type: raw_text
- from: Edit File 27
  to: Read File 28
  content_type: raw_text
- from: Read File 28
  to: Read File 29
  content_type: raw_text
- from: Read File 29
  to: Edit File 30
  content_type: raw_text
- from: Edit File 30
  to: Update TODO 31
  content_type: raw_text
- from: Update TODO 31
  to: Bash Command 32
  content_type: raw_text
- from: Bash Command 32
  to: Bash Command 33
  content_type: raw_text
- from: Bash Command 33
  to: Bash Command 34
  content_type: raw_text
- from: Bash Command 34
  to: Read File 35
  content_type: raw_text
- from: Read File 35
  to: Update TODO 36
  content_type: raw_text
- from: Update TODO 36
  to: User Input 37
  content_type: raw_text
- from: User Input 37
  to: Claude Response 38
  content_type: raw_text
persons:
  user:
    service: openai
    model: user
    api_key_id: USER_INPUT
  claude_code:
    service: anthropic
    model: claude-code
    api_key_id: APIKEY_CLAUDE
    system_prompt: You are Claude Code, an AI assistant helping with software development.
metadata:
  conversion:
    total_nodes: 39
    total_connections: 38
    total_persons: 2
    node_types:
      start: 1
      code_job: 9
      db: 15
      api_job: 1
      person_job: 10
      diff_patch: 3
