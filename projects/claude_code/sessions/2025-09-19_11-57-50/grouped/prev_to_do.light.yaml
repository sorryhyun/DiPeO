version: light
nodes:
- label: Start
  type: start
  position:
    x: 100
    y: 100
  props:
    trigger_mode: manual
    custom_data:
      session_id: 727f4fba-2145-4f53-a772-14edc6fbb11a
      initial_prompt: "<command-name>/clear</command-name>\n            <command-message>clear</command-message>\n            <command-args></command-args>"
- label: Claude Responds To User 1
  type: person_job
  position:
    x: 350
    y: 100
  props:
    person: claude_code
    default_prompt: "<command-name>/clear</command-name>\n            <command-message>clear</command-message>\n            <command-args></command-args>"
- label: tool_result 3
  type: api_job
  position:
    x: 350
    y: 250
  props:
    endpoint: /tools/tool_result
    method: POST
    body: {}
    timeout: 30
    description: tool_result operation
- label: Claude Responds To User 2
  type: person_job
  position:
    x: 400
    y: 100
  props:
    person: claude_code
    default_prompt: <local-command-stdout></local-command-stdout>
- label: Bash Command 7
  type: code_job
  position:
    x: 400
    y: 250
  props:
    language: bash
    code: ls -la dipeo/domain/cc_translate/preprocess/
    timeout: 120000
    description: List preprocess module files
- label: Claude Responds To User 3
  type: person_job
  position:
    x: 450
    y: 100
  props:
    person: claude_code
    default_prompt: '<command-message>todo is runningâ€¦</command-message>

      <command-name>/todo</command-name>

      <command-args>6</command-args>'
- label: Read File 3
  type: db
  position:
    x: 450
    y: 250
  props:
    operation: read
    sub_type: file
    file: /home/soryhyun/DiPeO/dipeo/domain/cc_translate/preprocess/base.py
    lines: '1:50'
- label: Read File 1
  type: db
  position:
    x: 500
    y: 100
  props:
    operation: read
    sub_type: file
    file: /home/soryhyun/DiPeO/TODO.md
- label: Write File 4
  type: db
  position:
    x: 500
    y: 400
  props:
    operation: write
    sub_type: file
    file: /home/soryhyun/DiPeO/dipeo/domain/cc_translate/tests/unit/preprocess/test_base.py
    content: "\"\"\"Unit tests for preprocess base components.\"\"\"\n\nfrom datetime import datetime\n\nimport pytest\n\nfrom dipeo.domain.cc_translate.preprocess.base import (\n    SessionChange,\n    SessionChangeType,\n    SessionProcessingReport,\n)\n\n\nclass TestSessionChange:\n    \"\"\"Tests for SessionChange dataclass.\"\"\"\n\n    def test_creation_basic(self):\n        change = SessionChange(\n            change_type=SessionChangeType.EVENT_PRUNED,\n            description=\"Removed redundant event\",\n            target=\"event_123\",\n        )\n        assert change.change_type == SessionChangeType.EVENT_PRUNED\n        assert change.description == \"Removed redundant event\"\n        assert change.target == \"event_123\"\n        assert change.details is None\n        assert isinstance(change.timestamp, datetime)\n\n    def test_creation_with_details(self):\n        details = {\"reason\": \"duplicate\", \"original_id\": \"event_100\"}\n        change = SessionChange(\n            change_type=SessionChangeType.EVENT_MERGED,\n            description=\"Merged duplicate events\",\n            target=\"event_200\",\n            details=details,\n        )\n        assert change.details == details\n\n    def test_string_representation(self):\n        change = SessionChange(\n            change_type=SessionChangeType.FIELD_REMOVED,\n            description=\"Removed empty field\",\n            target=\"field:content\",\n        )\n        str_repr = str(change)\n        assert \"[field_removed]\" in str_repr\n        assert \"Removed empty field\" in str_repr\n        assert \"field:content\" in str_repr\n\n    def test_all_change_types(self):\n        for change_type in SessionChangeType:\n            change = SessionChange(\n                change_type=change_type,\n                description=f\"Test {change_type.value}\",\n                target=\"test_target\",\n            )\n            assert change.change_type == change_type\n            assert change_type.value in str(change)\n\n\nclass TestSessionProcessingReport:\n    \"\"\"Tests for SessionProcessingReport dataclass.\"\"\"\n\n    def test_creation_empty(self):\n        report = SessionProcessingReport(session_id=\"test_session\")\n        assert report.session_id == \"test_session\"\n        assert report.changes == []\n        assert report.total_events_before == 0\n        assert report.total_events_after == 0\n        assert report.processing_time_ms == 0.0\n        assert report.errors == []\n        assert report.warnings == []\n        assert report.metadata == {}\n\n    def test_add_change(self):\n        report = SessionProcessingReport(session_id=\"test_session\")\n        change1 = SessionChange(\n            change_type=SessionChangeType.EVENT_PRUNED,\n            description=\"Removed event 1\",\n            target=\"event_1\",\n        )\n        change2 = SessionChange(\n            change_type=SessionChangeType.FIELD_REMOVED,\n            description=\"Removed field\",\n            target=\"field:unused\",\n        )\n\n        report.add_change(change1)\n        report.add_change(change2)\n\n        assert len(report.changes) == 2\n        assert report.changes[0] == change1\n        assert report.changes[1] == change2\n\n    def test_add_error(self):\n        report = SessionProcessingReport(session_id=\"test_session\")\n        report.add_error(\"Something went wrong\")\n        report.add_error(\"Another error\")\n\n        assert len(report.errors) == 2\n        assert \"Something went wrong\" in report.errors\n        assert \"Another error\" in report.errors\n\n    def test_add_warning(self):\n        report = SessionProcessingReport(session_id=\"test_session\")\n        report.add_warning(\"Potential issue detected\")\n\n        assert len(report.warnings) == 1\n        assert \"Potential issue detected\" in report.warnings\n\n    def test_event_counts(self):\n        report = SessionProcessingReport(\n            session_id=\"test_session\",\n            total_events_before=100,\n            total_events_after=75,\n        )\n\
      \        assert report.total_events_before == 100\n        assert report.total_events_after == 75\n        assert report.get_events_removed() == 25\n\n    def test_get_summary(self):\n        report = SessionProcessingReport(\n            session_id=\"test_session\",\n            total_events_before=50,\n            total_events_after=40,\n            processing_time_ms=123.45,\n        )\n\n        change1 = SessionChange(\n            change_type=SessionChangeType.EVENT_PRUNED,\n            description=\"Removed event\",\n            target=\"event_1\",\n        )\n        change2 = SessionChange(\n            change_type=SessionChangeType.EVENT_PRUNED,\n            description=\"Removed another event\",\n            target=\"event_2\",\n        )\n        change3 = SessionChange(\n            change_type=SessionChangeType.FIELD_REMOVED,\n            description=\"Removed field\",\n            target=\"field:test\",\n        )\n\n        report.add_change(change1)\n        report.add_change(change2)\n        report.add_change(change3)\n        report.add_warning(\"Test warning\")\n\n        summary = report.get_summary()\n\n        assert summary[\"session_id\"] == \"test_session\"\n        assert summary[\"total_changes\"] == 3\n        assert summary[\"events_before\"] == 50\n        assert summary[\"events_after\"] == 40\n        assert summary[\"events_removed\"] == 10\n        assert summary[\"processing_time_ms\"] == 123.45\n        assert summary[\"has_errors\"] is False\n        assert summary[\"has_warnings\"] is True\n        assert summary[\"change_breakdown\"][SessionChangeType.EVENT_PRUNED] == 2\n        assert summary[\"change_breakdown\"][SessionChangeType.FIELD_REMOVED] == 1\n\n    def test_is_successful(self):\n        report1 = SessionProcessingReport(session_id=\"test1\")\n        assert report1.is_successful() is True\n\n        report2 = SessionProcessingReport(session_id=\"test2\")\n        report2.add_error(\"Error occurred\")\n        assert report2.is_successful() is False\n\n    def test_has_changes(self):\n        report1 = SessionProcessingReport(session_id=\"test1\")\n        assert report1.has_changes() is False\n\n        report2 = SessionProcessingReport(session_id=\"test2\")\n        change = SessionChange(\n            change_type=SessionChangeType.EVENT_PRUNED,\n            description=\"Removed event\",\n            target=\"event_1\",\n        )\n        report2.add_change(change)\n        assert report2.has_changes() is True\n\n    def test_metadata_management(self):\n        report = SessionProcessingReport(\n            session_id=\"test_session\",\n            metadata={\"initial_key\": \"initial_value\"},\n        )\n\n        report.metadata[\"new_key\"] = \"new_value\"\n        report.metadata[\"counter\"] = 42\n\n        assert report.metadata[\"initial_key\"] == \"initial_value\"\n        assert report.metadata[\"new_key\"] == \"new_value\"\n        assert report.metadata[\"counter\"] == 42\n\n    def test_comprehensive_report(self):\n        report = SessionProcessingReport(\n            session_id=\"complex_session\",\n            total_events_before=200,\n            total_events_after=150,\n            processing_time_ms=567.89,\n            metadata={\"processor_version\": \"1.0.0\", \"mode\": \"aggressive\"},\n        )\n\n        for i in range(30):\n            report.add_change(\n                SessionChange(\n                    change_type=SessionChangeType.EVENT_PRUNED,\n                    description=f\"Removed redundant event {i}\",\n                    target=f\"event_{i}\",\n                    details={\"size_bytes\": i * 100},\n                )\n            )\n\n        for i in range(20):\n            report.add_change(\n                SessionChange(\n                    change_type=SessionChangeType.FIELD_REMOVED,\n                    description=f\"Removed field {i}\",\n                    target=f\"field:{i}\",\n                )\n            )\n\n        report.add_warning(\"Large number of events removed\")\n        report.add_warning(\"Consider\
      \ manual review\")\n\n        summary = report.get_summary()\n\n        assert summary[\"total_changes\"] == 50\n        assert summary[\"events_removed\"] == 50\n        assert summary[\"has_warnings\"] is True\n        assert len(summary[\"change_breakdown\"]) == 2\n        assert summary[\"change_breakdown\"][SessionChangeType.EVENT_PRUNED] == 30\n        assert summary[\"change_breakdown\"][SessionChangeType.FIELD_REMOVED] == 20\n\n\nif __name__ == \"__main__\":\n    pytest.main([__file__, \"-v\"])"
connections:
- from: Start
  to: Claude Responds To User 1
  content_type: raw_text
- from: Claude Responds To User 1
  to: Claude Responds To User 2
  content_type: raw_text
- from: Claude Responds To User 2
  to: Claude Responds To User 3
  content_type: raw_text
- from: Claude Responds To User 3
  to: Read File 1
  content_type: raw_text
- from: tool_result 3
  to: Bash Command 7
  content_type: raw_text
- from: Bash Command 7
  to: Read File 3
  content_type: raw_text
- from: Read File 3
  to: Write File 4
  content_type: raw_text
metadata:
  group_name: prev_to_do
  node_count: 9
  connection_count: 7
  extracted_from: unknown
persons:
  claude_code:
    service: anthropic
    model: claude-code
    api_key_id: APIKEY_CLAUDE
    system_prompt: You are Claude Code, an AI assistant helping with software development.
