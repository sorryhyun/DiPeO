version: light
nodes:
- label: Start
  type: start
  position: {x: 100, y: 100}
  props:
    trigger_mode: manual
    custom_data:
      session_id: 1f4d7310-fabf-4886-970d-6128d0c1a814
      initial_prompt: '[{"type": "assistant", "message": {"role": "assistant", "content": [{"type": "text", "text": "```typescript\n// src/app/config.ts\n//\n// [ ] Uses `@/` imports as much as possible\n// [ ] Uses provide'
- label: Claude Responds To User 1
  type: person_job
  position: {x: 350, y: 100}
  props:
    person: claude_code
    default_prompt: '[{"type": "assistant", "message": {"role": "assistant", "content": [{"type": "text", "text": "```typescript\n// src/app/config.ts\n//\n// [ ] Uses `@/` imports as much as possible\n// [ ] Uses providers/hooks (no direct DOM/localStorage side effects)\n// [ ] Reads config from `@/app/config`\n// [ ] Exports default named component\n// [ ] Adds basic ARIA and keyboard handlers (where relevant)\n\nimport { DefaultOptions } from ''@tanstack/react-query'';\n\nexport type AppConfig = {\n  env: ''development'' | ''production'' | ''test'';\n  appName: string;\n  apiBase: string;\n  enableMocks: boolean;\n  enableDevTools: boolean;\n  analyticsKey?: string;\n  defaultLanguage: string;\n  supportedLanguages: string[];\n  theme: {\n    default: ''light'' | ''dark'' | ''system'';\n    enableSystemToggle: boolean;\n  };\n  development_mode: {\n    enable_mock_data: boolean;\n    mock_auth_users: Array<{ email: string; password: string; role: string }>;\n    mock_api_endpoints: string[];\n    disable_websocket_in_dev: boolean;\n    use_localstorage_persistence: boolean;\n  };\n};\n\nconst raw = import.meta.env;\n\nexport const isDev = (raw.MODE === ''development'' || raw.VITE_ENABLE_DEV === ''true'');\n\nexport const appConfig: AppConfig = {\n  env: (raw.MODE as ''development'' | ''production'' | ''test'') ?? ''development'',\n  appName: raw.VITE_APP_NAME ?? ''Absolutely Nothing\u2122'',\n  apiBase: raw.VITE_API_BASE ?? ''/api'',\n  enableMocks: (raw.VITE_ENABLE_MOCKS ?? ''true'') === ''true'',\n  enableDevTools: (raw.VITE_ENABLE_DEVTOOLS ?? ''false'') === ''true'',\n  analyticsKey: raw.VITE_ANALYTICS_KEY ?? undefined,\n  defaultLanguage: raw.VITE_DEFAULT_LOCALE ?? ''en'',\n  supportedLanguages: (raw.VITE_SUPPORTED_LOCALES ?? ''en'').split('','').map(s => s.trim()),\n  theme: {\n    default: (raw.VITE_THEME_DEFAULT as any) ?? ''system'',\n    enableSystemToggle: (raw.VITE_ENABLE_THEME_TOGGLE ?? ''true'') === ''true''\n  },\n  development_mode: {\n    enable_mock_data: (raw.VITE_ENABLE_MOCK_DATA ?? ''true'')=== ''true'',\n    mock_auth_users: JSON.parse(raw.VITE_MOCK_AUTH_USERS ?? ''[{\"email\":\"nothing@void.com\",\"password\":\"nothing123\",\"role\":\"nothing_user\"}]''),\n    mock_api_endpoints: JSON.parse(raw.VITE_MOCK_API_ENDPOINTS ?? ''[\"/api/nothing\",\"/api/testimonials/nothing\",\"/api/pricing/nothing\",\"/api/support/nothing\",\"/api/newsletter/nothing\",\"/api/analytics/nothing\",\"/api/checkout/nothing\"]''),\n    disable_websocket_in_dev: (raw.VITE_DISABLE_WEBSOCKET_IN_DEV ?? ''false'') === ''true'',\n    use_localstorage_persistence: (raw.VITE_USE_LOCALSTORAGE_PERSISTENCE ?? ''true'') === ''true''\n  }\n};\n\n// React Query default options exposed here so QueryProvider can import them\nexport const defaultQueryOptions: DefaultOptions = {\n  queries: {\n    retry: (failureCount, error) => {\n      // fail fast for 4xx client errors\n      const status = (error as any)?.response?.status;\n      if (status && status >= 400 && status < 500) return false;\n      return failureCount < 2;\n    },\n    cacheTime: 1000 * 60 * 5, // 5 minutes\n    staleTime: 1000 * 60, // 1 minute\n    refetchOnWindowFocus: false,\n    suspense: true\n  },\n  mutations: {\n    retry: false\n  }\n};\n\n// i18n configuration object (consumed by i18next initialization elsewhere)\nexport const i18nConfig = {\n  lng: appConfig.defaultLanguage,\n  fallbackLng: ''en'',\n  supportedLngs: appConfig.supportedLanguages,\n  ns: [''common'', ''hero'', ''pricing'', ''testimonials''] as const,\n  defaultNS: ''common''\n};\n\n// Theme configuration (consumed by ThemeProvider)\nexport const themeConfig = {\n  default: appConfig.theme.default,\n  enableSystemToggle: appConfig.theme.enableSystemToggle,\n  // Tailwind dark-mode strategy used in app: ''class''\n  tailwindDarkClass: ''dark''\n};\n\nexport const enableMocks = appConfig.enableMocks;\n```"}]}}, {"type": "assistant", "message": {"role": "assistant", "content": [{"type": "text", "text": "```typescript\n// src/core/hooks.ts\n//\n// [x] Uses `@/` imports as much as possible\n// [x] Uses providers/hooks
      (no direct DOM/localStorage side effects)\n// [ ] Reads config from `@/app/config`\n// [ ] Exports default named component\n// [ ] Adds basic ARIA and keyboard handlers (where relevant)\n\nimport { useEffect, useState, useRef, useCallback } from ''react'';\nimport { EventBus, EventType, EventPayload, onEvent, offEvent } from ''@/core/events'';\nimport { AnalyticsEvent } from ''@/core/contracts'';\n\n// Hook types and interfaces\nexport type HookType = ''lifecycle'' | ''ui-injection'' | ''side-effect'' | ''analytics'' | ''experiment'';\n\nexport interface HookDefinition<T = any> {\n  id: string;\n  type: HookType;\n  priority?: number; // Lower numbers = higher priority\n  condition?: () => boolean; // Optional condition to determine if hook should run\n  handler: T;\n  metadata?: Record<string, any>;\n}\n\nexport interface LifecycleHook extends HookDefinition<{\n  onMount?: () => void | Promise<void>;\n  onUnmount?: () => void | Promise<void>;\n  onUpdate?: (prevProps?: any) => void | Promise<void>;\n}> {\n  type: ''lifecycle'';\n}\n\nexport interface UIInjectionHook extends HookDefinition<{\n  render: () => React.ReactNode;\n  target: string; // CSS selector or component name\n  position?: ''before'' | ''after'' | ''replace'';\n}> {\n  type: ''ui-injection'';\n}\n\nexport interface SideEffectHook extends HookDefinition<{\n  trigger: EventType | EventType[];\n  effect: (payload: any) => void | Promise<void>;\n}> {\n  type: ''side-effect'';\n}\n\nexport interface AnalyticsHook extends HookDefinition<{\n  trackEvents: EventType[];\n  transform?: (eventType: EventType, payload: any) => AnalyticsEvent;\n}> {\n  type: ''analytics'';\n}\n\nexport interface ExperimentHook extends HookDefinition<{\n  experimentId: string;\n  variants: Record<string, () => React.ReactNode>;\n  getVariant: () => string;\n}> {\n  type: ''experiment'';\n}\n\nexport type AnyHook = LifecycleHook | UIInjectionHook | SideEffectHook | AnalyticsHook | ExperimentHook;\n\n// Hook registry implementation\nclass HookRegistry {\n  private hooks: Map<string, AnyHook> = new Map();\n  private listeners: Map<string, (() => void)[]> = new Map();\n\n  /**\n   * Register a hook in the registry\n   */\n  register(hook: AnyHook): () => void {\n    // Check if hook with same ID already exists\n    if (this.hooks.has(hook.id)) {\n      console.warn(`Hook with ID ''${hook.id}'' already exists. Overriding.`);\n    }\n\n    this.hooks.set(hook.id, hook);\n\n    // Set up side-effect listeners if applicable\n    if (hook.type === ''side-effect'') {\n      this.setupSideEffectListeners(hook as SideEffectHook);\n    }\n\n    // Set up analytics listeners if applicable\n    if (hook.type === ''analytics'') {\n      this.setupAnalyticsListeners(hook as AnalyticsHook);\n    }\n\n    // Notify listeners of registry change\n    this.notifyChange();\n\n    // Return unregister function\n    return () => this.unregister(hook.id);\n  }\n\n  /**\n   * Unregister a hook from the registry\n   */\n  unregister(hookId: string): void {\n    const hook = this.hooks.get(hookId);\n    if (!hook) return;\n\n    // Clean up event listeners\n    const hookListeners = this.listeners.get(hookId);\n    if (hookListeners) {\n      hookListeners.forEach(unsubscribe => unsubscribe());\n      this.listeners.delete(hookId);\n    }\n\n    this.hooks.delete(hookId);\n    this.notifyChange();\n  }\n\n  /**\n   * Get hooks by type\n   */\n  getHooksByType<T extends AnyHook>(type: HookType): T[] {\n    return Array.from(this.hooks.values())\n      .filter(hook => hook.type === type)\n      .filter(hook => !hook.condition || hook.condition())\n      .sort((a, b) => (a.priority ?? 100) - (b.priority ?? 100)) as T[];\n  }\n\n  /**\n   * Get all registered hooks\n   */\n  getAllHooks(): AnyHook[] {\n    return Array.from(this.hooks.values())\n      .filter(hook => !hook.condition || hook.condition())\n      .sort((a, b) => (a.priority ?? 100) - (b.priority ?? 100));\n  }\n\n  /**\n   * Get hook by ID\n   */\n  getHook(hookId: string): AnyHook | undefined {\n    return this.hooks.get(hookId);\n  }\n\n  /**\n   *
      Check if hook exists\n   */\n  hasHook(hookId: string): boolean {\n    return this.hooks.has(hookId);\n  }\n\n  /**\n   * Clear all hooks\n   */\n  clear(): void {\n    // Clean up all listeners\n    this.listeners.forEach(listeners => {\n      listeners.forEach(unsubscribe => unsubscribe());\n    });\n    \n    this.listeners.clear();\n    this.hooks.clear();\n    this.notifyChange();\n  }\n\n  private setupSideEffectListeners(hook: SideEffectHook): void {\n    const triggers = Array.isArray(hook.handler.trigger) ? hook.handler.trigger : [hook.handler.trigger];\n    const unsubscribers: (() => void)[] = [];\n\n    triggers.forEach(eventType => {\n      const unsubscribe = onEvent(eventType, async (payload) => {\n        try {\n          await hook.handler.effect(payload);\n        } catch (error) {\n          console.error(`Error in side-effect hook ''${hook.id}'':`, error);\n        }\n      });\n      unsubscribers.push(unsubscribe);\n    });\n\n    this.listeners.set(hook.id, unsubscribers);\n  }\n\n  private setupAnalyticsListeners(hook: AnalyticsHook): void {\n    const unsubscribers: (() => void)[] = [];\n\n    hook.handler.trackEvents.forEach(eventType => {\n      const unsubscribe = onEvent(eventType, (payload) => {\n        try {\n          const analyticsEvent = hook.handler.transform \n            ? hook.handler.transform(eventType, payload)\n            : {\n                id: `${hook.id}_${Date.now()}`,\n                name: eventType,\n                payload,\n                ts: new Date().toISOString()\n              };\n\n          // Emit analytics event\n          EventBus.emit(''analytics:event'', analyticsEvent);\n        } catch (error) {\n          console.error(`Error in analytics hook ''${hook.id}'':`, error);\n        }\n      });\n      unsubscribers.push(unsubscribe);\n    });\n\n    this.listeners.set(hook.id, unsubscribers);\n  }\n\n  private changeListeners: (() => void)[] = [];\n\n  private notifyChange(): void {\n    this.changeListeners.forEach(listener => {\n      try {\n        listener();\n      } catch (error) {\n        console.error(''Error in hook registry change listener:'', error);\n      }\n    });\n  }\n\n  /**\n   * Subscribe to registry changes\n   */\n  onChange(listener: () => void): () => void {\n    this.changeListeners.push(listener);\n    return () => {\n      const index = this.changeListeners.indexOf(listener);\n      if (index !== -1) {\n        this.changeListeners.splice(index, 1);\n      }\n    };\n  }\n}\n\n// Global registry instance\nexport const hookRegistry = new HookRegistry();\n\n// Convenience functions\nexport function registerHook(hook: AnyHook): () => void {\n  return hookRegistry.register(hook);\n}\n\nexport function unregisterHook(hookId: string): void {\n  hookRegistry.unregister(hookId);\n}\n\n// React hooks for using the registry\nexport function useRegisteredHooks<T extends AnyHook>(type?: HookType): T[] {\n  const [hooks, setHooks] = useState<T[]>(() => \n    type ? hookRegistry.getHooksByType<T>(type) : hookRegistry.getAllHooks() as T[]\n  );\n\n  useEffect(() => {\n    const updateHooks = () => {\n      setHooks(type ? hookRegistry.getHooksByType<T>(type) : hookRegistry.getAllHooks() as T[]);\n    };\n\n    const unsubscribe = hookRegistry.onChange(updateHooks);\n    return unsubscribe;\n  }, [type]);\n\n  return hooks;\n}\n\nexport function useLifecycleHooks(): LifecycleHook[] {\n  return useRegisteredHooks<LifecycleHook>(''lifecycle'');\n}\n\nexport function useUIInjectionHooks(target?: string): UIInjectionHook[] {\n  const hooks = useRegisteredHooks<UIInjectionHook>(''ui-injection'');\n  return target ? hooks.filter(hook => hook.handler.target === target) : hooks;\n}\n\nexport function useExperimentHooks(): ExperimentHook[] {\n  return useRegisteredHooks<ExperimentHook>(''experiment'');\n}\n\n// Hook for running lifecycle hooks\nexport function useRunLifecycleHooks(): void {\n  const lifecycleHooks = useLifecycleHooks();\n  const mountedRef = useRef(false);\n\n  useEffect(() => {\n    // Run onMount hooks\n    const runMountHooks =
      async () => {\n      for (const hook of lifecycleHooks) {\n        if (hook.handler.onMount) {\n          try {\n            await hook.handler.onMount();\n          } catch (error) {\n            console.error(`Error in lifecycle hook ''${hook.id}'' onMount:`, error);\n          }\n        }\n      }\n    };\n\n    if (!mountedRef.current) {\n      mountedRef.current = true;\n      runMountHooks();\n    }\n\n    // Run onUnmount hooks on cleanup\n    return () => {\n      const runUnmountHooks = async () => {\n        for (const hook of lifecycleHooks) {\n          if (hook.handler.onUnmount) {\n            try {\n              await hook.handler.onUnmount();\n            } catch (error) {\n              console.error(`Error in lifecycle hook ''${hook.id}'' onUnmount:`, error);\n            }\n          }\n        }\n      };\n\n      runUnmountHooks();\n    };\n  }, [lifecycleHooks]);\n}\n\n// Helper hook for creating experiment variants\nexport function useExperimentVariant(experimentId: string): React.ReactNode | null {\n  const experimentHooks = useExperimentHooks();\n  \n  const experiment = experimentHooks.find(hook => hook.handler.experimentId === experimentId);\n  \n  if (!experiment) return null;\n\n  const variant = experiment.handler.getVariant();\n  const VariantComponent = experiment.handler.variants[variant];\n  \n  return VariantComponent ? VariantComponent() : null;\n}\n\n// Export the registry for direct access if needed\nexport default hookRegistry;\n```"}]}}, {"type": "user", "message": {"role": "user", "content": [{"type": "text", "text": "You are a frontend code generator. Generate the implementation for the specified file using modern libraries.\n\n### File to implement:\nPath: src/mocks/server.ts\n\n### Dependencies\n[\n  \"src/mocks/handlers.ts\",\n  \"src/app/config.ts\"\n]\n\n## Library Import Guidelines\nUse pre-installed libraries instead of creating custom implementations:\n\n### UI Components (from @/components/ui/*)\n```typescript\nimport { Button } from ''@/components/ui/button''\nimport { Card } from ''@/components/ui/card''\nimport { Dialog, DialogContent, DialogHeader } from ''@/components/ui/dialog''\nimport { Input } from ''@/components/ui/input''\nimport { Select, SelectContent, SelectItem } from ''@/components/ui/select''\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from ''@/components/ui/table''\nimport { Toast } from ''@/components/ui/toast''\nimport { Tooltip, TooltipContent, TooltipTrigger } from ''@/components/ui/tooltip''\n```\n\n### State & Data Management\n```typescript\nimport { useQuery, useMutation, useQueryClient } from ''@tanstack/react-query''\nimport { create } from ''zustand''\nimport { useForm } from ''react-hook-form''\nimport { z } from ''zod''\nimport { zodResolver } from ''@hookform/resolvers/zod''\n```\n\n### Icons & Animations\n```typescript\nimport { ChevronRight, Search, Settings, User } from ''lucide-react''\nimport { motion, AnimatePresence } from ''framer-motion''\n```\n\n### Other Libraries\n```typescript\nimport { toast } from ''sonner''\nimport { cn } from ''@/lib/utils''\nimport { useNavigate, useParams } from ''react-router-dom''\n```\n\n## Core Kernel Foundation\nImport domain types and configs from Core Kernel:\n- Types: `import { User, ApiResult } from ''@/core/contracts''`\n- Config: `import { config, isDevelopment } from ''@/app/config''`\n- Query: `import { queryClient } from ''@/core/query-client''`\n\nNever redefine types that exist in Core Kernel - import them.\nNever implement basic UI components - import from @/components/ui/*\n\n## Context\n\n### Architecture:\n{\n  \"overview\": \"Ultra-Premium Landing for \\\"Absolutely Nothing\\u2122\\\" built with React 18+, TypeScript, Vite and Tailwind. The app is a single-page landing experience composed of feature-focused modules (hero, void animation, pricing, testimonials, simulator, etc.). Business logic is organized into a lightweight core (contracts, events, DI, utils), foundation providers (theme, Query, Auth, stores), feature modules (each exposing data/service
      + presentational composition of Radix primitives and Tailwind), and page compositions. Heavy animation and 3D effects (Framer Motion, Three.js, GSAP), data fetching (React Query + MSW in dev), local state (Zustand) and forms (React Hook Form + Zod) are used.\",\n  \"patterns\": [\n    \"Feature-sliced architecture: core \\u2192 providers \\u2192 features \\u2192 pages\",\n    \"Container/Presentational: feature containers hold logic, compose presentational UI (Radix + Tailwind)\",\n    \"Domain-oriented services: service layer for APIs, analytics, chat, pricing rules\",\n    \"React Query for server state + caching; Zustand for ephemeral client state\",\n    \"Hook-first APIs: reusable hooks for business behaviors (useVoidParticles, useSimulator, useABTest)\",\n    \"Extension points via event bus and hooks registry for easter eggs and A/B testing\"\n  ],\n  \"data_flow\": \"UI components call feature hooks/services which use React Query for remote data and Zustand for local persisted state. Services emit/subscribe to core events. Providers (QueryProvider, AuthProvider) initialize contexts (React Query client, Auth). MSW provides mock endpoints in development. Analytics service collects events and pushes to a reporting store. A/B ExperimentManager can swap feature variants. Forms use React Hook Form + Zod for validation. import.meta.env variables are read from src/app/config.ts.\",\n  \"folder_structure\": \"src/\\n  app/\\n    config.ts\\n  core/\\n    contracts.ts\\n    events.ts\\n    hooks.ts\\n    di.ts\\n    utils.ts\\n  mocks/\\n    server.ts\\n    handlers.ts\\n  providers/\\n    QueryProvider.tsx\\n    AuthProvider.tsx\\n  theme/\\n    index.ts\\n    animations.ts\\n  state/\\n    use-nothing-store.ts\\n  shared/\\n    layouts/\\n      LandingLayout.tsx\\n      CenterStageLayout.tsx\\n  features/\\n    hero/\\n      existential-hero.tsx\\n    void/\\n      void-animation-system.tsx\\n      use-void-particles.ts\\n    pricing/\\n      pricing.service.ts\\n      pricing-tiers.tsx\\n    testimonials/\\n      testimonial.service.ts\\n      testimonial-generator.tsx\\n    counter/\\n      animated-zero-counter.tsx\\n    faq/\\n      faq-section.tsx\\n    team/\\n      team-showcase.tsx\\n    simulator/\\n      void-simulator.tsx\\n      use-simulator.ts\\n    newsletter/\\n      newsletter.service.ts\\n      newsletter-form.tsx\\n    chat/\\n      chat.service.ts\\n      live-chat-bot.tsx\\n    comparison/\\n      product-comparison-chart.tsx\\n    casestudies/\\n      case-studies.tsx\\n    roadmap/\\n      roadmap-timeline.tsx\\n    showcase/\\n      rotating-showcase-3d.tsx\\n    reviews/\\n      reviews-widget.tsx\\n    moneyback/\\n      moneyback-badge.tsx\\n    affiliate/\\n      affiliate-program.tsx\\n    press/\\n      press-kit-provider.tsx\\n    apidocs/\\n      api-docs.tsx\\n    status/\\n      status-page.tsx\\n    cookies/\\n      cookie-banner.tsx\\n    analytics/\\n      analytics.service.ts\\n      analytics-dashboard.tsx\\n    easter-eggs/\\n      easter-egg-manager.tsx\\n    experiments/\\n      experiment-manager.ts\\n    sound/\\n      silence-audio.ts\\n  pages/\\n    landing.tsx\\n    docs.tsx\\n    status.tsx\\n    404.tsx\\n  generated/ <-- output dir for build artifacts and mocks\",\n  \"tech_stack\": [\n    \"React 18+ (Suspense, Error Boundaries, Context API)\",\n    \"TypeScript\",\n    \"Vite (use import.meta.env)\",\n    \"Tailwind CSS (dark mode enabled)\",\n    \"Radix UI primitives via @/components/ui/*\",\n    \"CVA (class-variance-authority) for Tailwind variants\",\n    \"Framer Motion for UI animations\",\n    \"Three.js for 3D showcase\",\n    \"GSAP for advanced timeline animations\",\n    \"Recharts for charts\",\n    \"React Query for server state\",\n    \"Zustand for local client state\",\n    \"React Hook Form + Zod for forms\",\n    \"Sonner for toasts\",\n    \"TanStack Table (for product comparison table if needed)\",\n    \"MSW for dev API mocks\",\n    \"Lucide React for icons\"\n  ]\n}\n\n### Core Kernel Specifications:\n{\n  \"overview\": \"The Core Kernel glues
      together React Query, Zustand, React Hook Form + Zod, MSW, Radix UI, Sonner toasts and i18n for the Nothing landing app. It provides typed contracts (Zod + TS), a typed QueryClient with sensible defaults and toast-integrated error handling, a development MSW bootstrap with handlers driven by runtime config, a central library re-export/wrapper layer (typed useQuery/useMutation, typed useForm), and a Sonner toast wrapper with typed convenience functions. All runtime configuration uses import.meta.env and appConfig flags to control mocks, analytics, persistence and feature toggles.\"\n}\n\n### Section details:\n{\n  \"id\": \"mocks-server\",\n  \"file_path\": \"src/mocks/server.ts\",\n  \"description\": \"MSW server bootstrapping used in development. Exposes start/stop hooks and ensures handlers are registered when appConfig enables mocks.\",\n  \"dependencies\": [\n    \"src/mocks/handlers.ts\",\n    \"src/app/config.ts\"\n  ],\n  \"exports\": [\n    \"startMockServer\",\n    \"stopMockServer\"\n  ],\n  \"priority\": 1\n}\n\n### Description\nDescription: MSW server bootstrapping used in development. Exposes start/stop hooks and ensures handlers are registered when appConfig enables mocks.\n\nFor kernel files (core/contracts.ts, app/config.ts, core/events.ts), use kernel_specs to guide implementation.\n\n## Code Guidelines\n- Include necessary imports from existing libraries\n- Follow architecture''s coding patterns\n- Add TypeScript types\n- Include error handling\n- Keep functions focused and single-purpose\n- Handle edge cases within file scope\n- **IMPORTANT**: Use `import.meta.env` for environment variables (NOT `process.env`) as this is a Vite-based browser application\n\n## Self-Confirm Comments\nAppend as comments before codes begin, below the file path:\n- [ ] Uses `@/` imports as much as possible\n- [ ] Uses providers/hooks (no direct DOM/localStorage side effects)\n- [ ] Reads config from `@/app/config`\n- [ ] Exports default named component\n- [ ] Adds basic ARIA and keyboard handlers (where relevant)\n"}]}}]'
connections:
- {from: Start, to: Claude Responds To User 1, content_type: raw_text}
persons:
  claude_code:
    service: anthropic
    model: claude-code
    api_key_id: APIKEY_CLAUDE
    system_prompt: You are Claude Code, an AI assistant helping with software development.
metadata:
  conversion:
    total_nodes: 2
    total_connections: 1
    total_persons: 0
    node_types:
      start: 1
      person_job: 1
