version: light
nodes:
- label: Start
  type: start
  position: {x: 100, y: 100}
  props:
    trigger_mode: manual
    custom_data:
      session_id: b941599c-2311-4d84-95c3-7a7157e66591
      initial_prompt: '[{"type": "assistant", "message": {"role": "assistant", "content": [{"type": "text", "text": "```typescript\n// src/app/config.ts\n//\n// [ ] Uses `@/` imports as much as possible\n// [ ] Uses provide'
- label: Claude Responds To User 1
  type: person_job
  position: {x: 350, y: 100}
  props:
    person: claude_code
    default_prompt: '[{"type": "assistant", "message": {"role": "assistant", "content": [{"type": "text", "text": "```typescript\n// src/app/config.ts\n//\n// [ ] Uses `@/` imports as much as possible\n// [ ] Uses providers/hooks (no direct DOM/localStorage side effects)\n// [ ] Reads config from `@/app/config`\n// [ ] Exports default named component\n// [ ] Adds basic ARIA and keyboard handlers (where relevant)\n\nimport { DefaultOptions } from ''@tanstack/react-query'';\n\nexport type AppConfig = {\n  env: ''development'' | ''production'' | ''test'';\n  appName: string;\n  apiBase: string;\n  enableMocks: boolean;\n  enableDevTools: boolean;\n  analyticsKey?: string;\n  defaultLanguage: string;\n  supportedLanguages: string[];\n  theme: {\n    default: ''light'' | ''dark'' | ''system'';\n    enableSystemToggle: boolean;\n  };\n  development_mode: {\n    enable_mock_data: boolean;\n    mock_auth_users: Array<{ email: string; password: string; role: string }>;\n    mock_api_endpoints: string[];\n    disable_websocket_in_dev: boolean;\n    use_localstorage_persistence: boolean;\n  };\n};\n\nconst raw = import.meta.env;\n\nexport const isDev = (raw.MODE === ''development'' || raw.VITE_ENABLE_DEV === ''true'');\n\nexport const appConfig: AppConfig = {\n  env: (raw.MODE as ''development'' | ''production'' | ''test'') ?? ''development'',\n  appName: raw.VITE_APP_NAME ?? ''Absolutely Nothing\u2122'',\n  apiBase: raw.VITE_API_BASE ?? ''/api'',\n  enableMocks: (raw.VITE_ENABLE_MOCKS ?? ''true'') === ''true'',\n  enableDevTools: (raw.VITE_ENABLE_DEVTOOLS ?? ''false'') === ''true'',\n  analyticsKey: raw.VITE_ANALYTICS_KEY ?? undefined,\n  defaultLanguage: raw.VITE_DEFAULT_LOCALE ?? ''en'',\n  supportedLanguages: (raw.VITE_SUPPORTED_LOCALES ?? ''en'').split('','').map(s => s.trim()),\n  theme: {\n    default: (raw.VITE_THEME_DEFAULT as any) ?? ''system'',\n    enableSystemToggle: (raw.VITE_ENABLE_THEME_TOGGLE ?? ''true'') === ''true''\n  },\n  development_mode: {\n    enable_mock_data: (raw.VITE_ENABLE_MOCK_DATA ?? ''true'')=== ''true'',\n    mock_auth_users: JSON.parse(raw.VITE_MOCK_AUTH_USERS ?? ''[{\"email\":\"nothing@void.com\",\"password\":\"nothing123\",\"role\":\"nothing_user\"}]''),\n    mock_api_endpoints: JSON.parse(raw.VITE_MOCK_API_ENDPOINTS ?? ''[\"/api/nothing\",\"/api/testimonials/nothing\",\"/api/pricing/nothing\",\"/api/support/nothing\",\"/api/newsletter/nothing\",\"/api/analytics/nothing\",\"/api/checkout/nothing\"]''),\n    disable_websocket_in_dev: (raw.VITE_DISABLE_WEBSOCKET_IN_DEV ?? ''false'') === ''true'',\n    use_localstorage_persistence: (raw.VITE_USE_LOCALSTORAGE_PERSISTENCE ?? ''true'') === ''true''\n  }\n};\n\n// React Query default options exposed here so QueryProvider can import them\nexport const defaultQueryOptions: DefaultOptions = {\n  queries: {\n    retry: (failureCount, error) => {\n      // fail fast for 4xx client errors\n      const status = (error as any)?.response?.status;\n      if (status && status >= 400 && status < 500) return false;\n      return failureCount < 2;\n    },\n    cacheTime: 1000 * 60 * 5, // 5 minutes\n    staleTime: 1000 * 60, // 1 minute\n    refetchOnWindowFocus: false,\n    suspense: true\n  },\n  mutations: {\n    retry: false\n  }\n};\n\n// i18n configuration object (consumed by i18next initialization elsewhere)\nexport const i18nConfig = {\n  lng: appConfig.defaultLanguage,\n  fallbackLng: ''en'',\n  supportedLngs: appConfig.supportedLanguages,\n  ns: [''common'', ''hero'', ''pricing'', ''testimonials''] as const,\n  defaultNS: ''common''\n};\n\n// Theme configuration (consumed by ThemeProvider)\nexport const themeConfig = {\n  default: appConfig.theme.default,\n  enableSystemToggle: appConfig.theme.enableSystemToggle,\n  // Tailwind dark-mode strategy used in app: ''class''\n  tailwindDarkClass: ''dark''\n};\n\nexport const enableMocks = appConfig.enableMocks;\n```"}]}}, {"type": "user", "message": {"role": "user", "content": [{"type": "text", "text": "Fix the problematic code below. The code has issues that need to be corrected:\n\nProblematic output:\n```typescript\n//
      src/providers/QueryProvider.tsx\n//\n// [ ] Uses `@/` imports as much as possible\n// [ ] Uses providers/hooks (no direct DOM/localStorage side effects)\n// [ ] Reads config from `@/app/config`\n// [ ] Exports default named component\n// [ ] Adds basic ARIA and keyboard handlers (where relevant)\n\nimport { QueryClient, QueryClientProvider } from ''@tanstack/react-query'';\nimport { ReactQueryDevtools } from ''@tanstack/react-query-devtools'';\nimport { ReactNode, useMemo } from ''react'';\nimport { toast } from ''sonner'';\nimport { appConfig, defaultQueryOptions, isDev } from ''@/app/config'';\n\ninterface QueryProviderProps {\n  children: ReactNode;\n}\n\nexport default function QueryProvider({ children }: QueryProviderProps) {\n  const queryClient = useMemo(() => {\n    return new QueryClient({\n      defaultOptions: {\n        ...defaultQueryOptions,\n        queries: {\n          ...defaultQueryOptions.queries,\n          onError: (error) => {\n            // Toast error handling for failed queries\n            const message = error instanceof Error ? error.message : ''Something went wrong'';\n            toast.error(message);\n          },\n          retry: (failureCount, error) => {\n            // Enhanced retry logic with toast feedback\n            const status = (error as any)?.response?.status;\n            \n            // Don''t retry client errors (4xx)\n            if (status && status >= 400 && status < 500) {\n              if (status === 404) {\n                toast.error(''Resource not found'');\n              } else if (status === 401) {\n                toast.error(''Authentication required'');\n              } else if (status === 403) {\n                toast.error(''Access denied'');\n              }\n              return false;\n            }\n            \n            // Retry server errors (5xx) up to 2 times\n            if (failureCount < 2) {\n              if (failureCount === 1) {\n                toast.warning(''Retrying request...'');\n              }\n              return true;\n            }\n            \n            // Final failure\n            toast.error(''Request failed after multiple attempts'');\n            return false;\n          },\n          // Enable suspense for better loading UX\n          suspense: true,\n          // Adjust cache times based on environment\n          cacheTime: isDev ? 1000 * 60 * 2 : 1000 * 60 * 5, // 2min dev, 5min prod\n          staleTime: isDev ? 1000 * 30 : 1000 * 60, // 30s dev, 1min prod\n          refetchOnWindowFocus: !isDev, // Disable in dev for better DX\n        },\n        mutations: {\n          ...defaultQueryOptions.mutations,\n          onError: (error) => {\n            // Toast error handling for failed mutations\n            const message = error instanceof Error ? error.message : ''Operation failed'';\n            toast.error(message);\n          },\n          onSuccess: () => {\n            // Optional success feedback for mutations\n            if (isDev) {\n              toast.success(''Operation completed'');\n            }\n          }\n        }\n      }\n    });\n  }, []);\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      {children}\n      {(isDev && appConfig.enableDevTools) && (\n        <ReactQueryDevtools\n          initialIsOpen={false}\n          position=\"bottom-right\"\n          toggleButtonProps={{\n            style: {\n              marginLeft: ''5px'',\n              transform: ''scale(0.8)'',\n              transformOrigin: ''bottom right'',\n            }\n          }}\n        />\n      )}\n    </QueryClientProvider>\n  );\n}\n```\n\nIf the output contains explanatory text like \"let me analyze\", \"I''ll help\", \"Here''s the implementation\", or any non-code content, then GENERATE THE ACTUAL CODE based on:\n- File to implement: src/providers/QueryProvider.tsx\n- Description: React Query client provider configured with sensible defaults, retry behavior, suspense integration and devtools toggle. Initializes based on appConfig.\n- Current section data: {\n  \"id\": \"providers-query\",\n  \"file_path\":
      \"src/providers/QueryProvider.tsx\",\n  \"description\": \"React Query client provider configured with sensible defaults, retry behavior, suspense integration and devtools toggle. Initializes based on appConfig.\",\n  \"dependencies\": [\n    \"src/app/config.ts\"\n  ],\n  \"exports\": [\n    \"QueryProvider\"\n  ],\n  \"priority\": 2\n}\n\nRequirements:\n- If output already contains valid code: return it as-is (removing only markdown backticks if present)\n- If output is explanatory text: generate the ACTUAL implementation code\n- Return ONLY raw code, no explanations or markdown\n- Follow all conventions from the Core Kernel and prior sections\n"}]}}]'
connections:
- {from: Start, to: Claude Responds To User 1, content_type: raw_text}
persons:
  claude_code:
    service: anthropic
    model: claude-code
    api_key_id: APIKEY_CLAUDE
    system_prompt: You are Claude Code, an AI assistant helping with software development.
metadata:
  conversion:
    total_nodes: 2
    total_connections: 1
    total_persons: 0
    node_types:
      start: 1
      person_job: 1
