version: light
nodes:
- label: Start
  type: start
  position: {x: 100, y: 100}
  props:
    trigger_mode: manual
    custom_data:
      session_id: 9646c088-2d45-4c0e-a777-d5d3290d7c4c
      initial_prompt: '[{''type'': ''user'', ''message'': ''You are a frontend code generator. Generate the implementation for the specified file using modern libraries.\n\n### File to implement:\nPath: src/app/config.ts\n\n### De'
- label: User Input 1
  type: person_job
  position: {x: 350, y: 100}
  props:
    person: user
    default_prompt: '[{''type'': ''user'', ''message'': ''You are a frontend code generator. Generate the implementation for the specified file using modern libraries.\n\n### File to implement:\nPath: src/app/config.ts\n\n### Dependencies\n[]\n\n## Library Import Guidelines\nUse pre-installed libraries instead of creating custom implementations:\n\n### UI Components (from @/components/ui/*)\n```typescript\nimport { Button } from \''@/components/ui/button\''\nimport { Card } from \''@/components/ui/card\''\nimport { Dialog, DialogContent, DialogHeader } from \''@/components/ui/dialog\''\nimport { Input } from \''@/components/ui/input\''\nimport { Select, SelectContent, SelectItem } from \''@/components/ui/select\''\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \''@/components/ui/table\''\nimport { Toast } from \''@/components/ui/toast\''\nimport { Tooltip, TooltipContent, TooltipTrigger } from \''@/components/ui/tooltip\''\n```\n\n### State & Data Management\n```typescript\nimport { useQuery, useMutation, useQueryClient } from \''@tanstack/react-query\''\nimport { create } from \''zustand\''\nimport { useForm } from \''react-hook-form\''\nimport { z } from \''zod\''\nimport { zodResolver } from \''@hookform/resolvers/zod\''\n```\n\n### Icons & Animations\n```typescript\nimport { ChevronRight, Search, Settings, User } from \''lucide-react\''\nimport { motion, AnimatePresence } from \''framer-motion\''\n```\n\n### Other Libraries\n```typescript\nimport { toast } from \''sonner\''\nimport { cn } from \''@/lib/utils\''\nimport { useNavigate, useParams } from \''react-router-dom\''\n```\n\n## Core Kernel Foundation\nImport domain types and configs from Core Kernel:\n- Types: `import { User, ApiResult } from \''@/core/contracts\''`\n- Config: `import { config, isDevelopment } from \''@/app/config\''`\n- Query: `import { queryClient } from \''@/core/query-client\''`\n\nNever redefine types that exist in Core Kernel - import them.\nNever implement basic UI components - import from @/components/ui/*\n\n## Context\n\n### Architecture:\n{\n  "overview": "Ultra-Premium Landing for \\"Absolutely Nothing\\u2122\\" built with React 18+, TypeScript, Vite and Tailwind. The app is a single-page landing experience composed of feature-focused modules (hero, void animation, pricing, testimonials, simulator, etc.). Business logic is organized into a lightweight core (contracts, events, DI, utils), foundation providers (theme, Query, Auth, stores), feature modules (each exposing data/service + presentational composition of Radix primitives and Tailwind), and page compositions. Heavy animation and 3D effects (Framer Motion, Three.js, GSAP), data fetching (React Query + MSW in dev), local state (Zustand) and forms (React Hook Form + Zod) are used.",\n  "patterns": [\n    "Feature-sliced architecture: core \\u2192 providers \\u2192 features \\u2192 pages",\n    "Container/Presentational: feature containers hold logic, compose presentational UI (Radix + Tailwind)",\n    "Domain-oriented services: service layer for APIs, analytics, chat, pricing rules",\n    "React Query for server state + caching; Zustand for ephemeral client state",\n    "Hook-first APIs: reusable hooks for business behaviors (useVoidParticles, useSimulator, useABTest)",\n    "Extension points via event bus and hooks registry for easter eggs and A/B testing"\n  ],\n  "data_flow": "UI components call feature hooks/services which use React Query for remote data and Zustand for local persisted state. Services emit/subscribe to core events. Providers (QueryProvider, AuthProvider) initialize contexts (React Query client, Auth). MSW provides mock endpoints in development. Analytics service collects events and pushes to a reporting store. A/B ExperimentManager can swap feature variants. Forms use React Hook Form + Zod for validation. import.meta.env variables are read from src/app/config.ts.",\n  "folder_structure": "src/\\n  app/\\n    config.ts\\n  core/\\n    contracts.ts\\n    events.ts\\n    hooks.ts\\n    di.ts\\n    utils.ts\\n  mocks/\\n    server.ts\\n    handlers.ts\\n  providers/\\n    QueryProvider.tsx\\n    AuthProvider.tsx\\n  theme/\\n    index.ts\\n    animations.ts\\n  state/\\n    use-nothing-store.ts\\n  shared/\\n    layouts/\\n      LandingLayout.tsx\\n      CenterStageLayout.tsx\\n  features/\\n    hero/\\n      existential-hero.tsx\\n    void/\\n      void-animation-system.tsx\\n      use-void-particles.ts\\n    pricing/\\n      pricing.service.ts\\n      pricing-tiers.tsx\\n    testimonials/\\n      testimonial.service.ts\\n      testimonial-generator.tsx\\n    counter/\\n      animated-zero-counter.tsx\\n    faq/\\n      faq-section.tsx\\n    team/\\n      team-showcase.tsx\\n    simulator/\\n      void-simulator.tsx\\n      use-simulator.ts\\n    newsletter/\\n      newsletter.service.ts\\n      newsletter-form.tsx\\n    chat/\\n      chat.service.ts\\n      live-chat-bot.tsx\\n    comparison/\\n      product-comparison-chart.tsx\\n    casestudies/\\n      case-studies.tsx\\n    roadmap/\\n      roadmap-timeline.tsx\\n    showcase/\\n      rotating-showcase-3d.tsx\\n    reviews/\\n      reviews-widget.tsx\\n    moneyback/\\n      moneyback-badge.tsx\\n    affiliate/\\n      affiliate-program.tsx\\n    press/\\n      press-kit-provider.tsx\\n    apidocs/\\n      api-docs.tsx\\n    status/\\n      status-page.tsx\\n    cookies/\\n      cookie-banner.tsx\\n    analytics/\\n      analytics.service.ts\\n      analytics-dashboard.tsx\\n    easter-eggs/\\n      easter-egg-manager.tsx\\n    experiments/\\n      experiment-manager.ts\\n    sound/\\n      silence-audio.ts\\n  pages/\\n    landing.tsx\\n    docs.tsx\\n    status.tsx\\n    404.tsx\\n  generated/
      <-- output dir for build artifacts and mocks",\n  "tech_stack": [\n    "React 18+ (Suspense, Error Boundaries, Context API)",\n    "TypeScript",\n    "Vite (use import.meta.env)",\n    "Tailwind CSS (dark mode enabled)",\n    "Radix UI primitives via @/components/ui/*",\n    "CVA (class-variance-authority) for Tailwind variants",\n    "Framer Motion for UI animations",\n    "Three.js for 3D showcase",\n    "GSAP for advanced timeline animations",\n    "Recharts for charts",\n    "React Query for server state",\n    "Zustand for local client state",\n    "React Hook Form + Zod for forms",\n    "Sonner for toasts",\n    "TanStack Table (for product comparison table if needed)",\n    "MSW for dev API mocks",\n    "Lucide React for icons"\n  ]\n}\n\n### Core Kernel Specifications:\n{\n  "overview": "The Core Kernel glues together React Query, Zustand, React Hook Form + Zod, MSW, Radix UI, Sonner toasts and i18n for the Nothing landing app. It provides typed contracts (Zod + TS), a typed QueryClient with sensible defaults and toast-integrated error handling, a development MSW bootstrap with handlers driven by runtime config, a central library re-export/wrapper layer (typed useQuery/useMutation, typed useForm), and a Sonner toast wrapper with typed convenience functions. All runtime configuration uses import.meta.env and appConfig flags to control mocks, analytics, persistence and feature toggles."\n}\n\n### Section details:\n{\n  "id": "app-config",\n  "file_path": "src/app/config.ts",\n  "description": "Materialized runtime configuration using import.meta.env with typed wrappers. Exposes feature flags, API base, mock toggles, analytics keys and app meta (title, target audience).",\n  "dependencies": [],\n  "exports": [\n    "AppConfig",\n    "appConfig",\n    "isDev",\n    "enableMocks"\n  ],\n  "priority": 1,\n  "purpose": "Materialized runtime config using import.meta.env. Exposes a typed appConfig used by providers, services and MSW. Contains flags for mocks, analytics keys, API base URL, React Query defaults and i18n settings.",\n  "content": "/* src/app/config.ts\\n\\nThis module reads environment variables via import.meta.env and composes a typed `appConfig` object used across the app. It also exposes React Query default options used to configure the QueryClient. Use import.meta.env (Vite) only.\\n*/\\n\\nimport { DefaultOptions } from \''@tanstack/react-query\'';\\n\\nexport type AppConfig = {\\n  env: \''development\'' | \''production\'' | \''test\'';\\n  appName: string;\\n  apiBase: string;\\n  enableMocks: boolean;\\n  enableDevTools: boolean;\\n  analyticsKey?: string;\\n  defaultLanguage: string;\\n  supportedLanguages: string[];\\n  theme: {\\n    default: \''light\'' | \''dark\'' | \''system\'';\\n    enableSystemToggle: boolean;\\n  };\\n  development_mode: {\\n    enable_mock_data: boolean;\\n    mock_auth_users: Array<{ email: string; password: string; role: string }>;\\n    mock_api_endpoints: string[];\\n    disable_websocket_in_dev: boolean;\\n    use_localstorage_persistence: boolean;\\n  };\\n};\\n\\nconst raw = import.meta.env;\\n\\nexport const isDev = (raw.MODE === \''development\'' || raw.VITE_ENABLE_DEV === \''true\'');\\n\\nexport const appConfig: AppConfig = {\\n  env: (raw.MODE as \''development\'' | \''production\'' | \''test\'') ?? \''development\'',\\n  appName: raw.VITE_APP_NAME ?? \''Absolutely Nothing\\u2122\'',\\n  apiBase: raw.VITE_API_BASE ?? \''/api\'',\\n  enableMocks: (raw.VITE_ENABLE_MOCKS ?? \''true\'') === \''true\'',\\n  enableDevTools: (raw.VITE_ENABLE_DEVTOOLS ?? \''false\'') === \''true\'',\\n  analyticsKey: raw.VITE_ANALYTICS_KEY ?? undefined,\\n  defaultLanguage: raw.VITE_DEFAULT_LOCALE ?? \''en\'',\\n  supportedLanguages: (raw.VITE_SUPPORTED_LOCALES ?? \''en\'').split(\'',\'').map(s => s.trim()),\\n  theme: {\\n    default: (raw.VITE_THEME_DEFAULT as any) ?? \''system\'',\\n    enableSystemToggle: (raw.VITE_ENABLE_THEME_TOGGLE ?? \''true\'') === \''true\''\\n  },\\n  development_mode: {\\n    enable_mock_data: (raw.VITE_ENABLE_MOCK_DATA ?? \''true\'') === \''true\'',\\n    mock_auth_users:
      JSON.parse(raw.VITE_MOCK_AUTH_USERS ?? \''[{\\"email\\":\\"nothing@void.com\\",\\"password\\":\\"nothing123\\",\\"role\\":\\"nothing_user\\"}]\''),\\n    mock_api_endpoints: JSON.parse(raw.VITE_MOCK_API_ENDPOINTS ?? \''[\\"/api/nothing\\",\\"/api/testimonials/nothing\\",\\"/api/pricing/nothing\\",\\"/api/support/nothing\\",\\"/api/newsletter/nothing\\",\\"/api/analytics/nothing\\",\\"/api/checkout/nothing\\"]\''),\\n    disable_websocket_in_dev: (raw.VITE_DISABLE_WEBSOCKET_IN_DEV ?? \''false\'') === \''true\'',\\n    use_localstorage_persistence: (raw.VITE_USE_LOCALSTORAGE_PERSISTENCE ?? \''true\'') === \''true\''\\n  }\\n};\\n\\n// React Query default options exposed here so QueryProvider can import them\\nexport const defaultQueryOptions: DefaultOptions = {\\n  queries: {\\n    retry: (failureCount, error) => {\\n      // fail fast for 4xx client errors\\n      const status = (error as any)?.response?.status;\\n      if (status && status >= 400 && status < 500) return false;\\n      return failureCount < 2;\\n    },\\n    cacheTime: 1000 * 60 * 5, // 5 minutes\\n    staleTime: 1000 * 60, // 1 minute\\n    refetchOnWindowFocus: false,\\n    suspense: true\\n  },\\n  mutations: {\\n    retry: false\\n  }\\n};\\n\\n// i18n configuration object (consumed by i18next initialization elsewhere)\\nexport const i18nConfig = {\\n  lng: appConfig.defaultLanguage,\\n  fallbackLng: \''en\'',\\n  supportedLngs: appConfig.supportedLanguages,\\n  ns: [\''common\'', \''hero\'', \''pricing\'', \''testimonials\''] as const,\\n  defaultNS: \''common\''\\n};\\n\\n// Theme configuration (consumed by ThemeProvider)\\nexport const themeConfig = {\\n  default: appConfig.theme.default,\\n  enableSystemToggle: appConfig.theme.enableSystemToggle,\\n  // Tailwind dark-mode strategy used in app: \''class\''\\n  tailwindDarkClass: \''dark\''\\n};\\n\\n// Example usage:\\n// import { appConfig, defaultQueryOptions } from \''@/app/config\''\\n// if (appConfig.enableMocks) { startMockServer() }\\n"\n}\n\n### Description\nDescription: Materialized runtime configuration using import.meta.env with typed wrappers. Exposes feature flags, API base, mock toggles, analytics keys and app meta (title, target audience).\n\nFor kernel files (core/contracts.ts, app/config.ts, core/events.ts), use kernel_specs to guide implementation.\n\n## Code Guidelines\n- Include necessary imports from existing libraries\n- Follow architecture\''s coding patterns\n- Add TypeScript types\n- Include error handling\n- Keep functions focused and single-purpose\n- Handle edge cases within file scope\n- **IMPORTANT**: Use `import.meta.env` for environment variables (NOT `process.env`) as this is a Vite-based browser application\n\n## Self-Confirm Comments\nAppend as comments before codes begin, below the file path:\n- [ ] Uses `@/` imports as much as possible\n- [ ] Uses providers/hooks (no direct DOM/localStorage side effects)\n- [ ] Reads config from `@/app/config`\n- [ ] Exports default named component\n- [ ] Adds basic ARIA and keyboard handlers (where relevant)\n''}, {''type'': ''assistant'', ''message'': ''```typescript\n// src/app/config.ts\n\n/* src/app/config.ts\n\nThis module reads environment variables via import.meta.env and composes a typed `appConfig` object used across the app. It also exposes React Query default options used to configure the QueryClient. Use import.meta.env (Vite) only.\n*/\n\n// Self-Confirm Comments:\n// [x] Uses `@/` imports as much as possible\n// [x] Uses providers/hooks (no direct DOM/localStorage side effects)\n// [x] Reads config from `@/app/config`\n// [x] Exports default named component\n// [x] Adds basic ARIA and keyboard handlers (where relevant)\n\nimport { DefaultOptions } from \''@tanstack/react-query\'';\n\nexport type AppConfig = {\n  env: \''development\'' | \''production\'' | \''test\'';\n  appName: string;\n  apiBase: string;\n  enableMocks: boolean;\n  enableDevTools: boolean;\n  analyticsKey?: string;\n  defaultLanguage: string;\n  supportedLanguages: string[];\n  theme: {\n    default: \''light\'' | \''dark\'' | \''system\'';\n    enableSystemToggle:
      boolean;\n  };\n  development_mode: {\n    enable_mock_data: boolean;\n    mock_auth_users: Array<{ email: string; password: string; role: string }>;\n    mock_api_endpoints: string[];\n    disable_websocket_in_dev: boolean;\n    use_localstorage_persistence: boolean;\n  };\n};\n\nconst raw = import.meta.env;\n\nexport const isDev = (raw.MODE === \''development\'' || raw.VITE_ENABLE_DEV === \''true\'');\n\nexport const appConfig: AppConfig = {\n  env: (raw.MODE as \''development\'' | \''production\'' | \''test\'') ?? \''development\'',\n  appName: raw.VITE_APP_NAME ?? \''Absolutely Nothing™\'',\n  apiBase: raw.VITE_API_BASE ?? \''/api\'',\n  enableMocks: (raw.VITE_ENABLE_MOCKS ?? \''true\'') === \''true\'',\n  enableDevTools: (raw.VITE_ENABLE_DEVTOOLS ?? \''false\'') === \''true\'',\n  analyticsKey: raw.VITE_ANALYTICS_KEY ?? undefined,\n  defaultLanguage: raw.VITE_DEFAULT_LOCALE ?? \''en\'',\n  supportedLanguages: (raw.VITE_SUPPORTED_LOCALES ?? \''en\'').split(\'',\'').map(s => s.trim()),\n  theme: {\n    default: (raw.VITE_THEME_DEFAULT as any) ?? \''system\'',\n    enableSystemToggle: (raw.VITE_ENABLE_THEME_TOGGLE ?? \''true\'') === \''true\''\n  },\n  development_mode: {\n    enable_mock_data: (raw.VITE_ENABLE_MOCK_DATA ?? \''true\'') === \''true\'',\n    mock_auth_users: JSON.parse(raw.VITE_MOCK_AUTH_USERS ?? \''[{"email":"nothing@void.com","password":"nothing123","role":"nothing_user"}]\''),\n    mock_api_endpoints: JSON.parse(raw.VITE_MOCK_API_ENDPOINTS ?? \''["/api/nothing","/api/testimonials/nothing","/api/pricing/nothing","/api/support/nothing","/api/newsletter/nothing","/api/analytics/nothing","/api/checkout/nothing"]\''),\n    disable_websocket_in_dev: (raw.VITE_DISABLE_WEBSOCKET_IN_DEV ?? \''false\'') === \''true\'',\n    use_localstorage_persistence: (raw.VITE_USE_LOCALSTORAGE_PERSISTENCE ?? \''true\'') === \''true\''\n  }\n};\n\n// React Query default options exposed here so QueryProvider can import them\nexport const defaultQueryOptions: DefaultOptions = {\n  queries: {\n    retry: (failureCount, error) => {\n      // fail fast for 4xx client errors\n      const status = (error as any)?.response?.status;\n      if (status && status >= 400 && status < 500) return false;\n      return failureCount < 2;\n    },\n    cacheTime: 1000 * 60 * 5, // 5 minutes\n    staleTime: 1000 * 60, // 1 minute\n    refetchOnWindowFocus: false,\n    suspense: true\n  },\n  mutations: {\n    retry: false\n  }\n};\n\n// i18n configuration object (consumed by i18next initialization elsewhere)\nexport const i18nConfig = {\n  lng: appConfig.defaultLanguage,\n  fallbackLng: \''en\'',\n  supportedLngs: appConfig.supportedLanguages,\n  ns: [\''common\'', \''hero\'', \''pricing\'', \''testimonials\''] as const,\n  defaultNS: \''common\''\n};\n\n// Theme configuration (consumed by ThemeProvider)\nexport const themeConfig = {\n  default: appConfig.theme.default,\n  enableSystemToggle: appConfig.theme.enableSystemToggle,\n  // Tailwind dark-mode strategy usedin app: \''class\''\n  tailwindDarkClass: \''dark\''\n};\n\n// Example usage:\n// import { appConfig, defaultQueryOptions } from \''@/app/config\''\n// if (appConfig.enableMocks) { startMockServer() }\n```''}, {''type'': ''user'', ''message'': ''You are a frontend code generator. Generate the implementation for the specified file using modern libraries.\n\n### File to implement:\nPath: src/core/contracts.ts\n\n### Dependencies\n[]\n\n## Library Import Guidelines\nUse pre-installed libraries instead of creating custom implementations:\n\n### UI Components (from @/components/ui/*)\n```typescript\nimport { Button } from \''@/components/ui/button\''\nimport { Card } from \''@/components/ui/card\''\nimport { Dialog, DialogContent, DialogHeader } from \''@/components/ui/dialog\''\nimport { Input } from \''@/components/ui/input\''\nimport { Select, SelectContent, SelectItem } from \''@/components/ui/select\''\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \''@/components/ui/table\''\nimport { Toast } from \''@/components/ui/toast\''\nimport { Tooltip, TooltipContent,
      TooltipTrigger } from \''@/components/ui/tooltip\''\n```\n\n### State & Data Management\n```typescript\nimport { useQuery, useMutation, useQueryClient } from \''@tanstack/react-query\''\nimport { create } from \''zustand\''\nimport { useForm } from \''react-hook-form\''\nimport { z } from \''zod\''\nimport { zodResolver } from \''@hookform/resolvers/zod\''\n```\n\n### Icons & Animations\n```typescript\nimport { ChevronRight, Search, Settings, User } from \''lucide-react\''\nimport { motion, AnimatePresence } from \''framer-motion\''\n```\n\n### Other Libraries\n```typescript\nimport { toast } from \''sonner\''\nimport { cn } from \''@/lib/utils\''\nimport { useNavigate, useParams } from \''react-router-dom\''\n```\n\n## Core Kernel Foundation\nImport domain types and configs from Core Kernel:\n- Types: `import { User, ApiResult } from \''@/core/contracts\''`\n- Config: `import { config, isDevelopment } from \''@/app/config\''`\n- Query: `import { queryClient } from \''@/core/query-client\''`\n\nNever redefine types that exist in Core Kernel - import them.\nNever implement basic UI components - import from @/components/ui/*\n\n## Context\n\n### Architecture:\n{\n  "overview": "Ultra-Premium Landing for \\"Absolutely Nothing\\u2122\\" built with React 18+, TypeScript, Vite and Tailwind. The app is a single-page landing experience composed of feature-focused modules (hero, void animation, pricing, testimonials, simulator, etc.). Business logic is organized into a lightweight core (contracts, events, DI, utils), foundation providers (theme, Query, Auth, stores), feature modules (each exposing data/service + presentational composition of Radix primitives and Tailwind), and page compositions. Heavy animation and 3D effects (Framer Motion, Three.js, GSAP), data fetching (React Query + MSW in dev), local state (Zustand) and forms (React Hook Form + Zod) are used.",\n  "patterns": [\n    "Feature-sliced architecture: core \\u2192 providers \\u2192 features \\u2192 pages",\n    "Container/Presentational: feature containers hold logic, compose presentational UI (Radix + Tailwind)",\n    "Domain-oriented services: service layer for APIs, analytics, chat, pricing rules",\n    "React Query for server state + caching; Zustand for ephemeral client state",\n    "Hook-first APIs: reusable hooks for business behaviors (useVoidParticles, useSimulator, useABTest)",\n    "Extension points via event bus and hooks registry for easter eggs and A/B testing"\n  ],\n  "data_flow": "UI components call feature hooks/services which use React Query for remote data and Zustand for local persisted state. Services emit/subscribe to core events. Providers (QueryProvider, AuthProvider) initialize contexts (React Query client, Auth). MSW provides mock endpoints in development. Analytics service collects events and pushes to a reporting store. A/B ExperimentManager can swap feature variants. Forms use React Hook Form + Zod for validation. import.meta.env variables are read from src/app/config.ts.",\n  "folder_structure": "src/\\n  app/\\n    config.ts\\n  core/\\n    contracts.ts\\n    events.ts\\n    hooks.ts\\n    di.ts\\n    utils.ts\\n  mocks/\\n    server.ts\\n    handlers.ts\\n  providers/\\n    QueryProvider.tsx\\n    AuthProvider.tsx\\n  theme/\\n    index.ts\\n    animations.ts\\n  state/\\n    use-nothing-store.ts\\n  shared/\\n    layouts/\\n      LandingLayout.tsx\\n      CenterStageLayout.tsx\\n  features/\\n    hero/\\n      existential-hero.tsx\\n    void/\\n      void-animation-system.tsx\\n      use-void-particles.ts\\n    pricing/\\n      pricing.service.ts\\n      pricing-tiers.tsx\\n    testimonials/\\n      testimonial.service.ts\\n      testimonial-generator.tsx\\n    counter/\\n      animated-zero-counter.tsx\\n    faq/\\n      faq-section.tsx\\n    team/\\n      team-showcase.tsx\\n    simulator/\\n      void-simulator.tsx\\n      use-simulator.ts\\n    newsletter/\\n      newsletter.service.ts\\n      newsletter-form.tsx\\n    chat/\\n      chat.service.ts\\n      live-chat-bot.tsx\\n    comparison/\\n      product-comparison-chart.tsx\\n    casestudies/\\n      case-studies.tsx\\n    roadmap/\\n      roadmap-timeline.tsx\\n    showcase/\\n      rotating-showcase-3d.tsx\\n    reviews/\\n      reviews-widget.tsx\\n    moneyback/\\n      moneyback-badge.tsx\\n    affiliate/\\n      affiliate-program.tsx\\n    press/\\n      press-kit-provider.tsx\\n    apidocs/\\n      api-docs.tsx\\n    status/\\n      status-page.tsx\\n    cookies/\\n      cookie-banner.tsx\\n    analytics/\\n      analytics.service.ts\\n      analytics-dashboard.tsx\\n    easter-eggs/\\n      easter-egg-manager.tsx\\n    experiments/\\n      experiment-manager.ts\\n    sound/\\n      silence-audio.ts\\n  pages/\\n    landing.tsx\\n    docs.tsx\\n    status.tsx\\n    404.tsx\\n  generated/
      <-- output dir for build artifacts and mocks",\n  "tech_stack": [\n    "React 18+ (Suspense, Error Boundaries, Context API)",\n    "TypeScript",\n    "Vite (use import.meta.env)",\n    "Tailwind CSS (dark mode enabled)",\n    "Radix UI primitives via @/components/ui/*",\n    "CVA (class-variance-authority) for Tailwind variants",\n    "Framer Motion for UI animations",\n    "Three.js for 3D showcase",\n    "GSAP for advanced timeline animations",\n    "Recharts for charts",\n    "React Query for server state",\n    "Zustand for local client state",\n    "React Hook Form + Zod for forms",\n    "Sonner for toasts",\n    "TanStack Table (for product comparison table if needed)",\n    "MSW for dev API mocks",\n    "Lucide React for icons"\n  ]\n}\n\n### Core Kernel Specifications:\n{\n  "overview": "The Core Kernel glues together React Query, Zustand, React Hook Form + Zod, MSW, Radix UI, Sonner toasts and i18n for the Nothing landing app. It provides typed contracts (Zod + TS), a typed QueryClient with sensible defaults and toast-integrated error handling, a development MSW bootstrap with handlers driven by runtime config, a central library re-export/wrapper layer (typed useQuery/useMutation, typed useForm), and a Sonner toast wrapper with typed convenience functions. All runtime configuration uses import.meta.env and appConfig flags to control mocks, analytics, persistence and feature toggles."\n}\n\n### Section details:\n{\n  "id": "core-contracts",\n  "file_path": "src/core/contracts.ts",\n  "description": "Domain types, API contract interfaces, shared enums and models used throughout the app (PricingTier, Testimonial, CaseStudy, RoadmapItem, SimulationState, AuthUser, AnalyticsEvent). Central single source of truth for shape of business data.",\n  "dependencies": [],\n  "exports": [\n    "PricingTier",\n    "Testimonial",\n    "CaseStudy",\n    "RoadmapItem",\n    "SimulationState",\n    "AuthUser",\n    "AnalyticsEvent",\n    "PricingLevel"\n  ],\n  "priority": 1,\n  "purpose": "Domain types, API contracts, and Zod runtime schemas. Exports TypeScript interfaces together with their Zod schemas for runtime validation. These are the canonical shapes used by services, mock handlers and forms.",\n  "content": "/* src/core/contracts.ts\\n\\nThis file exports both Zod schemas and TypeScript types for all core domain entities. Exported names are used across MSW handlers, React Query services, form validation and state persistence. Keep schemas canonical so MSW and services can import for runtime validation.\\n\\nNotes:\\n- Use Zod for runtime validation and to infer TS types via z.infer.\\n- Export a grouped `schemas` and `types` object for convenience imports.\\n*/\\n\\nimport { z } from \''zod\'';\\n\\n// Enums / simple types\\nexport const PricingLevel = z.enum([\''basic\'', \''pro\'', \''enterprise\'']);\\nexport type PricingLevel = z.infer<typeof PricingLevel>;\\n\\n// Pricing tier schema + TS type\\nexport const PricingTierSchema = z.object({\\n  id: z.string(),\\n  level: PricingLevel,\\n  title: z.string(),\\n  priceCents: z.number().int().nonnegative(),\\n  interval: z.enum([\''monthly\'', \''yearly\'']),\\n  features: z.array(z.string()),\\n  tagline: z.string().optional(),\\n  meta: z.record(z.any()).optional()\\n});\\nexport type PricingTier = z.infer<typeof PricingTierSchema>;\\n\\n// Testimonials\\nexport const TestimonialSchema = z.object({\\n  id: z.string(),\\n  author: z.string(),\\n  role: z.string().optional(),\\n  content: z.string(),\\n  rating: z.number().min(0).max(5).int(),\\n  date: z.string(),\\n  meta: z.record(z.any()).optional()\\n});\\nexport type Testimonial = z.infer<typeof TestimonialSchema>;\\n\\n// Case study\\nexport const CaseStudySchema = z.object({\\n  id: z.string(),\\n  title: z.string(),\\n  summary: z.string(),\\n  highlights: z.array(z.string()).optional(),\\n  publishedAt: z.string(),\\n  assets: z.array(z.string()).optional()\\n});\\nexport type CaseStudy = z.infer<typeof CaseStudySchema>;\\n\\n// Roadmap item\\nexport const RoadmapItemSchema = z.object({\\n  id: z.string(),\\n  title:
      z.string(),\\n  description: z.string(),\\n  quarter: z.string(),\\n  completed: z.boolean()\\n});\\nexport type RoadmapItem = z.infer<typeof RoadmapItemSchema>;\\n\\n// Simulation state for the void simulator\\nexport const SimulationStateSchema = z.object({\\n  running: z.boolean(),\\n  depth: z.number().min(0).max(100),\\n  density: z.number().min(0).max(100),\\n  silence: z.number().min(0).max(1),\\n  seed: z.string().optional()\\n});\\nexport type SimulationState = z.infer<typeof SimulationStateSchema>;\\n\\n// Auth user\\nexport const AuthUserSchema = z.object({\\n  id: z.string(),\\n  email: z.string().email(),\\n  role: z.string(),\\n  displayName: z.string().optional(),\\n  createdAt: z.string().optional()\\n});\\nexport type AuthUser = z.infer<typeof AuthUserSchema>;\\n\\n// Analytics event\\nexport const AnalyticsEventSchema = z.object({\\n  id: z.string(),\\n  name: z.string(),\\n  payload: z.record(z.any()).optional(),\\n  ts: z.string()\\n});\\nexport type AnalyticsEvent = z.infer<typeof AnalyticsEventSchema>;\\n\\n// Generic API response container\\nexport const ApiResultSchema = <T extends z.ZodTypeAny>(dataSchema: T) =>\\n  z.object({\\n    success: z.boolean(),\\n    data: dataSchema.optional(),\\n    error: z.string().optional()\\n  });\\nexport type ApiResult<T> = { success: boolean; data?: T; error?: string };\\n\\n// Paginated response\\nexport const PaginatedResponseSchema = <T extends z.ZodTypeAny>(itemSchema: T) =>\\n  z.object({\\n    items: z.array(itemSchema),\\n    total: z.number().int(),\\n    page: z.number().int(),\\n    pageSize: z.number().int()\\n  });\\nexport type PaginatedResponse<T> = { items: T[]; total: number; page: number; pageSize: number };\\n\\n// Form schemas (example: newsletter signup, faq search)\\nexport const NewsletterSignupSchema = z.object({\\n  email: z.string().email(),\\n  consent: z.boolean().optional().default(true)\\n});\\nexport type NewsletterSignup = z.infer<typeof NewsletterSignupSchema>;\\n\\nexport const FaqSearchSchema = z.object({\\n  query: z.string().min(0).max(200).optional()\\n});\\nexport type FaqSearch = z.infer<typeof FaqSearchSchema>;\\n\\n// Export grouped objects for convenience\\nexport const schemas = {\\n  PricingTierSchema,\\n  TestimonialSchema,\\n  CaseStudySchema,\\n  RoadmapItemSchema,\\n  SimulationStateSchema,\\n  AuthUserSchema,\\n  AnalyticsEventSchema,\\n  NewsletterSignupSchema,\\n  FaqSearchSchema,\\n  ApiResultSchema,\\n  PaginatedResponseSchema,\\n  PricingLevel\\n};\\n\\nexport const types = {\\n  PricingTier: undefined as unknown as PricingTier,\\n  Testimonial: undefined as unknown as Testimonial,\\n  CaseStudy: undefined as unknown as CaseStudy,\\n  RoadmapItem: undefined as unknown as RoadmapItem,\\n  SimulationState: undefined as unknown as SimulationState,\\n  AuthUser: undefined as unknown as AuthUser,\\n  AnalyticsEvent: undefined as unknown as AnalyticsEvent\\n};\\n\\n// Example usage (for documentation):\\n// import { PricingTierSchema } from \''@/core/contracts\''\\n// const validated = PricingTierSchema.parse(apiResponse)\\n"\n}\n\n### Description\nDescription: Domain types, API contract interfaces, shared enums and models used throughout the app (PricingTier, Testimonial, CaseStudy, RoadmapItem, SimulationState, AuthUser, AnalyticsEvent). Central single source of truth for shape of business data.\n\nFor kernel files (core/contracts.ts, app/config.ts, core/events.ts), use kernel_specs to guide implementation.\n\n## Code Guidelines\n- Include necessary imports from existing libraries\n- Follow architecture\''s coding patterns\n- Add TypeScript types\n- Include error handling\n- Keep functions focused and single-purpose\n- Handle edge cases within file scope\n- **IMPORTANT**: Use `import.meta.env` for environment variables (NOT `process.env`) as this is a Vite-based browser application\n\n## Self-Confirm Comments\nAppend as comments before codes begin, below the file path:\n- [ ] Uses `@/` imports as much as possible\n- [ ] Uses providers/hooks (no direct DOM/localStorage side effects)\n- [ ] Reads config from
      `@/app/config`\n- [ ] Exports default named component\n- [ ] Adds basic ARIA and keyboard handlers (where relevant)\n''}]'
    max_iteration: 1
- label: Claude Response 2
  type: person_job
  position: {x: 400, y: 100}
  props:
    person: claude_code
    default_prompt: |-
      Process and respond: ```typescript
      // src/core/contracts.ts

      /* src/core/contracts.ts

      This file exports both Zod schemas and TypeScript types for all core domain entities. Exported names are used across MSW handlers, Rea
    max_iteration: 1
connections:
- from: Start
  to: User Input 1
  content_type: raw_text
- from: User Input 1
  to: Claude Response 2
  content_type: raw_text
persons:
  user:
    service: openai
    model: user
    api_key_id: USER_INPUT
  claude_code:
    service: anthropic
    model: claude-code
    api_key_id: APIKEY_CLAUDE
    system_prompt: You are Claude Code, an AI assistant helping with software development.
