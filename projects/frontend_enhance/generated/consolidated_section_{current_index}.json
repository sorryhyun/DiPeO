"import React, { useMemo } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport DashboardLayout from '../components/DashboardLayout';\n\ntype MetricItem = {\n  id: string;\n  label: string;\n  value: string | number;\n  delta?: number;\n  trend?: 'up' | 'down';\n};\n\ntype DashboardData = {\n  metrics: MetricItem[];\n  chart: {\n    series: number[];\n  };\n};\n\nconst fetchDashboardData = async (): Promise<DashboardData> => {\n  // Simulated API delay\n  await new Promise((resolve) => setTimeout(resolve, 400));\n\n  // Mocked data for dashboard\n  return {\n    metrics: [\n      { id: 'revenue', label: 'Revenue', value: '$124k', delta: 8, trend: 'up' },\n      { id: 'orders', label: 'Orders', value: 320, delta: 5, trend: 'up' },\n      { id: 'customers', label: 'Customers', value: 860, delta: 2, trend: 'up' },\n    ],\n    chart: {\n      series: [12, 18, 15, 25, 34, 28, 46],\n    },\n  };\n};\n\ntype SparklineProps = {\n  data: number[];\n  height?: number;\n  color?: string;\n};\n\nconst Sparkline: React.FC<SparklineProps> = ({ data, height = 60, color = '#3b82f6' }) => {\n  if (!data || data.length === 0) return null;\n\n  const width = Math.max(60, data.length * 20);\n  const max = Math.max(...data);\n  const min = Math.min(...data);\n  const range = max - min || 1;\n  const step = (width - 2) / (data.length - 1);\n\n  const points = data.map((v, idx) => {\n    const x = 1 + idx * step;\n    const y = height - ((v - min) / range) * (height - 2) - 1;\n    return `${x},${y}`;\n  }).join(' ');\n\n  return (\n    <svg width=\"100%\" height={height} viewBox={`0 0 ${width} ${height}`} preserveAspectRatio=\"none\" role=\"img\" aria-label=\"Performance sparkline\">\n      <polyline fill=\"none\" stroke={color} strokeWidth={2} points={points} />\n    </svg>\n  );\n};\n\nconst DashboardPage: React.FC = () => {\n  const { data, isLoading, error } = useQuery<DashboardData>({\n    queryKey: ['dashboardData'],\n    queryFn: fetchDashboardData,\n  });\n\n  const metrics = data?.metrics ?? [];\n  const chartSeries = data?.chart?.series ?? [];\n\n  const hasMetrics = metrics.length > 0;\n\n  if (isLoading) {\n    return (\n      <DashboardLayout>\n        <div className=\"p-6 text-center text-gray-500\">Loading dashboard...</div>\n      </DashboardLayout>\n    );\n  }\n\n  if (error) {\n    return (\n      <DashboardLayout>\n        <div className=\"p-6 text-center text-red-600\">\n          Error loading dashboard data.\n        </div>\n      </DashboardLayout>\n    );\n  }\n\n  return (\n    <DashboardLayout>\n      <div className=\"p-4\">\n        <div className={`grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 ${hasMetrics ? 'mb-6' : ''}`}>\n          {metrics.map((m) => (\n            <div key={m.id} className=\"bg-white rounded-lg shadow-sm p-4\">\n              <div className=\"text-sm text-gray-500\">{m.label}</div>\n              <div className=\"text-2xl font-semibold\">{m.value}</div>\n              {typeof m.delta === 'number' && (\n                <div className={`text-xs mt-1 ${m.trend === 'up' ? 'text-green-500' : 'text-red-500'}`}>\n                  {m.trend === 'up' ? '\u25b2' : '\u25bc'} {Math.abs(m.delta)}%\n                </div>\n              )}\n            </div>\n          ))}\n        </div>\n\n        <div className=\"bg-white rounded-lg shadow-sm p-4\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <span className=\"text-sm text-gray-500\">Performance</span>\n          </div>\n          <div className=\"w-full\">\n            <Sparkline data={chartSeries} height={60} color=\"#3b82f6\" />\n          </div>\n        </div>\n      </div>\n    </DashboardLayout>\n  );\n};\n\nexport default DashboardPage;"