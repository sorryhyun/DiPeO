"Below is a complete, production-ready frontend codebase for a reusable Button component in React + TypeScript with Tailwind-like styling via utility classes. It includes the component, tests, minimal typings, a small test setup, and usage docs. You can drop this into a new project and adapt as needed.\n\nProject structure (folder contents shown with exact code blocks):\n\n- package.json\n- tsconfig.json\n- jest.config.js\n- src/\n  - index.ts\n  - styles/\n    - buttons.css\n  - components/\n    - Button.tsx\n  - __tests__/\n    - Button.test.tsx\nREADME\n- README.md (usage, props, accessibility notes)\n\n1) package.json\n```json\n{\n  \"name\": \"react-ts-button\",\n  \"version\": \"1.0.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"build\": \"tsc -p .\",\n    \"test\": \"jest\",\n    \"test:watch\": \"jest --watch\",\n    \"lint\": \"eslint 'src/**/*.{ts,tsx}'\",\n    \"prepare\": \"husky install\"\n  },\n  \"dependencies\": {\n    \"react\": \"^18.2.0\",\n    \"react-dom\": \"^18.2.0\"\n  },\n  \"devDependencies\": {\n    \"@types/jest\": \"^29.5.2\",\n    \"@types/react\": \"^18.0.37\",\n    \"@types/react-dom\": \"^18.0.11\",\n    \"jest\": \"^29.5.0\",\n    \"ts-jest\": \"^29.0.2\",\n    \"typescript\": \"^5.2.2\",\n    \"@testing-library/react\": \"^14.0.0\",\n    \"@testing-library/jest-dom\": \"^5.16.5\"\n  }\n}\n```\n\n2) tsconfig.json\n```json\n{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"module\": \"commonjs\",\n    \"lib\": [\"dom\", \"dom.iterable\", \"es2020\"],\n    \"jsx\": \"react-jsx\",\n    \"outDir\": \"./dist\",\n    \"rootDir\": \"./src\",\n    \"strict\": true,\n    \"noImplicitAny\": true,\n    \"moduleResolution\": \"node\",\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true\n  },\n  \"include\": [\"src/**/*\"],\n  \"exclude\": [\"node_modules\"]\n}\n```\n\n3) jest.config.js\n```js\nmodule.exports = {\n  preset: 'ts-jest',\n  testEnvironment: 'jsdom',\n  moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx'],\n  transform: {\n    '^.+\\\\.(ts|tsx)$': 'ts-jest'\n  },\n  testRegex: '(/__tests__/.*|(\\\\.|/|\\\\\\\\)test)\\\\.(ts|tsx|js)$',\n  setupFilesAfterEnv: ['@testing-library/jest-dom/extend-expect']\n};\n```\n\n4) src/index.ts\n```ts\nexport { default } from './components/Button';\nexport type { ButtonProps } from './components/Button';\n```\n\n5) src/styles/buttons.css\n```css\n/* Optional: keep minimal overrides if you want to layer custom CSS on top of Tailwind-style utilities */\n```\n\n6) src/components/Button.tsx\n```tsx\nimport React, { ButtonHTMLAttributes, MouseEvent, ReactNode, useMemo } from 'react';\n\n/**\n * A highly reusable Button component with variants, sizes, loading state, and icons.\n * Tailwind-like utility classes are used for styling.\n */\n\nexport type ButtonVariant = 'primary' | 'secondary' | 'success' | 'danger' | 'ghost';\nexport type ButtonSize = 'sm' | 'md' | 'lg';\n\nexport interface ButtonProps extends Omit<ButtonHTMLAttributes<HTMLButtonElement>, 'type'> {\n  variant?: ButtonVariant;\n  size?: ButtonSize;\n  disabled?: boolean;\n  loading?: boolean;\n  fullWidth?: boolean;\n  startIcon?: ReactNode;\n  endIcon?: ReactNode;\n  ariaLabel?: string;\n  // onClick typed separately for clarity (optional)\n  onClick?: (e: MouseEvent<HTMLButtonElement>) => void;\n  type?: 'button' | 'submit' | 'reset';\n}\n\nconst Spinner = () => (\n  <svg\n    width=\"16\"\n    height=\"16\"\n    viewBox=\"0 0 24 24\"\n    role=\"img\"\n    aria-label=\"Loading\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    className=\"animate-spin fill-current\"\n    style={{ color: 'currentColor' }}\n  >\n    <path d=\"M12 2a1 1 0 0 1 1 1v3a1 1 0 1 1-2 0V3a1 1 0 0 1 1-1Zm0 16a4 4 0 1 0-.001 7.999A4 4 0 0 0 12 18Z\" fill=\"currentColor\"/>\n  </svg>\n);\n\nfunction cx(...classes: Array<string | false | null | undefined>) {\n  return classes.filter(Boolean).join(' ');\n}\n\nconst Button: React.FC<ButtonProps> = ({\n  variant = 'primary',\n  size = 'md',\n  disabled = false,\n  loading = false,\n  fullWidth = false,\n  startIcon,\n  endIcon,\n  ariaLabel,\n  onClick,\n  children,\n  type = 'button',\n  ...rest\n}) => {\n  const baseClasses =\n    'inline-flex items-center justify-center font-semibold rounded focus:outline-none focus:ring-2 focus:ring-offset-2 transition-colors duration-150';\n  const widthClass = fullWidth ? 'w-full' : '';\n  const sizeClass = useMemo(() => {\n    switch (size) {\n      case 'sm':\n        return 'px-3 py-1.5 text-sm';\n      case 'lg':\n        return 'px-6 py-3 text-base';\n      case 'md':\n      default:\n        return 'px-4 py-2 text-sm';\n    }\n  }, [size]);\n\n  // Variants mapping to Tailwind-like utility classes\n  const variantClasses = {\n    primary:\n      'bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500',\n    secondary:\n      'bg-gray-200 text-gray-800 hover:bg-gray-300 focus:ring-gray-400',\n    success:\n      'bg-green-600 text-white hover:bg-green-700 focus:ring-green-500',\n    danger:\n      'bg-red-600 text-white hover:bg-red-700 focus:ring-red-500',\n    ghost:\n      'bg-transparent text-blue-600 hover:bg-blue-50 border border-transparent'\n  }[variant];\n\n  const disabledClasses = disabled || loading ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer';\n\n  // When loading, visually indicate and disable interaction\n  const finalAriaLabel = ariaLabel ?? (typeof children === 'string' ? children : 'Button');\n\n  const content = (\n    <>\n      {startIcon && !loading && <span className=\"mr-2 inline-flex items-center\">{startIcon}</span>}\n      {loading ? (\n        <span className=\"inline-flex items-center\">\n          <Spinner />\n          <span className=\"ml-2 sr-only\">Loading</span>\n        </span>\n      ) : (\n        children\n      )}\n      {!loading && endIcon && <span className=\"ml-2 inline-flex items-center\">{endIcon}</span>}\n    </>\n  );\n\n  return (\n    <button\n      type={type}\n      className={cx(baseClasses, sizeClass, variantClasses, widthClass, disabledClasses)}\n      onClick={onClick}\n      disabled={disabled || loading}\n      aria-label={ariaLabel || finalAriaLabel}\n      aria-disabled={disabled || loading}\n      aria-live={loading ? 'polite' : undefined}\n      {...rest}\n    >\n      {content}\n    </button>\n  );\n};\n\nexport default Button;\nexport type { ButtonProps };\n```\n\n7) src/__tests__/Button.test.tsx\n```tsx\nimport React from 'react';\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport Button from '../components/Button';\n\ndescribe('Button component', () => {\n  test('renders primary variant with label', () => {\n    render(<Button variant=\"primary\">Submit</Button>);\n    expect(screen.getByText('Submit')).toBeInTheDocument();\n  });\n\n  test('renders with start and end icons', () => {\n    const StartIcon = () => <span data-testid=\"si\">S</span>;\n    const EndIcon = () => <span data-testid=\"ei\">E</span>;\n    render(\n      <Button variant=\"primary\" startIcon={<StartIcon />} endIcon={<EndIcon />}>\n        Iconed\n      </Button>\n    );\n    expect(screen.getByText('Iconed')).toBeInTheDocument();\n    expect(screen.getByTestId('si')).toBeInTheDocument();\n    expect(screen.getByTestId('ei')).toBeInTheDocument();\n  });\n\n  test('shows loading spinner and disables interaction', () => {\n    const onClick = jest.fn();\n    render(\n      <Button variant=\"primary\" loading onClick={onClick}>\n        Click\n      </Button>\n    );\n    const btn = screen.getByRole('button');\n    expect(btn).toBeDisabled();\n    expect(screen.getByLabelText('Loading')).toBeInTheDocument();\n    fireEvent.click(btn);\n    expect(onClick).not.toHaveBeenCalled();\n  });\n\n  test('disabled state', () => {\n    const onClick = jest.fn();\n    render(\n      <Button variant=\"secondary\" disabled onClick={onClick}>\n        Disabled\n      </Button>\n    );\n    const btn = screen.getByRole('button');\n    expect(btn).toBeDisabled();\n    fireEvent.click(btn);\n    expect(onClick).not.toHaveBeenCalled();\n  });\n\n  test('fires onClick when clicked', () => {\n    const onClick = jest.fn();\n    render(\n      <Button variant=\"ghost\" onClick={onClick}>\n        Click me\n      </Button>\n    );\n    const btn = screen.getByRole('button');\n    fireEvent.click(btn);\n    expect(onClick).toHaveBeenCalledTimes(1);\n  });\n\n  test('fullWidth applies width class', () => {\n    const { container } = render(<Button fullWidth>Full Width</Button>);\n    expect(container.firstChild).toHaveClass('w-full');\n  });\n});\n```\n\n8) src/__tests__/Button.test.tsx test notes\n- Tests verify:\n  - Rendering of primary variant\n  - Icon rendering\n  - Loading state shows spinner and disables interaction\n  - Disabled state blocks onClick\n  - onClick fires when clicked\n  - fullWidth applies width styling\n\n9) README.md (root)\n```md\n# Reusable Button Component (React + TypeScript)\n\nThis folder contains a production-ready Button component with variants, sizes, loading state, and icon support. It uses Tailwind-like utility classes for styling (inline in the component). It is designed to be drop-in ready with unit tests included.\n\nUsage\n- Import and render the Button component with desired props.\n\n  import Button from './src/components/Button';\n  // or: import Button from './src';\n  <Button variant=\"primary\" onClick={() => alert('Clicked!')}>Submit</Button>\n\nProps\n- variant: 'primary' | 'secondary' | 'success' | 'danger' | 'ghost'\n- size: 'sm' | 'md' | 'lg'\n- disabled?: boolean\n- loading?: boolean\n- fullWidth?: boolean\n- startIcon?: JSX.Element\n- endIcon?: JSX.Element\n- ariaLabel?: string\n- onClick?: (e: MouseEvent) => void\n- type?: 'button' | 'submit' | 'reset'\n\nAccessibility\n- Uses semantic button element\n- aria-label provided when appropriate\n- Loading state uses an accessible spinner with aria-label\n\nTesting\n- Unit tests included at src/__tests__/Button.test.tsx\n- Tests run with Jest + React Testing Library\n\nNotes\n- The styling relies on Tailwind-like utility classes. If you\u2019re not using Tailwind, swap the classNames in Button.tsx with your own CSS classes or CSS Modules.\n- The component is exported as default plus named ButtonProps for typing.\n\n```\n\n10) How to run (quick start)\n- Install dependencies:\n  - npm install\n- Run tests:\n  - npm test\n- Build (TypeScript compile):\n  - npm run build\n\nAccessibility and QA checks you should run\n- Keyboard navigation works (focus outlines visible)\n- aria-labels are present when labels aren\u2019t explicit\n- aria-disabled reflects actual state when loading/disabled\n- Spinner has aria-label or aria-live for screen readers\n\nIf you\u2019d like, I can tailor this to a different stack (e.g., with actual Tailwind config, CSS Modules, or a different test setup) or expand this to include additional variants (e.g., icon-only button, loading spinner size variants)."