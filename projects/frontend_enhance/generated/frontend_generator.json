"You are an AI code generator. Produce a complete, production-ready React + TypeScript component package scaffold that exactly satisfies the constraints below. Output file contents organized by path and filename. The generated code must compile under TypeScript strict mode, obey ESLint (no-unused-vars/imports), run and be stable in JSDOM CI, and include tests that use MSW + React Testing Library + axe. Do not emit commentary, only the project files and their contents.\n\nGlobal rules (must follow exactly)\n- TypeScript \"strict\": true must be satisfied; no type errors when running tsc --noEmit.\n- No \"any\" in any exported type or public API. Internal helpers may use narrower escapes only with JSDoc justification TODOs.\n- Every exported function, hook, and component must have JSDoc.\n- No unused imports/variables anywhere. ESLint rules no-unused-vars and no-unused-imports must pass.\n- Do not use // @ts-ignore or disable ESLint rules, unless accompanied by a JSDoc justification comment and \"TODO\".\n- All browser-only code must be guarded with typeof window !== 'undefined' and dynamic imports if necessary.\n- Tests (Jest + RTL) must be stable in JSDOM (mock ResizeObserver or accept test width/height overrides).\n- All data hooks MUST expose or return a canonical queryKey and all mutations/optimistic updates MUST use that canonical key.\n- Provider vs Props precedence: props override Provider; if a required config is missing from both, throw a clear runtime error on render with a developer-friendly message. Document this rule in README and JSDoc.\n- Sanitization: require server-side sanitization by default. Export sanitizeHtmlServer and sanitizeHtmlClient as described below and use them when rendering HTML. Server sanitizer must be synchronous; client sanitizer may be async (dynamic import).\n- Include README.md and a GitHub Actions CI snippet that runs typecheck, lint, and tests.\n\nTarget stack and libs\n- React 18+ and TypeScript (strict)\n- Tailwind CSS + CSS Modules (.module.css). Provide a tailwind.config.js suggestion comment if not full file.\n- @tanstack/react-query (useInfiniteQuery + useMutation)\n- react-window or @tanstack/react-virtual for virtualization (prefer react-window for simpler test stability)\n- isomorphic-dompurify (DOMPurify via isomorphic-dompurify) for SSR-safe sanitization\n- MSW for HTTP mocking in tests\n- Jest + React Testing Library + axe-core for accessibility checks\n- Service worker registration helper (client-only)\n\nFile layout and naming (must be exact)\n- src/components/YourComponent/\n  - index.ts\n  - YourComponent.tsx\n  - YourComponent.module.css\n  - hooks/\n    - useYourComponentData.ts\n    - useYourComponentMutation.ts\n    - useYourComponentWebSocket.ts\n    - useYourComponentUtils.ts\n  - context/\n    - YourComponentContext.tsx\n  - types.ts\n  - utils.ts\n  - ErrorBoundary.tsx\n  - serviceWorker.ts\n  - fixtures/\n    - rawHtmlFixture.ts\n  - __tests__/\n    - test-utils.ts\n    - YourComponent.test.tsx\n    - useYourComponentMutation.test.tsx\n  - README.md\n\nExported public API (must be minimal and stable)\n- index.ts should export named exports only (no default).\n- Exports required:\n  - YourComponent (React component)\n  - YourComponentProvider (context Provider)\n  - yourComponentQueryKey (canonical queryKey factory)\n  - useYourComponentData (data hook that returns query result AND canonical key)\n  - useYourComponentMutation (mutation hook implementing optimistic update using canonical key)\n  - useYourComponentWebSocket (websocket hook)\n  - sanitizeHtmlClient(html: string): Promise<string>\n  - sanitizeHtmlServer(html: string): string\n  - initServiceWorkerRegistration(options?: { onUpdateAvailable?: () => void }): Promise<void> (client-only)\n  - ErrorBoundary (exported)\n  - Types: QueryParams, Item, Page<T>, WebSocketMessage (exported types only; no any)\n- All exported items must have JSDoc describing behavior, props vs provider precedence, SSR notes, and required usage patterns.\n\nCanonical query key (strict requirement)\n- Export exactly:\n  - export type QueryParams = { pageSize?: number; filter?: string };\n  - export const yourComponentQueryKey = (params: QueryParams) => ['yourComponent', params] as const;\n- Every hook/mutation must use this yourComponentQueryKey factory to read/modify cache.\n\nProvider vs Props precedence (enforce)\n- Implement YourComponentProvider that accepts optional config: { apiBase?: string; wsBase?: string; featureFlags?: Record<string, boolean> }\n- YourComponent props must accept apiBase?, wsBase?, featureFlags?\n- Enforce: if a prop is passed, it overrides Provider; if neither provides required config, the component must throw a runtime error during render with message explaining the missing config and how to fix (use Provider or prop).\n- Document in README and JSDoc.\n\nData hook: useYourComponentData\n- Use useInfiniteQuery with typed page response:\n  - export type Page<T> = { items: T[]; nextCursor?: string | null; }\n  - Cursor-based pagination with getNextPageParam: (last) => last.nextCursor ?? undefined\n- The hook signature must be:\n  - export function useYourComponentData(params: QueryParams): { queryResult: UseInfiniteQueryResult<Page<Item>, Error>; queryKey: ReturnType<typeof yourComponentQueryKey> }\n  - It returns both the query result and the canonical queryKey (stable) for use in mutations.\n- Fetch function:\n  - Accepts ({ pageParam = null, signal }: { pageParam?: string | null; signal?: AbortSignal })\n  - Use AbortController in the hook and cancel on unmount.\n  - The fetch must pass signal to fetch and throw on non-2xx with meaningful Error.\n- Concatenate pages for virtualization:\n  - const items = data?.pages.flatMap(p => p.items) ?? []\n\nVirtualized infinite list (YourComponent)\n- Use react-window FixedSizeList (or VariableSizeList with simple stable height) for virtualization.\n- The component must accept optional props width?: number and height?: number. If width/height props are provided, skip AutoSizer/ResizeObserver, enabling deterministic tests.\n- Item count = items.length + (hasNextPage ? 1 : 0). The sentinel index (the last item) must trigger fetchNextPage, guarded by a ref to ensure fetchNextPage is called at most once per page load.\n- Provide an IntersectionObserver sentinel fallback for non-virtualized environments.\n- Row component should be memoized with React.memo and stable props; avoid passing unstable objects.\n\nOptimistic mutation: useYourComponentMutation\n- Implement useMutation that:\n  - onMutate: cancel queries for the canonical key, snapshot previous data, apply optimistic update via setQueryData, and return { previous, key } context.\n  - onError: rollback setQueryData using context.previous.\n  - onSettled: invalidateQueries for canonical key.\n- Hook signature example:\n  - export function useYourComponentMutation(): { mutate: (vars: { item: Item; params: QueryParams }) => void; status: MutationStatus }\n- Tests must show optimistic update then rollback on error using MSW to respond with 500 for mutation.\n\nWebSocket hook: useYourComponentWebSocket\n- Export signature:\n  - export function useYourComponentWebSocket(url: string | undefined, options?: { onMessage?: (msg: WebSocketMessage) => void; reconnect?: boolean; reconnectAttempts?: number }): { send: (payload: unknown) => void; status: 'connecting' | 'open' | 'closing' | 'closed' | 'reconnecting' }\n- Requirements:\n  - Client-only (guard with typeof window !== 'undefined'). If called on server, return noop send and status 'closed'.\n  - Implement exponential backoff with jitter for reconnection up to reconnectAttempts.\n  - Allow pause/resume of reconnection via returned API or options (implement pauseResumeRef or similar).\n  - Cleanup: close socket on unmount and url change.\n  - Log parse errors in dev via console.warn but do not swallow errors.\n\nSanitization: SSR and client\n- Export:\n  - export function sanitizeHtmlServer(html: string): string \u2014 synchronous server sanitizer using isomorphic-dompurify's createDOMPurify; guard import to run in Node environment.\n  - export async function sanitizeHtmlClient(html: string): Promise<string> \u2014 dynamically import isomorphic-dompurify and sanitize with window.\n- Components rendering HTML must sanitize before dangerouslySetInnerHTML. Document that server-side sanitization should be used during SSR; show example in README.\n- Include fixtures/rawHtmlFixture.ts with example malicious raw HTML.\n\nErrorBoundary + Suspense\n- Provide ErrorBoundary.tsx that catches errors and displays an accessible fallback with ARIA live region. Use React.Suspense around data-dependent components in YourComponent.tsx.\n- ErrorBoundary must be exported.\n\nService worker registration\n- Export initServiceWorkerRegistration(options?: { onUpdateAvailable?: () => void }): Promise<void>\n- Must not auto-run on import; must be called from client entry.\n- Guard with typeof window !== 'undefined' and 'serviceWorker' in navigator.\n\nAccessibility requirements\n- All interactive elements keyboard-accessible with proper roles.\n- Implement roving keyboard navigation or use focus management for list items; provide handlers for ArrowUp/Down/Home/End/Enter/Space and tests.\n- Provide a live region (aria-live) for async status updates and tests checking its content with RTL + axe.\n- Respect prefers-reduced-motion (use CSS prefers-reduced-motion) \u2014 do not force animations.\n- Support dir=\"rtl\": accept optional dir prop or read from document; include tests that set dir=\"rtl\" on container and assert layout flipped (e.g., via CSS direction property).\n\nTesting constraints and helpers\n- Provide __tests__/test-utils.ts with:\n  - createTestQueryClient helper that returns a fresh QueryClient configured with defaultOptions. queries.retry = false.\n  - mockResizeObserver() function to set global.ResizeObserver for JSDOM tests.\n  - wrapWithProviders helper that wraps nodes in QueryClientProvider and YourComponentProvider as needed.\n- Tests required:\n  - YourComponent.test.tsx:\n    - MSW handlers for paginated GET responses (pages), assert useInfiniteQuery fetches pages and virtualization renders visible items.\n    - Assert sentinel triggers fetchNextPage exactly once per page (use spies/mocks).\n    - Accessibility check via axe.\n    - Test keyboard navigation (ArrowUp/Down/Home/End/Enter/Space) and aria-live updates.\n    - Test RTL rendering by setting dir attribute on wrapper.\n  - useYourComponentMutation.test.tsx:\n    - Use MSW to respond success for initial optimistic update test and 500 to assert rollback on error.\n    - Assert optimistic UI shows immediately and rolls back on server error.\n- Ensure tests create a fresh QueryClient per test to avoid cache bleed.\n- Mock ResizeObserver via test-utils helper or pass width/height props to component in tests for virtualization.\n- Add jest setup to include MSW server lifecycle (start/stop/reset handlers) in tests.\n\nTailwind + CSS Modules\n- Use a CSS module file YourComponent.module.css that includes Tailwind utility classes and module overrides.\n- Include a comment about tailwind.config.js suggestion (no full tailwind.config required unless you produce it).\n\nPerformance and re-render guarantees\n- Memoize data used by rows with useMemo/useCallback and stable dependencies.\n- Use React.memo for Row component and provide a custom areEqual comparator if needed.\n- Avoid passing entire query result objects to rows; pass minimal stable handlers and item data.\n\nCI and README\n- README.md in component folder must include:\n  - Props and defaults table\n  - Provider vs props precedence explanation (explicit)\n  - How to configure QueryClientProvider (example)\n  - How to run tests and how tests mock ResizeObserver/AutoSizer\n  - How to use server-side sanitization during SSR (example code snippet)\n  - Service worker registration usage example\n  - Commands: lint, typecheck, test, build\n  - GitHub Actions snippet that runs:\n    - npm run typecheck (tsc --noEmit)\n    - npm run lint (eslint)\n    - npm test (jest --coverage) and enforces coverage threshold >= 80% for the component tests\n- Provide package.json script suggestions used by README (typecheck, lint, test, build). Do not include monorepo specifics.\n\nExamples and canonical snippets (must include these exact patterns)\n- Provide canonical queryKey example in code:\n  - export type QueryParams = { pageSize?: number; filter?: string };\n  - export const yourComponentQueryKey = (params: QueryParams) => ['yourComponent', params] as const;\n- Provide useInfiniteQuery example using AbortController:\n  - async function fetchPage({ pageParam = null, signal }: { pageParam?: string | null; signal?: AbortSignal }) { ... }\n  - export function useYourComponentData(params: QueryParams) { const key = yourComponentQueryKey(params); return { queryResult: useInfiniteQuery(key, ({ pageParam, signal }) => fetchPage({ pageParam, signal }), { getNextPageParam: last => last.nextCursor ?? undefined }), queryKey: key }; }\n- Provide optimistic mutation example that uses canonical key (as described earlier).\n- Provide sanitizeHtmlServer and sanitizeHtmlClient examples that match the requirement and are used in rendering.\n- Provide mock ResizeObserver test util example in __tests__/test-utils.ts.\n\nStrict test stability notes (must be adhered)\n- Tests must not depend on actual ResizeObserver behavior; always either call mockResizeObserver() in tests or pass width/height props.\n- All network in tests must be mocked with MSW; no real network calls.\n- Avoid animations in tests; respect prefers-reduced-motion or disable animations in test CSS.\n\nService worker snippet\n- Provide src/components/YourComponent/serviceWorker.ts content that exports initServiceWorkerRegistration and is client-only.\n\nError handling and developer feedback\n- On missing required config (apiBase or wsBase if required by component usage), throw new Error with a clear message that includes \"YourComponent requires apiBase to be provided via prop or YourComponentProvider; props take precedence over Provider\" (or similar phrasing).\n- All thrown errors should be developer-friendly.\n\nFinal behavior of generator (strict instructions to the AI that will generate the package)\n- Produce all files and contents exactly following the layout above.\n- Ensure every file has no unused imports/exports.\n- Ensure all exported types and members have JSDoc.\n- Ensure every data hook exposes or returns the canonical queryKey and all mutations use that same key.\n- Guard DOM APIs for SSR.\n- Use dynamic imports for isomorphic-dompurify on client side.\n- Tests must be runnable in JSDOM, stable, and include axe checks.\n- Provide inline comments explaining SSR decisions, accessibility trade-offs, and performance choices where appropriate.\n- Do not include extra suggestions or \"If you want\" text after the output.\n\nDeliver the scaffold now."