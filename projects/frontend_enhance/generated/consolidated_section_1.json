"```tsx\nimport React, { Suspense, lazy } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\nimport { ErrorBoundary } from '../shared/components/ErrorBoundary';\nimport { QueryClientProvider } from './providers/QueryClientProvider';\nimport { AuthProvider, useAuth } from './contexts/AuthContext';\nimport { ThemeProvider, useTheme } from './contexts/ThemeContext';\nimport { LoginForm } from '../features/auth/components/LoginForm';\n\n// Lazy load dashboard module for code splitting\nconst Dashboard = lazy(() => import('../features/dashboard/components/Dashboard'));\n\n// Loading fallback component\nconst LoadingFallback: React.FC = () => (\n  <div \n    className=\"flex items-center justify-center min-h-screen bg-gray-50 dark:bg-gray-900\"\n    role=\"status\" \n    aria-label=\"Loading application\"\n  >\n    <div className=\"flex flex-col items-center space-y-4\">\n      <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 dark:border-blue-400\"></div>\n      <p className=\"text-gray-600 dark:text-gray-300 text-sm\">Loading...</p>\n    </div>\n  </div>\n);\n\n// Error fallback component\nconst ErrorFallback: React.FC<{ error: Error; resetError: () => void }> = ({ \n  error, \n  resetError \n}) => (\n  <div \n    className=\"flex items-center justify-center min-h-screen bg-gray-50 dark:bg-gray-900\"\n    role=\"alert\"\n  >\n    <div className=\"text-center p-8 max-w-md\">\n      <h1 className=\"text-2xl font-bold text-red-600 dark:text-red-400 mb-4\">\n        Something went wrong\n      </h1>\n      <p className=\"text-gray-600 dark:text-gray-300 mb-6\">\n        {error.message || 'An unexpected error occurred'}\n      </p>\n      <button\n        onClick={resetError}\n        className=\"px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-md transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\"\n      >\n        Try again\n      </button>\n    </div>\n  </div>\n);\n\n// Private route wrapper component\ninterface PrivateRouteProps {\n  children: React.ReactNode;\n}\n\nconst PrivateRoute: React.FC<PrivateRouteProps> = ({ children }) => {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  if (isLoading) {\n    return <LoadingFallback />;\n  }\n\n  return isAuthenticated ? <>{children}</> : <Navigate to=\"/login\" replace />;\n};\n\n// App content component (wrapped by providers)\nconst AppContent: React.FC = () => {\n  const { theme } = useTheme();\n\n  return (\n    <div className={theme === 'dark' ? 'dark' : ''}>\n      <div className=\"min-h-screen bg-white dark:bg-gray-900 text-gray-900 dark:text-gray-100\">\n        <Router>\n          <main role=\"main\" aria-label=\"Main content\">\n            <Suspense fallback={<LoadingFallback />}>\n              <Routes>\n                <Route path=\"/login\" element={<LoginForm />} />\n                <Route\n                  path=\"/dashboard/*\"\n                  element={\n                    <PrivateRoute>\n                      <Dashboard />\n                    </PrivateRoute>\n                  }\n                />\n                <Route path=\"/\" element={<Navigate to=\"/dashboard\" replace />} />\n                <Route path=\"*\" element={<Navigate to=\"/dashboard\" replace />} />\n              </Routes>\n            </Suspense>\n          </main>\n        </Router>\n      </div>\n    </div>\n  );\n};\n\n// Root App component with all providers\nconst App: React.FC = () => {\n  return (\n    <ErrorBoundary fallback={ErrorFallback}>\n      <QueryClientProvider>\n        <AuthProvider>\n          <ThemeProvider>\n            <AppContent />\n          </ThemeProvider>\n        </AuthProvider>\n      </QueryClientProvider>\n    </ErrorBoundary>\n  );\n};\n\nexport default App;\n```"