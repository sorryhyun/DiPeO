"```tsx\nimport React, { Suspense, lazy } from 'react';\nimport { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom';\nimport { ErrorBoundary } from '../shared/components/ErrorBoundary';\nimport { QueryClientProvider } from './providers/QueryClientProvider';\nimport { AuthProvider, useAuth } from './contexts/AuthContext';\nimport { ThemeProvider, useTheme } from './contexts/ThemeContext';\nimport { LoginForm } from '../features/auth/components/LoginForm';\n\n// Lazy load dashboard for code splitting\nconst Dashboard = lazy(() => import('../features/dashboard/components/Dashboard'));\n\n// Loading fallback component\nconst LoadingFallback: React.FC = () => (\n  <div className=\"min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900\">\n    <div className=\"text-center\">\n      <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n      <p className=\"text-gray-600 dark:text-gray-400\">Loading...</p>\n    </div>\n  </div>\n);\n\n// Private route wrapper component\nconst PrivateRoute: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  if (isLoading) {\n    return <LoadingFallback />;\n  }\n\n  return isAuthenticated ? <>{children}</> : <Navigate to=\"/login\" replace />;\n};\n\n// Public route wrapper (redirects to dashboard if authenticated)\nconst PublicRoute: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  if (isLoading) {\n    return <LoadingFallback />;\n  }\n\n  return !isAuthenticated ? <>{children}</> : <Navigate to=\"/dashboard\" replace />;\n};\n\n// App content component (inside providers)\nconst AppContent: React.FC = () => {\n  const { theme } = useTheme();\n\n  return (\n    <div className={`min-h-screen ${theme === 'dark' ? 'dark' : ''}`}>\n      <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 transition-colors duration-200\">\n        <BrowserRouter>\n          <main role=\"main\" className=\"min-h-screen\">\n            <Suspense fallback={<LoadingFallback />}>\n              <Routes>\n                {/* Public routes */}\n                <Route\n                  path=\"/login\"\n                  element={\n                    <PublicRoute>\n                      <LoginForm />\n                    </PublicRoute>\n                  }\n                />\n\n                {/* Protected routes */}\n                <Route\n                  path=\"/dashboard/*\"\n                  element={\n                    <PrivateRoute>\n                      <Dashboard />\n                    </PrivateRoute>\n                  }\n                />\n\n                {/* Default redirect */}\n                <Route path=\"/\" element={<Navigate to=\"/dashboard\" replace />} />\n\n                {/* Catch all redirect */}\n                <Route path=\"*\" element={<Navigate to=\"/dashboard\" replace />} />\n              </Routes>\n            </Suspense>\n          </main>\n        </BrowserRouter>\n      </div>\n    </div>\n  );\n};\n\n// Error fallback component\nconst ErrorFallback: React.FC<{ error: Error; resetError: () => void }> = ({\n  error,\n  resetError,\n}) => (\n  <div className=\"min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900\">\n    <div className=\"text-center max-w-md mx-auto p-6\">\n      <div className=\"text-red-600 dark:text-red-400 mb-4\">\n        <svg\n          className=\"w-16 h-16 mx-auto mb-4\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          viewBox=\"0 0 24 24\"\n          aria-hidden=\"true\"\n        >\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={2}\n            d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 16.5c-.77.833.192 2.5 1.732 2.5z\"\n          />\n        </svg>\n      </div>\n      <h1 className=\"text-xl font-semibold text-gray-900 dark:text-white mb-2\">\n        Something went wrong\n      </h1>\n      <p className=\"text-gray-600 dark:text-gray-400 mb-6\">\n        {error.message || 'An unexpected error occurred'}\n      </p>\n      <button\n        onClick={resetError}\n        className=\"inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors\"\n        type=\"button\"\n      >\n        Try again\n      </button>\n    </div>\n  </div>\n);\n\n// Main App component with all providers\nconst App: React.FC = () => {\n  return (\n    <ErrorBoundary fallback={ErrorFallback}>\n      <QueryClientProvider>\n        <AuthProvider>\n          <ThemeProvider>\n            <AppContent />\n          </ThemeProvider>\n        </AuthProvider>\n      </QueryClientProvider>\n    </ErrorBoundary>\n  );\n};\n\nexport default App;\n```"