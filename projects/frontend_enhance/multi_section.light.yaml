version: light

persons:
  Section Planner:
    service: openai
    model: gpt-5-nano-2025-08-07
    api_key_id: APIKEY_52609F
    system_prompt: |
      You are a senior product/front-end architect with expertise in React, TypeScript, and modern web architecture.

      Your task is to:
      1. FIRST define the overall application architecture that will guide all sections
      2. THEN split the work into independent sections that fit within this architecture
      3. For EACH section, provide concrete implementation steps and integration points

      Focus on:
      - Clear architectural patterns and principles
      - How data flows through the application
      - Specific, actionable implementation steps (not vague descriptions)
      - How sections communicate and integrate with each other
      - Modern React 18+ best practices and TypeScript patterns

      Each section should be a cohesive unit that can be developed independently but integrates smoothly.
      Follow the Pydantic schema strictly - include architecture, implementation_steps, and integration_points.


nodes:
  - label: Start
    type: start
    position: {x: 60, y: 200}
    props:
      trigger_mode: manual

  - label: Load Config
    type: db
    position: {x: 220, y: 200}
    props:
      operation: read
      sub_type: file
      source_details: projects/frontend_enhance/frontend_enhance_config.json

  - label: Understand Requirements
    type: person_job
    position: {x: 460, y: 200}
    props:
      person: Section Planner
      max_iteration: 1
      memory_profile: MINIMAL
      text_format_file: projects/frontend_enhance/section_models.py
      default_prompt: |
        Analyze the requirements and create a comprehensive development plan:

        App config: {{config}}

        Your response MUST include:
        1. An overall architecture that defines:
           - How all sections work together as a cohesive system
           - Core architectural patterns and principles
           - Data flow and state management strategy
           - Folder structure and tech stack decisions

        2. Independent sections that each include:
           - Clear acceptance criteria
           - Specific implementation steps (3-10 concrete steps)
           - Integration points showing how this section connects with others
           - Proper dependencies and priority

        Think like you're planning a real production React application.
        Ensure sections can be developed in parallel but integrate seamlessly.

  - label: Save Sections Data
    type: db
    position: {x: 720, y: 200}
    props:
      operation: write
      sub_type: file
      format: json
      source_details: projects/frontend_enhance/generated/sections_data.json

  - label: Prepare Batch Indices
    type: code_job
    position: {x: 980, y: 200}
    props:
      language: python
      code: |
        result = {
          "section_count": len(sections['sections']),
          "indices": [{'index': i} for i in range(len(sections['sections']))]
        }

  - label: Implement Sections
    type: sub_diagram
    position: {x: 1260, y: 200}
    props:
      diagram_name: projects/frontend_enhance/section_implementor
      diagram_format: light
      passInputData: true
      batch: true
      batch_input_key: indices
      batch_parallel: true

  - label: Save Summary
    type: endpoint
    position: {x: 1820, y: 200}
    props:
      file_format: json
      save_to_file: true
      file_path: projects/frontend_enhance/generated/results.multi_section.json

connections:
  - {from: Start, to: Load Config}
  - {from: Load Config, to: Understand Requirements, label: config, content_type: object}
  - {from: Understand Requirements, to: Save Sections Data, content_type: object}
  - {from: Understand Requirements, to: Prepare Batch Indices, label: sections, content_type: object}
  - {from: Prepare Batch Indices, to: Implement Sections, content_type: object}
  - {from: Implement Sections, to: Save Summary, content_type: object}
