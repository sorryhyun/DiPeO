version: light
name: csv_processing_pipeline
description: Load CSV files from directory, validate, process in parallel, aggregate results, and save to JSON.
nodes:
- label: start
  type: start
  position:
    x: 100
    y: 200
  props:
    trigger_mode: manual
- label: load_files
  type: db
  position:
    x: 350
    y: 200
  props:
    file:
    - files/data/*.csv
    sub_type: file
    operation: read
    glob: true
- label: validate_data
  type: code_job
  position:
    x: 600
    y: 200
  props:
    language: python
    code: |
      import logging
      logging.info('Starting data validation')

      # Source data is available as 'raw_data'
      items = []
      errors = []
      for item in raw_data:
          if isinstance(item, dict) and 'id' in item and 'value' in item:
              items.append(item)
          else:
              errors.append(item)

      result = {'valid': len(errors) == 0, 'errors': errors}
    timeout: 60
- label: check_valid
  type: condition
  position:
    x: 850
    y: 200
  props:
    condition_type: custom
    expression: result.get('valid', False)
- label: process_batch
  type: sub_diagram
  position:
    x: 1100
    y: 200
  props:
    diagram_name: processors/multi_item
    diagram_format: light
    batch: true
    batch_input_key: items
    batch_parallel: true
    ignoreIfSub: false
- label: endpoint_errors
  type: endpoint
  position:
    x: 1250
    y: 200
  props:
    save_to_file: true
    file_name: files/output/validation_errors.json
- label: aggregate_results
  type: code_job
  position:
    x: 1400
    y: 200
  props:
    language: python
    code: |
      import logging
      logging.info('Aggregating batch results')

      batch = results if isinstance(results, list) else []
      final = {
        'total_files': len(batch),
        'results': batch
      }
      result = final
    timeout: 60
- label: endpoint_final
  type: endpoint
  position:
    x: 1700
    y: 200
  props:
    save_to_file: true
    file_name: files/output/final_results.json
connections:
- from: start
  to: load_files
  label: start
- from: load_files
  to: validate_data
  label: raw_data
  content_type: object
- from: validate_data
  to: check_valid
  label: result
  content_type: object
- from: check_valid
  to: process_batch
  label: items
  content_type: object
- from: check_valid
  to: endpoint_errors
  label: result
  content_type: object
- from: process_batch
  to: aggregate_results
  label: results
  content_type: object
- from: aggregate_results
  to: endpoint_final
  label: result
  content_type: object
