version: light
name: dipeo_csv_transaction_pipeline
description: '30-row CSV transaction dataset processing: load CSV, parse, validate, branch on validity, transform, and write
  final results or log errors.'
nodes:
- label: Start
  type: start
  position:
    x: 100
    y: 200
  props:
    trigger_mode: manual
- label: load_csv
  type: db
  position:
    x: 350
    y: 200
  props:
    file:
    - files/data/transactions.csv
    sub_type: file
    operation: read
    serialize_json: false
    glob: false
- label: parse_csv
  type: code_job
  position:
    x: 600
    y: 200
  props:
    language: python
    code: |
      import csv
      from io import StringIO

      text = csv_content
      reader = csv.DictReader(StringIO(text))
      records = list(reader)
      result = {\"records\": records, \"count\": len(records)}
    timeout: 60
- label: validate_data
  type: code_job
  position:
    x: 850
    y: 200
  props:
    language: python
    code: |
      records = input_data.get(\"records\", [])
      valid = []
      invalid = []
      for r in records:
          if r.get(\"transaction_id\") and r.get(\"status\"):
              valid.append(r)
          else:
              invalid.append(r)
      result = {\"valid\": valid, \"invalid\": invalid}
    timeout: 60
- label: Check Valid
  type: condition
  position:
    x: 1100
    y: 200
  props:
    condition_type: custom
    expression: len(input_data.get('invalid', [])) == 0
- label: transform_valid_data
  type: code_job
  position:
    x: 1350
    y: 400
  props:
    language: python
    code: |
      records = valid_records if isinstance(valid_records, list) else []
      for r in records:
          try:
              amt = r.get(\"amount\")
              r[\"amount\"] = float(amt) if amt not in [\"\", None] else 0.0
          except Exception:
              r[\"amount\"] = 0.0
      result = {\"records\": records, \"count\": len(records)}
    timeout: 60
- label: save_results
  type: db
  position:
    x: 1650
    y: 200
  props:
    file:
    - files/outputs/transactions_processed.json
    sub_type: file
    operation: write
    serialize_json: true
- label: endpoint_success
  type: endpoint
  position:
    x: 1950
    y: 200
  props:
    save_to_file: true
    file_name: files/outputs/transactions_processed.json
- label: log_errors
  type: code_job
  position:
    x: 1250
    y: 400
  props:
    language: python
    code: |
      error_details = input_data.get('invalid', [])
      result = {\"errors\": error_details, \"count\": len(error_details)}
    timeout: 60
- label: endpoint_errors
  type: endpoint
  position:
    x: 1950
    y: 400
  props:
    save_to_file: true
    file_name: files/outputs/transactions_errors.json
connections:
- from: Start
  to: load_csv
  label: start_signal
  content_type: raw_text
- from: load_csv
  to: parse_csv
  label: csv_content
  content_type: raw_text
- from: parse_csv
  to: validate_data
  label: input_data
  content_type: object
- from: validate_data
  to: Check Valid
  label: input_data
  content_type: object
- from: Check Valid_condtrue
  to: transform_valid_data
  label: valid_records
  content_type: object
- from: Check Valid_condfalse
  to: log_errors
  label: invalid_records
  content_type: object
- from: transform_valid_data
  to: save_results
  label: output_data
  content_type: object
- from: save_results
  to: endpoint_success
  label: final_result
  content_type: object
- from: log_errors
  to: endpoint_errors
  label: error_details
  content_type: object
