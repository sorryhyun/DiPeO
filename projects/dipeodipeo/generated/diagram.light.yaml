version: light
name: data_processor_pipeline
description: Ingest CSV data, validate, process, and output results with error handling. All processing uses code_job nodes;
  file I/O uses db nodes; branching via condition node with explicit _condtrue/_condfalse handles.
nodes:
- label: Start
  type: start
  position:
    x: 100
    y: 200
  props:
    flipped: false
    trigger_mode: none
- label: Load Input Data
  type: db
  position:
    x: 350
    y: 200
  props:
    flipped: false
    sub_type: file
    operation: read
    glob: false
    format: text
- label: Parse CSV
  type: code_job
  position:
    x: 600
    y: 200
  props:
    flipped: false
    language: python
    code: |
      import csv
      from io import StringIO
      csv_text = csv_content
      reader = csv.DictReader(StringIO(csv_text))
      records = list(reader)
    timeout: 60
- label: Validate Records
  type: code_job
  position:
    x: 850
    y: 200
  props:
    flipped: false
    language: python
    code: |
      records = records
      valid = []
      invalid = []
      for r in records:
        if r.get('record_id') and r.get('record_type'):
          valid.append(r)
        else:
          invalid.append(r)
      validation_results = {"valid": valid, "invalid": invalid, "is_valid": len(invalid) == 0}
    timeout: 60
- label: Check Data Valid
  type: condition
  position:
    x: 1100
    y: 200
  props:
    flipped: false
    condition_type: custom
    expression: validation_results.get('is_valid', False)
- label: Process Valid
  type: code_job
  position:
    x: 1350
    y: 200
  props:
    flipped: false
    language: python
    code: |
      validation_results = validation_results
      valid = validation_results.get('valid', [])
      invalid = validation_results.get('invalid', [])
      processed = [{"record_id": r.get("record_id"), "status": "valid"} for r in valid]
      result = {"processed_records": processed, "validation_results": validation_results, "valid_count": len(valid), "invalid_count": len(invalid)}
    timeout: 60
- label: Prepare Final Output
  type: code_job
  position:
    x: 1600
    y: 200
  props:
    flipped: false
    language: python
    code: |
      processed = result.get('processed_records', [])
      final_output = {"record_count": len(processed), "records": processed}
    timeout: 60
- label: Save Processed Output
  type: endpoint
  position:
    x: 1850
    y: 200
  props:
    flipped: false
    save_to_file: true
    file_name: outputs/processed_data.json
- label: Log Validation Errors
  type: code_job
  position:
    x: 1350
    y: 400
  props:
    flipped: false
    language: python
    code: |
      validation_results = validation_results
      error_report = {"error": "Validation failed", "valid_count": len(validation_results.get('valid', [])), "invalid_count": len(validation_results.get('invalid', []))}
      result = error_report
    timeout: 60
- label: Save Validation Errors
  type: endpoint
  position:
    x: 1850
    y: 400
  props:
    flipped: false
    save_to_file: true
    file_name: logs/validation_errors.json
connections:
- from: Start
  to: Load Input Data
  label: start_to_load
  content_type: raw_text
- from: Load Input Data
  to: Parse CSV
  label: csv_content
  content_type: raw_text
- from: Parse CSV
  to: Validate Records
  label: records
  content_type: object
- from: Validate Records
  to: Check Data Valid
  label: validation_results
  content_type: object
- from: Check Data Valid_condtrue
  to: Process Valid
  label: validation_results
  content_type: object
- from: Check Data Valid_condfalse
  to: Log Validation Errors
  label: validation_results
  content_type: object
- from: Process Valid
  to: Prepare Final Output
  label: result
  content_type: object
- from: Prepare Final Output
  to: Save Processed Output
  label: final_output
  content_type: object
- from: Log Validation Errors
  to: Save Validation Errors
  label: error_report
  content_type: object
