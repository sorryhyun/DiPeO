version: light

name: llm_diagram_generator
description: Generate DiPeO light diagrams using LLM with structured Pydantic output

persons:
  diagram_designer:
    service: openai
    model: gpt-5-nano-2025-08-07
    api_key_id: APIKEY_52609F
    system_prompt: |
      You are an expert DiPeO diagram designer. You create well-structured light format diagrams
      that follow best practices for modularity, error handling, and performance.
      Always ensure proper node positioning with x-coordinates incrementing by 200-300 for readability.

nodes:
  - label: start
    type: start
    position: {x: 100, y: 200}
    
  - label: load_request
    type: db
    position: {x: 300, y: 200}
    props:
      operation: read
      sub_type: file
      source_details: projects/dipeodipeo/request.txt
      format: text

  - label: generate_diagram
    type: person_job
    position: {x: 600, y: 200}
    props:
      person: diagram_designer
      prompt_file: diagram_generator.txt
      max_iteration: 1
      text_format_file: projects/dipeodipeo/light_diagram_models.py
      
  - label: format_yaml
    type: code_job
    position: {x: 700, y: 200}
    props:
      language: python
      code: |
        import json
        import yaml
        from datetime import datetime
        
        # Debug: Print the raw response
        print(f"Raw LLM response: {generated_diagram}")
        
        # Try to parse as JSON, handle plain text response
        try:
            diagram_data = json.loads(generated_diagram)
        except json.JSONDecodeError:
            # If not JSON, create a simple diagram structure
            print("LLM response is not JSON, creating default structure")
            diagram_data = {
                "version": "light",
                "name": "data_pipeline",
                "description": "Generated data processing pipeline",
                "nodes": [],
                "connections": []
            }
        diagram = diagram_data.get('diagram', diagram_data)
        
        # Convert to YAML format with proper structure
        yaml_structure = {
            'version': diagram['version'],
            'name': diagram['name'],
            'description': diagram['description']
        }
        
        # Add persons if present
        if diagram.get('persons'):
            yaml_structure['persons'] = diagram['persons']
        
        # Format nodes
        yaml_structure['nodes'] = []
        for node in diagram['nodes']:
            node_dict = {
                'label': node['label'],
                'type': node['type'],
                'position': node['position']
            }
            # Props should already be a dict when using proper models
            if node.get('props'):
                node_dict['props'] = node['props']
            yaml_structure['nodes'].append(node_dict)
        
        # Format connections - use compact format for simple connections
        if diagram.get('connections'):
            yaml_structure['connections'] = []
            for conn in diagram['connections']:
                # Handle both 'from' and 'from_node' keys
                from_key = conn.get('from') or conn.get('from_node')
                conn_dict = {'from': from_key, 'to': conn['to']}
                if conn.get('label'):
                    conn_dict['label'] = conn['label']
                if conn.get('content_type'):
                    conn_dict['content_type'] = conn['content_type']
                yaml_structure['connections'].append(conn_dict)
        
        # Convert to YAML string
        yaml_content = yaml.dump(yaml_structure, default_flow_style=False, sort_keys=False, width=120)
        
        # Generate filename
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"projects/dipeodipeo/generated/{diagram['name']}_{timestamp}.light.yaml"
        
        result = {
            "yaml_content": yaml_content,
            "filename": filename,
            "diagram_info": {
                "name": diagram['name'],
                "description": diagram['description'],
                "node_count": len(diagram['nodes']),
                "connection_count": len(diagram.get('connections', []))
            }
        }
  
  - label: save_diagram
    type: endpoint
    position: {x: 1000, y: 200}
    props:
      file_format: yaml
      save_to_file: true
      file_path: "{{filename}}"
  
  - label: display_info
    type: code_job
    position: {x: 700, y: 400}
    props:
      language: python
      code: |       
        print("=" * 60)
        print("DIAGRAM GENERATED SUCCESSFULLY!")
        print("=" * 60)
        info = diagram_output['diagram_info']
        print(f"Name: {info['name']}")
        print(f"Description: {info['description']}")
        print(f"Nodes: {info['node_count']}")
        print(f"Connections: {info['connection_count']}")
        print(f"Saved to: {diagram_output['filename']}")
        print("=" * 60)
        print("\nTo run the generated diagram:")
        print(f"dipeo run {diagram_output['filename']} --light --debug")
        print("=" * 60)
        
        result = info

connections:
  - {from: start, to: load_request}
  - {from: load_request, to: generate_diagram, label: workflow_description}
  - {from: generate_diagram, to: format_yaml, label: generated_diagram, content_type: object}
  - {from: format_yaml, to: save_diagram, label: yaml_content, content_type: object}
  - {from: format_yaml, to: display_info, label: diagram_output}