version: light

name: llm_diagram_generator
description: Generate DiPeO light diagrams and test data using LLM with structured Pydantic output

persons:
  prompt_engineer:
    service: openai
    model: gpt-5-nano-2025-08-07
    api_key_id: APIKEY_52609F
    system_prompt: |
      You are an expert prompt engineer specializing in creating effective prompts for DiPeO diagram generation.
      You analyze requirements and create clear, detailed prompts that result in high-quality, executable diagrams.
      Focus on clarity, specificity, and actionable instructions.

  diagram_designer:
    service: openai
    model: gpt-5-nano-2025-08-07
    api_key_id: APIKEY_52609F
    system_prompt: |
      You are an expert DiPeO diagram designer. You create well-structured light format diagrams
      that follow best practices for modularity, error handling, and performance.
      Always ensure proper node positioning with x-coordinates incrementing by 200-300 for readability.
      IMPORTANT: Never use 'empty' content_type - always use 'raw_text', 'object', or 'conversation_state'.

  test_data_creator:
    service: openai
    model: gpt-5-nano-2025-08-07
    api_key_id: APIKEY_52609F
    system_prompt: |
      You are a test data generation expert. You create realistic, well-structured test data
      in various formats (CSV, JSON, etc.) that can be used to test the generated diagrams.
      Always ensure the data is meaningful and follows best practices for testing.

nodes:
  - label: start
    type: start
    position: {x: 100, y: 200}

  - label: load_request
    type: code_job
    position: {x: 300, y: 200}
    props:
      language: python
      code: |
        def main(user_requirements=None, workflow_description=None):
            # If input variables are provided, use them
            if user_requirements:
                return user_requirements
            # Otherwise, read from file
            try:
                with open('projects/dipeodipeo/request.txt', 'r') as f:
                    return f.read().strip()
            except FileNotFoundError:
                return "Create a simple data processing diagram"

  # - label: generate_prompt
  #   type: person_job
  #   position: {x: 500, y: 200}
  #   props:
  #     person: prompt_engineer
  #     prompt_file: prompt_generator.txt
  #     max_iteration: 1

  - label: generate_test_data
    type: person_job
    position: {x: 700, y: 200}
    props:
      person: test_data_creator
      prompt_file: test_data_generator.txt
      max_iteration: 1
      text_format_file: projects/dipeodipeo/test_data_models.py

  - label: save_test_data
    type: db
    position: {x: 1000, y: 200}
    props:
      operation: write
      sub_type: file
      format: csv
      source_details: projects/dipeodipeo/generated/test_data.csv

  - label: generate_diagram
    type: person_job
    position: {x: 1200, y: 200}
    props:
      person: diagram_designer
      prompt_file: diagram_generator.txt
      max_iteration: 1
      text_format_file: projects/dipeodipeo/light_diagram_models.py

  - label: format_yaml
    type: code_job
    position: {x: 1400, y: 200}
    props:
      language: python
      filePath: projects/dipeodipeo/process.py
      functionName: process_diagram

  - label: save_diagram
    type: db
    position: {x: 1600, y: 200}
    props:
      operation: write
      sub_type: file
      format: yaml
      source_details: projects/dipeodipeo/generated/diagram.light.yaml


connections:
  - {from: start, to: load_request, content_type: object}
  # - {from: load_request, to: generate_prompt, label: user_requirements, content_type: raw_text}
  - {from: load_request, to: generate_test_data, label: workflow_description, content_type: raw_text}
  - {from: load_request, to: generate_diagram, label: workflow_description, content_type: raw_text}
  # - {from: generate_prompt, to: generate_diagram, label: generated_prompt, content_type: raw_text}
  - {from: generate_test_data, to: save_test_data, content_type: object}
  - {from: generate_test_data, to: generate_diagram, label: sample_test_data, content_type: raw_text}
  - {from: generate_diagram, to: format_yaml, label: generated_diagram, content_type: object}
  - {from: format_yaml, to: save_diagram, label: diagram_output, content_type: raw_text}
